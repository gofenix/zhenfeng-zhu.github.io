<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 演示站点</title><link>https://example.com/post/</link><description>Recent content in Posts on 演示站点</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 27 Feb 2022 18:39:35 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>谷爱凌：我承认，我爱上了恐惧</title><link>https://example.com/p/%E8%B0%B7%E7%88%B1%E5%87%8C%E6%88%91%E6%89%BF%E8%AE%A4%E6%88%91%E7%88%B1%E4%B8%8A%E4%BA%86%E6%81%90%E6%83%A7/</link><pubDate>Sun, 27 Feb 2022 18:39:35 +0800</pubDate><guid>https://example.com/p/%E8%B0%B7%E7%88%B1%E5%87%8C%E6%88%91%E6%89%BF%E8%AE%A4%E6%88%91%E7%88%B1%E4%B8%8A%E4%BA%86%E6%81%90%E6%83%A7/</guid><description>&lt;p>在我迄今18年人生的后10年里，我一直在追寻着的是一种纷乱的、充满恐惧的爱。我是一名专业的自由式滑雪运动员，脚上的一双雪板、22英尺长的u型池和各种特技动作是我肾上腺素的主要来源，也是极限运动中真正令人上瘾的核心要素。&lt;/p>
&lt;p>正如所有那些能迷倒常人的恋人一样（至少是像我从小说中读到的那些一样，因为现实生活中我还缺乏相应的经验），你这个重要的另一半有时可能会很……反复无常。实际上，“恐惧”可以算是三种不同感觉的总称，那就是兴奋、不确定和压力。&lt;/p>
&lt;p>我已经发现，如果这些感觉能被识别和积极地利用，那么每一种感觉中都有一些微妙的指标可以帮助你成功，而如果其原理被忽视，那么这些感觉可能就会是你受伤的前兆。&lt;/p>
&lt;p>虽然从事极限运动的运动员很容易被贴上“无畏”或“任性”的标签，但无论是我为构思技巧而花费的无数个小时，还是在泡沫坑(泡沫粒子到处都是的那种)里和安全气囊上度过的无数时间都可以表明情况并非如此。&lt;/p>
&lt;p>我们要违反自己的生物直觉，把自己置于风险之中。虽然我们会尽一切努力做好身体上的准备，但再多的安全网模拟训练也无法等同于我们从陡坡上起飞、把身体抛到空中并即将落地时所将面对的雪坡，它是不会讲情面的。&lt;/p>
&lt;p>我们并非无视恐惧，而是要培养深刻的自我意识，并进行深思熟虑的风险评估，从而与恐惧建立起独特的关系。&lt;/p>
&lt;p>这项工作的第一步叫做具象化：在我尝试一个新的技巧动作之前，我会感到胸腔（准确地说，是在我的喉咙底部和膈肌顶部之间）有一种紧张感。&lt;/p>
&lt;p>我深吸一口气，闭上眼睛。当我爬上巨大的起飞坡道时，我会在想象中伸展我的双腿以最大限度地提高升力。然后，我要在脑海中描绘如何以相反的方向扭转我的上半身，产生扭矩，然后再让它朝另一个方向弹回来。&lt;/p>
&lt;p>现在，在我的意识里，我已经是飞在空中的状态了。&lt;/p>
&lt;p>我在跃起后第一时间就会看到自己的背后，然后身体旋转会把我的视线拽向头顶万里无云的天空。风声如同我耳朵里的一种音乐，每一个360度的旋转都在为我的运动提供音乐般的节拍。&lt;/p>
&lt;p>当我的脚在我的身体下面时，我就可以在把身体拉到第二个空翻前的一瞬间发现最终落地的地点。当我回到可以面向前方的位置时，我会想象着我的腿在我的脚下摆动，并让雪鞋的前端承载着我的重量碰到地面。&lt;/p>
&lt;p>我露出微笑，然后睁开眼睛，一个1440度的翻转动作就完成了。&lt;/p>
&lt;p>在完成“具象化”的几秒之后，我胸腔中的紧迫感会有一阵上下的波动，然后开始扩散——这个时候，我们已经来到破茧成蝶的关键阶段。&lt;/p>
&lt;p>兴奋感是肾上腺素的产物，也是我所酷爱和着迷的存在。我既有着对自己安全创造奇迹的信心，也会产生对即将到来的不可预知体验的兴奋感，二者的平衡非常不稳定。我听说这个状态可以被称为“入境（zone）”，去年秋天，当我成为历史上第一个完成1440度偏轴转体动作的的女性双板滑雪运动员时，我就曾体会过这样的心境。&lt;/p>
&lt;p>不幸的是，你心中的不确定感往往很容易就会压倒自信心。&lt;/p>
&lt;p>不完美的准备会使我的手心出汗，并使得我之前所说的那个感到紧张的位置被转移到自己的胃里，从而使你的每次呼吸都比上一次更浅。这种感觉不是恐慌，而是某种类似于畏惧的感觉。危险的信号会激发出进化的本能。&lt;/p>
&lt;p>如果我选择忽略这个安全机制，我的身体可能会在空中不由自主地行动，旋转会失去控制，并迫使我为即将遭受的冲击做好准备，因为这个时候的我真的要恐惧了：如果完全投入这个动作，可能会产生灾难性的后果。&lt;/p>
&lt;p>每个自由式滑雪运动员都要以识别出兴奋感和不确定感之间的细微差别为目标，以便在最大限度地发挥能力的同时，把受伤的风险减少到最小。&lt;/p>
&lt;p>最后要讲的就是压力。这是一种用途可能会很广泛的能量源。在本文提到的与恐惧相关的几个方面中，压力是最主观的一个面。也就是说，一个人对于压力的体验会受到自身实践经验和思想观点的影响。&lt;/p>
&lt;p>家人和朋友的期望，激烈竞争的时段，乃至于可能获得赞助的机遇，都可能为一个高压的外在环境提供支撑。对于那些能把握分寸的赛手来说，压力可以变成一种帮他们迎接挑战的积极力量。但压力也可能会凭借一己之力就让你一败涂地。&lt;/p>
&lt;p>不过，对于这种埋藏在心底的、渴望“证明自己”的感觉，运动员既可能会选择压制它，也可能选择强化它，而这很大程度上要取决于他们的自信心。&lt;/p>
&lt;p>作为一个刚刚成年的女运动员，我对于这方面还是很有些自豪的，我可以增强自己的自尊，并尽量减少自己对于外界期待的需求，从而控制我身边的压力。&lt;/p>
&lt;p>无论孤身一人还是面向整个世界，我都专注于感恩当下、判断当下，并享受体育带给我的快乐。&lt;/p>
&lt;p>虽说我个人和这个世界的视角总会随着时间的推移而演变，但有一件事是不会变的：无论时间过了多久，在恐惧面前的我都会是一个无可救药的浪漫主义者。&lt;/p></description></item><item><title>如何提升沟通技能</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%B2%9F%E9%80%9A%E6%8A%80%E8%83%BD/</link><pubDate>Sun, 20 Feb 2022 20:42:37 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E6%B2%9F%E9%80%9A%E6%8A%80%E8%83%BD/</guid><description>&lt;p>我们先来看一个真实案例：&lt;/p>
&lt;p>（背景）某项目原定于 6 月 7 日完成，可是实际到 6 月 9 日才完成，于是研发经理刘备就找负责的工程师张飞沟通。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>刘备说：“咱们这个项目按计划 7 号完成，你 delay 了两天也不跟我说一声，我是最后一个知道的！”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>张飞说：“我跟负责项目的产品经理孔明说了啊，他也觉得没问题，大家没有异议就行了呗，项目不是成功发布了吗！”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刘备说：“那也应该提前跟我说一声啊，我如果提前知道就会让子龙来帮你，最后也不至于 delay 两天。”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>张飞说：“我觉得我能搞定，你不要动不动就让子龙来帮我，这是对我的不信任。要不是最近孩子生病我也不会 delay。即便 delay 了，我也和合作方都沟通好了，什么事都没耽误。而且我已经尽最大努力了啊，你还要怎么样呢？信不过我的话，下次这样的项目你交给二哥去做吧！”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刘备说：“我就是想让你提前告诉我一声，你急啥！”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>张飞说：“你先急的好不好！”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>……&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>你觉得接下来会发生什么事情呢？如果你是其中的刘备或者张飞，接下来你会怎么沟通呢？&lt;/p>
&lt;p>在日常的沟通中，类似的场景数不胜数。有的会互怼下去，僵持不下；也有的会选择逃避，敷衍了事。但是这都达不到彼此沟通的意图和目的。那么，怎么沟通才能达到彼此的目的呢？&lt;/p>
&lt;p>下面，我介绍一个工具，在沟通中，我们可以使用它来对齐彼此的信息、感受和意图，具体如下所示：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事实（FACT）&lt;/p>
&lt;ul>
&lt;li>列举事实信息&lt;/li>
&lt;li>确认对方的客观情况&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>感受（FEELING）&lt;/p>
&lt;ul>
&lt;li>对方对『事实』的感受和态度&lt;/li>
&lt;li>双方对『事实』的论断是否一致&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>意图（FOCUS）&lt;/p>
&lt;ul>
&lt;li>对方的焦点在哪里，我的焦点在哪里&lt;/li>
&lt;li>对方的意图是什么，我的意图是什么&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>共识&lt;/p>
&lt;ul>
&lt;li>是否达成共识，并确认一致&lt;/li>
&lt;li>接下来怎么做&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>这个工具的前三步，其实就是“3F”倾听，只是在相互倾听的基础之上，又走到了第四步，去确认有没有达成共识。&lt;/p>
&lt;p>所谓“3F”倾听，就是要从对方的谈话中听出三层信息：&lt;/p>
&lt;p>第一，事实信息（FACT）。即，对方说了哪些事实性信息？和你掌握的信息相比有没有什么不同？这是沟通的第一层，也是最基础的一层。如果双方连基本的事实信息都不一致，达成有效的沟通结果就无从谈起了。&lt;/p>
&lt;p>我们来看看，在上述案例中，刘备和张飞的沟通是基于一致的事实信息吗？不难发现，对于这三点重要的事实：&lt;/p>
&lt;p>双方都认同，是没有异议的，可见他们沟通的基础信息没有分歧。&lt;/p>
&lt;p>由于事实信息的客观性，只要肯沟通，这层信息是最容易达成一致的。所以，在发生意见和看法不一致的情况下，首先来对齐事实信息是必要且有效的。当然，随着双方背景信息的不断同步和默契度的不断提升，在一些沟通中该步骤常常被省略。但是，被省略并不意味着不重要，一旦发生分歧的时候，就需要把这层内容拿出来检视和对齐一下了。&lt;/p>
&lt;p>第二，感受和判断（FEELING）。即，对于上述事实信息，双方是什么样的感受和判断。由于每个人生活的环境不同，所处的角色不同，惯用的思维方式不同，沟通的初衷也不同，所以，即便是针对同样的客观事实，双方的感受和看法也常常是不同的。这就是沟通中最容易发生分歧的地方。&lt;/p>
&lt;p>我们还是通过前面的例子来看，基于同一个事实，刘备和张飞各自的感受和判断是什么。&lt;/p>
&lt;p>在刘备看起来：如果张飞提前告诉他这个风险，这个项目本可以不用 delay；而且，自己作为张飞的直接上级，最后才知道有这回事，无论怎么说，自己和张飞之间的协作方式都需要改进。&lt;/p>
&lt;p>在张飞看起来：delay 两天确实不应该，但也是不可抗拒的客观情况造成的，而且为了不给刘备添麻烦，自己主动协调好了各个合作方，并保证项目成功发布，刘备不但不领情，还一副信不过我的样子，显然在他眼里子龙更能干。&lt;/p>
&lt;p>当然，我不是刘备，也不是张飞，这些内心的感受和观点，也是我采访他们之后得知的。你可以看到他们对于同一个事实，双方的感受、判断和期待是很不一样的，之所以会发生后面的情绪对抗，其实就是从这里开始的。&lt;/p>
&lt;p>实际上，我们常说的“默契”，就主要体现在沟通双方对彼此的感受和判断逻辑的理解程度上。因此，你们越是熟悉彼此的立场、思维方式和沟通风格，就越是容易和对方达成默契。所以，默契是在不断合作的过程中磨合出来的，很难自然而然地形成。&lt;/p>
&lt;p>那么，在还没有这种默契的时候该怎么办呢？难道就要像刘备和张飞一样争执和互怼吗？&lt;/p>
&lt;p>我的回答是，有意识地去询问，而不是默认对方一定清楚自己的逻辑和判断。怎么询问呢？如果我是刘备或者张飞的话，我可以这样说：“对于这些事实情况，我的看法是这样的……我想了解下，你的看法是什么呢？”这样一确认，就避免了“猜测”和“想当然”带来的各种各样的误会。&lt;/p>
&lt;p>第三，意图（FOCUS）。即，对方沟通的焦点在哪里，各自为了达到什么意图和目的。每一次沟通，都是基于某个特定的目的和初衷的，无论这个问题你有没有在沟通之前去刻意厘清，都是如此。&lt;/p>
&lt;p>沟通的目的不外乎四个：建立通道、同步信息、表达情感和输出影响。显然，在前面的案例中，刘备沟通的目的和意图是想说服张飞，让他在以后的工作中，提前通报风险，而不是瞒而不报，他从来没有质疑过张飞的能力。而张飞的目的和意图是什么呢？他在表达一种不满，这种不满情绪的背后，是他希望刘备可以给他一些认可和鼓励，并信任他的能力。&lt;/p>
&lt;p>所以你会发现，他们的意图并没有矛盾和冲突，这场沟通，完全可以达到彼此满意的结果。只是因为他们在沟通中，不在一个频道上，把事实、判断、感受、责任、原因、方案等统统揉到一起来说了：你讲事实他说原因，你说原因他说感受，你说感受他说逻辑，你说逻辑他说责任，你说责任他说解决方案，你说解决方案他说困难……最终就成了“鸡同鸭讲”，互相的不理解和不认同。&lt;/p>
&lt;p>通过用“3F”倾听和沟通层次图对上面的案例进行分层拆解，你不难发现，如果我们在沟通中，有意识地分事实、感受、意图这三个层次去理解对方的话，并且从这三个层次分别和自己的事实、感受、意图做一个对应，就可以减少很多不必要的误会，同时避免情绪对抗，从而达成有效的沟通结果。&lt;/p>
&lt;p>对于一个经常沟通的对象，你可以用这个工具，在和对方不断地倾听与确认中，形成默契；在不断地默契合作中，提升信任。当信任和默契程度越来越高，也就是沟通通道品质越来越好时，很多工具和技巧也就可以省略和简化了。于是，你也就知道了，越是在信任度和默契度低的情况下，这个工具越有用武之地；越是在人多口杂的时候，越容易让大家在同一个框架下达成沟通成果。&lt;/p></description></item><item><title>打造好用的win上开发体验</title><link>https://example.com/p/%E6%89%93%E9%80%A0%E5%A5%BD%E7%94%A8%E7%9A%84win%E4%B8%8A%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/</link><pubDate>Sat, 12 Feb 2022 22:22:28 +0800</pubDate><guid>https://example.com/p/%E6%89%93%E9%80%A0%E5%A5%BD%E7%94%A8%E7%9A%84win%E4%B8%8A%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/</guid><description>&lt;h1 id="0x00科学上网">0x00：科学上网&lt;/h1>
&lt;p>如果不能够科学上网的话，整个开发体验将大打折扣。&lt;/p>
&lt;p>此过程较为敏感，所以需要大家自行选择科学上网的方式。&lt;/p>
&lt;h1 id="0x01基本可用的终端">0x01：基本可用的终端&lt;/h1>
&lt;p>&lt;a class="link" href="https://gitforwindows.org/" target="_blank" rel="noopener"
>https://gitforwindows.org/&lt;/a>&lt;/p>
&lt;p>git for windows 内嵌了git bash，git bash的使用体验和linux 或 mac的体验类似。&lt;/p>
&lt;p>安装好之后，需要进入到home目录，编辑 .bashrc 文件，使终端也可以科学上网：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ cd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vim .bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> proxy_on&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global https.proxy http://127.0.0.1:1081
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global https.proxy http://127.0.0.1:1081
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">http_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:1081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">https_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:1081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">export&lt;/span> &lt;span class="nv">all_proxy&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;http://127.0.0.1:1081&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print_proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> proxy_off&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global --unset https.proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git config --global --unset https.proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">unset&lt;/span> http_proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">unset&lt;/span> https_proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">unset&lt;/span> all_proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print_proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> print_proxy&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$http_proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$https_proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$all_proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> l&lt;span class="o">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ll
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">proxy_on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>proxy_on是打开代理，proxy_off是关闭代理，print_proxy是一个帮助函数，用来查看当前的代理，&lt;code>l&lt;/code> 函数是因为自己经常使用l命令，为了不报错而加的。&lt;/p>
&lt;h1 id="0x02scoop">0x02：scoop&lt;/h1>
&lt;p>打开powershell，安装win下好用的命令行软件管理工具：scoop&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&amp;#39;https://get.scoop.sh&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果安装失败，执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Set-ExecutionPolicy RemoteSigned -scope CurrentUser
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="0x03花哨的终端">0x03：花哨的终端&lt;/h1>
&lt;p>&lt;a class="link" href="https://starship.rs/" target="_blank" rel="noopener"
>https://starship.rs/&lt;/a>&lt;/p>
&lt;p>在git bash中执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ scoop install starship
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在.bashrc追加配置，使其可以默认使用starship：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">eval &amp;#34;$(starship init bash)&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后进入到home目录，创建starship的配置文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ mkdir -p .config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd .config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vim starship.toml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入以下配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;span class="lnt">82
&lt;/span>&lt;span class="lnt">83
&lt;/span>&lt;span class="lnt">84
&lt;/span>&lt;span class="lnt">85
&lt;/span>&lt;span class="lnt">86
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># ~/.config/starship.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">battery&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">full_symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🔋&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">charging_symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🔌&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">discharging_symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;⚡&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[[&lt;/span>&lt;span class="nx">battery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">display&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">threshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">character&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">error_symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;[✖](bold red) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">cmd_duration&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">min_time&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10_000&lt;/span> &lt;span class="c"># Show command duration over 10,000 milliseconds (=10 sec)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34; took [$duration]($style)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">directory&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">truncation_length&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;[$path]($style)[$lock_symbol]($lock_style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">git_branch&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34; [$symbol$branch]($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🍣 &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold yellow&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">git_commit&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">commit_hash_length&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold white&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">git_state&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s1">&amp;#39;[\($state( $progress_current of $progress_total)\)]($style) &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">git_status&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">conflicted&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;⚔️ &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ahead&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🏎️ 💨 ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">behind&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🐢 ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">diverged&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🔱 🏎️ 💨 ×${ahead_count} 🐢 ×${behind_count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">untracked&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🛤️ ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">stashed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;📦 &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">modified&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;📝 ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">staged&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🗃️ ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">renamed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;📛 ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">deleted&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🗑️ ×${count}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bright-white&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;$all_status$ahead_behind&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">hostname&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ssh_only&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;[$hostname]($style)&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">trim_at&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;-&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold dimmed white&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">julia&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;[$symbol$version]($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">symbol&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;ஃ &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold green&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">memory_usage&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;$symbol[${ram}( | ${swap})]($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">threshold&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">70&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold dimmed white&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">package&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">python&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;[$symbol$version]($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold green&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">rust&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;[$symbol$version]($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold green&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">time_format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;%T&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">format&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;🕙 $time($style) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bright-white&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disabled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">username&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">style_user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;bold dimmed blue&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">show_always&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时，终端就开始花里胡哨起来了，比如我的终端就长这样：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/zhenfeng-zhu.github.io/main/content/post/images/terminal.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="0x04其他提升幸福感的工具">0x04：其他提升幸福感的工具&lt;/h1>
&lt;ul>
&lt;li>vscode&lt;/li>
&lt;/ul></description></item><item><title>Flutter RatingBar</title><link>https://example.com/p/flutter-ratingbar/</link><pubDate>Tue, 01 Feb 2022 21:01:17 +0800</pubDate><guid>https://example.com/p/flutter-ratingbar/</guid><description>&lt;p>The RatingBar widget is used to show a rating or collect ratings from users (this is an interactive RatingBar). For example, you can use the RatingBar widget inside an e-commerce app to show ratings for a product.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012101831.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter RatioButton</title><link>https://example.com/p/flutter-ratiobutton/</link><pubDate>Tue, 01 Feb 2022 21:00:30 +0800</pubDate><guid>https://example.com/p/flutter-ratiobutton/</guid><description>&lt;p>The RadioButton widget is used to allow a user to select one option from multiple selections.
You can use the RadioButton widget for implementing a single selection such as gender selection, notification preferences, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012100222.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Dropdown</title><link>https://example.com/p/flutter-dropdown/</link><pubDate>Tue, 01 Feb 2022 20:59:39 +0800</pubDate><guid>https://example.com/p/flutter-dropdown/</guid><description>&lt;p>The DropDown widget is used to allow a user to select from a list of items. The DropDown widget shows the currently selected item and opens up a list of options when you click on it.
You can use the Dropdown widget for implementing a single selection such as language selection, shirt size, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012059283.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter TextField</title><link>https://example.com/p/flutter-textfield/</link><pubDate>Tue, 01 Feb 2022 20:58:49 +0800</pubDate><guid>https://example.com/p/flutter-textfield/</guid><description>&lt;p>The TextField widget allows users to input text into your app. You can use the TextField widget for building forms, send messages, dialogs, search, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012059785.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter ToggleIcon</title><link>https://example.com/p/flutter-toggleicon/</link><pubDate>Tue, 01 Feb 2022 20:57:42 +0800</pubDate><guid>https://example.com/p/flutter-toggleicon/</guid><description>&lt;p>The ToggleIcon widget is used to allow a user to switch between two icons that represent two different states. You can use the ToggleIcon widget to implement a feature such as an on-off button, like button, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012058089.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter CheckboxListTitle</title><link>https://example.com/p/flutter-checkboxlisttitle/</link><pubDate>Tue, 01 Feb 2022 20:55:43 +0800</pubDate><guid>https://example.com/p/flutter-checkboxlisttitle/</guid><description>&lt;p>The CheckboxListTile is a combination of Checkbox and ListTile. Tapping anywhere on the CheckboxListTile toggles the checkbox.
You can use the CheckboxListTile to show a list of ToDo items to mark them as complete.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012056855.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter SlidableListTitle</title><link>https://example.com/p/flutter-slidablelisttitle/</link><pubDate>Tue, 01 Feb 2022 20:54:54 +0800</pubDate><guid>https://example.com/p/flutter-slidablelisttitle/</guid><description>&lt;p>The SlidableListTile is a special type of ListTile widget that reveals a list of actions that can be taken on a ListTile when a user swipes right.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012055514.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter ListTitle</title><link>https://example.com/p/flutter-listtitle/</link><pubDate>Tue, 01 Feb 2022 20:54:13 +0800</pubDate><guid>https://example.com/p/flutter-listtitle/</guid><description>&lt;p>The ListTile widget contains a Title, Subtitle, Leading Icon, and Trailing Icon. The ListTile widget is typically used to populate a ListView.
For example, you can use the ListTile to show a list of To Do items or emails.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012054559.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter ChoiceChips</title><link>https://example.com/p/flutter-choicechips/</link><pubDate>Tue, 01 Feb 2022 20:53:02 +0800</pubDate><guid>https://example.com/p/flutter-choicechips/</guid><description>&lt;p>The ChoiceChips widget is used to allow the selection of a single chip from a group of chips. Each chip represents has an icon and text.
You can use the ChoiceChips widget to show the options that can be used to filter a list or to change the UI based on selection.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012053034.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Icon</title><link>https://example.com/p/flutter-icon/</link><pubDate>Tue, 01 Feb 2022 20:52:09 +0800</pubDate><guid>https://example.com/p/flutter-icon/</guid><description>&lt;p>The Icon widget is used to show a small image or a symbol.
You can use the Icon widget to let users quickly understand the meaning of the text. For example, placing a location icon ( ) before the numbers such as 23.35, 79.57 helps users identify that the values are a latitude and longitude.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012052115.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter IconButton</title><link>https://example.com/p/flutter-iconbutton/</link><pubDate>Tue, 01 Feb 2022 20:44:57 +0800</pubDate><guid>https://example.com/p/flutter-iconbutton/</guid><description>&lt;p>The IconButton widget allows users to take action with a single tap. Unlike the regular Button widget, an IconButton shows a small image or a symbol and does not include text.
You can use the Icon widget to let users quickly understand the meaning of an action. For example, the delete action can be easily conveyed using the trash can icon which looks like this ( )&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012051408.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Button</title><link>https://example.com/p/flutter-button/</link><pubDate>Tue, 01 Feb 2022 20:44:14 +0800</pubDate><guid>https://example.com/p/flutter-button/</guid><description>&lt;p>The Button widget allows users to take an action such as saving data, opening a new page, etc. It is one of the most widely used widgets in Flutter.
You can use the Button widget in forms, dialogs, cards, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012044617.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter CircleImage</title><link>https://example.com/p/flutter-circleimage/</link><pubDate>Tue, 01 Feb 2022 20:43:18 +0800</pubDate><guid>https://example.com/p/flutter-circleimage/</guid><description>&lt;p>The CircleImage widget is used to show a circular image from uploaded assets or the URL link. The CircleImage widget can display the different types of images such as JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012043086.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Image</title><link>https://example.com/p/flutter-image/</link><pubDate>Tue, 01 Feb 2022 20:42:22 +0800</pubDate><guid>https://example.com/p/flutter-image/</guid><description>&lt;p>The Image widget is used to show an image from uploaded assets or the URL link. The Image widget can display the different types of images such as JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012042368.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Text</title><link>https://example.com/p/flutter-text/</link><pubDate>Tue, 01 Feb 2022 20:41:31 +0800</pubDate><guid>https://example.com/p/flutter-text/</guid><description>&lt;p>The Text widget is used to show text on the screen. It is one of the most frequently used widgets.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012041563.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter FAB</title><link>https://example.com/p/flutter-fab/</link><pubDate>Tue, 01 Feb 2022 20:40:30 +0800</pubDate><guid>https://example.com/p/flutter-fab/</guid><description>&lt;p>The FloatingActionButton widget (also known as FAB) floats above the content on the screen and is tied to an action. The FAB widget is circular in shape and resides in the bottom right corner of the screen.
You can use the FAB widget to perform the primary action on the screen, such as Add, Create, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012040327.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter EndDrawer</title><link>https://example.com/p/flutter-enddrawer/</link><pubDate>Tue, 01 Feb 2022 20:39:17 +0800</pubDate><guid>https://example.com/p/flutter-enddrawer/</guid><description>&lt;p>The EndDrawer is typically used to provide navigation to other pages. The EndDrawer opens up from the right side of the screen by swiping right-to-left or clicking the menu icon in the AppBar. The EndDrawer can be closed by clicking outside of the EndDrawer or by swiping left-to-right.
You can use the EndDrawer widget when the space for showing the navigation options is not sufficient.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012039981.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Drawer</title><link>https://example.com/p/flutter-drawer/</link><pubDate>Tue, 01 Feb 2022 20:38:17 +0800</pubDate><guid>https://example.com/p/flutter-drawer/</guid><description>&lt;p>The Drawer widget is used to provide navigation to other pages. The Drawer opens up from the left side of the screen by swiping left-to-right or clicking the menu icon in the AppBar. The Drawer can be closed by clicking outside of the Drawer or by swiping left-to-right.
You can use the Drawer widget when the space for showing the navigation options is not sufficient.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012038428.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter AppBar</title><link>https://example.com/p/flutter-appbar/</link><pubDate>Tue, 01 Feb 2022 20:36:43 +0800</pubDate><guid>https://example.com/p/flutter-appbar/</guid><description>&lt;p>The AppBar widget is used to show the information and actions related to the current page. You can use the AppBar widget to display the menu icon, back button, page title, various actions such as share, search, delete, and so on.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012037429.png"
loading="lazy"
>&lt;/p>
&lt;p>The AppBar widget consists of three sections, Leading, Title, and Actions.
The Leading section is typically used to show a clickable widget such as the back button, cancel icon, profile icon, menu icon, etc.
The Title section usually includes a title.
The Actions section typically contains clickable widgets that can be used to take actions on that page.&lt;/p>
&lt;p>Each section can be customized based on your needs. Multiple widgets can be added to each section by using layout elements such as rows and columns.&lt;/p></description></item><item><title>Flutter Wrap</title><link>https://example.com/p/flutter-wrap/</link><pubDate>Tue, 01 Feb 2022 20:35:59 +0800</pubDate><guid>https://example.com/p/flutter-wrap/</guid><description>&lt;p>The Wrap widget is similar to Row and Column as it shows its children one after another. If there is not enough space to show your item, the Wrap widget will automatically place it in a new row or column.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012036958.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Container</title><link>https://example.com/p/flutter-container/</link><pubDate>Tue, 01 Feb 2022 20:35:05 +0800</pubDate><guid>https://example.com/p/flutter-container/</guid><description>&lt;p>The Container widget is like a box that allows you to add a background color, rounded corners, or set some size constraints to a child widget.
You can use Containers to help create your UI structure. Containers can be helpful in dividing the screen into smaller logical parts.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012035720.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Divider</title><link>https://example.com/p/flutter-divider/</link><pubDate>Tue, 01 Feb 2022 20:34:26 +0800</pubDate><guid>https://example.com/p/flutter-divider/</guid><description>&lt;p>The Divider widget is a horizontal line that is used to visually separate widgets.
You can use the Divider widget to create some space between a group of widgets or between the items in a ListView.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012034273.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter PageView</title><link>https://example.com/p/flutter-pageview/</link><pubDate>Tue, 01 Feb 2022 20:33:32 +0800</pubDate><guid>https://example.com/p/flutter-pageview/</guid><description>&lt;p>The PageView widget is used to create swipeable pages. It contains a list of scrollable pages that you can swipe either horizontally or vertically.
For example, you can use the PageView widget to create onboarding screens, an app that shows a short video on swipe up or down just like Instagram, TikTok, Youtube shorts, etc.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012033280.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter TabBar</title><link>https://example.com/p/flutter-tabbar/</link><pubDate>Tue, 01 Feb 2022 20:32:28 +0800</pubDate><guid>https://example.com/p/flutter-tabbar/</guid><description>&lt;p>The TabBar widget is used to show different categories of content.
You can use the TabBar widget to quickly glance at each option and move between the categories by swiping or clicking on the Tab.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012032582.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Spacer</title><link>https://example.com/p/flutter-spacer/</link><pubDate>Tue, 01 Feb 2022 20:31:30 +0800</pubDate><guid>https://example.com/p/flutter-spacer/</guid><description>&lt;p>The Spacer widget is used to insert a flexible empty space between the children of the Column and Row widget.
If you want even space between your child widgets, you can add space by setting the Main Axis Alignment to Space Around, Space Evenly, and Space Between. If you want a more customized space between your child widgets (example below), you should use the Spacer Widget.&lt;/p>
&lt;blockquote>
&lt;p>The Spacer widget takes all of the available space so the Spacer Widget will have no effect on a Column or Row where the Main Axis Alignment is set to Space Around, Space Evenly, and Space Between.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202012032761.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Card</title><link>https://example.com/p/flutter-card/</link><pubDate>Tue, 01 Feb 2022 18:37:32 +0800</pubDate><guid>https://example.com/p/flutter-card/</guid><description>&lt;p>The Card widget is used to represent some related information. For example, you can use a Card widget to show a Business card, restaurant information, movie details, etc.
The Card widget is frequently used with a List to display the item information for a specific record.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011838567.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Gridview</title><link>https://example.com/p/flutter-gridview/</link><pubDate>Tue, 01 Feb 2022 18:36:56 +0800</pubDate><guid>https://example.com/p/flutter-gridview/</guid><description>&lt;p>The GridView widget is used to display a list of items in a grid or 2- dimensions (Both vertically and horizontally at the same time.)
For example, you can use GridView to show a list of photos or a list of products.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011837617.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter ListView</title><link>https://example.com/p/flutter-listview/</link><pubDate>Tue, 01 Feb 2022 18:36:15 +0800</pubDate><guid>https://example.com/p/flutter-listview/</guid><description>&lt;p>The ListView widget is used to show a large number of items as a scrollable list. ListView is an advanced version of the Column widget that automatically provides scrolling when the list of items won&amp;rsquo;t fit on the screen.
You can use the ListView to show the list of items either vertically or horizontally.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011836208.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Stack</title><link>https://example.com/p/flutter-stack/</link><pubDate>Tue, 01 Feb 2022 18:34:51 +0800</pubDate><guid>https://example.com/p/flutter-stack/</guid><description>&lt;p>The Stack widget allows child widgets to overlap on top of each other. The last child of the Stack stays on top.
Sometimes basic widgets such as Column and Row are not sufficient for creating a complex UI. For example, if want to show text on top of an image - you should consider using the Stack widget.
The following figure helps you understand how the Stack widget is different from other widgets.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011835440.png"
loading="lazy"
>&lt;/p>
&lt;p>Here&amp;rsquo;s another example that shows the use of the Stack widget:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011835258.png"
loading="lazy"
>&lt;/p></description></item><item><title>Flutter Row</title><link>https://example.com/p/flutter-row/</link><pubDate>Tue, 01 Feb 2022 18:32:45 +0800</pubDate><guid>https://example.com/p/flutter-row/</guid><description>&lt;p>The Row widget is used to create a horizontal layout. It is one of the most used widgets. Here’s how the Row arranges its children:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011834688.png"
loading="lazy"
>&lt;/p>
&lt;p>As shown in the figure above, the Main Axis and the Cross Axis are two important properties of the Row. For a Row, the Main Axis runs horizontally and the Cross Axis runs vertically. By default, all the children inside of the Row will be arranged in a horizontal fashion.&lt;/p></description></item><item><title>Flutter Columns</title><link>https://example.com/p/flutter-columns/</link><pubDate>Tue, 01 Feb 2022 18:31:19 +0800</pubDate><guid>https://example.com/p/flutter-columns/</guid><description>&lt;p>The Column widget is one of the most used widgets and is essential in creating a vertical layout for any UI. Here’s how the column arranges its children:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202202011831071.png"
loading="lazy"
>&lt;/p>
&lt;p>As shown in the figure above, the Main Axis and the Cross Axis are two important properties of the column. For a column, the Main Axis runs vertically and the Cross Axis runs horizontally. By default, all the children inside of the column will be arranged in a vertical fashion.&lt;/p></description></item><item><title>打造文档</title><link>https://example.com/p/%E6%89%93%E9%80%A0%E6%96%87%E6%A1%A3/</link><pubDate>Sun, 30 Jan 2022 15:26:35 +0800</pubDate><guid>https://example.com/p/%E6%89%93%E9%80%A0%E6%96%87%E6%A1%A3/</guid><description>&lt;h1 id="两种文档视角需求视角和供给视角">两种文档视角：需求视角和供给视角&lt;/h1>
&lt;h2 id="需求视角想想你的受众是谁了解他们的期望值">需求视角：想想你的受众是谁，了解他们的期望值&lt;/h2>
&lt;p>管理者&lt;/p>
&lt;blockquote>
&lt;p>汇报上级&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>业务整体情况&lt;/li>
&lt;li>战略重心和资源投入&lt;/li>
&lt;li>面临问题和解决办法&lt;/li>
&lt;/ul>
&lt;p>协作者&lt;/p>
&lt;blockquote>
&lt;p>业务流程节点中的一环，你的工作会影响 ta，或者 ta 的工作会影响你。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>业务整体情况&lt;/li>
&lt;li>接下来你的哪些事情会影响到我的事情？我该怎么配合？&lt;/li>
&lt;/ul>
&lt;p>信息同步者&lt;/p>
&lt;blockquote>
&lt;p>他们大部分时间并不在业务流程节点中。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>业务整体情况，我就是想知道一下。&lt;/li>
&lt;/ul>
&lt;h2 id="供给视角把我做了什么展示给你看">供给视角：把我做了什么展示给你看&lt;/h2>
&lt;ul>
&lt;li>特点：文档的整体结构和业务的二级部门架构高度相似，各个二级部门负责写一小块，最后找 PMO 缝合在一起。&lt;/li>
&lt;li>陷阱：很容易失去重点，变成工作的流水账，春晚式汇报&lt;/li>
&lt;li>缺点：对不熟悉的人来说，这些耦合关系和业务逻辑理解成本比较高，很容易听晕，但又不好意思现场提问，会后一知半解。&lt;/li>
&lt;li>优点：事无巨细，面面俱到。&lt;/li>
&lt;/ul>
&lt;p>【总结】&lt;/p>
&lt;ul>
&lt;li>公司双月会：需求视角优先&lt;/li>
&lt;li>内部 review：供给视角优先&lt;/li>
&lt;/ul>
&lt;h1 id="聚焦怎么把一块儿业务说清楚讲明白">聚焦：怎么把一块儿业务说清楚、讲明白&lt;/h1>
&lt;h2 id="解法用-25-个维度来叙述业务">解法：用 2.5 个维度来叙述业务&lt;/h2>
&lt;ul>
&lt;li>维度 1：业务主线，概括性质的东西，偏粗&lt;/li>
&lt;li>维度 2：从一个或几个维度对业务的 break down，让大家看到增长或下降的归因&lt;/li>
&lt;li>维度 2.5：选一个最值得拿出来说的单点，往下钻，展开来说，增加信息丰富度，以小见大。&lt;/li>
&lt;/ul>
&lt;h2 id="维度-1业务整体状况如何在最短的时间内让大家了解这个业务的进展">维度 1：业务整体状况，如何在最短的时间内让大家了解这个业务的进展&lt;/h2>
&lt;ul>
&lt;li>for 负责人：如果每天只有一分钟，你会关注哪些指标和事情进展？&lt;/li>
&lt;li>for 三种角色：假设有且只有三个问题，你会问关于这个业务的什么问题？&lt;/li>
&lt;/ul>
&lt;p>想明白上述的两个问题，答案呼之欲出；想不出来，就继续想，和上级讨论，和协作方讨论，直到得出让你很踏实和自信的答案。&lt;/p>
&lt;p>要求简单直接，让人秒懂。&lt;/p>
&lt;h2 id="维度-2找到业务的增长公式拆解开来看">维度 2：找到业务的增长公式，拆解开来看&lt;/h2>
&lt;p>深刻理解业务是起点，针对维度 1 里面的关键指标，把他们分解成一级增长公式。&lt;/p>
&lt;blockquote>
&lt;p>performance = A &lt;em>B&lt;/em> C * D&lt;/p>
&lt;/blockquote>
&lt;p>ABCD 里有些是快变量，有些是慢变量，在这个环节中，需要清晰的给受众指出：驱动业务当前发展的主要动力和阻力是什么？以及对应的后续方案是什么？&lt;/p>
&lt;p>所以叙事线一般是这样的：&lt;/p>
&lt;p>Performance 达到预期，主要是因为 AB 超出预期，C 无明显变化，D 明显地域预期
A 主要是因为做了 xxxx，后续打算 xxx
B 主要是因为 xxx，后续打算 xxx
C 做了 xxx，没有效果，后续不搞了
D 主要是 xxx，导致没有达到预期，后续 todo 是 xxx，需要支持：@xxx&lt;/p>
&lt;p>简单干净，不拖泥带水。&lt;/p>
&lt;p>接下来是灵魂三问。&lt;/p>
&lt;ol>
&lt;li>如何选择 break down 的角度
这里的分解动作，通常有多个维度可以选择。&lt;/li>
&lt;/ol>
&lt;p>关键的决策点在于：怎么切分最能反应真实的问题，就选择哪个角度。所以实际操作中，都会在底下各种推演，直到找好最佳的业务观察角度。&lt;/p>
&lt;ol start="2">
&lt;li>为什么避免把增长公式拆解到 -2 甚至 -3 层级？&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>太复杂&lt;/li>
&lt;li>看不懂&lt;/li>
&lt;li>大家不关心（这是你份内的事儿）&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>偏定型的职能线、支持类的业务是否也可以用类似的方式？&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>可以&lt;/li>
&lt;li>这种未必可以明显量化，但是实际产出最后也是可以分解成几个动作，道理一样的。如果无法分解，很可能你对业务的理解还是缺乏一个『向上抽离』的动作。&lt;/li>
&lt;/ul>
&lt;p>nothing is unbreakable.&lt;/p>
&lt;h2 id="维度-25深入下钻以小见大">维度 2.5：深入下钻，以小见大&lt;/h2>
&lt;p>前面会无限压制你想下钻到-2 -3 层级的冲动，这里可以发泄一下。&lt;/p>
&lt;p>无论 1 或 2，都会给人一种浮于表面的感觉，这里是拿个放大镜，把某个点打开来看。&lt;/p>
&lt;p>为什么说这个维度是业务的以小见大呢，因为这个 case 背后反应的是系统层面的 todo，多少有一些上纲上线的味道，比如：&lt;/p>
&lt;ul>
&lt;li>一个 bad case 的分析，需要提炼到反应出的 xx 层面有哪些不足，后续 todo 是啥，需要 xx 来支持配合。&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h1 id="如何精益求精">如何精益求精&lt;/h1>
&lt;h2 id="三种角色的个性化需求怎么办">三种角色的个性化需求怎么办&lt;/h2>
&lt;p>这个不用担心。&lt;/p>
&lt;p>如果从上面 2.5 个角度说清楚了业务，你会发现这些问题的答案都在各种 todo 里了。&lt;/p>
&lt;p>另一种更为直接，在讲清楚业务本身的 facts 之后，后面单独起个模块，用来讲清楚需要讨论的问题和需要的支持，对应 at 到具体的人。&lt;/p>
&lt;h2 id="okr-怎么办">OKR 怎么办&lt;/h2>
&lt;p>如果做完上述那么多工作之后，还是对于接下来要做的事儿不清楚，写不出 okr，那就再走一遍。&lt;/p>
&lt;p>符合预期的事儿，都是你好我好大家好，无非是重设目标的事儿。不符合预期的事儿，需要重点关注，用 okr 做目标管理。&lt;/p>
&lt;ul>
&lt;li>可以立竿见影的事儿，是快变量，通常很多人来盯，这些快变量因为是短期业务增长的动力，反而不容易出问题，即使出了问题修起来也特别快。&lt;/li>
&lt;li>容易出问题的是那些影响长期增长的慢变量，短期未必马上产出作用，需要更高层级的管理层关注，并用几个月的 okr 来突破，比如组织问题、效率问题、合规问题、安全问题等。&lt;/li>
&lt;li>一线员工除了大量关注日常快变量之外，还需要继承一部分来自更高层级的慢变量工作。&lt;/li>
&lt;/ul>
&lt;p>快变量&lt;/p>
&lt;blockquote>
&lt;p>短期业务增长的动力，反馈见效快。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>符合预期：重设目标&lt;/li>
&lt;li>不符合预期：业务线负责人-1 -2 的 okr，manager -1 -2 的 okr&lt;/li>
&lt;/ul>
&lt;p>慢变量&lt;/p>
&lt;blockquote>
&lt;p>长期增长的基石，需要大量晴天修雨伞的工作。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>符合预期：继续保持&lt;/li>
&lt;li>不符合预期：业务线负责人的 okr，manger 的 okr&lt;/li>
&lt;/ul>
&lt;h1 id="其他">其他&lt;/h1>
&lt;ul>
&lt;li>使用小白语言，尽量减少术语。&lt;/li>
&lt;li>控制篇幅，1w 字以内&lt;/li>
&lt;li>无格式和语法错误&lt;/li>
&lt;/ul></description></item><item><title>书单</title><link>https://example.com/p/%E4%B9%A6%E5%8D%95/</link><pubDate>Sun, 30 Jan 2022 15:18:30 +0800</pubDate><guid>https://example.com/p/%E4%B9%A6%E5%8D%95/</guid><description>&lt;p>一、理解自己之生理与心理健康&lt;/p>
&lt;ul>
&lt;li>肥胖代码&lt;/li>
&lt;li>正念的奇迹&lt;/li>
&lt;li>冥想的原理与实践进阶&lt;/li>
&lt;/ul>
&lt;p>二、理解自己之巅峰时刻&lt;/p>
&lt;ul>
&lt;li>跨越不可能&lt;/li>
&lt;li>纳瓦尔宝典：财富和幸福指南&lt;/li>
&lt;li>巨人的工具书&lt;/li>
&lt;/ul>
&lt;p>三、理解世界之复杂科学&lt;/p>
&lt;ul>
&lt;li>巴拉巴西成功定律&lt;/li>
&lt;li>规模&lt;/li>
&lt;li>直觉泵&lt;/li>
&lt;li>如何解决复杂问题&lt;/li>
&lt;/ul>
&lt;p>四、理解世界之金融、投资、经济&lt;/p>
&lt;ul>
&lt;li>财富的起源&lt;/li>
&lt;li>技术革命与金融资本&lt;/li>
&lt;li>技术的本质&lt;/li>
&lt;li>复杂经济学：经济思想的新框架&lt;/li>
&lt;li>文明-现代化价值投资与中国&lt;/li>
&lt;li>大衰退年代&lt;/li>
&lt;/ul>
&lt;p>五、理解世界之生活&lt;/p>
&lt;ul>
&lt;li>置身事内：中国政府与经济发展&lt;/li>
&lt;li>中国的选择：中美博弈与战略抉择&lt;/li>
&lt;li>中国的宗教&lt;/li>
&lt;/ul>
&lt;p>七、两本传记&lt;/p>
&lt;ul>
&lt;li>富兰克林传&lt;/li>
&lt;li>乔布斯传&lt;/li>
&lt;/ul></description></item><item><title>学习上瘾</title><link>https://example.com/p/%E5%AD%A6%E4%B9%A0%E4%B8%8A%E7%98%BE/</link><pubDate>Sun, 30 Jan 2022 15:10:35 +0800</pubDate><guid>https://example.com/p/%E5%AD%A6%E4%B9%A0%E4%B8%8A%E7%98%BE/</guid><description>&lt;p>最近两年，深感越来越多人患上了“毒鸡汤被迫害妄想症”，当别人抛出一个论点后，你下意识的将其归为“鸡汤”、“装逼”、“假正经”，虽然内心一时站上了道德高地并沾沾自喜，但长期坚持下来，你已经擅长了百毒不侵，这非常好，但这也是另一种自我绝食。&lt;/p>
&lt;p>我倒是认为，放低一点对自我智识高地的维护，认真对待那些让你下意识心生厌恶的观点，会让自己心里少点戾气，顺便找到一些未来的机会。&lt;/p>
&lt;h1 id="不要试图自律">不要试图自律&lt;/h1>
&lt;p>keep 的 slogan 叫“自律给我自由”，可现实生活中有多少人真的能坚持自律？&lt;/p>
&lt;p>我问过很多坚持健身的人，他们并不是每天很痛苦的去健身房，而是每天迫不及待的去健身房，因为那里会让他们很爽。要是不信的话，你可以去找身边的人问问。&lt;/p>
&lt;p>要了解“自律”这种意识看似很虚无缥缈，但所有的意识都是被大脑神经递质所控制的，我们应该从大脑神经递质层面，看该如何利用它们，而不是抵抗他们。&lt;/p>
&lt;p>我们看一下这些神经递质是如何起作用的：&lt;/p>
&lt;blockquote>
&lt;p>多巴胺是大脑中最主要的奖励化学物质，催产素紧随其后，然而血清素、内啡肽、去甲肾上腺素和花生四烯乙醇胺也发挥着作用。
这些化学物质中的每一种所产生的愉悦感都会驱使我们采取行动，如果行动成功便有了正反馈，就会在记忆中强化该行为。&lt;/p>
&lt;/blockquote>
&lt;p>正确的学习方式，不是依靠自律，而是要借助这些神经递质发挥作用。&lt;/p>
&lt;h1 id="为什么喜欢刷抖音和-b-站而不想刷学习">为什么喜欢刷抖音和 B 站而不想刷学习&lt;/h1>
&lt;p>是那些让你产生好奇心的标题，比如那些人人都听过、没人真的懂的事情。&lt;/p>
&lt;p>好奇心是生物学设计的起点。这是你对某事的基本兴趣，在神经化学上由一点去甲肾上腺素和多巴胺支撑。而好奇心本身就是一个强大的动力，同时它也是激情的基础成分，是一个更大的动力。&lt;/p>
&lt;p>那什么样的内容让你看完后也觉得很爽呢？&lt;/p>
&lt;p>太简单的内容会让你觉得好无聊，太复杂的内容又很枯燥看不懂，是那些你既有一些了解但又出乎你意料的内容，同时叙事手法又富有节奏感，不停的引发你情绪变化的内容。&lt;/p>
&lt;p>利用好奇心让自己开始一次学习，利用心流让我们沉浸，最后用自洽的逻辑和结论完成终极暴击。&lt;/p>
&lt;h1 id="正确的刷学习方式">正确的刷学习方式&lt;/h1>
&lt;p>1、如何利用好奇心开始&lt;/p>
&lt;p>学习就和刷视频一样，首先，你要有个让你好奇心的问题。&lt;/p>
&lt;p>这一步可能是最难到大家的，毕竟学生时代的我们，习惯了在别人规定好的框架内看书、答题，早就没了好奇心。&lt;/p>
&lt;p>对此，我的观点是，你不是失去了好奇心，只是找不到了好奇心，兴趣也不是天生的，而是后天培养的。&lt;/p>
&lt;p>这的确挺难，在身边朋友中实践过一个可行的办法。&lt;/p>
&lt;blockquote>
&lt;p>1 拿一张纸，把你生活中感兴趣的事情全部列上去，大事小事都可以列；
2 找到这些事情的交叉点，以及弄清楚某个特定的交叉点是否真的足够有趣，这些交叉点，往往蕴含了可能爆发的好奇心；
3 怎么知道一个交叉点是完美的？去这些交叉点上“玩一玩”，真是是找一些东西玩一玩，而不是学一学。
4 用“公开的成功”激励再深入一点，人类是一种社会动物，我们要利用好身边人的正反馈，哪怕是发个朋友圈分享一下。&lt;/p>
&lt;/blockquote>
&lt;p>上面的过程看似有些无趣，但请完整的把这四部流程走几遍，相信我，会或多或少的开启一点的。&lt;/p>
&lt;p>2、如何利用心流让我们沉浸&lt;/p>
&lt;p>心流是一个特别复杂的话题，这里推荐一本彻底讲清楚心流的书《the art of impossible》，但这里，只讲一个最核心的理论：心流区间。&lt;/p>
&lt;p>前面提过，太简单的内容让人无聊，太难的内容让人痛苦，这就是心流区间的来源。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201301514761.png"
loading="lazy"
>&lt;/p>
&lt;p>我们要解决的是那些不太难又不太容易的困惑，即你已经模模糊糊知道思路，但又不完全清楚解法的困惑。这样的困惑最容易让你体会到”学习过程的乐趣“。&lt;/p>
&lt;p>而看书，是一个很容易产生心流状态的事情，但很多人明明启动了看书，但看不进去，核心原因是：你的书选错了。&lt;/p>
&lt;p>记住这一点：任何让你看不进去的书，要么是书本身写的太烂了（就像一个电影选题很好但编剧太烂一样），要么就是你的知识结构还不足以支撑看懂这本书。&lt;/p>
&lt;p>比如一个没有任何经济学概念的人去学习经济学原理，他是很难读下去的，即便勉强读下去是痛苦且很少输入的读下去。这种“硬骨头”应该赶紧放下，再选一本你感兴趣的书，找一本书能让你看的爽的书。&lt;/p>
&lt;p>这也是《The Motivation Myth 动力神话》一书里的核心观点：小成功形成动力，动力促成更大的成功，这就是一个正反馈连锁反应。一般的改变思想和信念都是不可靠的。&lt;/p>
&lt;p>相信脑科学的力量，你会读下去的。&lt;/p>
&lt;p>3、利用正反馈让我们获得情绪的高潮&lt;/p>
&lt;p>正反馈主要来源于两方面：&lt;/p>
&lt;p>第一，大脑天性喜欢圆满、自洽、秩序、确定性。&lt;/p>
&lt;p>整整齐齐的桌面让人爽心悦目，确定性的收获让人有安全感，其实，人的大脑也会因为困惑的问题被安插一个合理的逻辑而愉悦，这就是自洽，我们总想为一个问题找到其解释理由。&lt;/p>
&lt;p>这也是所谓 aha ha moment 的魅力，持续的“学习→搞清楚问题”会持续的分泌多巴胺，进而会产生“学习上瘾”的感觉，就像“吸烟→烟被吸进和呼出” 的上瘾一样。这是大脑爱学习的原因之一。&lt;/p>
&lt;p>大部分人非但没有上瘾，反而觉得很枯燥，核心是因为：没有品尝过“学习→搞清楚问题” 这一过程的正反馈快感，就像刚开始抽烟都觉得很恶心，而不是很爽。&lt;/p>
&lt;p>所以在心流区间里看完一本解答你困惑的书，本身就是生理性的爽。&lt;/p>
&lt;p>第二，通过公开的正反馈让你更爽&lt;/p>
&lt;p>我知道很多人低调，厌恶高调的炫耀，但你要做的不是炫耀，而你要做的，是真诚的分享。&lt;/p>
&lt;p>大多数人不排斥真诚、谦虚，你的持续学习，也需要来自他人积极的反馈。&lt;/p>
&lt;p>背后原因是任何一种社会强化都会增加感觉良好的神经化学，从而增加动力，有两个生理学原因：&lt;/p>
&lt;ol>
&lt;li>来自他人的积极关注会使大脑释放出比我们单独从激情中获得更多的多巴胺&lt;/li>
&lt;li>同时增加了催产素。多巴胺和催产素的结合，奖励了&amp;quot;社会互动&amp;quot;，创造了信任和爱的感觉，这对我们的生存是如此的关键。&lt;/li>
&lt;/ol></description></item><item><title>如何让自己不忙不卷还有成长</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B8%8D%E5%BF%99%E4%B8%8D%E5%8D%B7%E8%BF%98%E6%9C%89%E6%88%90%E9%95%BF/</link><pubDate>Sun, 30 Jan 2022 14:39:04 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B8%8D%E5%BF%99%E4%B8%8D%E5%8D%B7%E8%BF%98%E6%9C%89%E6%88%90%E9%95%BF/</guid><description>&lt;h1 id="检查你是否落入了这些坏习惯">检查你是否落入了这些坏习惯&lt;/h1>
&lt;p>1、喜欢干事而不喜欢想事
（突然想起好像是王兴说的一句话，大多数人为了逃避真正的思考，愿意做任何事情。）&lt;/p>
&lt;p>2、没搞清服务对象到底是谁
（你觉得是谁？为什么是 ta？你在帮 ta 解决什么问题？解决了能怎样？帮 ta 解决问题是不是你的最终目标？）&lt;/p>
&lt;p>3、理念情怀主导，从感性和善意出发，但认识世界不够客观，科学分析缺失，问题和解法都禁不起捶问&lt;/p>
&lt;p>4、平衡中庸，默认服从“程序正确”、“政治正确”，表面上平等尊重温情脉脉，实际缺少层层递进的、探求问题本质的讨论，追求和谐、不要出错&amp;gt; 制定正确清晰的目标并竭尽所能（逐渐变成“凑合”）&lt;/p>
&lt;p>上面这些习惯，如果让你特别有感觉，那就要小心了！
如果你一个感觉都没有，那更要小心了！！！（因为这些都是很常见的无意识的坏习惯，很容易陷入其中而不自知，需要有意识的训练自己的觉察能力）&lt;/p>
&lt;h1 id="超越问题让问题不再是问题">超越问题，让问题不再是问题&lt;/h1>
&lt;p>管理的问题、组织的问题从来都不是有明确“单因单果”的问题，而是存在于错综复杂的组织系统，乃至更广泛的外部社会系统中的问题，基本上所有的工作、项目，都是一个“探索真问题的过程”，在这个过程里，持续、有意识地做深度思考和学习是比撸起袖子干事更重要的，如果疏于付出思考上的努力，题找错了、方向偏了，后面的也就别想了。&lt;/p>
&lt;p>架在错误的问题上，项目即使没做坏，但也做不到多好。往坏了说，你错过了一个成功解决有价值问题的机会，浪费了你的时间、才华和资源。&lt;/p>
&lt;p>至于我们为什么容易不自知地忽视这些“真思考”：&lt;/p>
&lt;ul>
&lt;li>从生理上讲，大脑是很不喜欢费力气思考的，因此我们往往会陷入快速基于主观思维惯性下结论的错误之中而不自知（take for granted）。除了那些天赋和修为极高的人，如果普通人想让成长更快，就需要有一个靠谱的科学方法论来指引自己。&lt;/li>
&lt;li>从组织角度，在一个大组织里解决问题，似乎每个人对问题负有的责任也同时被稀释了，“我想了又有什么用？”，“这个问题该我去想吗？”，leader 觉得做事情的下属应该要主动想，下属觉得 leader 比我更负有思考的责任，再加上每个人都有很多事情在牵扯精力，“深度思考”渐渐似乎变少了。&lt;/li>
&lt;/ul>
&lt;h1 id="一切从找对问题出发">一切从找对问题出发&lt;/h1>
&lt;p>让我们从常见的误区开始&lt;/p>
&lt;h2 id="偏差一我们的问题-vs-目标对象的问题">偏差一：我们的问题 vs 目标对象的问题&lt;/h2>
&lt;p>第一种常见的偏差是，人们往往无法将自己认为的问题与目标服务对象认为的问题区分开，这是一个特别容易定位错误的地方，参考下图：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201301501280.png"
loading="lazy"
>&lt;/p>
&lt;p>大家都懂，我们应该在我们自己和目标对象都认为是问题的地方采取行动，但实际工作起来，还是往往被“我们认为是问题，客户不认为是问题的问题”绊住。&lt;/p>
&lt;ul>
&lt;li>就像家长要求孩子好好吃饭，为 ta 不能好好吃饭而生气，可孩子可能就是零食吃多了，真的不饿也吃不下去&lt;/li>
&lt;li>我们觉得某些地方存在不公平的问题，可在客户眼里，是不是那么公平可能并不重要也并不关键&lt;/li>
&lt;li>我们觉得需要做某项能力提升的项目，可客户现在面临其他比能力提升更重要、更要紧的问题&lt;/li>
&lt;/ul>
&lt;p>这个时候，我们不是要费劲去给客户洗脑，而是应该仔细聆听对方的声音，以及更多相关方的声音，找出“真问题”以及背后的原因，对问题“去伪存真”，找到其中的逻辑关系，然后再决定要怎么办。&lt;/p>
&lt;p>另外，有时我们确实能够看见真问题，但客户不够认同，这时候最应该做的事情，是寻找那些持有相同认知的人，然后和他们一起工作，一边做出一定成绩，一边启发和带动更多人。不用把精力纠结在为什么对方不认同这个事情上，然后让自己和团队消耗在这个不认同上。&lt;/p>
&lt;h2 id="偏差二过程对象-vs-最终对象">偏差二：过程对象 vs 最终对象&lt;/h2>
&lt;p>第二种常见的偏差是，不能分辨“过程对象”和“最终对象”，容易在关注过程对象中迷失，不见初衷。&lt;/p>
&lt;ul>
&lt;li>上好大学是过程对象，人的充分发展是最终对象&lt;/li>
&lt;li>学英语是过程对象，无障碍的交流、接触更多思想是最终对象&lt;/li>
&lt;li>薪酬公平和有效激励是过程对象，让优秀的员工愿意和公司一起长期发展是最终对象&lt;/li>
&lt;li>在商业组织里，业务的成功是最终对象，员工的满意度和员工的能力提升是过程对象。但人天然对距离自己更近和自己更相关的事物敏感，对远距离的目标不敏感。我们要关注员工的满意度和员工成长，这没有错，但不要疏忽了大家聚在一个公司里的目的是为解决某种问题提供商业服务，这是我们的首要目标和首要责任。&lt;/li>
&lt;/ul>
&lt;p>并不是说不应该从过程对象入手，而是我们始终不能忽略掉服务的最终对象是谁。&lt;/p>
&lt;h2 id="偏差三笼统对象-vs-具体对象">偏差三：笼统对象 vs 具体对象&lt;/h2>
&lt;p>第三种常见的偏差是，将问题概括化、笼统化，很多抽象的概念和大词，但具体是谁、遇到了什么问题，不得而知。这些词不一定是黑话，但和黑话效果类似，都阻碍了我们直达真正的问题。&lt;/p>
&lt;p>尤其对管理问题的描述，太容易滑向笼统了。&lt;/p>
&lt;ul>
&lt;li>需要从文化和意识上，强调不要内卷&lt;/li>
&lt;li>员工的安全感需要提升&lt;/li>
&lt;li>我们需要平衡效率和质量、效率和公平的矛盾&lt;/li>
&lt;/ul>
&lt;p>如果我们对问题的界定过于笼统，解决思路也必然走向“宏大”，就没有办法做到小处着手，也难以得出禁得起拷问的、可操作的、逻辑上正确的行动。&lt;/p>
&lt;h2 id="偏差四主观判断-vs-客观现象">偏差四：主观判断 vs 客观现象&lt;/h2>
&lt;p>我们几乎对看到的事实问题都会快速得出一个主观的判断和结论，但我们需要意识到，当我们把这些主观判断当成问题的时候，我们就已经犯了偏离问题本身的错误。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;ul>
&lt;li>需要提升员工的口语表达能力&lt;/li>
&lt;li>在 XX 团队，大家开周会的时候因为语言障碍，限制了问题理解和表达&lt;/li>
&lt;/ul>
&lt;p>第一种描述是一种强烈的主观表达，代表一种观点和判断，而不是在描述具体是哪些目标对象，具体遇到了什么问题。直接从主观判断开始找解决方案，不利于我们识别最终要解决什么问题、实现什么目标。&lt;/p>
&lt;p>好的问题应该描述的是客观现象（哪些对象、遇到了什么阻碍），而不是描述主观判断。客观现象应该是——可观测、可证伪、容易在利益相关方之间达成共识&lt;/p>
&lt;h1 id="敲黑板总结">敲黑板——总结&lt;/h1>
&lt;p>检查问题是不是找准了的 checklist（适合对照你目前正在解决的问题，自纠自查一下，然后修正你的问题）&lt;/p>
&lt;ul>
&lt;li>这是不是你服务的对象认可的问题，同时你也认可的问题？&lt;/li>
&lt;li>你选择工作的问题对象是过程对象还是最终对象，如果是过程对象，帮 ta 解决好这个问题，是否有利于帮助最终对象，这是不是帮助最终对象的最可靠的手段？&lt;/li>
&lt;li>你的问题是不是太过笼统，你能不能把它改的更具体？&lt;/li>
&lt;li>你描述的是客观问题现象吗？还是你的主观判断或某种主观愿望？它是否是：
&lt;ul>
&lt;li>可观测的&lt;/li>
&lt;li>可证伪的&lt;/li>
&lt;li>容易和利益相关方达成共识的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>如何增强做事的动机</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%BA%E5%81%9A%E4%BA%8B%E7%9A%84%E5%8A%A8%E6%9C%BA/</link><pubDate>Sun, 30 Jan 2022 14:33:12 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%BA%E5%81%9A%E4%BA%8B%E7%9A%84%E5%8A%A8%E6%9C%BA/</guid><description>&lt;p>动机是一种强大的情感激励因素&lt;/p>
&lt;p>动机=动力=自驱力=自我驱动力&lt;/p>
&lt;p>动机=好奇心+激情+目标+自主性+掌控感。&lt;/p>
&lt;h1 id="自主的动机才是真动机">自主的动机才是真动机&lt;/h1>
&lt;p>自主性是对追求你的激情和目的所需的渴望。&lt;/p>
&lt;p>这种渴望的动机分为外在动机和内在动机，外在动机是你必须要做的工作，内在动机又称为自主动机，有研究发现，任何情况下，自主动机都会扼杀外在动机。自主动机是一种更强大的动力&lt;/p>
&lt;h1 id="好奇心激情目标是最大化自主性的基础">好奇心、激情、目标是最大化自主性的基础&lt;/h1>
&lt;p>当我们因为&amp;quot;好奇心、激情、目标&amp;quot;而做我们正在做的事情时，我们正在正确地挖掘自主性。换句话说，寻求系统喜欢掌控自己究竟在寻求什么样的资源。这也是为什么我们从好奇心、激情和目标开始探索驱动力的原因。这三重奏建立了兴趣和享受&amp;ndash;通过好奇心和激情，然后通过目标来巩固核心信念和价值观。换句话说，好奇心、激情、目标是最大化自主性的基础。&lt;/p>
&lt;h1 id="自主性将我们变成一个更有效的自己">自主性将我们变成一个更有效的自己&lt;/h1>
&lt;h1 id="工作中增加自主性">工作中增加自主性&lt;/h1>
&lt;p>谷歌用 20%的时间来挖掘这个驱动力，这意味着他们每周给人们 8 个小时的时间来追求一个他们热衷的想法。然而 3M 公司仅用 15%的时间就获得了惊人的成果，也就是每周只有一个下午的时间。&lt;/p>
&lt;p>获得自主性提供的驱动力的提升，你需要自由控制你的睡眠、工作和运动时间表。你还需要自主地定期通过自己选择的活动来追逐心流。&lt;/p>
&lt;p>理想的情况是，你的工作时间将用于促进你的目的的活动，而产生心流的活动类似于冲浪意味着它实际上是工作的休息。&lt;/p>
&lt;p>如果这在你今天的生活中是不可能的，那么就从 3M 计划开始：将 15%的时间用于一个与你的核心激情和目的相一致的项目。15%大约是每周一个下午的时间，不过你可以很容易地把这个时间分成一对两个半小时的区块，得到类似的结果。&lt;/p></description></item><item><title>如何增强掌控感</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%BA%E6%8E%8C%E6%8E%A7%E6%84%9F/</link><pubDate>Sun, 30 Jan 2022 11:56:28 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%BC%BA%E6%8E%8C%E6%8E%A7%E6%84%9F/</guid><description>&lt;h1 id="15的自主时间">15%的自主时间&lt;/h1>
&lt;p>人类最喜欢的就是把小胜利叠加在小胜利之上，再叠加在小胜利之上。在神经化学上，这些胜利会产生多巴胺。&lt;/p>
&lt;p>要想真正驾驭掌控力作为一种动力，就把你生命中为自己划出的 15%的时间&amp;ndash;称之为你的自主时间&amp;ndash;花在推动挑战与技能的平衡上，努力在一些与好奇心、激情和目标一致的事情上做得更好一些。 开始追逐渐进式改进的高境界。迷上进步的多巴胺循环。&lt;/p>
&lt;p>试着让今天更好一点，试着让明天更好一点。然后重复。再重复。&lt;/p>
&lt;h1 id="小成功促进动力">小成功促进动力&lt;/h1>
&lt;p>人是无法欺骗自己的下意识的。&lt;/p>
&lt;p>很多时候拖延，不愿意做某件事情，是因为下意识觉得这个东西麻烦枯燥或者非常困难，但如果能够把事情拆解细分，能够理解每个阶段大概会有什么样的期待，什么时候会得到什么奖励，一旦理解通了，马上行动的动力就会强大很多。&lt;/p>
&lt;p>所以缺乏行动力，很多时候本质还是来源于大脑对细节一无所知，缺乏一个相对细化的理解和期待。这时候不应当着急蛮干，而应当先尽量获取更多信息，获得对短期更加清晰的期待值，这样才能激励自己动起来。&lt;/p>
&lt;p>如果不能集中注意力做自己有兴趣的事情，稍微松散下来，非理性大脑的一些负面情绪或者思考会偷偷的涌现到台前。这种负面情绪有它的平衡作用，但是负面情绪太多了，会降低人的内在动力，时间长了形成恶性循环，甚至出现忧郁情绪。所以不断寻找可以激发自己兴趣的事情去做，是提高生活质量的重要议题。&lt;/p>
&lt;p>这就是《The Motivation Myth 动力神话》一书里的核心观点：小成功形成动力，动力促成更大的成功，这就是一个正反馈连锁反应。一般的改变思想和信念都是不可靠的。&lt;/p>
&lt;p>所以把自己打造成一个多面手，更容易找到局部小成功，而给自己新的动力继续前进。从事非常狭隘的单一工作，容易卡壳，长期缺乏正反馈而气馁，或因太枯燥而没事找事弄得更糟（股市频繁交易）。&lt;/p></description></item><item><title>抱怨</title><link>https://example.com/p/%E6%8A%B1%E6%80%A8/</link><pubDate>Sun, 30 Jan 2022 11:32:47 +0800</pubDate><guid>https://example.com/p/%E6%8A%B1%E6%80%A8/</guid><description>&lt;p>对问题或困境的无能为力，对他人有所渴求和寄托，期望他人帮助解决问题。同时，渴望别人读懂自己，亲近自己。&lt;/p>
&lt;p>抱怨，其实是“要抱抱”。抱怨还经常伴有轻微的愤怒和对他人的攻击。不爱抱怨的人，在面对挫折和无法解决的问题时，他们能对自己的无能为力加以接纳，能明确地感知道自己哪些方面是有价值的，哪些方面是没有价值的，不需要求诸于他人的肯定和理解。&lt;/p>
&lt;p>抱怨传递的信号是，将太多个人的价值需求寄托到了别人身上，没有试图去寻找自己应对问题的策略，需要加强个人解决问题的行动力和个人价值感。（说白了，人还是得靠自己呀！）&lt;/p></description></item><item><title>嫉妒</title><link>https://example.com/p/%E5%AB%89%E5%A6%92/</link><pubDate>Sun, 30 Jan 2022 11:32:43 +0800</pubDate><guid>https://example.com/p/%E5%AB%89%E5%A6%92/</guid><description>&lt;p>嫉妒是，你有而我没有，让我觉得自己很没有价值。&lt;/p>
&lt;p>自我价值感越完善，嫉妒出现的概率越低，也不倾向于通过和他人比较，来填补自己的价值感。如果倾向于总是和别人比较，本质原因是自我意识与他人分化不够，自我边界不清晰，而大部分人的自我意识都不是很完善，我们与他人之间的分化做得并不好，因为分化不够，导致我们经常与他人发生混淆。&lt;/p>
&lt;p>嫉妒情绪其实是自我评定系统出了问题，对自己没有客观的认识，不能准确地提炼出自我需求和自我意识，当我们有一条自己坚信的自我价值实现的道路，我们也就无需嫉妒他人。嫉妒可以升华为羡慕和崇拜，这是建设性的积极的转化。通过羡慕和崇拜他人，促使我们向他人学习，实现自我价值的提升。&lt;/p>
&lt;p>嫉妒情绪提醒我们，混淆了自己与他人的边界，应该试图去建立自己独特的价值感，将自己与他人区别开。&lt;/p></description></item><item><title>愤怒</title><link>https://example.com/p/%E6%84%A4%E6%80%92/</link><pubDate>Sun, 30 Jan 2022 11:32:38 +0800</pubDate><guid>https://example.com/p/%E6%84%A4%E6%80%92/</guid><description>&lt;p>一种具有强烈刺激性的情绪，由刺激事件引发了心理上极度的挫折感，体现在价值感和安全感都丧失了，引发了强烈的不满，进而让人爆发出反抗他人的本能反应。（有一句话，愤怒的背后是虚弱。）&lt;/p>
&lt;p>愤怒会让人暂时失去理智。&lt;/p>
&lt;p>愤怒情绪表现为：强烈的对外攻击性、破坏性、伴随有肢体语言，行为突然失控，瞬间失去理智，有时还有对内的攻击性。愤怒的对内攻击可以理解为自我伤害，是把对外的愤怒转化为对自己的愤怒，通过自我攻击自我伤害来达到伤害对方的效果。&lt;/p>
&lt;p>愤怒的核心是「恐惧情绪的蔓延」，意图用一种转变爆发的方式来释放恐惧情绪，出于对安全感被伤害的保护。&lt;/p>
&lt;p>愤怒情绪告诉我们：面对当前的问题的力量是不足的。我们的力量不足以支撑我们的自尊和自信，需要调动体内更大的力量来应对问题。&lt;/p>
&lt;blockquote>
&lt;p>易激惹状态：
人在爆发前的状态，表现是一点小事就情绪激动了，提示的信号是，你的情绪容量已经满了，急需释放一些情绪，并且尽量不要再受到刺激。情绪爆发也是一种情绪释放的方式，但杀伤力有点大，不是最好的方式。检视一下自己内在的情绪都有什么，然后一一将其用正常的渠道、杀伤力小一点的方式排遣掉。&lt;/p>
&lt;/blockquote>
&lt;p>提前觉察自己的情绪临界点，当达到易激惹状态之后迅速寻找办法解决，不让自己失去理智地爆发。当然，更好的方式是再提前一点，不要让自己发展到易激惹状态。&lt;/p></description></item><item><title>恐惧</title><link>https://example.com/p/%E6%81%90%E6%83%A7/</link><pubDate>Sun, 30 Jan 2022 11:32:32 +0800</pubDate><guid>https://example.com/p/%E6%81%90%E6%83%A7/</guid><description>&lt;blockquote>
&lt;p>恐惧的本质是自我安全感受到了威胁，而理性脑无法解决这种威胁，于是代之以情绪的方法来应对。&lt;/p>
&lt;/blockquote>
&lt;p>恐惧的根源是人的失策或失能，人在面对一种状况时失去了应对的策略和能力，这种失策和失能让人的焦虑情绪无法化解，进而演变成或逃避或攻击的行为（逃避，也是一种“攻击”）。通过攻击，人们能够营造一种臆想中强大的自己来获得自己内心的安全感。（此处@经常发脾气的同学，该做觉察和反思了）&lt;/p>
&lt;p>恐惧带给我们的信息是，你当前解决问题的资源、力量或策略是不够的，你需要组织资源，调整策略、调动力量来重新解决问题。&lt;/p>
&lt;p>承认自己的害怕和需要帮助，其实是一种强大的表现，不丢人。&lt;/p></description></item><item><title>抑郁</title><link>https://example.com/p/%E6%8A%91%E9%83%81/</link><pubDate>Sun, 30 Jan 2022 11:28:47 +0800</pubDate><guid>https://example.com/p/%E6%8A%91%E9%83%81/</guid><description>&lt;blockquote>
&lt;p>抑郁情绪是在对现实毫无对策的时候出现的，它在提醒我们当前解决问题的策略是无效的，我们需要寻找另外一种有效的应对策略。&lt;/p>
&lt;/blockquote>
&lt;p>抑郁产生的模式是，我们付出努力了➡️对事情的期待没有得到满足、产生失落➡️失落无法排遣，产生一种无助➡️无助给自己内心带来冲击，产生自我怀疑和自我抛弃➡️最终认定自身没价值，努力没有价值，事情没有价值，一切都没有价值，陷入抑郁。&lt;/p>
&lt;p>抑郁的核心是价值感和意义感的缺失。&lt;/p>
&lt;p>抑郁的表现：认知消极（“这都什么玩意儿”），情绪低落（“没意思，一切都没意思”），意志力减退，对任务的启动困难（思维迟钝），记忆力和判断力减退，自我隔离。&lt;/p>
&lt;p>抑郁传递的信息：你当前正面对着严重的问题，而且，你解决问题的方法是无效的❌。你必须更换解决问题的策略，尤其是正视问题的存在，并迫使自己更加灵活地面对问题。（通常固执的人更容易抑郁，而思维比较灵活的人，即使抑郁了，也容易走出来。让自己不再那么“刚”，弹性一点。）&lt;/p>
&lt;p>抑郁的易感性和自恋水平也有一定的关系，如果我们放低一点“自恋水平”，就更不容易被挫败，保持对世界、对自我清晰准确的评估和认识，能够让我们不那么容易抑郁。从精神分析角度，“抑郁”和“超我”太过于强大有关，一个强大的“超我”总在告诉我们“你应该怎样怎样”，不停地向内攻击，所以，如果现在有感觉到抑郁的朋友，对自己好一些，停止评价和攻击自己。同时，尝试用“多元价值体系”来看一看自己，我们的价值不仅仅体现在一件事情上，不要过度放大一件事情对于我们的价值。&lt;/p>
&lt;p>如果你觉得抑郁让你很难受了，请及时就医检查。&lt;/p>
&lt;p>对了，人如果一直在发挥“功能”而不得休息，也会引发抑郁，所以一定要让自己有什么都不图、不发挥功能、让自己作为一个人恢复的时间。&lt;/p></description></item><item><title>焦虑</title><link>https://example.com/p/%E7%84%A6%E8%99%91/</link><pubDate>Sun, 30 Jan 2022 11:25:21 +0800</pubDate><guid>https://example.com/p/%E7%84%A6%E8%99%91/</guid><description>&lt;blockquote>
&lt;p>焦虑来自个体努力追求生存，以及维持和肯定自我存在、安全感和价值感的过程，焦虑感是人生中不可避免的问题。&lt;/p>
&lt;/blockquote>
&lt;p>焦虑是我们的大脑对抗潜在危机的积极行为，是一种自我保护机制，当你感觉到自我的价值受到质疑，或者感觉到不安时大脑就会启动这个机制，让我们表现出焦虑不安。&lt;/p>
&lt;p>焦虑情绪可以分为 3 类：存在性焦虑，目标缺失的焦虑，有明确指向的焦虑。&lt;/p>
&lt;ol>
&lt;li>存在性焦虑：我们每个人都有链接别人、影响别人、保持影响力的需求（精神分析中有一句话，自我是存在于关系之中的），如果这些需求得不到满足，我们个人存在的价值就会被削弱（感受不到自己的存在），就会产生焦虑，例如孤独焦虑，价值焦虑，只要是人，或多或少都有存在性焦虑，存在性焦虑无法根除，只要不是特别顽固地挥之不去，也不会对人造成多大伤害。&lt;/li>
&lt;/ol>
&lt;p>如果你觉得你现在有比较严重的存在性焦虑，可能能缓解的方式是做一些能让你感受到自己存在的事情，e.g. 去爱，去工作，去寻找你的目标，去发展你的爱好，去大自然里待着，感受阳光照在你身上，去写作，去和别人闲聊，当然，也可以训练自己什么都不干，就好好地和自己待着。&lt;/p>
&lt;ol start="2">
&lt;li>目标缺失的焦虑：不知道自己因为什么而焦虑，弥漫性焦虑，精力很难集中，感觉身心疲惫，不知道自己每天应该干什么，焦虑从一个点，一个时间段弥漫到整个生活，这种焦虑是目标缺失导致的。提醒我们需要为自己寻找一个目标，它就像一个信号，告诉你“你得干点什么了”，当你成功捕捉到这个信号，并试着用自己的方式去解决它之后，焦虑也会缓解。当你为自己找到一个目标并真的踏踏实实去做一些事情之后，会感到身心无比轻松。&lt;/li>
&lt;/ol>
&lt;p>另外，如果我们现在虽然有短期要做的目标，但如果这种目标和我们的长期目标不匹配，也会引起焦虑。比如，每天工作忙忙碌碌，但依然焦虑，其实可能反映出我们长期目标的缺失（在潜意识中对未来没有安全感&lt;/p>
&lt;ol start="3">
&lt;li>有明确指向的焦虑（现实性焦虑）：因为某件事情引起，恐惧事情带来的后果，例如该做的事情还没有做，考试焦虑（害怕考砸），“双月焦虑”，来到新环境的焦虑等。有明确指向的焦虑其实指向的是恐惧，大多数恐惧情绪也是伴随焦虑出现的。焦虑水平与现实威胁的程度成正比。&lt;/li>
&lt;/ol>
&lt;p>解决这类焦虑的方法，要么逃跑，要么战斗——「降低对目标对象的重视程度和期待」和「提升自己掌握目标的能力。」说大白话，要么我们经过权衡思考之后，让自己离开压力源，要么和它战斗，心理上告诉自己，这个事情没有你想的那么重要/那么着急，同时找到有效的策略，让自己能够胜任这个事情。&lt;/p>
&lt;blockquote>
&lt;p>总结一下，焦虑作为一种信号：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果它不是由于具体事情引起的，则提醒我们需要为自己寻找目标做点什么了；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果有具体原因，要么选择远离压力源，要么降低对焦虑对象的期待（例如，放低一点对质量的要求、给多一点时间）并提升自己掌握它的能力（分解成可执行的行为并去执行）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>如何更好地理解我们的情绪</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E7%90%86%E8%A7%A3%E6%88%91%E4%BB%AC%E7%9A%84%E6%83%85%E7%BB%AA/</link><pubDate>Sun, 30 Jan 2022 11:14:39 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E7%90%86%E8%A7%A3%E6%88%91%E4%BB%AC%E7%9A%84%E6%83%85%E7%BB%AA/</guid><description>&lt;ol>
&lt;li>
&lt;p>情绪是来帮我们的，是为我们送信号的内在小孩，如果我们看不见它、不搭理它、压抑它、甚至和它对着干，总有一天它会「吃掉我们」（被情绪反噬）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>情绪不是，也不应该被理解为是“坏东西”，提升我们对各种情绪的理解力和耐受力，当情绪来临的时候，别评价它（不用因为有情绪而自责），不用害怕的躲开，也不用着急出来，或者把它一拳打回去，可以陪它待一会儿，和那个情绪下的自己待一会儿，问问 “嘿，你咋啦？”。（这是我们难得的，看见自己和感受自己存在的机会）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我们其实不太能“控制情绪”，已经产生的情绪很难被控制，只能被疏解。我们能选择的，是以何种姿态应对一个事情的发生。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>情绪是我们在受到外部刺激后产生的近乎自动的反应，是一种“症状”和“结果”。有一种解释情绪的 ABC 模型，首先一个诱发事件发生，然后我们怎么看待这个事件的态度/信念，导致我们产生不同的情绪和行为。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201301116673.png"
loading="lazy"
>&lt;/p>
&lt;p>每个人都有各种情绪，它揭示的是我们内心的各种信念。当负面情绪出来的时候，是在提醒我们，“告诉你哦，哪里出了什么问题”，提醒我们有一些重要的事情没有解决、有重要的需求没有被满足，该做思考和检查了。&lt;/p>
&lt;blockquote>
&lt;p>刻意练习时刻&lt;/p>
&lt;p>当你下次有情绪的时候，可以试试“情绪言语话”，就是通过语言，把自己的情绪说出来，句式可以是“发生了什么事情/别人对我做了什么，我感觉到什么，我的哪些需求没有被满足，我很……”&lt;/p>
&lt;p>也可以通过写作，整理表达自己的情绪，在微信公众号“暂停实验室”有提供正念和情绪书写训练营。通过这种刻意的过程，能够帮助我们识别和看见自己的各种感受，在刺激事件和我们的反应之间按下一个暂停键，从而增加对情绪的掌控力，而不是作出自动化的反应。&lt;/p>
&lt;/blockquote>
&lt;p>如果我们能够把情绪的信号解读出来，不但可以平复情绪，还能够对我们当前的行为和状态进行及时的矫正（变成了一个更好的人呢）。如果情绪没有得到照顾和平复，内在自我求救的信号没有被感知到，它就会持续存在下去，甚至会带着我们做出一些失控的行为，即便有时暂时被压抑，也会堆积在我们的心里，或者走向我们的身体（生病）。&lt;/p>
&lt;p>我们做“情绪管理”，并不是要压抑已经出来的情绪，而是要一方面在情绪有苗头的时候就觉察到自己的反应，及时作出调整；或者通过已经出现的情绪，更好地看看在自己身上发生了什么，内心的哪些想法和环境产生冲突了，然后再“修通”一下——调整当前的应对策略，或调整我们的想法，让内心世界与外界不再冲突。&lt;/p>
&lt;blockquote>
&lt;p>“在刺激和反应之间，有一片空间。在那片空间里，我们有自由、有能力选择自己的反应”。&lt;/p>
&lt;/blockquote></description></item><item><title>感受自己的力量</title><link>https://example.com/p/%E6%84%9F%E5%8F%97%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8A%9B%E9%87%8F/</link><pubDate>Sun, 30 Jan 2022 11:10:13 +0800</pubDate><guid>https://example.com/p/%E6%84%9F%E5%8F%97%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8A%9B%E9%87%8F/</guid><description>&lt;blockquote>
&lt;p>萨特说：憎恨的本质就是承认了他人的自由&lt;/p>
&lt;/blockquote>
&lt;p>这句话怎么理解？&lt;/p>
&lt;p>我们羡慕的人，他们自由度太高以至于有合理预期；&lt;/p>
&lt;p>我们嫉妒的人，他们只是稍稍压我们一头；&lt;/p>
&lt;p>而我们恨的人，是那些实力差不多，但因为他们过于自由自在，让我们产生“我不行”的感觉，哲学中，称为“丧失了自我主体性”，翻译成大白话就是“感受不到自己的力量”。&lt;/p>
&lt;p>很多负面的情绪，都来源于我们感受不到自己所蕴含的能量；而你最开心的情绪，也都来源你你感受到了自己的力量：&lt;/p>
&lt;ul>
&lt;li>冥想，让你观察到自己情绪的力量；&lt;/li>
&lt;li>运动，让你感受到自己身体的力量；&lt;/li>
&lt;li>游戏，让你感受到自己使用某个英雄的力量；&lt;/li>
&lt;li>跟朋友唠嗑，让你感受到自己连接他人的力量；&lt;/li>
&lt;li>养娃吸猫，让你感受到自己能够抚养生命的力量；&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>这种力量感，也有人称为掌控感、自由感，需要自己给自己。&lt;/p>
&lt;p>可是，打工人下班后，真的没有力气运动、没有注意力冥想了，这种情况下，需要认认真真反思一下你在工作里的主体性了，如果工作中没有自主权，人们就会有“自己不能做决定，无法做选择”的感觉，这种感觉会减少人们激励自己，从而也减少了锻炼的动机。&lt;/p>
&lt;p>在高压力、没有自主控制权的环境里，人会变得对生活都没有干劲了。&lt;/p>
&lt;p>这是一种很可怕的恶性循环，也是一种很严重的情绪伤害，工作中，要时刻警惕自己珍贵的情绪被破坏，情绪被生理性的破坏，带来的后果还挺严重的。&lt;/p>
&lt;p>记得当你情绪不好的时候，多尝试感受一下下自己的力量。&lt;/p></description></item><item><title>如何通过“三叶草”模型抢救你的工作状态</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%B8%89%E5%8F%B6%E8%8D%89%E6%A8%A1%E5%9E%8B%E6%8A%A2%E6%95%91%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/</link><pubDate>Sun, 30 Jan 2022 10:57:28 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%B8%89%E5%8F%B6%E8%8D%89%E6%A8%A1%E5%9E%8B%E6%8A%A2%E6%95%91%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81/</guid><description>&lt;h1 id="什么是三叶草模型">什么是三叶草模型&lt;/h1>
&lt;p>工作的本质是，通过价值创造完成价值兑现。我们能够进行价值创造的前提是对所从事的工作内容有兴趣，兴趣加上持续的投入，让我们具备完成工作所需要的能力。通过能力创造价值，我们可以获得物质回报和精神回报，这些东西让我们感受到价值感和满足感，从而有更强的兴趣投入到工作中，这样形成一个闭环。&lt;/p>
&lt;p>所以完美的工作应该包含兴趣、能力、价值三个方面。&lt;/p>
&lt;ol>
&lt;li>我们感兴趣的；&lt;/li>
&lt;li>我们有能力胜任的；&lt;/li>
&lt;li>能够回馈给我们价值的，与我们当下所追求的价值观相符的。&lt;/li>
&lt;/ol>
&lt;p>当以上三个方面都获得满足时，我们体验到的是快乐、对工作有热情、有成就感和掌控感、觉得工作有意义、有价值。相反，如果当某一方面得不到满足时，我们会产生负面的体验和情绪。&lt;/p>
&lt;p>三叶草模型，可以通过我们在工作中表现出的情绪状态，来帮助我们进行自我觉察，或者帮助别人判断当下职业发展的状态是什么，哪里存在问题，应该从何处着手解决问题，促进发展。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201301058434.png"
loading="lazy"
>&lt;/p>
&lt;p>不理想的职业状态和典型特征&lt;/p>
&lt;ul>
&lt;li>兴趣缺失：厌倦，易感人群：工作 3 年以上，或同一个岗位工作 2 年以上，已经度过了起步适应阶段，在发展期出现工作倦怠
&lt;ul>
&lt;li>心理反应：厌倦，记忆力下降，反应速度变慢，长时间的厌倦容易演化为抑郁&lt;/li>
&lt;li>身体反应：手脚冰凉，发冷，头疼，注意力涣散，行动速度下降&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>能力缺失：焦虑，易感人群：刚进入职场、刚晋升、刚进入新的岗位、工作挑战大时
&lt;ul>
&lt;li>心理反应：易怒，暴躁，说话声音快，容易情绪激动&lt;/li>
&lt;li>身体反应：失眠，发烧，胃病，头疼&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>价值缺失：失落，易感人群：工作得不到回报和认可时、所做事情与自己的价值观发生冲突时
&lt;ul>
&lt;li>心理反应：短期会有抱怨和愤怒的表现，工作没动力&lt;/li>
&lt;li>身体反应：行动速度下降&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="如何使用">如何使用&lt;/h1>
&lt;p>当我们自己或者其他人陷入到不理想的工作状态中，找到我们寻求帮助时，可以通过以下步骤来识别问题并作出努力改善。&lt;/p>
&lt;h2 id="步骤-1状态评估">步骤 1：状态评估&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>对于工作状态看起来比较好的人可以这样提问：“你觉得现在的工作状态对你来说，在新鲜感、掌控感和满足感方面分别可以打多少分（1-10 分）？可以根据你自己的真实感受，在这三方面打个分。”&lt;/p>
&lt;ul>
&lt;li>感到工作新鲜、快乐有趣；&lt;/li>
&lt;li>对工作有掌控感，能体验到成就感；&lt;/li>
&lt;li>工作给你带来满足感和幸福感；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>对于工作状态看起来不好的人可以这样提问：“情绪可以反映我们在工作中面临的问题，我们可以通过情绪的自评，了解我们工作中的主要问题在哪里，可以根据你现在的真实感受，在以下三个情绪方面分别打个分（1-10 分）。”&lt;/p>
&lt;ul>
&lt;li>对工作感到厌倦、提不起来兴趣；&lt;/li>
&lt;li>对工作感到焦虑、缺少掌控感、经常感到不安；&lt;/li>
&lt;li>对工作感到失落、缺少价值感；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>典型打分组合&amp;amp;状态判断&lt;/p>
&lt;ul>
&lt;li>兴趣高，能力低，价值还可以：处于起步发展期，因为兴趣是在的，意味着愿意持续地投入和学习，未来仍有较大发展空间，当下需要重点做的是关注能力的提升。&lt;/li>
&lt;li>兴趣低，但是能力和价值回报相对高：处于平台期，很多职场老员工会有这样的感觉，兴趣一般，但是能 hold 住当前的工作，价值回报也不错，通常这个时候员工短期会相对稳定，因为工作中能够拿到自己想要的价值，因此暂时不会有变化，但因为对工作已经产生了倦怠的感觉，职业发展会陷入一段停滞的阶段，未来的上升和成长会相对受限制，需要撬动新的兴趣和价值增长点，才能进阶到新的阶段。&lt;/li>
&lt;li>兴趣高，能力也还可以，但价值低：虽然对工作有兴趣也能胜任，但得到的价值无法令自己满足或者说与自己内心真实想要的有一定差距，这个价值不一定指物质回报，也指精神和心理需求上的满足，比如是否有意义感，是否被认可，是否能够体验到自己想要的人际关系。这个时候通常需要澄清下自己想要的价值是什么，然后再根据自己想要的价值尝试转换方向，或者在原有的工作上链接、撬动更多价值。&lt;/li>
&lt;/ul>
&lt;p>划重点：
好的职业生涯是能够持续不断地找到兴趣、提升能力、兑换价值，通常 2-3 年是一个循环，然后既有事情对我们的吸引力会下降，这是客观规律，我们要不断找到新的事情、新的兴趣点和价值增长点，让每个阶段积累和修炼的能力都是在为下个阶段铺路。这个过程是我们不断反思自己、并且和周围环境互动、并且在互动中持续调适自己的过程。&lt;/p>
&lt;h2 id="步骤-2探讨和反思">步骤 2：探讨和反思&lt;/h2>
&lt;p>在完成步骤 1 的打分以后，我们可以对照分数来分析现状，并思考能够带来积极改变的关键驱动因素，可以问自己/问对方的问题：&lt;/p>
&lt;ul>
&lt;li>为什么是这样的分数？&lt;/li>
&lt;li>到底什么地方让你觉得不够舒服？&lt;/li>
&lt;li>觉得自己在哪些方面可以提升？&lt;/li>
&lt;li>有没有哪个部分，如果一旦它提升，就能给你带来全局提升呢？&lt;/li>
&lt;li>环境中有哪些资源是自己可以利用的？&lt;/li>
&lt;/ul>
&lt;h2 id="步骤-3提出改善策略">步骤 3：提出改善策略&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>如果是兴趣不足：兴趣其实不取决于外在，而是一种自我管理的能力，兴趣反映的是我们对一件事情的“认知”，而我们如何“认知”一件事情，是可以被改变的。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>“挖掘”工作中的兴趣点：所有工作都可以发展出兴趣点，关键是找到我们个人的价值观和当前环境以及当前工作可以链接的部分，兴趣都是可以挖掘和培养的。通过刻意练习，我们能够培养自己从一件事情中找到乐趣的能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给自己提出更高、更快、更强、更深、更广的要求：当把现有工作的标准提高时，有时会激发出我们新的挑战欲望和兴趣。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>向有能力的兴趣领域进行规划：升职、转岗。转型不是一蹴而就的，需要持续地积累和有目的地进行规划。如果确定当前领域不是自己感兴趣的，可以评估一下哪些是自己感兴趣并且具备胜任力的，然后再去设计和规划自己的转型路径，同时重点看一下，有哪些方式，可以让自己的能力在当前的工作中得到积累和训练，或者在当前工作中能够积累哪些资源，让自己可以更顺利地过渡到下一个阶段。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果是能力不足：适当调整预期，正确使用能力管理策略&lt;/p>
&lt;ul>
&lt;li>适当调整预期：合理评估自己的能力和资源，适当调整工作目标，避免完美主义倾向。&lt;/li>
&lt;li>评估自己当下能力的边界，对于超出能力范围的事情，寻求别人的帮助，能够寻求帮助，也是职场中一项关键的能力，这样可以避免自己出现压力爆棚，同时也不至于把事情搞砸。&lt;/li>
&lt;li>使用正确的能力管理策略（这点非常非常非常关键）。
&lt;ul>
&lt;li>人的成长是线性缓慢的，而有时候事情的难度会超出我们当下的能力水平，因此焦虑和危机感就会产生。这时候最笨的方式就是一个人企图通过个人的学习和努力来解决问题，也就是做加法，这种会让自己陷入“疲于应付”、“事情越做越多”、“越来越忙”的状态，因为能力提升的速度和解决问题的速度跟不上要求，导致不断产生更多的问题，问题越积越多，自己的状态也越来越差。&lt;/li>
&lt;li>最好的能力管理策略是：减-乘-除-加
&lt;ul>
&lt;li>先做减法，看哪些事情其实是可以不用做的，或者可以授权其他人来做的，给自己留出更多时间去做高杠杆的思考和规划，让自己从旋转的陀螺状态先抽身出来。&lt;/li>
&lt;li>再做乘法，面对我们靠自己无力解决的事情，引入更多的人进来，利用集体的智慧和资源解决问题，而不是让自己成为增长的瓶颈。&lt;/li>
&lt;li>再做除法，根据要完成的目标，进行事情的分解，找到合适的人去做具体的事情。&lt;/li>
&lt;li>最后才是做加法，不断学习和提升各种知识和技能，让自己的经验和能力提升上来，这是需要时间的积累的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果是价值不足：重新审视现有工作的价值，同时链接更多价值&lt;/p>
&lt;ul>
&lt;li>列出自己当下阶段最希望在工作中拿到的价值，是物质回报、精神认可、是学习的机会、还是链接更多的社会资源？&lt;/li>
&lt;li>思考现有工作如何能够产生、链接、或者说撬动更多价值；身边总是有足够的机会让我们去实现自己的价值。&lt;/li>
&lt;li>换不同的视角、角度看事情的价值，有时候其实我们的核心价值已经被满足了，但人往往容易高估暂时未被满足的价值，同时忽略和低估已经满足的价值。通过重新评估和理解一份工作的价值，我们会看到已经被满足的价值。&lt;/li>
&lt;li>在更大的时间框架内评估现有工作的价值，人们经常仅在一个较短的时间框架内评价事情的价值，而忽略长期价值。我们除了看静态的当下的价值，也要看未来的价值变化趋势。&lt;/li>
&lt;li>探索转换工作的可能性：如果经过以上方面的努力，仍然认为工作价值不是自己想要的，可以努力晋升到下一阶段的岗位，或转岗到其他工作上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如果是三方面都欠缺：挖掘兴趣、利用现有机会和平台提升能力&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>具体说，有两个建议：&lt;/p>
&lt;ul>
&lt;li>挖掘自己的兴趣点：优先从我们自身最容易影响的部分开始操作，也就是管理自己的兴趣点，提升自己发现兴趣的能力，可以多想想自己在做哪些事情的时候最快乐，现在的工作有没有哪些方面能让我们有快乐的体验。&lt;/li>
&lt;li>同时关注能力提升：在“三叶草”模型中，只有具备了能力我们才能兑换价值，而价值又可以促进我们对一件事情产生兴趣，因此先提升能力，并且通过能力链接价值，也是改变的关键。幸运的是，在职业发展过程中，对我们影响最大的其实是一些通用能力，比如沟通能力、分析问题本质的能力、表达和输出观点的能力、影响别人的能力、项目管理能力等等，而这些能力的修炼和培养是不分岗位和职业的，因此如果在兴趣、能力、价值都缺失、我们自身尚且不具备选择资格和议价能力的时候，最好的选择恰恰是专心于目前已有的机会，看看在当前的岗位上如何提升自己的能力，从而为以后更好地铺路。这是对很多职场新人的建议。&lt;/li>
&lt;/ul>
&lt;h1 id="何时用">何时用&lt;/h1>
&lt;p>哪些时候可以利用“三叶草”模型展开谈话呢？不妨从以下场景入手，相同的目标都是挖掘个人真实的感受和状态，挖掘内在动机，找到改善的突破口：&lt;/p>
&lt;ul>
&lt;li>绩效沟通&lt;/li>
&lt;li>转岗谈话&lt;/li>
&lt;li>离职挽留&lt;/li>
&lt;li>日常定期 1-on-1&lt;/li>
&lt;li>员工调研结束后的深度个人访谈&lt;/li>
&lt;li>不定期个人检查和回顾反思&lt;/li>
&lt;/ul>
&lt;h1 id="启发">启发&lt;/h1>
&lt;p>对个人的启发：&lt;/p>
&lt;ul>
&lt;li>职业定位要结合兴趣和能力，只有兴趣没能力顶多是爱好，有能力但没有兴趣也不可持续发展&lt;/li>
&lt;li>做未来 2 年左右的发展规划，最好 2-3 年上一个台阶，开启下一轮循环&lt;/li>
&lt;li>培养从积极的视角构建事情价值的能力，拥有一双善于发现美的眼睛
对管理者的启发：&lt;/li>
&lt;li>鼓励老员工做新事，老人带新业务&lt;/li>
&lt;li>不同的人、或者同一个人在不同阶段，所追求的价值是不一样的，要善于通过挖掘工作和个人价值重合的部分，提升工作动力&lt;/li>
&lt;li>除了物质回报，也要建设“精神回报”，如认可、积极健康的团队氛围、业务的长期价值和社会价值、岗位能提供的潜在资源和成长机会&lt;/li>
&lt;/ul></description></item><item><title>成长的本质是潜力兑现的过程</title><link>https://example.com/p/%E6%88%90%E9%95%BF%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E6%BD%9C%E5%8A%9B%E5%85%91%E7%8E%B0%E7%9A%84%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 29 Jan 2022 15:38:05 +0800</pubDate><guid>https://example.com/p/%E6%88%90%E9%95%BF%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E6%BD%9C%E5%8A%9B%E5%85%91%E7%8E%B0%E7%9A%84%E8%BF%87%E7%A8%8B/</guid><description>&lt;h1 id="成长的本质是潜力兑现的过程">成长的本质是潜力兑现的过程&lt;/h1>
&lt;p>任何人都有潜力，潜力有高有低，有大有小。&lt;/p>
&lt;p>潜力是很大，每个人都有很大的潜力，只是大部分人还没有达到自己潜力兑现的下限，更别说上限。&lt;/p>
&lt;h1 id="软素质">软素质&lt;/h1>
&lt;p>软素质分为三类：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>一类是态度&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>它很多时候是意识的体现，比如主动性、责任心、坦诚、追求极致，这些本质上都是是一个态度。&lt;/p>
&lt;ol start="2">
&lt;li>&lt;strong>第二个是特质&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>特质是每个人的性格特点，有些可以改变的，有些是比较固化的。这个人是乐观还是悲观，有韧性，还是有野心还是相对佛一点，是不是聪明等。&lt;/p>
&lt;p>其实特质没有好和坏，每个人都有自己擅长的地方和自己不擅长的地方，主要看自己能否清醒认识到。&lt;/p>
&lt;ol start="3">
&lt;li>&lt;strong>最后是能力&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>能力是学习能力技术判断力沟通表达能力，这些可以通过训练提高的。&lt;/p>
&lt;h1 id="软素质决定我们的上下限">软素质决定我们的上下限&lt;/h1>
&lt;p>下限，意思就是说潜力最少可以兑现出来的东西；上限是理论的最高值，也就是我们常说的天花板。&lt;/p>
&lt;p>我们的软素质，有些决定下限有些决定上限。我们要清醒的意识到所谓的软素质的东西，哪些是基础决定下限要保证好，哪些是上限的东西要挖掘好。&lt;/p>
&lt;h2 id="下限的软素质">下限的软素质&lt;/h2>
&lt;p>正直、诚信和责任心强。&lt;/p>
&lt;p>走正道而不走偏门，守正初心，扎扎实实把事情做好；责任心强，交给你的事情是不是努力做好，足够自律。能做到上述几点，潜力兑现基本没有问题。另外还有偏特质一些的聪明和热爱技术，能不能通过主动积极有责任心，并且用正确非投机的方式把事情做好。&lt;/p>
&lt;p>如果都扎扎实实的做好，下限都是比较高的。&lt;/p>
&lt;h2 id="上限的软素质">上限的软素质&lt;/h2>
&lt;ol>
&lt;li>第一个追求极致。&lt;/li>
&lt;/ol>
&lt;p>这句话提起来很简单，做起来很难很难，我们能不能突破天花板，就是追求极致。但极致不等于完美，不等于过度设计。极致是在当前有限情况下你是不是努力把这件事想得更好，还有没有做到更好的地方，努力想优化空间在哪里，。&lt;/p>
&lt;p>哪个阶段做哪个事情收益是最高的，短期中期长期各自的解释是什么，怎么平衡好，去努力判断当前更优解是什么。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>第二，主动积极。这句话听起来很简单，实际过程中主动积极有野心的人和相对佛的人，最终你会发现时间拉长一点，大家发展区别会非常大。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>剩下就是好奇心有韧性独立思考开放清晰，对成功的渴望，关注长期格局这些都是上限。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Flutter 地理位置插件使用指南</title><link>https://example.com/p/flutter-%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link><pubDate>Thu, 27 Jan 2022 10:09:20 +0800</pubDate><guid>https://example.com/p/flutter-%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid><description>&lt;p>geolocator 是一个 flutter 的地理位置插件，同时支持 Android、iOS、web 和 macos。&lt;/p>
&lt;h1 id="安装">安装&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">flutter pub add geolocator
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="使用方式">使用方式&lt;/h1>
&lt;p>定义一个基础的骨架&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">NewGeoRoute&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">NewGeoRouteState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">NewGeoRouteState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">NewGeoRoute&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">String&lt;/span> &lt;span class="n">_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Position&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">_determinLocation&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kd">async&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">initState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">initState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_determinLocation&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">appBar:&lt;/span> &lt;span class="n">AppBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">title:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;地理位置演示&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">body:&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">child:&lt;/span> &lt;span class="n">Column&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">children:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_pos&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">CircularProgressIndicator&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;当前位置是：&lt;/span>&lt;span class="si">$&lt;/span>&lt;span class="n">_pos&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">floatingActionButton:&lt;/span> &lt;span class="n">FloatingActionButton&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">onPressed:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="kd">async&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="n">local&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">await&lt;/span> &lt;span class="n">_determinLocation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">local&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">child:&lt;/span> &lt;span class="kd">const&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">location_city&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="使用方式-1">使用方式&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="s1">&amp;#39;package:geolocator/geolocator.dart&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Position&lt;/span> &lt;span class="n">position&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">await&lt;/span> &lt;span class="n">Geolocator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getCurrentPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">desiredAccuracy:&lt;/span> &lt;span class="n">LocationAccuracy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">high&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本次针对 ios，需要添加 plist 描述：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;key&amp;gt;NSLocationWhenInUseUsageDescription&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;string&amp;gt;This app needs access to location when open.&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;key&amp;gt;NSLocationAlwaysUsageDescription&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;string&amp;gt;This app needs access to location when in the background.&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201271017300.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="xcode-打开">XCODE 打开&lt;/h1></description></item><item><title>Flutter WeChat Camera Picker 使用</title><link>https://example.com/p/flutter-wechat-camera-picker-%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 25 Jan 2022 10:36:39 +0800</pubDate><guid>https://example.com/p/flutter-wechat-camera-picker-%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="flutter-wechat-camera-picker">Flutter WeChat Camera Picker&lt;/h1>
&lt;p>仿微信资源选择器 的扩展。 基于 camera 实现相机相关功能，photo_manager 实现资源相关内容。&lt;/p>
&lt;p>&lt;a class="link" href="https://pub.flutter-io.cn/packages/wechat_camera_picker/example" target="_blank" rel="noopener"
>https://pub.flutter-io.cn/packages/wechat_camera_picker/example&lt;/a>&lt;/p>
&lt;h1 id="引入包">引入包&lt;/h1>
&lt;p>在 &lt;code>pubspec.yaml&lt;/code> 中引入依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wechat_camera_picker: any
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="代码-demo">代码 demo&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dart" data-lang="dart">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">NewPictureRoute&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">StatefulWidget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">StatefulWidget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">createState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO: implement createState
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">NewPictureRouteState&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">NewPictureRouteState&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">NewPictureRoute&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AssetEntity&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">entity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Uint8List&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Future&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kd">async&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">final&lt;/span> &lt;span class="n">Size&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MediaQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">final&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">scale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">MediaQuery&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">devicePixelRatio&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">final&lt;/span> &lt;span class="n">AssetEntity&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">_entity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">await&lt;/span> &lt;span class="n">CameraPicker&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">pickFromCamera&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">enableRecording:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">_entity&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">entity&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">_entity&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_entity&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mounted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">{});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">await&lt;/span> &lt;span class="n">_entity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">thumbDataWithSize&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">width&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">scale&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">height&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">scale&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mounted&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">{});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rethrow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">@&lt;/span>&lt;span class="n">override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Widget&lt;/span> &lt;span class="n">build&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BuildContext&lt;/span> &lt;span class="n">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// TODO: implement build
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">Scaffold&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">appBar:&lt;/span> &lt;span class="n">AppBar&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">title:&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;摄像演示demo&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">body:&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">children:&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Widget&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Positioned&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">Image&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nl">fit:&lt;/span> &lt;span class="n">BoxFit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">contain&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">data&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">const&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">CircularProgressIndicator&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">const&lt;/span> &lt;span class="n">Center&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nl">child:&lt;/span> &lt;span class="n">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Click the button to start picking.&amp;#39;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">floatingActionButton:&lt;/span> &lt;span class="n">FloatingActionButton&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">onPressed:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">tooltip:&lt;/span> &lt;span class="s2">&amp;#34;拍照&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">child:&lt;/span> &lt;span class="n">Icon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Icons&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">camera&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="修改-ios-相关配置">修改 ios 相关配置&lt;/h1>
&lt;h2 id="修改-podfile">修改 podfile&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">platform :ios, &amp;#39;9.0&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201251042481.png"
loading="lazy"
>&lt;/p>
&lt;p>也就是打开这个配置。&lt;/p>
&lt;p>然后 cd 到 ios 文件夹内，执行 &lt;code>pod update&lt;/code> 即可。&lt;/p>
&lt;h2 id="修改-plist">修改 plist&lt;/h2>
&lt;p>进入到 &lt;code>ios/Runner&lt;/code>文件夹下，修改 info.plist&lt;/p>
&lt;ol>
&lt;li>添加访问 asset 相关的配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-zed" data-lang="zed">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">NSAppTransportSecurity&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">dict&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">NSAllowsArbitraryLoads&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nn">true/&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">dict&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">NSPhotoLibraryUsageDescription&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">Replace&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">with&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">your&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">permission&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>添加访问 camera 相关的配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;Can I use the camera please?&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;key&amp;gt;NSMicrophoneUsageDescription&amp;lt;/key&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;string&amp;gt;Can I use the mic please?&amp;lt;/string&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201251045591.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="在-xcode-内运行">在 xcode 内运行&lt;/h1>
&lt;p>然后就可以在自己手机上使用了。&lt;/p></description></item><item><title>Flutter 常用工具</title><link>https://example.com/p/flutter-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 24 Jan 2022 20:31:03 +0800</pubDate><guid>https://example.com/p/flutter-%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid><description>&lt;p>摄像： &lt;a class="link" href="https://pub.flutter-io.cn/packages/wechat_camera_picker" target="_blank" rel="noopener"
>https://pub.flutter-io.cn/packages/wechat_camera_picker&lt;/a>&lt;/p>
&lt;p>录音： &lt;a class="link" href="https://pub.flutter-io.cn/packages/flutter_sound_lite" target="_blank" rel="noopener"
>https://pub.flutter-io.cn/packages/flutter_sound_lite&lt;/a>&lt;/p>
&lt;p>定位： &lt;a class="link" href="https://pub.flutter-io.cn/packages/geolocator" target="_blank" rel="noopener"
>https://pub.flutter-io.cn/packages/geolocator&lt;/a>&lt;/p>
&lt;p>很多用起来比原生还简单方便很多，而且还不用写两份代码&lt;/p></description></item><item><title>Flutter 常见问题记录</title><link>https://example.com/p/flutter-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 24 Jan 2022 10:52:44 +0800</pubDate><guid>https://example.com/p/flutter-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid><description>&lt;h1 id="第一个问题">第一个问题&lt;/h1>
&lt;blockquote>
&lt;p>Cannot run with sound null safety because dependencies don&amp;rsquo;t support null safety&lt;/p>
&lt;/blockquote>
&lt;p>First, you should read through the guide to understand unsound null safety. If you are sure that you want to run your application with unsound null safety, you can use the following command:&lt;/p>
&lt;p>flutter run &amp;ndash;no-sound-null-safety&lt;/p>
&lt;p>The &amp;ndash;no-sound-null-safety option is not documented in the article, however, I have not experienced any problems with it for the last few months (and especially not since the whole Flutter framework has been migrated to null safety).&lt;/p>
&lt;p>The documentation has now been updated to include this. See Testing or running mixed-version programs.&lt;/p>
&lt;p>IDE run arguments/configuration
To set this up in your IDE of choice, you can use:&lt;/p>
&lt;p>In IntelliJ/Android Studio: &amp;ldquo;Edit Configurations&amp;rdquo; (in your run configurations) → &amp;ldquo;Additional run args&amp;rdquo;.
In Visual Studio Code: search for &amp;ldquo;Flutter run additional args&amp;rdquo; in your user settings.
In both cases, add &amp;ndash;no-sound-null-safety.&lt;/p>
&lt;p>Test configuration
For tests, you will want to do the same thing:&lt;/p>
&lt;p>In IntelliJ/Android Studio: &amp;ldquo;Edit Configurations&amp;rdquo; (in your run configurations) → &amp;ldquo;Additional args&amp;rdquo;.
In Visual Studio Code: search for &amp;ldquo;Flutter test additional args&amp;rdquo; in your user settings.
In both cases, add &amp;ndash;no-sound-null-safety.&lt;/p>
&lt;p>In case you were using Visual Studio Code and faced it in your unit test.&lt;/p>
&lt;p>Visual Studio Code → Preferences → Settings → Search setting, type in &amp;ldquo;flutter test&amp;rdquo; → Dart: Flutter Test Additional Args, Add item → Add &amp;ldquo;&amp;ndash;no-sound-null-safety&amp;rdquo;&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201241054614.png"
loading="lazy"
>&lt;/p>
&lt;h1 id="第二个问题">第二个问题&lt;/h1>
&lt;blockquote>
&lt;p>iOS 14 not letting Flutter apps (still in dev) to launch from the home screen compared to Building/Running from the IDE&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201241055807.png"
loading="lazy"
>&lt;/p>
&lt;p>Apparently, this is a known issue of Flutter on iOS 14 for apps in debug mode, see this article on the Flutter website, and this GitHub issue. So for the time being, I believe your main workarounds are the following:&lt;/p>
&lt;p>Always run the app from the host PC (using flutter run, IDE debug, etc.)
Build a release version of your app (instead of debug) and use that on your device, e.g. use flutter run &amp;ndash;release
Use a device with iOS 13 or older
Use a simulator&lt;/p>
&lt;p>If you want to use the app without being connected via usb&lt;/p>
&lt;p>Open the ios folder on Xcode&lt;/p>
&lt;p>Make sure your device is connected&lt;/p>
&lt;p>Select Product from the menu bar -&amp;gt; Scheme -&amp;gt; Edit Scheme&lt;/p>
&lt;p>Or simply use the shortcut: command + &amp;gt;&lt;/p>
&lt;p>Change the build configure to Release
Run the app from Xcode
Disconnect your device and you&amp;rsquo;re good to go!&lt;/p></description></item><item><title>Farewell 永别了</title><link>https://example.com/p/farewell-%E6%B0%B8%E5%88%AB%E4%BA%86/</link><pubDate>Sat, 15 Jan 2022 21:45:17 +0800</pubDate><guid>https://example.com/p/farewell-%E6%B0%B8%E5%88%AB%E4%BA%86/</guid><description>&lt;h1 id="永别了">永别了&lt;/h1>
&lt;p>正如 Semisonic 在 90 年代的热门歌曲 &amp;ldquo;Closing Time &amp;ldquo;所告诉我们的那样，每一个新的开始都来自于其他一些开始的结束。恭喜你，高贵的读者，完成了这次 Clojure 之旅。我希望你发现它是有价值的，我也希望你期待着更多的东西！相信我，还有更多的东西等着你。&lt;/p>
&lt;p>相信我，还有很多东西。我最喜欢 Clojure 的一点是，它有一个完整的世界可以探索。逻辑编程、解析器、类型系统……只要你能说出计算机科学的一个有趣领域，你就可以用 Clojure 来研究它。我把我对下一步要去哪里的建议留给你。&lt;/p>
&lt;p>如果你想对 Clojure 生态系统有一个广泛的了解，请查看&lt;a class="link" href="http://www.clojure-toolbox.com/" target="_blank" rel="noopener"
>The Clojure Toolbox&lt;/a>，它列出了数百个 Clojure 项目，并按照它们所解决的问题进行组织。&lt;/p>
&lt;p>如果你对网络编程感兴趣，一个很好的开始是 Luminus 框架（&lt;em>&lt;a class="link" href="http://www.luminusweb.net/" target="_blank" rel="noopener"
>Luminus - 一个 Clojure 网络框架&lt;/a>&lt;/em>）。它的文档非常好，你很快就会有一个网站在运行。&lt;/p>
&lt;p>要想了解 Clojure 的最新动态，Eric Normand 的 Clojure Gazzette 是一个很好的资源（&lt;a class="link" href="http://www.clojuregazette.com/" target="_blank" rel="noopener"
>注册每周功能编程通讯&lt;/a>）。当然，还有 Clojure 邮件列表（&lt;a class="link" href="https://groups.google.com/forum/#!forum/clojure" target="_blank" rel="noopener"
>https://groups.google.com/forum/#!forum/clojure&lt;/a>）和 Clojure subreddit 也是一个有用的、友好的地方（&lt;a class="link" href="http://www.reddit.com/r/clojure" target="_blank" rel="noopener"
>http://www.reddit.com/r/clojure&lt;/a>）。&lt;/p>
&lt;p>如果 Twitter 是你选择的社交媒体，那么&lt;a class="link" href="http://twitter.com/swannodette" target="_blank" rel="noopener"
>@swannodette&lt;/a> (David Nolen), &lt;a class="link" href="http://twitter.com/gigasquid" target="_blank" rel="noopener"
>@gigasquid&lt;/a> (Carin Meier), &lt;a class="link" href="http://twitter.com/puredanger" target="_blank" rel="noopener"
>@puredanger&lt;/a> (Alex Miller), &lt;a class="link" href="http://twitter.com/ztellman" target="_blank" rel="noopener"
>@ztellman&lt;/a> (Zach Tellman), &lt;a class="link" href="http://twitter.com/bbatsov" target="_blank" rel="noopener"
>@bbatsov&lt;/a> (Bozidar Batsov) 和 &lt;a class="link" href="http://twitter.com/stuartsierra" target="_blank" rel="noopener"
>@stuartsierra&lt;/a> (Stuart Sierra) 是你的小红帽。你也可以关注我，&lt;a class="link" href="http://twitter.com/nonrecursive" target="_blank" rel="noopener"
>@nonrecursive&lt;/a>!&lt;/p>
&lt;p>再见了，小茶杯，祝你 Clojuring 愉快&lt;/p></description></item><item><title>AppendixB 花哨的 Boot</title><link>https://example.com/p/appendixb-%E8%8A%B1%E5%93%A8%E7%9A%84-boot/</link><pubDate>Sat, 15 Jan 2022 21:41:09 +0800</pubDate><guid>https://example.com/p/appendixb-%E8%8A%B1%E5%93%A8%E7%9A%84-boot/</guid><description>&lt;h1 id="boot花哨的-clojure-构建框架">Boot，花哨的 Clojure 构建框架&lt;/h1>
&lt;p>Boot 是 Leiningen 的替代品，提供同样的功能。Leiningen 更受欢迎（截至 2015 年夏天），但我个人喜欢用 Boot 工作，因为它更容易扩展。本附录解释了 Boot 的基本概念，并指导你编写你的第一个 Boot 任务。如果你对使用 Boot 构建项目感兴趣，请查看它的 GitHub README（&lt;em>&lt;a class="link" href="https://github.com/boot-clj/boot/" target="_blank" rel="noopener"
>GitHub - boot-clj/boot: Build tooling for Clojure.&lt;/a>&lt;/em>）和它的 wiki（&lt;a class="link" href="https://github.com/boot-clj/boot/wiki/" target="_blank" rel="noopener"
>Home - boot-clj/boot Wiki - GitHub&lt;/a>&lt;em>）&lt;/em>。&lt;/p>
&lt;p>注意 截至本文写作时，Boot 对 Windows 的支持有限。Boot 团队欢迎大家的贡献!&lt;/p>
&lt;h2 id="boot-的抽象">Boot 的抽象&lt;/h2>
&lt;p>Boot 由 Micha Niskin 和 Alan Dipert 创建，是对 Clojure 工具领域的一个有趣而强大的补充。从表面上看，它是构建 Clojure 应用程序和从命令行运行 Clojure 任务的一种便捷方式。深入研究一下，你会发现 Boot 就像 Git 和 Unix 的爱情结晶，它提供的抽象使你在操作系统和应用程序的交叉点上编写代码时更加愉快。&lt;/p>
&lt;p>Unix 提供了我们都很熟悉的抽象，以至于我们认为它们是理所当然的。(偶尔带你的电脑去吃一顿好的餐厅会死吗？) 进程抽象让你把程序推理成独立的逻辑单元，可以通过 STDIN 和 STDOUT 文件描述符轻松地组成一个流处理管道。这些抽象使某些类型的操作，如文本处理，变得非常直接。&lt;/p>
&lt;p>同样，Boot 也提供了一些抽象，使得独立的操作很容易被组合成构建工具最终要做的那种复杂、协调的操作，比如将 ClojureScript 转换为 JavaScript。 Boot 的任务抽象让你可以轻松地定义逻辑单元，通过&lt;em>文件集合&lt;/em>进行通信。文件集合抽象可以跟踪不断变化的构建环境，并提供一个定义明确、可靠的任务协调方法。&lt;/p>
&lt;p>这就是很多高层次的描述，希望能吸引你的注意力。但是，如果我带着一板一眼的隐喻离开你，那就太丢人了。哦，不，亲爱的读者，这只是开胃菜而已。在本附录的其余部分，你将学习如何建立自己的 Boot 任务。在这一过程中，你会发现，构建工具实际上是有概念基础的。&lt;/p>
&lt;h2 id="任务">任务&lt;/h2>
&lt;p>像 make、rake、grunt 和其他以前的构建工具一样，Boot 让你定义任务。 &lt;em>任务&lt;/em>是命名的操作，接受由某个中间程序（make、rake、Boot）调度的命令行选项。&lt;/p>
&lt;p>Boot 提供了调度程序&lt;em>boot&lt;/em>和一个 Clojure 库，使你可以很容易地用&lt;code>deftask&lt;/code>宏来定义命名的操作及其命令行选项。为了看看所有的大惊小怪，让我们来创建你的第一个任务。通常情况下，编程教程鼓励你写代码来打印 &amp;ldquo;Hello World&amp;rdquo;，但我希望我的例子能有真实的效用，所以你的任务是打印 &amp;ldquo;我的裤子着火了！&amp;rdquo; 这个信息客观上更有用。首先，安装 Boot；然后创建一个名为&lt;em>boot-walkthrough&lt;/em>的新目录，导航到该目录，创建一个名为*build.boot**的文件，*然后这样写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(deftask fire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Prints &amp;#39;My pants are on fire!&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;My pants are on fire!&amp;#34;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在用&lt;code>boot fire&lt;/code>从命令行运行这个任务；你应该看到你写的信息被打印到终端。这个任务展示了三个任务组件中的两个：任务被命名为（&lt;code>fire&lt;/code>），并且由 boot 调度。这真是太酷了。你基本上已经创建了一个 Clojure shell 脚本，独立的 Clojure 代码，你可以轻松地从命令行运行。不需要&lt;em>project.clj&lt;/em>，不需要目录结构，也不需要命名空间!&lt;/p>
&lt;p>让我们扩展一下这个例子，演示一下你如何编写命令行选项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(deftask fire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Announces that something is on fire&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [t thing THING str &amp;#34;The thing that&amp;#39;s on fire&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p pluralize bool &amp;#34;Whether to pluralize&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [verb (if pluralize &amp;#34;are&amp;#34; &amp;#34;is&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;My&amp;#34; thing verb &amp;#34;on fire!&amp;#34;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>试着像这样运行该任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">boot fire -t heart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># =&amp;gt; My heart is on fire!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">boot fire -t logs -p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># =&amp;gt; My logs are on fire!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一种情况下，要么你是新近恋爱，要么你需要赶到急诊室。在第二个例子中，你是一个童子军，尴尬地表达了你对达到功绩勋章要求的兴奋。在这两种情况下，你都能轻松地指定任务的选项。&lt;/p>
&lt;p>这次对&lt;code>fire&lt;/code>任务的改进引入了两个命令行选项，&lt;code>thing&lt;/code>和&lt;code>pluralize&lt;/code>。这两个选项都是用*域特定语言（DSL）*定义的。DSL 是他们自己的主题，但简单地说，这个术语指的是微型语言，你可以在一个大的程序中使用，为狭义的领域（如定义选项）编写紧凑的、富有表现力的代码。&lt;/p>
&lt;p>在选项&lt;code>thing&lt;/code>中，&lt;code>t&lt;/code>指定其短名称，&lt;code>thing&lt;/code>指定其长名称。 &lt;code>THING&lt;/code>有点复杂，我稍后会讲到它。 &lt;code>str&lt;/code>指定了选项的类型，Boot 用它来验证参数并进行转换。 &lt;code>&amp;quot;着火的东西 &amp;quot;是该选项的文档。你可以用&lt;/code>boot task-name -h`在终端查看一个任务的文档。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">boot fire -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Announces that something is on fire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Options:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># -h, --help Print this help info.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># -t, --thing THING Set the thing that&amp;#39;s on fire to THING.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># -p, --pluralize Whether to pluralize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当棒的! Boot 使编写要从命令行调用的代码变得非常容易。&lt;/p>
&lt;p>现在，让我们看看&lt;code>THING&lt;/code>。&lt;code>THING&lt;/code>是一个&lt;em>optarg&lt;/em>，它表示这个选项需要一个参数。当你定义一个选项时，你不需要包括 optarg（注意&lt;code>pluralize&lt;/code>选项没有 optarg）。optarg 不必与选项的全名相对应；你可以用&lt;code>BILLY_JOEL'或其他你想要的东西来代替&lt;/code>THING&amp;rsquo;，任务也会照常进行。你也可以使用 optarg 来指定复杂的选项。(&lt;a class="link" href="https://github.com/boot-clj/boot/wiki/Task-Options-DSL#complex-options" target="_blank" rel="noopener"
>访问&lt;em>https://github.com/boot-clj/boot/wiki/Task-Options-DSL#complex-options&lt;/em>&lt;/a>了解 Boot 关于这个问题的文档。) 基本上，复杂选项允许你指定选项参数应被视为 Map、集合、Vector，甚至是嵌套集合。这是很强大的。&lt;/p>
&lt;p>Boot 为你提供了用 Clojure 构建命令行界面所需的所有工具。而你才刚刚开始学习它!&lt;/p>
&lt;h2 id="the-repl">The REPL&lt;/h2>
&lt;p>Boot 有许多有用的内置任务，包括一个 REPL 任务。运行 &lt;code>boot repl&lt;/code> 来启动这个小家伙。Boot 的 REPL 与 Leiningen 的类似，它负责加载你的项目代码，这样你就可以随意玩耍。你可能认为这不适用于你所写的项目，因为你只写了任务，但实际上你可以在 REPL 中运行任务（我省略了&lt;code>boot.user=&amp;gt;&lt;/code>提示）。你可以用一个字符串指定选项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fire &amp;#34;-t&amp;#34; &amp;#34;NBA Jam guy&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; My NBA Jam guy is on fire!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，选项的值就在选项的后面。&lt;/p>
&lt;p>你也可以用关键字来指定一个选项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fire :thing &amp;#34;NBA Jam guy&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; My NBA Jam guy is on fire!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以结合选项。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fire &amp;#34;-p&amp;#34; &amp;#34;-t&amp;#34; &amp;#34;NBA Jam guys&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; My NBA Jam guys are on fire!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(fire :pluralize true :thing &amp;#34;NBA Jam guys&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; My NBA Jam guys are on fire!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，你也可以在 REPL 中使用&lt;code>deftask&lt;/code>，毕竟这只是 Clojure。我们的收获是，Boot 可以让你把任务作为 Clojure 函数进行交互，因为它们就是这样的。&lt;/p>
&lt;h2 id="组成和协调">组成和协调&lt;/h2>
&lt;p>如果到目前为止你所看到的就是 Boot 所能提供的一切，那它将是一个非常棒的工具，但它与其他构建工具没有什么不同。让 Boot 与众不同的一个特点是，它可以让你编排任务。为了便于比较，这里有一个 Rake 调用的例子（Rake 是主要的 Ruby 构建工具）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">rake db:create d{:tag :a, :attrs {:href &amp;#34;db:seed&amp;#34;}, :content [&amp;#34;b:migra&amp;#34;]}te db:seed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码将创建一个数据库，在其上运行迁移，并在 Rails 项目中运行时向其填充种子数据。然而，值得注意的是，Rake 并没有提供任何方法让这些任务之间相互通信。指定多个任务只是为了方便，让你不必运行&lt;code>rake db:create; rake db:migrate; rake db:seed&lt;/code>。如果你想在任务 B 中访问任务 A 的结果，构建工具并不能帮助你；你必须自己管理这种协调。通常，你要做的是把任务 A 的结果塞进文件系统中的一个特殊位置，然后确保任务 B 读取这个特殊位置。这看起来就像用易变的全局变量进行编程，而且它也是很脆弱的。&lt;/p>
&lt;h3 id="handler-和中间件">Handler 和中间件&lt;/h3>
&lt;p>Boot 通过将任务视为&lt;em>中间**件工厂&lt;/em>来解决这个任务通信问题。如果你熟悉 Ring，Boot 的任务工作起来非常相似，所以请随意跳到&lt;a class="link" href="https://www.braveclojure.com/appendix-b/#Anchor" target="_blank" rel="noopener"
>&amp;ldquo;任务是中间件工厂 &amp;ldquo;第 287 页&lt;/a>。如果你对中间件的概念不熟悉，请允许我解释一下! &lt;em>中间件&lt;/em>指的是程序员遵守的一套&lt;em>公约，这样他们就可以灵活地创建特定领域的功能管道。这是相当密集的，所以让我们解除密集。我将在本节中讨论&lt;/em>灵活的部分，并在&lt;a class="link" href="https://www.braveclojure.com/appendix-b/#Anchor-12" target="_blank" rel="noopener"
>&amp;ldquo;文件集合 &amp;ldquo;第 288 页&lt;/a>中介绍&lt;em>特定领域的&lt;/em>。&lt;/p>
&lt;p>为了理解中间件方法与普通函数组合的不同之处，这里有一个组合日常函数的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def strinc (comp str inc))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(strinc 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;4&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数组合并没有什么有趣的地方。事实上，这个函数组合是如此的不起眼，以至于我作为一个作家，要对它说些什么都很费劲。有两个函数，各自做自己的事情，现在它们被组成了一个。Whoop-dee-doo!&lt;/p>
&lt;p>中间件为函数组合引入了一个额外的步骤，使你在定义函数管道时有更大的灵活性。假设在前面的例子中，你想对任意的数字返回 &amp;ldquo;我不喜欢这个数字 X&amp;rdquo;，而对其他的东西返回一个字符串化的数字。以下是你如何做到这一点的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn whiney-str
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [rejects]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:pre [(set? rejects)]}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (rejects x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;I don&amp;#39;t like &amp;#34; x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str x))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def whiney-strinc (comp (whiney-str #{2}) inc))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(whiney-strinc 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;I don&amp;#39;t like 2&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在让我们再进一步。如果你想决定是否首先调用&lt;code>inc&lt;/code>呢？清单 B-1 显示了你如何做到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn whiney-middleware
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [next-handler rejects]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:pre [(set? rejects)]}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (if (= x 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;I&amp;#39;m not going to bother doing anything to that&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [y (next-handler x)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (rejects y)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;I don&amp;#39;t like &amp;#34; y)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str y))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def whiney-strinc (whiney-middleware inc #{2}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(whiney-strinc 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;I&amp;#39;m not going to bother doing anything to that&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>B-1. 函数组合的中间件方法让你引入选择权&lt;/li>
&lt;/ol>
&lt;p>在这里，你不是用&lt;code>comp&lt;/code>来创建你的函数管道，而是将管道中的下一个函数作为第一个参数传递给中间件函数。在这种情况下，你将&lt;code>inc&lt;/code>作为第一个参数传递给&lt;code>whiney-middleware&lt;/code>作为&lt;code>next-handler&lt;/code>。 &lt;code>whiney-middleware&lt;/code>然后返回一个匿名函数，该函数关闭了&lt;code>inc&lt;/code>并有能力选择是否调用它。你可以在➊看到这个选择。&lt;/p>
&lt;p>我们说，一个中间件把一个 Handler 作为它的第一个参数，并返回一个 Handler。在这个例子中，&lt;code>whiney-middleware&lt;/code>将一个 Handler 作为它的第一个参数，&lt;code>inc&lt;/code>，它返回另一个 Handler，即匿名函数，&lt;code>x&lt;/code>是它唯一的参数。中间件也可以接受额外的参数，如&lt;code>rejects&lt;/code>，作为配置。其结果是，中间件返回的 Handler 可以表现得更加灵活（由于配置），而且它对函数管道有更多的控制（因为它可以选择是否调用下一个 Handler）。&lt;/p>
&lt;h3 id="任务是中间件工厂">任务是中间件工厂&lt;/h3>
&lt;p>Boot 通过将中间件的配置与 Handler 的创建分开，将这种使函数组合更加灵活的模式向前推进了一步。首先，你创建一个接受&lt;em>n&lt;/em>配置参数的函数。这就是&lt;em>中间件工厂&lt;/em>，它返回一个中间件函数。中间件函数希望得到一个参数，即下一个 Handler，并返回一个 Handler，就像前面的例子中一样。下面是一个发牢骚的中间件工厂。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn whiney-middleware-factory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [rejects]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:pre [(set? rejects)]}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [handler]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (= x 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;I&amp;#39;m not going to bother doing anything to that&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [y (handler x)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (rejects y)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;I don&amp;#39;t like &amp;#34; y &amp;#34; :&amp;#39;(&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str y)))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def whiney-strinc ((whiney-middleware-factory #{3}) inc))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，这段代码与清单 B-1 几乎相同。变化在于，最上面的函数，&lt;code>whiney-middleware-factory&lt;/code>，现在只接受一个参数，&lt;code>rejects&lt;/code>。它返回一个匿名函数，即中间件，它希望得到一个参数，即 Handler。其余的代码都是一样的。&lt;/p>
&lt;p>在 Boot 中，任务可以充当中间件工厂。为了说明这一点，让我们把&lt;code>fire&lt;/code>任务分成两个任务：&lt;code>what&lt;/code>和&lt;code>fire&lt;/code>（见清单 B-2）。 &lt;code>what&lt;/code>让你指定一个对象以及它是否是复数，而&lt;code>fire&lt;/code>则宣布它着火了。这是伟大的模块化软件工程，因为它允许你添加其他任务，如&lt;code>gnomes&lt;/code>，宣布一个东西被地精占领了，这在客观上同样有用。(作为一个练习，尝试创建 gnome 任务。它应该和&lt;code>what&lt;/code>任务组成，就像&lt;code>fire&lt;/code>一样）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(deftask what
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Specify a thing&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [t thing THING str &amp;#34;An object&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> p pluralize bool &amp;#34;Whether to pluralize&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn middleware [next-handler]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (fn handler [fileset]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (next-handler (merge fileset {:thing thing :pluralize pluralize})))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(deftask fire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Announce a thing is on fire&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn middleware [next-handler]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (fn handler [fileset]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [verb (if (:pluralize fileset) &amp;#34;are&amp;#34; &amp;#34;is&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;My&amp;#34; (:thing fileset) verb &amp;#34;on fire!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fileset))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>宣布某物着火的可组合 Boot 任务的完整代码&lt;/li>
&lt;/ol>
&lt;p>以下是你如何在命令行上运行它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">boot what -t &amp;#34;pants&amp;#34; -p - fire
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是在 REPL 中的运行方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(boot (what :thing &amp;#34;pants&amp;#34; :pluralize true) (fire))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等一下，那个&lt;code>boot'的调用是怎么回事？在➊和➋的&lt;/code>fileset&lt;code>又是怎么回事？用Micha的话说，&amp;quot;&lt;/code>boot&lt;code>宏负责设置和清理（创建初始文件集合，停止由任务启动的服务器，诸如此类的事情）。任务是函数，所以你可以直接调用它们，但如果它们使用了文件集合，就会失败，除非你通过&lt;/code>boot`宏调用它们。&amp;rdquo; 让我们仔细看看文件集合的情况。&lt;/p>
&lt;h2 id="文件集合">文件集合&lt;/h2>
&lt;p>前面我提到，中间件是用来创建&lt;em>域特定的&lt;/em>函数管道。这意味着每个 Handler 都期望接收特定领域的数据并返回特定领域的数据。以 Ring 为例，每个 Handler 都希望收到一个代表 HTTP 请求的请求 Map，它可能看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{:server-port 80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :request-method :get
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :scheme :http}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个 Handler 可以选择以某种方式修改这个请求 Map，然后再传递给下一个 Handler，例如，添加一个&lt;code>:params&lt;/code>键，其中包含所有查询字符串和 POST 参数的漂亮 Clojure Map。环形 Handler 返回一个&lt;em>响应 Map&lt;/em>，由&lt;code>:status'、&lt;/code>:headers&amp;rsquo;和`:body&amp;rsquo;三个键组成，每个 Handler 可以再次以某种方式转换这些数据，然后再返回给其父 Handler。&lt;/p>
&lt;p>在 Boot 中，每个 Handler 接收并返回一个&lt;em>fileset&lt;/em>。文件集合的抽象让你把文件系统上的文件当作不可更改的数据，这对构建工具来说是一项伟大的创新，因为构建项目是以文件为中心的。例如，你的项目可能需要在文件系统上放置临时的、中间的文件。通常，在大多数构建工具中，这些文件被放置在一些特别命名的地方，比如，&lt;em>project/target/tmp&lt;/em>。这样做的问题是，&lt;em>project/target/tmp&lt;/em>实际上是一个全局变量，其他任务可能会意外地把它搞乱。&lt;/p>
&lt;p>Boot 的文件集合抽象通过在文件系统上增加一层间接性来解决这个问题。比方说，任务 A 创建了文件 X，并告诉文件集合来存储它。在幕后，文件集合将该文件存储在一个匿名的临时目录中。然后，该文件集合被传递给任务 B，任务 B 修改了文件 X 并要求文件集合存储结果。在幕后，一个新的文件，文件 Y，被创建和存储，但文件 X 仍然没有被触动。在任务 B 中，一个更新的文件集合被返回。这相当于用 Map 做 &amp;ldquo;assoc-in&amp;rdquo;。任务 A 仍然可以访问原始文件集合和它引用的文件。&lt;/p>
&lt;p>在清单 B-2 中的&lt;code>what'和&lt;/code>fire&amp;rsquo;任务中，你甚至都没有使用这些很酷的文件管理功能。尽管如此，当 Boot 组成任务时，它希望 Handler 能接收并返回 fileset 记录。因此，为了跨任务传达你的数据，你偷偷地用&lt;code>(merge fileset {:thing thing :pluralize pluralize})&lt;/code>把它加到文件集合记录中。&lt;/p>
&lt;p>虽然这涵盖了中间件工厂的基本概念，但你还需要学习更多的东西来充分利用文件集合的优势。在 fileset wiki（&lt;em>&lt;a class="link" href="https://github.com/boot-clj/boot/wiki/Filesets" target="_blank" rel="noopener"
>Filesets - boot-clj/boot Wiki - GitHub&lt;/a>&lt;/em>）中，对使用 filesets 的机制都有解释。同时，我希望这些信息能给你一个很好的概念性概述!&lt;/p>
&lt;h2 id="接下来的步骤">接下来的步骤&lt;/h2>
&lt;p>本附录的重点是解释 Boot 背后的概念。不过，Boot 还有一堆其他的功能，比如&lt;code>set-env!&lt;/code>和&lt;code>task-options!&lt;/code>，当你真正使用它的时候，会让你的编程生活更轻松。它提供了惊人的神奇功能，比如提供 classpath 隔离，这样你就可以用一个 JVM 运行多个项目，并让你在无需重启 REPL 的情况下向项目添加新的依赖项。如果 Boot 让你心痒难耐，请查看它的 README，了解更多关于实际使用的信息。另外，它的 wiki 提供了一流的文档。&lt;/p></description></item><item><title>AppendixA 用 Leiningen 构建和开发</title><link>https://example.com/p/appendixa-%E7%94%A8-leiningen-%E6%9E%84%E5%BB%BA%E5%92%8C%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 15 Jan 2022 21:39:36 +0800</pubDate><guid>https://example.com/p/appendixa-%E7%94%A8-leiningen-%E6%9E%84%E5%BB%BA%E5%92%8C%E5%BC%80%E5%8F%91/</guid><description>&lt;h1 id="用-leiningen-构建和开发">用 Leiningen 构建和开发&lt;/h1>
&lt;p>用任何语言编写软件都需要生成&lt;em>工件&lt;/em>，即可执行文件或库包，用于部署或共享。它还涉及到管理依赖工件，也称为&lt;em>依赖&lt;/em>，以确保它们被加载到你正在构建的项目中。Clojurists 中最流行的管理工件的工具是 Leiningen，本附录将告诉你如何使用它。你还将学习如何使用 Leiningen 来完全增强你的开发经验，使用&lt;em>插件&lt;/em>。&lt;/p>
&lt;h2 id="artifact-ecosystem">Artifact Ecosystem&lt;/h2>
&lt;p>因为 Clojure 托管在 Java 虚拟机（JVM）上，所以 Clojure 的工件是以 JAR 文件的形式分发的（在第 12 章有介绍）。Java 地已经有一个处理 JAR 文件的完整的工件生态系统，Clojure 也使用它。&lt;em>神器生态系统&lt;/em>并不是一个官方的编程术语；我用它来指代用于识别和分发神器的一套工具、资源和惯例。Java 的生态系统是围绕着 Maven 构建工具发展起来的，由于 Clojure 使用这个生态系统，你会经常看到对 Maven 的引用。Maven 是一个巨大的工具，可以执行各种古怪的项目管理任务。值得庆幸的是，你不需要获得 Maven 学的博士学位就能成为一名有效的 Clojurist。你需要知道的唯一特征是，Maven 规定了一种识别 Clojure 项目所遵守的工件的模式，它还规定了如何在 Maven &lt;em>仓库&lt;/em>中托管这些工件，Maven *仓库只是存储工件以供分发的服务器。&lt;/p>
&lt;h3 id="identification">Identification&lt;/h3>
&lt;p>Maven 工件需要一个&lt;em>组 ID&lt;/em>，一个&lt;em>工件 ID&lt;/em>，以及一个&lt;em>版本&lt;/em>。你可以在&lt;em>project.clj&lt;/em>文件中为你的项目指定这些。以下是你在第一章创建的&lt;code>clojure-noob&lt;/code>项目的&lt;em>project.clj&lt;/em>第一行的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defproject clojure-noob &amp;#34;0.1.0-SNAPSHOT&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>clojure-noob&lt;/code>是你项目的组 ID 和工件 ID，&lt;code>&amp;quot;0.1.0-SNAPSHOT&amp;quot;&lt;/code>是其版本。一般来说，版本是永久性的；如果你将一个版本为 0.1.0 的工件部署到存储库，你不能对该工件进行修改并使用相同的版本号进行部署。您需要改变版本号。(许多程序员喜欢 Semantic Versioning 系统，您可以在*&lt;a class="link" href="http://semver.org/" target="_blank" rel="noopener"
>Semantic Versioning 2.0.0 | Semantic Versioning&lt;/a>.*中阅读到这一系统。） 如果你想表明该版本是一个正在进行的工作，并且你计划不断地更新它，你可以在你的版本号后面加上&lt;code>-SNAPSHOT&lt;/code>。&lt;/p>
&lt;p>如果你想让你的组 ID 与你的工件 ID 不同，你可以用斜线将两者分开，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defproject group-id/artifact-id &amp;#34;0.1.0-SNAPSHOT&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常，开发者会使用他们的公司名称或 GitHub 用户名作为组的 ID。&lt;/p>
&lt;h3 id="依赖">依赖&lt;/h3>
&lt;p>你的&lt;em>project.clj&lt;/em>文件还包括一行看起来像这样的内容，它列出了你项目的依赖。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> :dependencies [[org.clojure/clojure &amp;#34;1.9.0&amp;#34;]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你想使用一个库，使用与你命名项目时相同的命名模式将其添加到这个依赖 Vector 中。例如，如果你想轻松地处理日期和时间，你可以添加 clj-time 库，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> :dependencies [[org.clojure/clojure &amp;#34;1.9.0&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [clj-time &amp;#34;0.9.0&amp;#34;]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下次你启动你的项目时，无论是通过运行它还是通过启动 REPL，Leiningen 都会自动下载 clj-time 并使其在你的项目中可用。&lt;/p>
&lt;p>Clojure 社区创造了大量有用的库，寻找它们的好地方是*&lt;a class="link" href="http://www.clojure-toolbox.com/" target="_blank" rel="noopener"
>http://www.clojure-toolbox.com&lt;/a>*的 Clojure 工具箱，它根据项目的目的进行分类。几乎每一个 Clojure 库都在其 README 的顶部提供了它的标识符，使你很容易找出如何把它添加到你的 Leiningen 依赖项中。&lt;/p>
&lt;p>有时你可能想使用一个 Java 库，但标识符并不那么容易获得。例如，如果你想添加 Apache Commons Email，你必须在网上搜索，直到你找到一个包含这样内容的网页。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;artifactId&amp;gt;commons-email&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;version&amp;gt;1.3.3&amp;lt;/version&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该 XML 是 Java 项目沟通其 Maven 标识符的方式。要把它添加到 Clojure 项目中，你需要修改&lt;code>:dependencies&lt;/code>Vector，使其看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> :dependencies [[org.clojure/clojure &amp;#34;1.9.0&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [clj-time &amp;#34;0.9.0&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [org.apache.commons/commons-email &amp;#34;1.3.3&amp;#34;]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>主要的 Clojure 库是 Clojars（&lt;em>&lt;a class="link" href="https://clojars.org/" target="_blank" rel="noopener"
>Clojars&lt;/a>&lt;/em>），主要的 Java 库是 The Central Repository（&lt;em>&lt;a class="link" href="http://search.maven.org/" target="_blank" rel="noopener"
>Maven Central Repository Search&lt;/a>&lt;/em>），人们通常只把它称为&lt;em>Central&lt;/em>，就像旧金山居民把旧金山称为&lt;em>the city&lt;/em>一样。你可以使用这些网站来寻找库和它们的标识符。&lt;/p>
&lt;p>要把你自己的项目部署到 Clojars，你所要做的就是在那里创建一个账户，然后在你的项目中运行&lt;code>lein deploy clojars&lt;/code>。该任务会生成 Maven 工件所需的一切，包括 POM 文件（我就不多说了）和 JAR 文件，以便储存在仓库中。然后将它们上传到 Clojars。&lt;/p>
&lt;h3 id="插件">插件&lt;/h3>
&lt;p>Leiningen 让你使用&lt;em>插件&lt;/em>，这是一些在你写代码时能帮助你的库。例如，Eastwood 插件是一个 Clojure 检查工具；它可以识别写得不好的代码。你通常要在*$HOME/.lein/profiles.clj&lt;em>文件中指定你的插件。要添加 Eastwood，你要把&lt;/em>profiles.clj*改成这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{:user {:plugins [[jonase/eastwood &amp;#34;0.2.1&amp;#34;]] ] 。}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就为你的所有项目启用了一个&lt;code>eastwood'Leiningen任务，你可以在项目的根目录下用&lt;/code>lein eastwood&amp;rsquo;运行。&lt;/p>
&lt;p>Leiningen 的 GitHub 项目页面有关于如何使用配置文件和插件的优秀文档，它包括一个方便的插件列表。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本附录着重介绍了项目管理中那些重要但又难以了解的方面，比如什么是 Maven 以及 Clojure 与它的关系。它向你展示了如何使用 Leiningen 来命名你的项目，指定依赖关系，并部署到 Clojars。Leiningen 为软件开发任务提供了很多功能，但并不涉及实际编写代码。如果你想了解更多，请在网上查看 Leiningen 教程*[leiningen/TUTORIAL.md at stable - technomancy/leiningen - GitHub]（&lt;a class="link" href="https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md" target="_blank" rel="noopener"
>https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md&lt;/a>）*.&lt;/p></description></item><item><title>Chapter13 抽象</title><link>https://example.com/p/chapter13-%E6%8A%BD%E8%B1%A1/</link><pubDate>Sat, 15 Jan 2022 21:29:04 +0800</pubDate><guid>https://example.com/p/chapter13-%E6%8A%BD%E8%B1%A1/</guid><description>&lt;h1 id="用-multimethods协议和记录创建和扩展抽象概念">用 Multimethods、协议和记录创建和扩展抽象概念&lt;/h1>
&lt;p>花一分钟思考一下，作为大自然的顶级产品之一：人类是多么伟大。作为一个人类，你可以在社交媒体上闲聊，玩龙与地下城，戴帽子。也许更重要的是，你可以用抽象的概念来思考和交流。&lt;/p>
&lt;p>抽象思考的能力确实是人类最好的特征之一。它可以让你规避你的认知极限，将不同的细节捆绑在一起，形成一个整齐的概念包，让你可以在工作记忆中持有。你不需要去想 &amp;ldquo;可挤压的红球鼻子装饰 &amp;ldquo;这种笨重的想法，而只需要 &amp;ldquo;小丑鼻子 &amp;ldquo;这个概念。&lt;/p>
&lt;p>在 Clojure 中，一个&lt;em>抽象&lt;/em>是一个操作的集合，而&lt;em>数据类型&lt;/em>实现抽象。例如，seq 抽象由 &amp;ldquo;first &amp;ldquo;和 &amp;ldquo;rest &amp;ldquo;等操作组成，而 Vector 数据类型是该抽象的实现；它对所有 seq 操作做出响应。像&lt;code>[:seltzer :water]&lt;/code>这样的特定 Vector 是该数据类型的*实例。&lt;/p>
&lt;p>编程语言越是让你以抽象的方式思考和写作，你的生产力就越高。例如，如果你知道一个数据结构是 seq 抽象的一个实例，你就可以立即调用一个大的知识网，了解哪些函数可以与数据结构一起工作。因此，你会花时间去实际使用这个数据结构，而不是不断地去查找关于它如何工作的文档。同样地，如果你扩展一个数据结构，使其与 seq 抽象一起工作，你就可以在上面使用大量的 seq 函数库。&lt;/p>
&lt;p>在第四章中，你了解到 Clojure 是以抽象的方式编写的。这很强大，因为在 Clojure 中，你可以专注于你可以用数据结构实际做的事情，而不用担心实现的细枝末节。本章向你介绍了创建和实现你自己的抽象的世界。你将学习 Multimethods、协议和记录的基础知识。&lt;/p>
&lt;h2 id="多态">多态&lt;/h2>
&lt;p>我们在 Clojure 中实现抽象的主要方式是将一个操作名称与一个以上的算法联系起来。这种技术被称为&lt;em>多态&lt;/em>。例如，在列表上执行 &amp;ldquo;conj &amp;ldquo;的算法与 Vector 的算法不同，但我们把它们统一在同一个名字下，以表明它们实现了同一个概念，即&lt;em>向&lt;/em>这个数据结构添加一个元素。&lt;/p>
&lt;p>因为 Clojure 的许多数据类型都依赖于 Java 的标准库，所以本章中使用了一点 Java。例如，Clojure 的字符串只是 Java 的字符串，是 Java 类&lt;code>java.lang.String&lt;/code>的实例。要在 Java 中定义你自己的数据类型，你要使用类。Clojure 提供了额外的类型结构。 &lt;em>记录&lt;/em>和&lt;em>类型&lt;/em>。本书只涉及记录。&lt;/p>
&lt;p>在我们学习记录之前，让我们看看 Multimethods，这是我们定义多态行为的第一个工具。&lt;/p>
&lt;h3 id="multimethods">Multimethods&lt;/h3>
&lt;p>&lt;em>Multimethods&lt;/em>为你提供了一种直接的、灵活的方法，将多态引入你的代码中。使用 Multimethods，你可以通过定义一个&lt;em>调度函数&lt;/em>将一个名字与多个实现联系起来，该函数产生&lt;em>调度值&lt;/em>，用来决定使用哪个&lt;em>方法&lt;/em>。调度函数就像餐厅里的主人。主人会问你一些问题，比如 &amp;ldquo;你有预订吗？&amp;ldquo;和 &amp;ldquo;聚会人数？&amp;quot;，然后给你安排相应的座位。同样，当你调用一个 Multimethods 时，调度函数将询问参数，并将它们发送到正确的方法，正如这个例子所显示的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns were-creatures)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (defmulti full-moon-behavior (fn [were-creature] (:were-type were-creature)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (defmethod full-moon-behavior :wolf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [were-creature]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:name were-creature) &amp;#34; will howl and murder&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (defmethod full-moon-behavior :simmons
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [were-creature]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:name were-creature) &amp;#34; will encourage people and sweat to the oldies&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(full-moon-behavior {:were-type :wolf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ :name &amp;#34;Rachel from next door&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Rachel from next door will howl and murder&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(full-moon-behavior {:name &amp;#34;Andy the baker&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➎ :were-type :simmons})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Andy the baker will encourage people and sweat to the oldies&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 Multimethods 显示了你如何定义不同种类的狼人生物的满月行为。大家都知道狼人变成了狼，到处嚎叫着杀人。一种不太知名的狼人，即狼-西蒙斯，变成理查德-西蒙斯，烫着头发，到处跑，鼓励人们做最好的自己，为老人们流汗。你不想被这两种生物咬到，否则你就会变成它们。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/multimethods-records-protocols/weresimmons.png"
loading="lazy"
>&lt;/p>
&lt;p>我们在➊处创建 Multimethods。这告诉 Clojure，&amp;ldquo;嘿，创建一个名为&lt;code>full-moon-behavior'的新Multimethods。每当有人调用&lt;/code>full-moon-behavior&lt;code>时，在参数上运行调度函数&lt;/code>(fn [were-creature] (:were-type were-creature))`。使用该函数的结果，也就是调度值，来决定使用哪个具体方法！&amp;rdquo;&lt;/p>
&lt;p>接下来，我们定义了两个方法，一个是当调度函数返回的值是➋的&lt;code>:wolf&lt;/code>时，另一个是当它是➌的&lt;code>:simmons&lt;/code>时。方法定义看起来很像函数定义，但主要的区别是，方法名称后面紧跟着&lt;em>dispatch 值&lt;/em>。 &lt;code>:wolf&lt;/code>和&lt;code>:simmons&lt;/code>都是&lt;em>dispatch 值&lt;/em>。这与调度*值不同，后者是调度函数的返回值。完整的调度序列是这样的。&lt;/p>
&lt;ol>
&lt;li>形式&lt;code>(full-moon-behavior {:wer-type :wolf :name &amp;quot;Rachel from next door&amp;quot;})&lt;/code>被求值。&lt;/li>
&lt;li>运行&lt;code>full-moon-behavior&lt;/code>的调度函数，返回&lt;code>:wolf&lt;/code>作为调度值。&lt;/li>
&lt;li>Clojure 将调度值&lt;code>:wolf&lt;/code>与为&lt;code>full-moon-behavior&lt;/code>定义的所有方法的调度值相比较。这些调度值是&lt;code>:wolf&lt;/code>和&lt;code>:simmons&lt;/code>。&lt;/li>
&lt;li>因为调度值&lt;code>:wolf&lt;/code>等于调度值&lt;code>:wolf&lt;/code>，所以&lt;code>:wolf&lt;/code>的算法运行。&lt;/li>
&lt;/ol>
&lt;p>不要让术语把你绊倒! 主要的想法是，调度函数返回一些值，这个值被用来决定使用哪个方法定义。&lt;/p>
&lt;p>回到我们的例子! 接下来我们调用该方法两次。在➍处，调度函数返回值&amp;rdquo;:wolf&amp;rdquo;，并使用相应的方法，通知你 &amp;ldquo;隔壁的 Rachel 将嚎叫并杀人&amp;rdquo;。在➏，该函数的行为类似，只是&lt;code>:simmons&lt;/code>是调度值。&lt;/p>
&lt;p>你可以定义一个以&lt;code>nil&lt;/code>为调度值的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmethod full-moon-behavior nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [were-creature]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:name were-creature) &amp;#34; will stay at home and eat ice cream&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(full-moon-behavior {:were-type nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :name &amp;#34;Martin the nurse&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Martin the nurse will stay at home and eat ice cream&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你这次调用&lt;code>full-moon-behavior&lt;/code>时，你给它的参数&lt;code>:wer-type&lt;/code>是&lt;code>nil&lt;/code>，所以对应于&lt;code>nil&lt;/code>的方法被求值，你被告知`&amp;ldquo;护士 Martin 将呆在家里吃冰淇淋&amp;rdquo;。&lt;/p>
&lt;p>你也可以通过指定&lt;code>:default&lt;/code>作为调度值，定义一个默认方法，在没有其他方法匹配的情况下使用。在这个例子中，给出的参数的&lt;code>:were-type&lt;/code>与之前定义的方法都不匹配，所以使用了默认方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmethod full-moon-behavior :default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [were-creature]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:name were-creature) &amp;#34; will stay up all night fantasy footballing&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(full-moon-behavior {:were-type :office-worker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :name &amp;#34;Jimmy from sales&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Jimmy from sales will stay up all night fantasy footballing&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Multimethods 的一个很酷的地方是，你可以随时添加新的方法。如果你发布了一个包括&lt;code>wer-creatures&lt;/code>命名空间的库，其他人可以继续扩展 Multimethods 来处理新的派发值。这个例子显示，你创建了自己的随机命名空间并包括了&lt;code>wer-creatures&lt;/code>命名空间，然后为&lt;code>full-moon-behavior&lt;/code>Multimethods 定义了另一个方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns random-namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [were-creatures]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmethod were-creatures/full-moon-behavior :bill-murray
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [were-creature]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:name were-creature) &amp;#34; will be the most likeable celebrity&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(were-creatures/full-moon-behavior {:name &amp;#34;Laura the intern&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :were-type :bill-murray})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Laura the intern will be the most likeable celebrity&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你的调度函数可以使用它的任何或所有参数返回任意的值。下一个例子定义了一个 Multimethods，它接收两个参数，并返回一个包含每个参数类型的 Vector。它还定义了该方法的一个实现，当每个参数都是字符串时，该方法将被调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns user)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmulti types (fn [x y] [(class x) (class y)]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmethod types [java.lang.String java.lang.String]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [x y]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Two strings!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(types &amp;#34;String 1&amp;#34; &amp;#34;String 2&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Two strings!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>顺便说一下，这就是为什么它们被称为&lt;em>multi&lt;/em>methods：它们允许对多个参数进行调度。我没有经常使用这个功能，但我可以看到它被用于角色扮演游戏中，根据法师的主要魔法学校和他的魔法专长来编写方法。无论如何，有它而不需要它总比需要它而没有它好。&lt;/p>
&lt;p>注意 Multimethods 也允许分层调度。Clojure 可以让你建立自定义的层次结构，我不会介绍这些，但你可以通过阅读&lt;a class="link" href="http://clojure.org/multimethods/" target="_blank" rel="noopener"
>http://clojure.org/multimethods/&lt;/a> 的文档来了解它们。&lt;/p>
&lt;h3 id="协议">协议&lt;/h3>
&lt;p>在大约 93.58%的情况下，你会希望根据参数的类型来调度方法。例如，&lt;code>count&lt;/code>需要对 Vector 使用不同的方法，而不是对 map 或 list 使用不同的方法。尽管可以用 Multimethods 进行类型调度，但&lt;em>协议&lt;/em>是为类型调度而优化的。它们比 Multimethods 更有效，而且 Clojure 让你很容易简洁地指定协议的实现。&lt;/p>
&lt;p>Multimethods 只是一个多态的操作，而协议是一个&lt;em>集合&lt;/em>的一个或多个多态操作。协议操作被称为方法，就像 Multimethods 操作一样。与 Multimethods 不同的是，Multimethods 对调度函数返回的任意值进行调度，而协议方法是根据第一个参数的类型进行调度，如本例所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns data-psychology)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊(defprotocol ➋Psychodynamics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➌&amp;#34;Plumb the inner depths of your data types&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➍(thoughts [x] &amp;#34;The data type&amp;#39;s innermost thoughts&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➎(feelings-about [x] [x y] &amp;#34;Feelings about self or other&amp;#34;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先，在➊有&lt;code>defprotocol&lt;/code>。这需要一个名字，&lt;code>Psychodynamics&lt;/code> ➋，和一个可选的文件串，&lt;code>&amp;quot;探究你的数据类型的内部深度&amp;quot;&lt;/code>➌。接下来是方法签名。一个&lt;em>方法签名&lt;/em>由一个名称、一个参数说明和一个可选的文档串组成。第一个方法签名被命名为&lt;code>thoughts&lt;/code>➍，只能接受一个参数。第二个名为&lt;code>feelings-about&lt;/code>➎，可以接受一个或两个参数。协议有一个限制：方法不能有其余参数。所以像下面这样的行是不允许的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(feels-about [x] [x &amp;amp; others])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过定义一个协议，你在定义一个抽象，但你还没有定义如何实现这个抽象。这就像你为行为保留了名字（在这个例子中，你保留了&lt;code>思想&lt;/code>和&lt;code>感觉-关于&lt;/code>），但你还没有定义具体的行为。如果你要求值&lt;code>(thoughts &amp;quot;blorb&amp;quot;)&lt;/code>，你会得到一个异常，内容是：&amp;ldquo;没有为 java.lang.String 类找到方法的实现：protocol: data-psychology/psychodynamics 的 thoughts。&amp;rdquo; 协议是根据第一个参数的类型分配的，所以当你调用&lt;code>(thoughts &amp;quot;blorb&amp;quot;)&lt;/code>时，Clojure 试图为字符串查找&lt;code>thoughts&lt;/code>方法的实现，但失败了。&lt;/p>
&lt;p>你可以通过&lt;em>扩展&lt;/em>字符串数据类型来&lt;em>实现&lt;/em>&lt;code>Psychodynamics&lt;/code>协议来解决这一遗憾。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (extend-type java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ Psychodynamics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (thoughts [x] (str x &amp;#34; thinks, &amp;#39;Truly, the character defines the data type&amp;#39;&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ (feelings-about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x] (str x &amp;#34; is longing for a simpler way of life&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x y] (str x &amp;#34; is envious of &amp;#34; y &amp;#34;&amp;#39;s simpler way of life&amp;#34;))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(thoughts &amp;#34;blorb&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➎ ; =&amp;gt; &amp;#34;blorb thinks, &amp;#39;Truly, the character defines the data type&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(feelings-about &amp;#34;schmorb&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;schmorb is longing for a simpler way of life&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(feelings-about &amp;#34;schmorb&amp;#34; 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;schmorb is envious of 2&amp;#39;s simpler way of life&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>extend-type&lt;/code>后面是你想扩展的类或类型的名称和你想让它支持的协议&amp;ndash;在这个例子中，你在➊处指定了类&lt;code>java.lang.String&lt;/code>和你想让它支持的协议&lt;code>Psychodynamics&lt;/code>，在➋。之后，你在➌为 &amp;ldquo;thoughts &amp;ldquo;方法和➍为 &amp;ldquo;feelings-about &amp;ldquo;方法提供一个实现。如果你要扩展一个类型来实现一个协议，你必须实现协议中的每一个方法，否则 Clojure 会抛出一个异常。在这种情况下，你不能只实现&lt;code>思想'或只实现&lt;/code>感觉&amp;rsquo;；你必须同时实现这两种方法。&lt;/p>
&lt;p>注意，这些方法的实现不像 Multimethods 那样以&lt;code>defmethod&lt;/code>开头。事实上，它们看起来类似于函数定义，只是没有&lt;code>defn'。要定义一个方法的实现，你要写一个以方法名称开头的表格，像&lt;/code>thoughts&amp;rsquo;，然后提供一个参数 Vector 和方法的主体。这些方法也允许重载，就像函数一样，你定义多重性的方法实现与多重性的函数类似。你可以在➍的 &amp;ldquo;feelings-about &amp;ldquo;实现中看到这一点。&lt;/p>
&lt;p>在你扩展了&lt;code>java.lang.String&lt;/code>类型以实现&lt;code>Psychodynamics&lt;/code>协议后，Clojure 知道如何调度调用&lt;code>(thoughts &amp;quot;blorb&amp;quot;)&lt;/code>，你会在➎得到字符串`&amp;ldquo;blorb thinks, &amp;lsquo;Truly, the character defines the data type&amp;rsquo;&amp;quot;。&lt;/p>
&lt;p>如果你想提供一个默认的实现，就像你对 multimethods 所做的那样呢？要做到这一点，你可以扩展&lt;code>java.lang.Object&lt;/code>。这样做是因为 Java（也就是 Clojure）中的每个类型都是&lt;code>java.lang.Object&lt;/code>的后代。如果这不是很有意义（也许是因为你不熟悉面向对象的编程），不要担心，只要知道它是有效的。下面是你如何使用这个技术为&lt;code>Psychodynamics&lt;/code>协议提供一个默认实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(extend-type java.lang.Object
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Psychodynamics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (thoughts [x] &amp;#34;Maybe the Internet is just a vector for toxoplasmosis&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (feelings-about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x] &amp;#34;meh&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x y] (str &amp;#34;meh about &amp;#34; y))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(thoughts 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Maybe the Internet is just a vector for toxoplasmosis&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(feelings-about 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;meh&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(feelings-about 3 &amp;#34;blorb&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;meh about blorb&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为我们还没有为数字定义一个&lt;code>心理动力学'的实现，Clojure将对&lt;/code>思想&amp;rsquo;和&lt;code>感觉-关于'的调用分派给为&lt;/code>java.lang.Object&amp;rsquo;定义的实现。&lt;/p>
&lt;p>你可以使用&lt;code>extend-protocol'来代替多次调用&lt;/code>extend-type&amp;rsquo;来扩展多个类型，它可以让你一次为多个类型定义协议实现。下面是你如何定义前面的协议实现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(extend-protocol Psychodynamics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> java.lang.String
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (thoughts [x] &amp;#34;Truly, the character defines the data type&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (feelings-about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x] &amp;#34;longing for a simpler way of life&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x y] (str &amp;#34;envious of &amp;#34; y &amp;#34;&amp;#39;s simpler way of life&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> java.lang.Object
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (thoughts [x] &amp;#34;Maybe the Internet is just a vector for toxoplasmosis&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (feelings-about
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x] &amp;#34;meh&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x y] (str &amp;#34;meh about &amp;#34; y))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能会发现这个技术比使用&lt;code>extend-type&lt;/code>更方便。然后，你也可能不觉得。&lt;code>extend-type&lt;/code>让你感觉如何？&lt;code>extend-protocol&lt;/code>怎么样？来坐在这个沙发上，告诉我这一切。&lt;/p>
&lt;p>值得注意的是，一个协议的方法 &amp;ldquo;属于 &amp;ldquo;它们所定义的命名空间。在这些例子中，&amp;ldquo;心理动力学 &amp;ldquo;方法的完全限定名称是 &amp;ldquo;数据-心理学/想法 &amp;ldquo;和 &amp;ldquo;数据-心理学/感觉-关于&amp;rdquo;。如果你有面向对象的背景，这可能看起来很奇怪，因为方法属于 OOP 中的数据类型。但不要吓坏了! 这只是 Clojure 赋予抽象优先权的另一种方式。这个事实的一个后果是，如果你想让两个不同的协议包括具有相同名称的方法，你需要把协议放在不同的命名空间中。&lt;/p>
&lt;h2 id="记录">记录&lt;/h2>
&lt;p>Clojure 允许你创建&lt;em>records&lt;/em>，它是自定义的、类似 Map 的数据类型。它们类似于 Map，因为它们将键和值联系起来，你可以像使用 Map 一样查询它们的值，而且它们像 Map 一样是不可改变的。它们的不同之处在于，你为记录指定*字段。字段是数据的槽；使用它们就像指定一个数据结构应该有哪些键。记录也与 Map 不同，你可以扩展它们来实现协议。&lt;/p>
&lt;p>要创建一个记录，你可以使用&lt;code>defrecord&lt;/code>来指定它的名字和字段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns were-records)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defrecord WereWolf [name title])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个记录的名字是&lt;code>WereWolf&lt;/code>，它的两个字段是&lt;code>name&lt;/code>和&lt;code>title&lt;/code>。你可以通过三种方式创建这个记录的实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (WereWolf. &amp;#34;David&amp;#34; &amp;#34;London Tourist&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #were_records.WereWolf{:name &amp;#34;David&amp;#34;, :title &amp;#34;London Tourist&amp;#34;}.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (-&amp;gt;WereWolf &amp;#34;Jacob&amp;#34; &amp;#34;Lead Shirt Discarder&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #were_records.WereWolf{:name &amp;#34;Jacob&amp;#34;, :title &amp;#34;Lead Shirt Discarder&amp;#34;}。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (map-&amp;gt;WereWolf {:name &amp;#34;Lucian&amp;#34; :title &amp;#34;CEO of Melodrama&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #were_records.WereWolf{:name &amp;#34;Lucian&amp;#34;, :title &amp;#34;CEO of Melodrama&amp;#34;}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊，我们以创建 Java 对象的方式创建一个实例，使用类实例化的互操作调用。(&lt;em>Interop&lt;/em>指的是在 Clojure 中与本地 Java 结构交互的能力)。请注意，参数必须遵循与字段定义相同的顺序。这样做的原因是，记录实际上是被掩盖的 Java 类。&lt;/p>
&lt;p>➋的实例看起来与➊的实例几乎相同，但关键的区别在于&lt;code>-&amp;gt;WereWolf&lt;/code>是一个函数。当你创建一条记录时，工厂函数&lt;code>-&amp;gt;&lt;/code>RecordName 和&lt;code>map-&amp;gt;&lt;/code>RecordName 会自动创建。在➌，&lt;code>map-&amp;gt;WereWolf&lt;/code>接收一个 map 作为参数，其关键字与记录类型的字段相对应，并返回一个记录。&lt;/p>
&lt;p>如果你想使用其他命名空间的记录类型，你必须导入它，就像你在第 12 章中对 Java 类所做的那样。请注意将命名空间中的所有破折号替换为下划线。这个简单的例子显示了如何在另一个命名空间导入&lt;code>WereWolf&lt;/code>记录类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns monster-mash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:import [were_records WereWolf])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(WereWolf. &amp;#34;David&amp;#34; &amp;#34;London Tourist&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #were_records.WereWolf{:name &amp;#34;David&amp;#34;, :title &amp;#34;London Tourist&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，&lt;code>were_records&lt;/code>有一个下划线，而不是破折号。&lt;/p>
&lt;p>你可以用查询 Map 值的方式查询记录值，也可以使用 Java 字段访问互操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def jacob (-&amp;gt;WereWolf &amp;#34;Jacob&amp;#34; &amp;#34;Lead Shirt Discarder&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (.name jacob)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Jacob&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (:name jacob)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Jacob&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (get jacob :name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;=&amp;gt; &amp;#34;Jacob&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个例子&lt;code>(.name jacob)&lt;/code>在➊，使用了 Java 互操作，➋和➌的例子访问&lt;code>:name&lt;/code>的方式与使用 map 相同。&lt;/p>
&lt;p>当测试相等时，Clojure 将检查所有字段是否相等，以及两个比较体是否具有相同的类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (= jacob (-&amp;gt;WereWolf &amp;#34;Jacob&amp;#34; &amp;#34;Lead Shirt Discarder&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (= jacob (WereWolf. &amp;#34;David&amp;#34; &amp;#34;London Tourist&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (= jacob {:name &amp;#34;Jacob&amp;#34; :title &amp;#34;Lead Shirt Discarder&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>➊处的测试返回&lt;code>true&lt;/code>，因为&lt;code>jacob'和新创建的记录是同一类型，并且它们的字段是相等的。➋处的测试返回 &amp;quot;false&amp;quot;，因为字段不相等。最后在➌处的测试返回 &amp;quot;false&amp;quot;，因为两个比较对象的类型不一样。&lt;/code>jacob&amp;rsquo;是一个`WereWolf&amp;rsquo;记录，而另一个参数是一个 Map。&lt;/p>
&lt;p>任何你能在 Map 上使用的函数，你也能在记录上使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(assoc jacob :title &amp;#34;Lead Third Wheel&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #were_records.WereWolf{:name &amp;#34;Jacob&amp;#34;, :title &amp;#34;Lead Third Wheel&amp;#34;}。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，如果你&lt;code>dissoc&lt;/code>一个字段，结果的类型将是一个普通的&amp;rsquo;Clojure map；它将不会有与原始记录相同的数据类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(dissoc jacob :title)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;Jacob&amp;#34;} &amp;lt;- that&amp;#39;s not a were_records.WereWolf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这至少有两个原因：第一，访问 Map 值比访问记录值要慢，所以如果你要建立一个高性能的程序，就要注意了。第二，当你创建一个新的记录类型时，你可以扩展它来实现一个协议，类似于你之前使用&lt;code>extend-type&lt;/code>扩展一个类型。如果你&lt;code>dissoc&lt;/code>一个记录，然后试图在结果上调用一个协议方法，记录的协议方法就不会被调用。&lt;/p>
&lt;p>下面是你在定义记录时如何扩展一个协议。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (defprotocol WereCreature
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (full-moon-behavior [x]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (defrecord WereWolf [name title]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WereCreature
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (full-moon-behavior [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str name &amp;#34; will howl and murder&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(full-moon-behavior (map-&amp;gt;WereWolf {:name &amp;#34;Lucian&amp;#34; :title &amp;#34;CEO of Melodrama&amp;#34;}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Lucian will howl and murder&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们创建了一个新的协议，&lt;code>WereCreature&lt;/code> ➊，有一个方法，&lt;code>full-moon-behavior&lt;/code> ➋。在➌，&lt;code>defrecord&lt;/code>为&lt;code>WereWolf&lt;/code>实现了&lt;code>WereCreature&lt;/code>。在&lt;code>full-moon-behavior&lt;/code>实现中最有趣的部分是你可以访问&lt;code>name&lt;/code>。你还可以访问&lt;code>title'和任何其他可能为你的记录定义的字段。你也可以使用&lt;/code>extend-type&lt;code>和&lt;/code>extend-protocol`来扩展记录。&lt;/p>
&lt;p>你什么时候应该使用记录，什么时候应该使用 Map？一般来说，如果你发现自己在创建 Map 时反复使用相同的字段，你应该考虑使用记录。这告诉你，这组数据代表了你的应用程序领域的信息，如果你提供一个基于你试图建模的概念的名称，你的代码将更好地传达其目的。不仅如此，记录访问比 Map 访问更有表现力，所以你的程序会变得更有效率一些。最后，如果你想使用协议，你就需要创建一个记录。&lt;/p>
&lt;h2 id="进一步研究">进一步研究&lt;/h2>
&lt;p>Clojure 提供了其他的工具来处理抽象和数据类型。这些工具，我认为是高级的，包括&lt;code>deftype&lt;/code>，&lt;code>reify&lt;/code>，和&lt;code>proxy&lt;/code>。如果你有兴趣了解更多，请查看*&lt;a class="link" href="http://clojure.org/reference/datatypes/" target="_blank" rel="noopener"
>http://clojure.org/datatypes/&lt;/a>*上关于数据类型的文档。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Clojure 的设计原则之一就是要写到抽象。在本章中，你学到了如何使用 Multimethods 和原型来定义你自己的抽象概念。这些结构提供了多态，允许同一个操作根据它的参数有不同的表现。你还学会了如何用&lt;code>defrecord&lt;/code>创建和使用自己的关联数据类型，以及如何扩展记录来实现协议。&lt;/p>
&lt;p>当我刚开始学习 Clojure 时，我对使用 Multimethods、协议和记录感到很害羞。然而，它们在 Clojure 库中经常被使用，所以了解它们的工作原理是很好的。一旦你掌握了它们，它们会帮助你写出更干净的代码。&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;ol>
&lt;li>扩展&lt;code>full-moon-behavior&lt;/code>Multimethods，为你自己的 were-creature 类型添加行为。&lt;/li>
&lt;li>创建一个&lt;code>WereSimmons&lt;/code>记录类型，然后扩展&lt;code>WereCreature&lt;/code>协议。&lt;/li>
&lt;li>创建你自己的协议，然后使用&lt;code>extend-type&lt;/code>和&lt;code>extend-protocol&lt;/code>来扩展它。&lt;/li>
&lt;li>创建一个角色扮演游戏，使用多重调度来实现行为。&lt;/li>
&lt;/ol></description></item><item><title>Chapter12 与 Java 的互操作</title><link>https://example.com/p/chapter12-%E4%B8%8E-java-%E7%9A%84%E4%BA%92%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 15 Jan 2022 20:55:18 +0800</pubDate><guid>https://example.com/p/chapter12-%E4%B8%8E-java-%E7%9A%84%E4%BA%92%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="与-jvm-一起工作">与 JVM 一起工作&lt;/h1>
&lt;p>在每个 Clojurist 的生命中都会有这么一天，她必须从纯函数和不可变数据结构的庇护所冒险进入野蛮的 Java 大陆。这段艰难的旅程是必要的，因为 Clojure 是在 Java 虚拟机（JVM）上托管的，这赋予了它三个基本特性。&lt;/p>
&lt;p>赋予它三个基本特征。首先，你运行 Clojure 应用程序的方式与你运行 Java 应用程序的方式相同。第二，你需要使用 Java 对象来实现核心功能，如读取文件和处理日期。第三，Java 有一个庞大的有用库的生态系统，你需要对 Java 有一定的了解才能使用它们。&lt;/p>
&lt;p>这样一来，Clojure 就有点像一个乌托邦社区，被放置在一个乌托邦国家的中间。显然，你更愿意与其他乌托邦人互动，但偶尔你也需要与当地人交谈，以便完成工作。&lt;/p>
&lt;p>这一章就像一本短语书和 Java 国家的文化介绍之间的交叉。你将了解什么是 JVM，它是如何运行程序的，以及如何为它编译程序。本章还将为你简要介绍常用的 Java 类和方法，并解释如何使用 Clojure 与它们互动。你将学会如何思考和理解 Java，以便将任何 Java 库纳入你的 Clojure 程序中。&lt;/p>
&lt;p>要运行本章的例子，你需要在电脑上安装 1.6 或更高版本的 Java 开发工具包（JDK）。你可以通过在终端运行&lt;code>javac -version&lt;/code>来检查。你应该看到类似 &amp;ldquo;java 1.8.0_40 &amp;ldquo;的内容；如果没有，请访问&lt;a class="link" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener"
>&lt;em>http://www.oracle.com/&lt;/em>&lt;/a>，下载最新的 JDK。&lt;/p>
&lt;h2 id="jvm">JVM&lt;/h2>
&lt;p>开发人员用 JVM 这个词来指代一些不同的东西。你会听到他们说，&amp;ldquo;Clojure 在&lt;em>the&lt;/em> JVM 上运行&amp;rdquo;，你也会听到，&amp;ldquo;Clojure 程序在&lt;em>a&lt;/em> JVM 中运行&amp;rdquo;。在第一种情况下，JVM 指的是一个抽象概念&amp;ndash;Java 虚拟机的一般模型。在第二种情况下，它指的是一个进程&amp;ndash;一个正在运行的程序的实例。我们将专注于 JVM 模型，但当我们谈论运行中的 JVM 进程时，我将指出来。&lt;/p>
&lt;p>为了理解 JVM，让我们回头看看普通的计算机是如何工作的。在计算机心脏的深处是它的 CPU，而 CPU 的工作是执行像&lt;em>加和&lt;/em>无符号乘法这样的操作。你可能听说过程序员将这些指令编码在打卡机上、灯泡里、乌龟壳的神圣缝隙里，或者&lt;em>什么的，但现在这些操作在汇编语言中用 ADD 和 MUL 这样的记忆符号表示。CPU 架构（X86、ARMv7，等等）决定了哪些操作可以作为该架构的&lt;/em>指令集的一部分。&lt;/p>
&lt;p>由于用汇编语言编程并不有趣，人们发明了像 C 和 C++这样的高级语言，将其编译成 CPU 可以理解的指令。大体上说，这个过程是&lt;/p>
&lt;ol>
&lt;li>编译器读取源代码。&lt;/li>
&lt;li>编译器输出一个包含机器指令的文件。&lt;/li>
&lt;li>CPU 执行这些指令。&lt;/li>
&lt;/ol>
&lt;p>在图 12-1 中注意到，最终，你必须将程序翻译成 CPU 能够理解的指令，而 CPU 并不关心你用哪种编程语言来产生这些指令。&lt;/p>
&lt;p>JVM 类似于计算机，它也需要将代码翻译成低级别的指令，称为&lt;em>Java 字节码&lt;/em>。然而，作为一个&lt;em>虚拟&lt;/em>机器，这种翻译是作为软件而不是硬件实现的。运行中的 JVM 通过将字节码实时翻译成主机可以理解的机器代码来执行，这个过程被称为&lt;em>及时**编译&lt;/em>。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/java/compile.png"
loading="lazy"
>&lt;/p>
&lt;p>图 12-1：C 语言程序如何被翻译成机器码的高级概述&lt;/p>
&lt;p>为了让一个程序在 JVM 上运行，它必须被编译成 Java 字节码。通常，当你编译程序时，产生的字节码被保存在一个*.class&lt;em>文件中。然后你会把这些文件打包在&lt;/em>Java 归档*文件（JAR 文件）中。就像 CPU 不关心你用哪种编程语言来生成机器指令一样，JVM 也不关心你如何创建字节码。它不关心你是否使用 Scala、JRuby、Clojure，甚至是 Java 来创建 Java 字节码。一般来说，这个过程就像图 12-2 中所示的那样。&lt;/p>
&lt;ol>
&lt;li>Java 编译器读取源代码。&lt;/li>
&lt;li>编译器输出字节码，通常是在一个 JAR 文件中。&lt;/li>
&lt;li>JVM 执行字节码。&lt;/li>
&lt;li>VM 向 CPU 发送机器指令。&lt;/li>
&lt;/ol>
&lt;p>当有人说 Clojure 在 JVM 上运行时，他们的意思之一是 Clojure 程序被编译成 Java 字节码，JVM 进程执行它们。从操作的角度来看，这意味着你对待 Clojure 程序和 Java 程序是一样的。你把它们编译成 JAR 文件，并使用&lt;code>java&lt;/code>命令运行它们。如果客户需要一个在 JVM 上运行的程序，你可以偷偷地用 Clojure 而不是 Java 来编写，他们不会知道的。从外面看，你无法分辨 Java 和 Clojure 程序之间的区别，就像你无法分辨 C 和 C++程序之间的区别一样。Clojure 可以让你变得富有成效，而且是偷偷摸摸的。&lt;/p>
&lt;p>！&lt;a class="link" href="https://www.braveclojure.com/assets/images/cftbat/java/jvm-compile.png" target="_blank" rel="noopener"
>&lt;/a>&lt;/p>
&lt;p>图 12-2：Java 程序产生 JVM 字节码，但 JVM 仍然需要产生机器指令，就像 C 语言编译器一样。&lt;/p>
&lt;h2 id="编写编译和运行一个-java-程序">编写、编译和运行一个 Java 程序&lt;/h2>
&lt;p>让我们来看看一个真正的 Java 程序是如何工作的。在本节中，你将了解到 Java 所使用的面向对象的范式。然后，你将用 Java 建立一个简单的海盗短语书。这将帮助你对 JVM 感到更加舒适，它将为即将到来的 Java 互操作（编写直接使用 Java 类、对象和方法的 Clojure 代码）一节做好准备，如果有一个恶棍试图在公海上破坏你的战利品，它就会派上用场。为了把所有的信息联系在一起，你将在本章的最后偷看一些 Clojure 的 Java 代码。&lt;/p>
&lt;h3 id="面向对象的编程在世界最微小的果壳中的应用">面向对象的编程在世界最微小的果壳中的应用&lt;/h3>
&lt;p>Java 是一种面向对象的语言，所以如果你想了解你在 Clojure 编程中使用 Java 库或编写 Java 互操作代码时发生了什么，你就需要了解面向对象编程（OOP）是如何工作的。你也会在 Clojure 文档中发现面向对象的术语，所以学习这些概念很重要。如果你精通 OOP，可以随意跳过本节。对于那些需要两分钟了解的人来说，这里是：OOP 的核心角色是&lt;em>类&lt;/em>、&lt;em>对象&lt;/em>和&lt;em>方法&lt;/em>。&lt;/p>
&lt;p>我认为对象是真正的、真正的、可笑的蠢货机器人。它们是那种永远不会引起哲学辩论的机器人，即强迫有知觉的生物进行永久的奴役的伦理。这些机器人只做两件事：他们响应命令和维护数据。在我的想象中，它们通过在小 Hello Kitty 剪贴板上写下东西来做这件事。&lt;/p>
&lt;p>想象一下，一个制造这些机器人的工厂。机器人所理解的命令集和它所维护的数据集都是由制造机器人的工厂决定的。在 OOP 术语中，工厂对应于类，androids 对应于对象，而命令对应于方法。例如，你可能有一个&lt;code>ScaryClown'工厂（类），它生产的androids（对象）响应&lt;/code>makeBalloonArt&amp;rsquo;命令（方法）。这个安卓机一直跟踪它所拥有的气球的数量，然后在气球的数量发生变化时更新这个数字。它可以用&lt;code>balloonCount&lt;/code>报告这个数字，用&lt;code>receiveBalloons&lt;/code>接收任何数量的气球。下面是你如何与代表小丑 Belly Rubs 的 Java 对象进行交互。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ScaryClown bellyRubsTheClown = new ScaryClown();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bellyRubsTheClown.balloonCount();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bellyRubsTheClown.receiveBalloons(2);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bellyRubsTheClown.balloonCount();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bellyRubsTheClown.makeBalloonArt();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;Belly Rubs makes a balloon shaped like a clown, because Belly Rubs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; is trying to scare you and nothing is scarier than clowns.&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子告诉你如何使用&lt;code>ScaryClown&lt;/code>类创建一个新的对象&lt;code>bellyRubsTheClown&lt;/code>。它还向你展示了如何在该对象上调用方法（如&lt;code>气球计数'、&lt;/code>接收气球&amp;rsquo;和`制作气球艺术&amp;rsquo;），大概是为了让你能吓唬孩子。&lt;/p>
&lt;p>你应该知道 OOP 的最后一个方面，或者至少是它在 Java 中的实现方式，就是你也可以向工厂发送命令。在 OOP 术语中，你会说，类也有方法。例如，内置类&lt;code>Math&lt;/code>有许多类方法，包括&lt;code>Math.abs&lt;/code>，它返回一个数字的绝对值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Math.abs(-50)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; 50
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我希望这些小丑没有给你造成太大的创伤。现在让我们把你的 OOP 知识用在工作上吧!&lt;/p>
&lt;h3 id="ahoy-world">Ahoy, World&lt;/h3>
&lt;p>继续前进，创建一个名为&lt;em>phrasebook&lt;/em>的新目录。在该目录中，创建一个名为&lt;em>PiratePhrases.java&lt;/em>的文件，并编写以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">public class PiratePhrases
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;Shiver me timbers!!&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个非常简单的程序将在你运行时向你的终端打印 &amp;ldquo;Shiver me timbers!!!&amp;ldquo;这句话。(这就是海盗说 &amp;ldquo;你好，世界！&amp;ldquo;的方式），当你运行它时，它将打印到你的终端。它由一个类&lt;code>PiratePhrases&lt;/code>和一个属于该类的静态方法&lt;code>main&lt;/code>组成。静态方法本质上是类的方法。&lt;/p>
&lt;p>在你的终端，用 javac PiratePhrases.java 命令编译&lt;code>PiratePhrases&lt;/code>源代码。如果你打的字都是正确的，**你的心是纯洁的，你应该看到一个名为&lt;em>PiratePhrases.class&lt;/em>的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PiratePhrases.class PiratePhrases.java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你刚刚编译了你的第一个 Java 程序，我的朋友! 现在用&lt;code>java PiratePhrases&lt;/code>运行它。你应该看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Shiver me timbers!!!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里发生的事情是你用 Java 编译器&lt;code>javac&lt;/code>创建了一个 Java 类文件，&lt;em>PiratePhrases.class&lt;/em>。这个文件包含了大量的 Java 字节码（好吧，对于这么大的程序，也许只有一个字节）。&lt;/p>
&lt;p>当你运行 &amp;ldquo;java PiratePhrases &amp;ldquo;时，JVM 首先查看了你的&lt;em>classpath&lt;/em>，寻找一个名为 &amp;ldquo;PiratePhrases &amp;ldquo;的类。classpath 是文件系统的路径列表，JVM 通过搜索来寻找定义类的文件。默认情况下，classpath 包括你运行 java 时所在的目录。试着运行 java -classpath /tmp PiratePhrases，你会得到一个错误，尽管&lt;em>PiratePhrases.class&lt;/em>就在你的当前目录中。&lt;/p>
&lt;p>注意 你可以在你的 classpath 上有多个路径，如果你在 Mac 上或运行 Linux，可以用冒号隔开，如果你在使用 Windows，可以用分号。例如，classpath /tmp:/var/maven:.包括/tmp、/var/maven 和.目录。&lt;/p>
&lt;p>在 Java 中，每个文件只允许有一个公有类，而且文件名必须与类名一致。这就是为什么&lt;code>java&lt;/code>知道要尝试在&lt;em>PiratePhrases.class&lt;/em>中寻找&lt;code>PiratePhrases&lt;/code>类的字节码。在&lt;code>java&lt;/code>找到&lt;code>PiratePhrases&lt;/code>类的字节码后，它执行了该类的&lt;code>main&lt;/code>方法。Java 与 C 语言类似，只要你说 &amp;ldquo;运行某些东西，并使用这个类作为入口点&amp;rdquo;，它就会一直运行这个类的&lt;code>main'方法；因此，这个方法必须是&lt;/code>public&amp;rsquo;，你可以在`PiratePhrases&amp;rsquo;的源代码中看到。&lt;/p>
&lt;p>在下一节，你将学习如何处理跨越多个文件的程序代码，以及如何使用 Java 库。&lt;/p>
&lt;h2 id="包和导入">包和导入&lt;/h2>
&lt;p>为了了解如何使用多文件程序和 Java 库，我们将编译并运行一个程序。本节对 Clojure 有直接的影响，因为你将使用同样的想法和术语来与 Java 库进行交互。&lt;/p>
&lt;p>让我们从几个定义开始。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>包&lt;/strong>与 Clojure 的命名空间类似，包提供了代码组织。包包含类，包名对应于文件系统的目录。如果一个文件中有 &amp;ldquo;package com.shapemaster &amp;ldquo;一行，那么目录&lt;em>com/shapemaster&lt;/em>一定存在于你的 classpath 上。在该目录中会有定义类的文件。&lt;/li>
&lt;li>&lt;strong>import&lt;/strong> Java 允许你导入类，这基本上意味着你可以不使用它们的命名空间前缀来引用它们。所以如果你在&lt;code>com.shapemaster&lt;/code>中有一个名为&lt;code>Square&lt;/code>的类，你可以在&lt;code>.java&lt;/code>文件的顶部写上&lt;code>import``com.shapemaster.Square;&lt;/code>或&lt;code>import com.shapemaster.*;&lt;/code>，以便在你的代码中使用&lt;code>Square&lt;/code>而不是&lt;code>com.shapemaster.Square&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>让我们试试使用&lt;code>package&lt;/code>和&lt;code>import&lt;/code>。在这个例子中，你将创建一个名为&lt;code>pirate_phrases&lt;/code>的包，它有两个类，&lt;code>问候'和&lt;/code>告别&amp;rsquo;。 首先，浏览你的&lt;em>phrasebook&lt;/em>，在该目录下创建另一个目录，&lt;em>pirate_phrases&lt;/em>。创建&lt;em>pirate_phrases&lt;/em>是必要的，因为 Java 包的名称与文件系统的目录相对应。然后，在&lt;em>pirate_phrases&lt;/em>目录下创建&lt;em>Greetings.java&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="err">➊&lt;/span> &lt;span class="kn">package&lt;/span> &lt;span class="nx">pirate_phrases&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">class&lt;/span> &lt;span class="nx">Greetings&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Shiver me timbers!!!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊，&lt;code>package pirate_phrases;&lt;/code>表示这个类将是&lt;code>pirate_phrases&lt;/code>包的一部分。现在在&lt;em>pirate_phrases&lt;/em>目录下创建&lt;em>Farewells.java&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">pirate_phrases&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">class&lt;/span> &lt;span class="nx">Farewells&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">goodbye&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;A fair turn of the tide ter ye thar, ye magnificent sea friend!!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在在&lt;em>phrasebook&lt;/em>目录下创建&lt;em>PirateConversation.java&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">import pirate_phrases.*;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class PirateConversation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Greetings greetings = new Greetings();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> greetings.hello();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Farewells farewells = new Farewells();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> farewells.goodbye();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一行，&lt;code>import pirate_phrases.*;&lt;/code>，导入了&lt;code>pirate_phrases&lt;/code>包中的所有类，其中包含&lt;code>问候'和&lt;/code>告别&amp;rsquo;类。&lt;/p>
&lt;p>如果你在&lt;em>phrasebook&lt;/em>目录下运行&lt;code>javac PirateConversation.java&lt;/code>，接着运行&lt;code>java PirateConversation&lt;/code>，你应该看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Shiver me timbers!!!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">A fair turn of the tide ter ye thar, ye magnificent sea friend!!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>亲爱的读者，她在那里吹了起来。她确实在吹。&lt;/p>
&lt;p>注意，当你编译一个 Java 程序时，Java 会在你的 classpath 中搜索包。试着输入以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd pirate_phrases
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">javac ../PirateConversation.java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你会得到这个结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="p">..&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">PirateConversation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">java&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kn">package&lt;/span> &lt;span class="nx">pirate_phrases&lt;/span> &lt;span class="nx">does&lt;/span> &lt;span class="nx">not&lt;/span> &lt;span class="nx">exist&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">pirate_phrases&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">^&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>轰隆隆! Java 编译器刚刚告诉你，让你羞愧地垂下头来，也许还会哭泣一下。&lt;/p>
&lt;p>为什么？它认为&lt;code>pirate_phrases&lt;/code>包不存在。但这很愚蠢，对吗？你是在&lt;em>pirate_phrases&lt;/em>目录下！你是在&lt;em>pirate_phrases&lt;/em>目录下。&lt;/p>
&lt;p>这里发生的情况是，默认的 classpath 只包括当前的目录，在这种情况下是&lt;em>pirate_phrases&lt;/em>。 &lt;code>javac&lt;/code>试图找到&lt;em>phrasebook/pirate_phrases/pirate_phrases&lt;/em>目录，但该目录并不存在。当你在&lt;em>phrasebook&lt;/em>目录下运行&lt;code>javac ../PirateConversation.java&lt;/code>时，&lt;code>javac&lt;/code>试图找到&lt;em>phrasebook/pirate_phrases&lt;/em>目录，该目录确实存在。在不改变目录的情况下，尝试运行 javac -classpath ../ ../PirateConversation.java。吓我一跳，居然成功了! 这是因为你手动将 classpath 设置为&lt;em>pirate_phrases&lt;/em>的父目录，也就是&lt;em>phrasebook&lt;/em>。从那里，&lt;code>javac&lt;/code>可以成功地找到&lt;em>pirate_phrases&lt;/em>目录。&lt;/p>
&lt;p>综上所述，包组织了代码，并要求有一个匹配的目录结构。导入类可以让你引用它们，而不需要预留整个类的包名。 &lt;code>javac&lt;/code>和 Java 使用 classpath 查找包。&lt;/p>
&lt;h2 id="jar-文件">JAR 文件&lt;/h2>
&lt;p>JAR 文件允许你将所有的*.class&lt;em>文件捆绑成一个单一的文件。导航到你的&lt;/em>phrasebook*目录并运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">jar cvfe conversation.jar PirateConversation PirateConversation.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pirate_phrases/*.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">java -jar conversation.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就能正确显示海盗对话了。你把所有的类文件捆绑在&lt;em>conversation.jar&lt;/em>中。使用&lt;code>e&lt;/code>标志，你还指出&lt;code>PirateConversation&lt;/code>类是&lt;em>入口点&lt;/em>。入口点是包含 JAR 整体运行时应该执行的&lt;code>main'方法的类，&lt;/code>jar&amp;rsquo;将这些信息存储在 JAR 文件中的&lt;em>META-INF/MANIFEST.MF&lt;/em>文件中。如果你要阅读该文件，它将包含这一行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Main-Class: PirateConversation
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>顺便说一下，当你执行 JAR 文件时，你不必担心你在哪个目录下，相对于文件而言。你可以换到&lt;em>pirate_phrases&lt;/em>目录，然后运行&lt;code>java -jar .../conversation.jar&lt;/code>，就可以正常工作了。原因是 JAR 文件维护了目录结构。你可以用 jar tf conversation.jar 查看它的内容，它的输出是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">META-INF/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">meta-inf/manifest.mf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PirateConversation.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pirate_phrases/Farewells.class
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Pirate_phrases/Greetings.class
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以看到，JAR 文件包括&lt;em>pirate_phrases&lt;/em>目录。关于 JARs 还有一个有趣的事实：它们实际上只是带有*.jar*扩展名的 ZIP 文件。你可以像对待其他 ZIP 文件一样对待它们。&lt;/p>
&lt;h2 id="clojurejar">clojure.jar&lt;/h2>
&lt;p>现在你已经准备好看看 Clojure 在引擎盖下是如何工作的了! 下载[1.9.0 稳定版]（&lt;a class="link" href="http://repo1.maven.org/maven2/org/clojure/clojure/1.7.0/clojure-1.9.0.zip" target="_blank" rel="noopener"
>http://repo1.maven.org/maven2/org/clojure/clojure/1.7.0/clojure-1.9.0.zip&lt;/a>）并运行它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">java -jar clojure-1.7.0.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你应该看到最舒心的景象，Clojure REPL。它究竟是如何启动的呢？让我们看看 JAR 文件中的&lt;em>META-INF/MANIFEST.MF&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Manifest-Version: 1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Archiver-Version: Plexus Archiver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Created-By: Apache Maven
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Built-By: hudson
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Build-Jdk: 1.7.0_20
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Main-Class: clojure.main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看起来，&lt;code>clojure.main&lt;/code>被指定为入口点。这个类是怎么来的？嗯，看看 GitHub 上的&lt;em>clojure/main.java&lt;/em>，网址是*&lt;a class="link" href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/main.java" target="_blank" rel="noopener"
>https://github.com/clojure/clojure/blob/master/src/jvm/clojure/main.java&lt;/a>*。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Copyright (c) Rich Hickey. All rights reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * The use and distribution terms for this software are covered by the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * which can be found in the file epl-v10.html at the root of this distribution.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * By using this software in any fashion, you are agreeing to be bound by
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * the terms of this license.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * You must not remove this notice, or any other, from this software.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> **/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">clojure&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">clojure&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">clojure&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Var&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nx">clojure&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">class&lt;/span> &lt;span class="nx">main&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">final&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">private&lt;/span> &lt;span class="nx">Symbol&lt;/span> &lt;span class="nx">CLOJURE_MAIN&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">intern&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clojure.main&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">final&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">private&lt;/span> &lt;span class="nx">Var&lt;/span> &lt;span class="nx">REQUIRE&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clojure.core&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;require&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">final&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">private&lt;/span> &lt;span class="nx">Var&lt;/span> &lt;span class="nx">LEGACY_REPL&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clojure.main&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;legacy-repl&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">final&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">private&lt;/span> &lt;span class="nx">Var&lt;/span> &lt;span class="nx">LEGACY_SCRIPT&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clojure.main&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;legacy-script&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">final&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">private&lt;/span> &lt;span class="nx">Var&lt;/span> &lt;span class="nx">MAIN&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;clojure.main&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">legacy_repl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">REQUIRE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CLOJURE_MAIN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LEGACY_REPL&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">legacy_script&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">REQUIRE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CLOJURE_MAIN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">LEGACY_SCRIPT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">public&lt;/span> &lt;span class="nx">static&lt;/span> &lt;span class="nx">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">REQUIRE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">CLOJURE_MAIN&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">MAIN&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">applyTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">RT&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">seq&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，该文件定义了一个名为&lt;code>main&lt;/code>的类。它属于 &amp;ldquo;clojure &amp;ldquo;包，并定义了一个 &amp;ldquo;公共静态 &amp;ldquo;的 &amp;ldquo;main &amp;ldquo;方法，JVM 完全乐意将其作为一个入口点。以这种方式来看，Clojure 是一个 JVM 程序，就像其他程序一样。&lt;/p>
&lt;p>这并不是一个深入的 Java 教程，但我希望它有助于澄清程序员在谈论 Clojure &amp;ldquo;在 JVM 上运行 &amp;ldquo;或成为一种 &amp;ldquo;托管 &amp;ldquo;语言时的意思。在下一节中，你将继续探索 JVM 的魅力，学习如何在你的 Clojure 项目中使用额外的 Java 库。&lt;/p>
&lt;p>Clojure 应用程序 JARs&lt;/p>
&lt;p>你现在知道 Java 是如何运行 Java JARs 的，但它是如何运行捆绑为 JARs 的 Clojure 应用程序的呢？毕竟，Clojure 应用程序没有类，不是吗？&lt;/p>
&lt;p>事实证明，你可以通过在命名空间声明中加入&lt;code>(:gen-class)&lt;/code>指令，让 Clojure 编译器为一个命名空间生成一个类。(你可以在你创建的第一个 Clojure 程序中看到这一点，即第一章的&lt;em>clojure-noob&lt;/em>。还记得那个程序吗，小茶壶？） 这意味着编译器会产生必要的字节码，使 JVM 把命名空间当作定义了一个 Java 类。&lt;/p>
&lt;p>你在程序的&lt;em>project.clj&lt;/em>文件中，使用&lt;code>:main&lt;/code>属性，为你的程序设置入口点的命名空间。对于&lt;em>clojure-noob&lt;/em>，你应该看到&lt;code>:main ^:skip-aot clojure-noob.core&lt;/code>。当 Leiningen 编译这个文件时，它将添加一个&lt;em>meta-inf/manifest.mf&lt;/em>文件，该文件包含了生成的 JAR 文件的入口点。&lt;/p>
&lt;p>因此，如果你在命名空间中定义了一个&lt;code>-main&lt;/code>函数，并包括&lt;code>(:gen-class)&lt;/code>指令，同时在你的&lt;em>project.clj&lt;/em>文件中设置了&lt;code>:main&lt;/code>，你的程序在被编译为 JAR 时，将拥有 Java 运行它所需的一切。你可以在你的终端中试用这个方法，浏览你的&lt;em>clojure-noob&lt;/em>目录并运行这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">lein uberjar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">java -jar target/uberjar/clojure-noob-0.1.0-SNAPSHOT-standalone.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你应该看到打印出来的两条信息。&amp;ldquo;清洁度仅次于神性 &amp;ldquo;和 &amp;ldquo;I&amp;rsquo;m a little teapot!&amp;rdquo; 注意，你不需要 Leiningen 来运行这个 JAR 文件；你可以把它发送给朋友和邻居，只要他们安装了 Java，就可以运行它。&lt;/p>
&lt;h2 id="java-interop">Java Interop&lt;/h2>
&lt;p>Rich Hickey 对 Clojure 的设计目标之一是创造一种&lt;em>实用的语言。出于这个原因，Clojure 的设计是为了使你能够轻松地与 Java 类和对象进行交互，这意味着你可以使用 Java 广泛的本地功能和它的巨大生态系统。使用 Java 类、对象和方法的能力被称为&lt;/em>Java interop*。在本节中，你将学习如何使用 Clojure 的互操作语法，如何导入 Java 包，以及如何使用最常用的 Java 类。&lt;/p>
&lt;h3 id="互通语法">互通语法&lt;/h3>
&lt;p>使用 Clojure 的互操作语法，与 Java 对象和类的交互是很直接的。让我们从对象互操作语法开始。&lt;/p>
&lt;p>你可以使用&lt;code>(.&lt;/code>methodName object)来调用一个对象的方法。例如，因为所有的 Clojure 字符串都是作为 Java 字符串实现的，所以你可以对它们调用 Java 方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(.toUpperCase &amp;#34;By Bluebeard&amp;#39;s bananas!&amp;#34; )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;by bluebeard&amp;#39;s bananas!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (.indexOf &amp;#34;Let&amp;#39;s synergize our bleeding edges&amp;#34; &amp;#34;y&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些等同于这个 Java。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;By Bluebeard&amp;#39;s bananas!&amp;#34;.toUpperCase()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Let&amp;#39;s synergize our bleeding edges&amp;#34;.indexOf(&amp;#34;y&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，Clojure 的语法允许你向 Java 方法传递参数。在这个例子中，在➊，你把参数&lt;code>&amp;quot;y&amp;quot;&lt;/code>传给了&lt;code>indexOf&lt;/code>方法。&lt;/p>
&lt;p>你也可以调用类上的静态方法和访问类的静态字段。观察一下!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (java.lang.Math/abs -3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ java.lang.Math/PI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3.141592653589793
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊，你调用了&lt;code>java.lang.Math&lt;/code>类的&lt;code>abs&lt;/code>静态方法，在➋，你访问了该类的&lt;code>PI&lt;/code>静态字段。&lt;/p>
&lt;p>所有这些例子（除了&lt;code>java.lang.Math/PI&lt;/code>）都使用了扩展到使用*dot 特殊形式的宏。一般来说，你不需要使用点的特殊形式，除非你想写自己的宏来与 Java 对象和类交互。尽管如此，下面是每个例子后面的宏扩展。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand-1 &amp;#39;(.toUpperCase &amp;#34;By Bluebeard&amp;#39;s bananas!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (. &amp;#34;By Bluebeard&amp;#39;s bananas!&amp;#34; toUpperCase)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(macroexpand-1 &amp;#39;(.indexOf &amp;#34;Let&amp;#39;s synergize our bleeding edges&amp;#34; &amp;#34;y&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (. &amp;#34;Let&amp;#39;s synergize our bleeding edges&amp;#34; indexOf &amp;#34;y&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(macroexpand-1 &amp;#39;(Math/abs -3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (. Math abs -3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是点运算符的一般形式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(. object-expr-or-classname-symbol method-or-member-symbol optional-args*)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>点运算符还有一些功能，如果你有兴趣进一步探索它，你可以看看 clojure.org 关于 Java 互操作的文档*&lt;a class="link" href="http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form" target="_blank" rel="noopener"
>http://clojure.org/java_interop#Java%20Interop-The%20Dot%20special%20form&lt;/a>*。&lt;/p>
&lt;p>创建和变异对象&lt;/p>
&lt;p>上一节告诉你如何调用已经存在的对象的方法。本节向你展示如何创建新的对象以及如何与它们进行交互。&lt;/p>
&lt;p>你可以通过两种方式创建一个新的对象。&lt;code>(new ClassName optional-args)&lt;/code>和&lt;code>(ClassName. optional-args)&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(new String)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(String.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(String. &amp;#34;To Davey Jones&amp;#39;s Locker with ye hardies&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;To Davey Jones&amp;#39;s Locker with ye hardies&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>大多数人使用点的版本，&lt;code>(ClassName.)&lt;/code>。&lt;/p>
&lt;p>要修改一个对象，你要像上一节那样调用其上的方法。为了研究这个问题，让我们使用&lt;code>java.util.Stack&lt;/code>。这个类代表了一个后进先出（LIFO）的对象堆栈，或者只是&lt;em>堆栈&lt;/em>。&lt;em>堆栈&lt;/em>是一种常见的数据结构，它们之所以被称为堆栈，是因为你可以把它们想象成一摞实物，比如说，一摞你刚刚掠夺来的金币。当你向你的堆栈添加一个硬币时，你就把它添加到堆栈的顶部。当你取出一枚金币时，你就把它从上面移走。因此，最后添加的对象就是第一个被移除的对象。&lt;/p>
&lt;p>与 Clojure 数据结构不同，Java 堆栈是可变的。你可以向它们添加项目和删除项目，改变对象而不是派生出一个新的值。下面是你如何创建一个堆栈并向其添加一个对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(java.util.Stack.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (let [stack (java.util.Stack.)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push stack &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stack)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有几个有趣的细节。首先，你需要为&lt;code>stack&lt;/code>创建一个&lt;code>let&lt;/code>绑定，就像你在➊看到的那样，并把它作为&lt;code>let&lt;/code>形式的最后一个表达式。如果你不这样做，整个表达式的值将是字符串&lt;code>&amp;quot;Game of Thrones, ho!&amp;quot;&lt;/code>，因为那是&lt;code>push&lt;/code>的返回值。&lt;/p>
&lt;p>第二，Clojure 用方括号来打印堆栈，与它用于 Vector 的文本表示法相同，这可能会让你感到困惑，因为它不是一个 Vector。然而，你可以使用 Clojure 的&lt;code>seq&lt;/code>函数来读取堆栈中的数据结构，比如&lt;code>first&lt;/code>，。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [stack (java.util.Stack.)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push stack &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (first stack))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是你不能使用像&lt;code>conj&lt;/code>和&lt;code>into&lt;/code>这样的函数来添加元素到栈中。如果你这样做，你会得到一个异常。使用 Clojure 函数读取堆栈是可能的，因为 Clojure 扩展了对&lt;code>java.util.Stack&lt;/code>的抽象，这个主题你将在第 13 章学习。&lt;/p>
&lt;p>Clojure 提供了&lt;code>doto&lt;/code>宏，它允许你更简洁地在同一个对象上执行多个方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(doto (java.util.Stack.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push &amp;#34;Whoops, I meant &amp;#39;Land, ho!&amp;#39;&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Latest episode of Game of Thrones, ho!&amp;#34; &amp;#34;Whoops, I meant &amp;#39;Land, ho!&amp;#39;&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>doto&lt;/code>宏返回对象，而不是任何方法调用的返回值，它更容易理解。如果你用&lt;code>macroexpand-1&lt;/code>展开它，你可以看到它的结构与你刚才在前面的例子中看到的&lt;code>let&lt;/code>表达式相同。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;(doto (java.util.Stack.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push &amp;#34;Whoops, I meant &amp;#39;Land, ho!&amp;#39;&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/let
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [G__2876 (java.util.Stack.)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push G__2876 &amp;#34;Latest episode of Game of Thrones, ho!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.push G__2876 &amp;#34;Whoops, I meant &amp;#39;Land, ho!&amp;#39;&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> G__2876)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很方便!&lt;/p>
&lt;h3 id="导入">导入&lt;/h3>
&lt;p>在 Clojure 中，导入的效果和 Java 中的一样：你可以使用类，而不需要打出整个包的前缀。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(import java.util.Stack)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(Stack.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; []
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以使用这种一般形式一次导入多个类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(import [package.name1 ClassName1 ClassName2]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [package.name2 ClassName3 ClassName4])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(import [java.util Date Stack]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [java.net Proxy URI])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(Date.)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #inst &amp;#34;2016-09-19T20:40:02.733-00:00&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但通常情况下，你会在&lt;code>ns&lt;/code>宏中做所有的导入工作，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns pirate.talk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:import [java.util Date Stack].
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [java.net Proxy URI])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这两种不同的导入类的方法有相同的结果，但通常第二种方法更可取，因为对于阅读你的代码的人来说，在&lt;code>ns&lt;/code>声明中看到所有涉及命名的代码很方便。&lt;/p>
&lt;p>这就是你导入类的方法! 很简单。为了使生活更加简单，Clojure 自动导入了&lt;code>java.lang&lt;/code>中的类，包括&lt;code>java.lang.String&lt;/code>和&lt;code>java.lang.Math&lt;/code>，这就是为什么你能够使用&lt;code>String&lt;/code>而不用前面的包名。&lt;/p>
&lt;h2 id="常用的-java-类">常用的 Java 类&lt;/h2>
&lt;p>为了完善本章，让我们快速浏览一下你最可能用到的 Java 类。&lt;/p>
&lt;h3 id="系统类">系统类&lt;/h3>
&lt;p>系统 &amp;ldquo;类具有有用的类字段和方法，可以与程序运行的环境进行交互。你可以用它来获取环境变量，与标准输入、标准输出和错误输出流进行交互。&lt;/p>
&lt;p>最有用的方法和成员是&lt;code>exit&lt;/code>、&lt;code>getenv&lt;/code>和&lt;code>getProperty&lt;/code>。你可能在第 5 章中认识&lt;code>System/exit&lt;/code>，在那里你用它来退出 Peg Thing 游戏。`System/exit&amp;rsquo;可以终止当前程序，你可以把状态代码作为参数传给它。如果你对状态代码不熟悉，我推荐维基百科的 &amp;ldquo;退出状态 &amp;ldquo;文章，网址是*&lt;a class="link" href="http://en.wikipedia.org/wiki/Exit_status" target="_blank" rel="noopener"
>退出状态-维基百科&lt;/a>*。&lt;/p>
&lt;p>&lt;code>System/getenv&lt;/code>将以 Map 形式返回所有系统的环境变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(System/getenv)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;USER&amp;#34; &amp;#34;the-incredible-bulk&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;JAVA_ARCH&amp;#34; &amp;#34;x86_64&amp;#34; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>环境变量的一个常见用途是配置你的程序。&lt;/p>
&lt;p>JVM 有自己的属性列表，与计算机的环境变量分开，如果需要读取它们，可以使用&lt;code>System/getProperty&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (System/getProperty &amp;#34;user.dir&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;/Users/dabulk/projects/dabook&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (System/getProperty &amp;#34;java.version&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;1.7.0_17&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个调用➊返回 JVM 启动的目录，第二个调用➋返回 JVM 的版本。&lt;/p>
&lt;h3 id="日期类">日期类&lt;/h3>
&lt;p>Java 有很好的工具来处理日期问题。我不会对&lt;code>java.util.Date&lt;/code>类做太多的介绍，因为在线的 API 文档（可在*&lt;a class="link" href="http://docs.oracle.com/javase/7/docs/api/java/util/Date.html" target="_blank" rel="noopener"
>Date (Java Platform SE 7 )&lt;/a>*)很详尽。&lt;!-- raw HTML omitted -->作为&lt;!-- raw HTML omitted -->一个 Clojure 开发者，你应该知道这个&lt;code>date&lt;/code>类的三个特点。首先，Clojure 允许你使用这样的形式将日期表示为字面意义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#inst &amp;#34;2016-09-19T20:40:02.733-00:00&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第二，如果你想自定义如何将日期转换成字符串，或者你想将字符串转换成日期，你需要使用&lt;code>java.util.DateFormat&lt;/code>类。第三，如果你要做的任务是比较日期或试图在日期上添加分钟、小时或其他时间单位，你应该使用极其有用的 clj-time 库（你可以在*&lt;a class="link" href="https://github.com/clj-time/clj-time" target="_blank" rel="noopener"
>GitHub - clj-time/clj-time: 一个用于 Clojure 的日期和时间库，包装了 Joda 时间库。&lt;/a>*)。&lt;/p>
&lt;h2 id="文件和输入输出">文件和输入/输出&lt;/h2>
&lt;p>在这一节中，你将了解到 Java 的输入/输出（IO）方法，以及 Clojure 如何简化它。&lt;code>clojure.java.io&lt;/code>命名空间提供了许多方便的函数来简化 IO（&lt;em>&lt;a class="link" href="https://clojure.github.io/clojure/clojure.java.io-api.html" target="_blank" rel="noopener"
>clojure.java.io - Clojure v1.10.3 API 文档&lt;/a>&lt;/em>）。这很好，因为 Java 的 IO 并不完全是简单的。因为在你的编程生涯中，你可能会在某些时候想要执行 IO，让我们开始把你的思想触角缠绕在它上面。&lt;/p>
&lt;p>IO 涉及到资源，无论是文件、套接字、缓冲区，还是其他什么。Java 有独立的类来读取资源的内容，写入其内容，以及与资源的属性进行交互。&lt;/p>
&lt;p>例如，&lt;code>java.io.File&lt;/code>类用于与文件的属性进行交互。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [file (java.io.File. &amp;#34;/&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (println (.exists file))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (println (.canWrite file))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (println (.getPath file)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; /
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/java/lion.png"
loading="lazy"
>&lt;/p>
&lt;p>在其他任务中，你可以用它来检查一个文件是否存在，获得文件的读/写/执行权限，并获得其文件系统路径，你可以在➊、➋和➌分别看到。&lt;/p>
&lt;p>在这个能力列表中，明显缺少读和写。要读一个文件，你可以使用&lt;code>java.io.BufferedReader&lt;/code>类或者&lt;code>java.io.FileReader&lt;/code>。同样地，你可以使用&lt;code>java.io.BufferedWriter&lt;/code>或&lt;code>java.io.FileWriter&lt;/code>类来写。其他类也可用于读写，你选择哪一个取决于你的具体需求。读取器和写入器类的接口都有相同的基本方法集；读取器实现了&lt;code>读取'、&lt;/code>关闭&amp;rsquo;等，而写入器实现了&lt;code>添加'、&lt;/code>写入&amp;rsquo;、&lt;code>关闭'和&lt;/code>刷新&amp;rsquo;。Java 给你提供了各种 IO 工具。一个愤世嫉俗的人可能会说，Java 给你的绳子足以让你上吊，如果你找到这样一个人，我希望你能给他一个拥抱。&lt;/p>
&lt;p>不管怎么说，Clojure 使你的读写更容易，因为它包括了统一不同种类资源的读写的函数。例如，&lt;code>spit&lt;/code>写到一个资源，而&lt;code>slurp&lt;/code>从一个资源中读出。下面是一个使用它们来写和读一个文件的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(spit &amp;#34;/tmp/hercules-todo-list&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;- kill dat lion brov
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- chop up what nasty multi-headed snake thing&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(slurp &amp;#34;/tmp/hercules-todo-list&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;- kill dat lion brov
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - chop up what nasty multi-headed snake thing&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以对代表文件以外的资源的对象使用这些函数。下一个例子使用了一个&lt;code>StringWriter&lt;/code>，它允许你对一个字符串进行 IO 操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [s (java.io.StringWriter.)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (spit s &amp;#34;- capture cerynian hind like for real&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.toString s))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;- capture cerynian hind like for real&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以使用 &amp;ldquo;slurp &amp;ldquo;从&lt;code>StringReader&lt;/code>中读取。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [s (java.io.StringReader. &amp;#34;- get erymanthian pig what with the tusks&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (slurp s))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;- get erymanthian pig what with the tusks&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，你可以对资源使用&lt;code>读&lt;/code>和&lt;code>写&lt;/code>方法。使用哪种方法并没有什么区别；&lt;code>spit&lt;/code>和&lt;code>slurp&lt;/code>很方便，因为它们只需使用一个代表文件系统路径或 URL 的字符串。&lt;/p>
&lt;p>&lt;code>with-open&lt;/code>宏是另一种便利：它在其主体的末尾隐含地关闭一个资源，确保你不会因为忘记手动关闭资源而意外地占用资源。&lt;code>reader&lt;/code>函数是一个方便的工具，根据&lt;code>clojure.java.io&lt;/code>API 文档，&amp;ldquo;试图将其参数强制到一个开放的&lt;code>java.io.Reader&lt;/code>&amp;quot;。当你不想使用&lt;code>slurp&lt;/code>时，这很方便，因为你不想尝试完整地读取一个资源，你也不想弄清楚你需要使用哪个 Java 类。如果你想一行一行地读取一个文件，你可以使用&lt;code>reader&lt;/code>和&lt;code>with-open&lt;/code>以及&lt;code>line-seq&lt;/code>函数。下面是如何打印 Hercules 待办事项清单的第一项的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(with-open [todo-list-rdr (clojure.java.io/reader &amp;#34;/tmp/hercules-todo-list&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (first (line-seq todo-list-rdr))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; - kill dat lion brov
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这应该足以让你在 Clojure 中开始使用 IO。如果你想做更复杂的任务，一定要看看&lt;a class="link" href="https://clojure.github.io/clojure/clojure.java.io-api.html" target="_blank" rel="noopener"
>&lt;code>clojure.java.io&lt;/code> docs&lt;/a>，&lt;code>[java.nio.file](https://docs.oracle.com/javase/7/docs/api/java/nio/file/package-summary.html)&lt;/code>包文档，或&lt;code>[java.io](http://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html)&lt;/code>包文档。&lt;/p>
&lt;h2 id="资源">资源&lt;/h2>
&lt;ul>
&lt;li>&amp;ldquo;Java 虚拟机和编译器的解释&amp;rdquo;。 &lt;em>&lt;a class="link" href="https://www.youtube.com/watch?v=XjNwyXx2os8" target="_blank" rel="noopener"
>Java 虚拟机和编译器的解释&amp;ndash;YouTube&lt;/a>&lt;/em>&lt;/li>
&lt;li>clojure.org Java 互操作文档。 &lt;em>&lt;a class="link" href="http://clojure.org/java_interop" target="_blank" rel="noopener"
>Clojure - Java Interop&lt;/a>&lt;/em>&lt;/li>
&lt;li>维基百科的 &amp;ldquo;退出状态 &amp;ldquo;文章。 &lt;em>&lt;a class="link" href="http://en.wikipedia.org/wiki/Exit_status" target="_blank" rel="noopener"
>退出状态 - 维基百科&lt;/a>&lt;/em>&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中，你了解了 Clojure 被托管在 JVM 上的含义。Clojure 程序被编译成 Java 字节码并在 JVM 进程中执行。Clojure 程序也可以访问 Java 库，你可以使用 Clojure 的互操作设施轻松地与它们交互。&lt;/p></description></item><item><title>Chapter11 core.async</title><link>https://example.com/p/chapter11-core.async/</link><pubDate>Sat, 15 Jan 2022 12:56:01 +0800</pubDate><guid>https://example.com/p/chapter11-core.async/</guid><description>&lt;h1 id="用-coreasync-掌握并发进程">用 core.async 掌握并发进程&lt;/h1>
&lt;p>有一天，当你走在大街上时，你会惊讶、好奇，并有点厌恶地发现一台热狗自动贩卖机。你的头皮被有罪的好奇心刺痛，你会忍不住掏出三块钱，看看这个装置是否真的能工作。在 &amp;ldquo;咔嚓 &amp;ldquo;一声接受了你的钱后，它弹出了一个新鲜的热狗，包括面包和所有的东西。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-async/hotdog-vending-machine.png"
loading="lazy"
>&lt;/p>
&lt;p>自动售货机表现出简单的行为：当它收到钱时，它会放出一个热狗，然后为下一次购买做准备。当它的热狗用完时，它就会停止。我们周围的热狗自动售货机以不同的面貌出现，它们是独立的实体，同时对世界上的事件作出反应。你最喜欢的咖啡店的浓缩咖啡机，你小时候喜欢的宠物仓鼠&amp;ndash;所有的东西都可以被分解成一组行为，这些行为遵循一般的形式 &amp;ldquo;当&lt;em>x&lt;/em>发生时，做&lt;em>y&lt;/em>&amp;quot;。甚至我们写的程序也只是美化的热狗贩卖机，每一个都是独立的进程，等待着下一个事件的发生，无论是击键、超时，还是套接字上的数据到达。&lt;/p>
&lt;p>Clojure 的 core.async 库允许你在一个程序中创建多个独立进程。 本章描述了思考这种编程风格的有用模型，以及你在实际编写代码时需要了解的实际细节。你将学习如何使用通道在由 go 块和&lt;code>thread&lt;/code>创建的独立进程之间进行通信；了解一些关于 Clojure 如何通过停放和阻塞有效地管理线程；如何使用&lt;code>alts!!&lt;/code>；以及一种更直接的创建队列的方法。最后，你将学习如何用进程管道来踢回调的屁股。&lt;/p>
&lt;h2 id="进程的入门">进程的入门&lt;/h2>
&lt;p>core.async 的核心是*进程，一个并发运行的逻辑单元，对事件做出反应。进程对应于我们对现实世界的心理模型：实体之间的互动和响应是独立的，没有某种中央控制机制的牵制。你把钱放进机器里，就会有一个热狗出来，所有这些都不需要光照派或老大哥来策划整个事情。这与你迄今为止一直在探索的并发性观点不同，在那里，你定义的任务要么只是控制主线程的扩展（例如，用&lt;code>pmap&lt;/code>实现数据并行），要么是你没有兴趣与之交流的任务（如用&lt;code>future&lt;/code>创建的一次性任务）。&lt;/p>
&lt;p>把自动售货机看成是一个进程可能很奇怪：自动售货机是名词和事物，而进程是动词和行为。为了获得正确的思维方式，可以尝试将现实世界的物体定义为其事件驱动的行为的总和。当一粒种子被浇水时，它就会发芽；当母亲看着她的新生儿时，她就会感受到爱；而当你观看《&lt;em>星&lt;/em>战》第一集时，你会充满愤怒和绝望。如果你想变得超级哲学，可以考虑是否有可能将每个事物的本质定义为它所识别的事件的集合，以及它如何做出反应。现实是否只是热狗售卖机的组成？&lt;/p>
&lt;p>总之，我说得够多了! 让我们通过创建一些简单的过程，从理论上走向具体。首先，用 &amp;ldquo;lein new app playsync &amp;ldquo;创建一个新的 Leiningen 项目，名为&lt;em>playsync&lt;/em>。然后，打开&lt;em>project.clj&lt;/em>文件，将 core.async 添加到&lt;code>:dependencies&lt;/code>Vector 中，使其内容如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[[org.clojure/clojure &amp;#34;1.9.0&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[org.clojure/core.async &amp;#34;0.1.346.0-17112a-alpha&amp;#34;]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意 自从我写完这篇文章后，core.async 的版本有可能有所进步。关于最新的版本，请查看 core.async 的 GitHub 项目页面。但为了这些练习的目的，请使用这里列出的版本。&lt;/p>
&lt;p>接下来，打开&lt;em>src/playsync/core.clj&lt;/em>，使其看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns playsync.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [clojure.core.async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :as a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :refer [&amp;gt;! &amp;lt;! &amp;gt;!! &amp;lt;!! go chan buffer close! thread
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> alts! alts!! timeout]]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，当你在 REPL 中打开它时，你将拥有最常用的 core.async 函数供你使用。很好! 在创建像热狗售卖机那样复杂和革命性的东西之前，先创建一个进程，简单地打印它收到的消息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def echo-chan (chan))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(go (println (&amp;lt;! echo-chan)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! echo-chan &amp;#34;ketchup&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ketchup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一行代码中，你用&lt;code>chan&lt;/code>函数创建了一个名为&lt;code>echo-chan&lt;/code>的&lt;em>通道。通道传达&lt;/em>消息*。你可以把&lt;em>消息放到一个通道上，也可以把&lt;/em>消息从一个通道上拿下来。进程&lt;em>等待&lt;/em>放和取的完成&amp;ndash;这些是进程所响应的事件。你可以认为进程有两个规则。1）当试图把一个消息放到通道上或从通道上取走一个消息时，等待并不做任何事情，直到放或取成功；2）当放或取成功时，继续执行。&lt;/p>
&lt;p>在下一行，你用&lt;code>go&lt;/code>来创建一个新的进程。&lt;code>go&lt;/code>表达式中的所有内容都被称为&lt;em>go 块&lt;/em>，在一个单独的线程上并发运行。Go 块在一个线程池上运行你的进程，该线程池包含的线程数量等于你的机器上的核心数量的两倍，这意味着你的程序不必为每个进程创建一个新的线程。这通常会带来更好的性能，因为你避免了与创建线程有关的开销。&lt;/p>
&lt;p>在这个例子中，进程&lt;code>(println (&amp;lt;! echo-chan))&lt;/code>表达了 &amp;ldquo;当我从`echo-chan&amp;rsquo;那里得到一个消息时，打印它&amp;rdquo;。该进程被分流到另一个线程，释放了当前线程，使你能够继续与 REPL 交互。&lt;/p>
&lt;p>在表达式&lt;code>(&amp;lt;! echo-chan)&lt;/code>中，&lt;code>&amp;lt;!&lt;/code>是&lt;em>take&lt;/em>函数。它监听你给它作为参数的通道，它所属的进程等待，直到另一个进程在该通道上放出一个消息。当&lt;code>&amp;lt;!&lt;/code>检索到一个值时，该值被返回并执行&lt;code>println&lt;/code>表达式。&lt;/p>
&lt;p>表达式&lt;code>(&amp;gt;!! echo-chan &amp;quot;ketchup&amp;quot;)&lt;/code>将字符串&lt;code>&amp;quot;ketchup&amp;quot;&lt;/code>放到&lt;code>echo-chan&lt;/code>上并返回&lt;code>true&lt;/code>。当你把一个消息放在一个通道上时，该进程会阻塞，直到另一个进程接收该消息。在这种情况下，REPL 进程根本不需要等待，因为已经有一个进程在监听该通道，等待从该通道中获取信息。然而，如果你做了以下事情，你的 REPL 将无限期地阻塞。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(&amp;gt;!! (chan) &amp;#34;mustard&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你已经创建了一个新的通道，并在上面放了一些东西，但没有进程在监听这个通道。进程不仅仅是等待接收消息，他们也在等待他们放在通道上的消息被接收。&lt;/p>
&lt;h3 id="缓冲">缓冲&lt;/h3>
&lt;p>值得注意的是，前面的练习包含&lt;em>两个&lt;/em>进程：你用&lt;code>go&lt;/code>创建的进程和 REPL 进程。这些进程相互之间没有明确的知识，而且它们独立行动。&lt;/p>
&lt;p>让我们想象一下，这些过程发生在一个餐厅里。REPL 是番茄酱厨师，当他完成一个批次时，他大声说：&amp;ldquo;番茄酱！&amp;rdquo; 完全有可能的是，其他员工都在外面欣赏他们有机花园里最新的一批牛至，而厨师只是坐着等待，直到有人来取他的番茄酱。反过来说，&amp;ldquo;去 &amp;ldquo;的过程代表了其中一个工作人员，他正在耐心地等待着什么回应。可能是什么都没有发生，他只是无限期地等待，直到餐厅关门。&lt;/p>
&lt;p>这种情况似乎有点傻：哪个自尊心强的番茄酱厨师会在制作更多的番茄酱之前，只是坐等别人拿走他最新的一批番茄酱？为了避免这种悲剧的发生，你可以创建缓冲通道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def echo-buffer (chan 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! echo-buffer &amp;#34;ketchup&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! echo-buffer &amp;#34;ketchup&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! echo-buffer &amp;#34;ketchup&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; This blocks because the channel buffer is full
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(小心求值最后一个&lt;code>(&amp;gt;! ! echo-buffer &amp;quot;ketchup&amp;quot;)&lt;/code>，因为它将阻塞你的 REPL。如果你使用的是 Leiningen REPL，ctrl-C 会解除封锁）。&lt;/p>
&lt;p>在这种情况下，你已经创建了一个缓冲区大小为 2 的通道。这意味着你可以在通道上放两个值而不需要等待，但放第三个值意味着进程将等待，直到另一个进程从通道上取值。你还可以用&lt;code>sliding-buffer&lt;/code>创建&lt;em>滑动&lt;/em>缓冲区，它以先入先出的方式丢弃数值；用&lt;code>dropping-buffer&lt;/code>创建&lt;em>丢弃&lt;/em>缓冲区，它以后入先出的方式丢弃数值。这两种缓冲区都不会导致&lt;code>&amp;gt;!!&lt;/code>阻塞。&lt;/p>
&lt;p>通过使用缓冲区，番茄酱大师可以继续制作成批令人垂涎欲滴的番茄酱，而不必等待他的员工把它们带走。如果他使用普通的缓冲器，就像他有一个架子，可以把所有的番茄酱批次放在上面；一旦架子满了，他还得等待空间的打开。如果他用的是滑动缓冲器，当架子上的番茄酱满了，他就会把最旧的一批扔掉，把所有的番茄酱滑下来，然后把新的一批放到空出来的地方。如果是跌落式缓冲器，他就会把最新鲜的一批番茄酱从货架上打下来，然后把新的一批番茄酱放在那个空间里。&lt;/p>
&lt;p>缓冲区只是对核心模型的阐述：进程是独立的、并发执行的逻辑单元，对事件作出反应。你可以用 go 块来创建进程，并通过通道来沟通事件。&lt;/p>
&lt;h3 id="堵塞和停车">堵塞和停车&lt;/h3>
&lt;p>你可能已经注意到，take 函数&lt;code>&amp;lt;!&lt;/code>只使用了一个感叹号，而 put 函数&lt;code>&amp;gt;!&lt;/code>则使用了两个感叹号。事实上，put 和 take 都有一个感叹号和两个感叹号的种类。什么时候使用哪个？简单的答案是，你可以在 go 块内使用一个感叹号，但你必须在 go 块外使用两个感叹号。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Inside go block&lt;/th>
&lt;th>Outside go block&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>put&lt;/td>
&lt;td>&lt;code>&amp;gt;!&lt;/code> or &lt;code>&amp;gt;!!&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;gt;!!&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>take&lt;/td>
&lt;td>&lt;code>&amp;lt;!&lt;/code> or &lt;code>&amp;lt;!!&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;!!&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这一切都归结为效率问题。因为 go 块使用一个固定大小的线程池，你可以创建 1000 个 go 进程，但只使用少量的线程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def hi-chan (chan))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(doseq [n (range 1000)])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (&amp;gt;! hi-chan (str &amp;#34;hi &amp;#34; n)))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了理解 Clojure 是如何做到这一点的，我们需要探索进程如何&lt;em>等待。等待是使用 core.async 进程的一个关键方面：我们已经确定，&lt;em>put&lt;/em>会等待到另一个进程在同一通道上做&lt;/em>take*，反之亦然。在这个例子中，1,000 个进程在等待另一个进程从 &amp;ldquo;hi-chan &amp;ldquo;中提取。&lt;/p>
&lt;p>有两种类型的等待。 &lt;em>停车&lt;/em>和&lt;em>阻塞&lt;/em>。阻塞是你熟悉的那种等待：一个线程停止执行，直到一个任务完成。通常这发生在你进行某种 I/O 操作的时候。这个线程仍然活着，但不做任何工作，所以如果你想让你的程序继续工作，你必须创建一个新的线程。在第 9 章中，你学到了如何用 &amp;ldquo;future &amp;ldquo;来做这件事。&lt;/p>
&lt;p>停车释放了线程，这样它就可以继续工作了。假设你有一个线程和两个进程，Process A 和 Process B，Process A 在线程上运行，然后等待放或取。Clojure 将进程 A 移出线程，并将进程 B 移到线程上。如果进程 B 开始等待，而进程 A 的 put 或 take 已经完成，那么 Clojure 将把进程 B 移出线程，把进程 A 放回线程上。停放允许多个进程的指令在一个线程上交错，类似于使用多个线程允许在一个核心上交错的方式。停放的实现并不重要；只需说它只在 go 块内实现，并且只在使用&lt;code>&amp;gt;!&lt;/code>和&lt;code>&amp;lt;!&lt;/code>，或&lt;em>停放 put&lt;/em>和&lt;em>停放 take&lt;/em>时实现。&lt;code>&amp;gt;!!&lt;/code>和&lt;code>&amp;lt;!!&lt;/code>是&lt;em>停放的放&lt;/em>和&lt;em>停放的取&lt;/em>。&lt;/p>
&lt;h3 id="线程">线程&lt;/h3>
&lt;p>肯定有一些时候你会想使用阻塞而不是停放，比如你的进程要花很长时间才能放或取，在这些场合你应该使用&lt;code>线程&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(thread (println (&amp;lt;!! echo-chan)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! echo-chan &amp;#34;mustard&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; mustard
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>thread&lt;/code>的行为几乎与&lt;code>future&lt;/code>完全一样：它创建一个新的线程并在该线程上执行一个进程。与&lt;code>future'不同的是，&lt;/code>thread&amp;rsquo;不是返回一个可以反推的对象，而是返回一个通道。当&lt;code>thread&lt;/code>的进程停止时，该进程的返回值会被放在&lt;code>thread&lt;/code>返回的通道上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [t (thread &amp;#34;chili&amp;#34;) ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;lt;!! t))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;chili&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，进程不等待任何事件；相反，它立即停止。它的返回值是 &amp;ldquo;chili&amp;rdquo;，它被放在与&lt;code>t绑定的通道上。&lt;/code>我们从&lt;code>t&lt;/code>中获取，返回`&amp;ldquo;chili&amp;rdquo;。&lt;/p>
&lt;p>当你执行一个长期运行的任务时，你应该使用&lt;code>thread&lt;/code>而不是 go block，原因是你不会堵塞你的线程池。想象一下，你正在运行四个进程，下载巨大的文件，保存它们，然后把文件的路径放在一个通道上。当这些进程在下载文件和保存这些文件时，Clojure 不能停放它们的线程。它只能在最后一步停放线程，即进程将文件的路径放在通道上时。因此，如果你的线程池只有四个线程，所有四个线程都将被用于下载，在其中一个下载完成之前，不允许其他进程运行。&lt;/p>
&lt;p>&lt;code>go&lt;/code>、&lt;code>thread&lt;/code>、&lt;code>chan&lt;/code>、&lt;code>&amp;lt;!&lt;/code>、&lt;code>&amp;lt;!&lt;/code>、&lt;code>&amp;gt;!&lt;/code>和&lt;code>&amp;gt;!&lt;/code>是你用来创建和与进程通信的核心工具。put 和 take 都会使一个进程等待，直到它的补码在给定的通道上被执行。&lt;code>go&lt;/code>允许你使用 put 和 take 的停车变体，这可以提高性能。如果你在 put 和 take 之前执行长期运行的任务，你应该使用阻塞式变体，以及&lt;code>thread&lt;/code>。&lt;/p>
&lt;p>这应该能满足你的一切需求，让你实现你的心愿，创造一台把钱变成热狗的机器。&lt;/p>
&lt;h2 id="你一直渴望的热狗机过程">你一直渴望的热狗机过程&lt;/h2>
&lt;p>看哪，你的梦想成真了!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn hot-dog-machine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [in (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> out (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (&amp;lt;! in)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;! out &amp;#34;hot dog&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [in out]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数创建了一个&lt;code>in&lt;/code>通道用于接收钱，一个&lt;code>out&lt;/code>通道用于发放热狗。然后用&lt;code>go&lt;/code>创建一个异步进程，等待钱，然后发放热狗。最后，它将&lt;code>in&lt;/code>和&lt;code>out&lt;/code>通道作为一个 Vector 返回。&lt;/p>
&lt;p>是时候吃热狗了!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [[in out] (hot-dog-machine)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! in &amp;#34;pocket lint&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;lt;!! out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;hot dog&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个片段中，你用 destructuring（在第三章中讲到）和&lt;code>let&lt;/code>将&lt;code>in&lt;/code>和&lt;code>out&lt;/code>通道绑定到&lt;code>in&lt;/code>和&lt;code>out&lt;/code>符号。然后你把 &amp;ldquo;pocket lint &amp;ldquo;放在 &amp;ldquo;in &amp;ldquo;通道上。热狗机器进程等待着一些东西，任何东西，到达&lt;code>in&lt;/code>通道；一旦&lt;code>&amp;quot;pocket lint&amp;quot;&lt;/code>到达，热狗机器进程恢复执行，将&lt;code>&amp;quot;hot dog&amp;quot;&lt;/code>放在&lt;code>out&lt;/code>通道上。&lt;/p>
&lt;p>等一下……这不对。我的意思是，是的，免费的热狗，但是一定会有人因为机器接受小棉絮作为付款而不高兴。不仅如此，这台机器在关闭前只能发放一个热狗。让我们改变热狗机的功能，让你可以指定它有多少个热狗，并且当你给它数字 3 时，它才会发放一个热狗。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn hot-dog-machine-v2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [hot-dog-count]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [in (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> out (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (loop [hc hot-dog-count]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (&amp;gt; hc 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [input (&amp;lt;! in)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➊(if (= 3 input)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (&amp;gt;! out &amp;#34;hot dog&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (recur (dec hc)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (&amp;gt;! out &amp;#34;wilted lettuce&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (recur hc))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➋(do (close! in)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (close! out)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [in out]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有很多代码，但策略是直接的。新函数&lt;code>hot-dog-machine-v2&lt;/code>允许你指定&lt;code>hot-dog-count&lt;/code>。在➊的 go 块内，只有当数字 3（意思是三块钱）被放在`in&amp;rsquo;通道上时，它才会派发热狗；否则，它派发枯萎的生菜，这绝对不是热狗。一旦一个进程采取了输出，热狗机进程就会带着更新的热狗数量循环回来，并准备再次接收钱。&lt;/p>
&lt;p>当机器进程的热狗用完时，该进程就会在➋处&lt;em>关闭&lt;/em>通道。当你关闭一个通道时，你就不能再对它执行 put，而且一旦你从一个关闭的通道上取走所有的值，任何后续的取值都将返回 &amp;ldquo;nil&amp;rdquo;。&lt;/p>
&lt;p>让我们来试试清单 11-1 中的升级版热狗机，把钱和口袋里的棉絮放进去。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [[in out] (hot-dog-machine-v2 2)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! in &amp;#34;pocket lint&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (&amp;lt;!! out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! in 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (&amp;lt;!! out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! in 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (&amp;lt;!! out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! in 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;lt;!! out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; wilted lettuce
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; hotdog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; hotdog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>清单 11-1. 与一个健壮的热狗售货机进程交互&lt;/li>
&lt;/ol>
&lt;p>首先，我们尝试了 &amp;ldquo;口袋里的棉絮 &amp;ldquo;这一招，得到了打蔫的生菜。接下来，我们两次投入 3 美元，两次都得到一个热狗。然后，我们试图再投入 3 美元，但这被忽略了，因为通道已经关闭；数字 3 没有被放在通道上。当我们试图从 &amp;ldquo;出 &amp;ldquo;通道取钱时，我们得到的是 &amp;ldquo;零&amp;rdquo;，这也是因为该通道是关闭的。你可能会注意到&lt;code>hot-dog-machine-v2&lt;/code>的几个有趣的细节。首先，它在同一个 go 块中做了一个 put 和一个 take。这并不罕见，这也是创建进程&lt;em>管道的一种方法：只要让一个进程的&lt;/em>入&lt;em>通道成为另一个进程的&lt;/em>出*通道。下面的例子就是这样做的，把一个字符串通过一系列的进程进行转换，直到最后一个进程打印出这个字符串。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [c1 (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c2 (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c3 (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (&amp;gt;! c2 (clojure.string/upper-case (&amp;lt;! c1))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (&amp;gt;! c3 (clojure.string/reverse (&amp;lt;! c2))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (println (&amp;lt;! c3)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;!! c1 &amp;#34;redrum&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; MURDER
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在本章的最后，我将会有更多关于进程管道以及如何使用它们来代替回调的内容。&lt;/p>
&lt;p>回到清单 11-1! 另一件需要注意的事情是，热狗机在你处理完它所发放的东西之前，不会接受更多的钱。这允许你建立类似于状态机的行为模型，其中通道操作的完成会触发状态转换。例如，你可以认为自动售货机有两个状态。&lt;em>准备接收钱&lt;/em>和&lt;em>发放&lt;/em>物品*。插入钱和取走物品会触发这两者之间的转换。&lt;/p>
&lt;h2 id="alts">alts&lt;/h2>
&lt;p>core.async 函数&lt;code>alts!!&lt;/code>可以让你使用一个操作集合中第一个成功的通道操作的结果。我们在第 198 页的 &amp;ldquo;延迟 &amp;ldquo;中用延迟和 Future 做了类似的事情。在那个例子中，我们把一组头像上传到一个头像分享网站，并在第一张照片上传时通知头像所有者。下面是你如何用&lt;code>alts!!&lt;/code>做同样的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn upload
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [headshot c]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (Thread/sleep (rand 100))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;! c headshot)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (let [c1 (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c2 (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c3 (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (upload &amp;#34;serious.jpg&amp;#34; c1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (upload &amp;#34;fun.jpg&amp;#34; c2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (upload &amp;#34;sassy.jpg&amp;#34; c3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (let [[headshot channel] (alts!! [c1 c2 c3])]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Sending headshot notification for&amp;#34; headshot)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Sending headshot notification for sassy.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里，&lt;code>upload&lt;/code>函数接收一个头像和一个频道，并创建一个新的进程，该进程将随机睡眠一段时间（模拟上传），然后将头像放到频道上。从➊开始的&lt;code>let&lt;/code>绑定和&lt;code>upload&lt;/code>函数调用应该是有意义的：我们创建了三个通道，然后用它们来执行上传。&lt;/p>
&lt;p>事情在➋处变得有趣。&lt;code>alts!!&lt;/code>函数需要一个通道的 Vector 作为其参数。这就好比说，&amp;ldquo;试着在这些通道上同时做一个阻塞性的拍摄。一旦取值成功，返回一个 Vector，其第一个元素是取值，第二个元素是获胜的通道&amp;rdquo;。在这个例子中，与&lt;em>sassy.jpg&lt;/em>相关的通道首先收到了一个值。如果你想获取它们的值并对它们进行处理，其他通道仍然可用。&lt;code>alts!!&lt;/code>所做的只是从第一个有值的通道中获取一个值；它并不触及其他通道。&lt;/p>
&lt;p>&lt;code>alts!!&lt;/code>的一个很酷的方面是，你可以给它一个&lt;em>timeout 通道&lt;/em>，它等待指定的毫秒数，然后关闭。这是一个优雅的机制，可以为并发操作设置一个时间限制。下面是你如何在上传服务中使用它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [c1 (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (upload &amp;#34;serious.jpg&amp;#34; c1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [[headshot channel] (alts!! [c1 (timeout 20)])]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if headshot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Sending headshot notification for&amp;#34; headshot)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Timed out!&amp;#34;))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Timed out!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，我们将超时设置为 20 毫秒。因为上传没有在这个时间段完成，我们得到了一个超时消息。&lt;/p>
&lt;p>你也可以使用&lt;code>alts!!&lt;/code>来指定 put 操作。要做到这一点，在你传递给&lt;code>alts!!&lt;/code>的 Vector 内放置一个 Vector，就像本例中的➊。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [c1 (chan)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> c2 (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (&amp;lt;! c2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (let [[value channel] (alts!! [c1 [c2 &amp;#34;put!&amp;#34;]])]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println value)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (= channel c2)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里你创建了两个通道，然后创建了一个进程，等待对&lt;code>c2&lt;/code>进行处理。你提供给&lt;code>alts!!&lt;/code>的 Vector 告诉它，&amp;ldquo;尝试对&lt;code>c1'进行取舍，并尝试将&lt;/code>&amp;ldquo;put!&amp;quot;&lt;code>放在&lt;/code>c2&amp;rsquo;上。如果在&lt;code>c1&lt;/code>上的取值首先完成，返回其值和通道。如果在&lt;code>c2&lt;/code>上的投放先完成，如果投放成功，返回&lt;code>true&lt;/code>，否则返回&lt;code>false&lt;/code>。&amp;rdquo; 最后，&lt;code>value&lt;/code>的结果（是&lt;code>true&lt;/code>，因为&lt;code>c2&lt;/code>的通道是开放的）打印出来，显示返回的通道确实是&lt;code>c2&lt;/code>。&lt;/p>
&lt;p>像&lt;code>&amp;lt;!!&lt;/code>和&lt;code>&amp;gt;!!&lt;/code>一样，&lt;code>alts!!&lt;/code>有一个停车的选择，&lt;code>alts!&lt;/code>，你可以在 go 块中使用它。 &lt;code>alts!&lt;/code>是一个很好的方法，可以对一组通道中的哪一个进行投入或取出的选择。它仍然执行放和取，所以使用停放或阻塞变量的理由同样适用。&lt;/p>
&lt;p>这就涵盖了 core.async 的基础知识! 本章的其余部分解释了协调进程的两种常见模式。&lt;/p>
&lt;h2 id="队列">队列&lt;/h2>
&lt;p>在第 202 页的 &amp;ldquo;滚动你自己的队列 &amp;ldquo;中，你写了一个宏，让你对 Future 进行排队。进程让你以一种更直接的方式使用类似的技术。假设你想从一个网站上获得一堆随机的报价，并把它们写到一个文件中。你想确保每次只有一个报价被写入文件，这样文本就不会被交错，所以你把你的报价放在一个队列中。下面是完整的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn append-to-file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Write a string to the end of a file&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [filename s]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (spit filename s :append true))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn format-quote
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Delineate the beginning and end of a quote because it&amp;#39;s convenient&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [quote]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;=== BEGIN QUOTE ===\n&amp;#34; quote &amp;#34;=== END QUOTE ===\n\n&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn random-quote
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Retrieve a random quote and format it&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (format-quote (slurp &amp;#34;http://www.braveclojure.com/random-quote&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn snag-quotes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [filename num-quotes]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [c (chan)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (while true (append-to-file filename (&amp;lt;! c))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (dotimes [n num-quotes] (go (&amp;gt;! c (random-quote))))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数&lt;code>append-to-file&lt;/code>、&lt;code>format-quote&lt;/code>和&lt;code>random-quote&lt;/code>有文档说明它们的作用。&lt;code>snag-quotes&lt;/code>是发生有趣工作的地方。首先，它创建一个通道，在产生报价的进程和消费报价的进程之间共享。然后，它创建了一个使用 &amp;ldquo;while true &amp;ldquo;来创建一个无限循环的进程。在循环的每一次迭代中，它等待一个报价到达&lt;code>c&lt;/code>，然后将其追加到一个文件中。最后，&lt;code>snag-quotes&lt;/code>创建一个&lt;code>num-quotes&lt;/code>数量的进程来获取一个引号，然后把它放在&lt;code>c&lt;/code>上。如果你求值&lt;code>(snag-quotes &amp;quot;quotes&amp;quot; 2)&lt;/code>并检查你启动 REPL 的目录中的&lt;em>quotes&lt;/em>文件，它应该有两个引号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">=== BEGIN QUOTE ===
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Nobody&amp;#39;s gonna believe that computers are intelligent until they start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">coming in late and lying about it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=== END QUOTE ===
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=== BEGIN QUOTE ===
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Give your child mental blocks for Christmas.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">=== END QUOTE ===
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种排队方式与第 9 章中的例子不同。在那个例子中，每个任务都是按照其创建的顺序来处理的。在这里，每个获取报价的任务是按照它完成的顺序来处理的。在这两种情况下，你都要确保每次只有一个报价被写入文件。&lt;/p>
&lt;h2 id="用进程管道逃离回调地狱">用进程管道逃离回调地狱&lt;/h2>
&lt;p>在没有通道的语言中，你需要用 &amp;ldquo;回调 &amp;ldquo;来表达 &amp;ldquo;当&lt;em>x&lt;/em>发生时，做&lt;em>y&lt;/em>&amp;ldquo;的想法。在像 JavaScript 这样的语言中，回调是一种定义代码的方式，一旦其他代码完成就会异步执行。如果你使用过 JavaScript，你可能已经花了一些时间在&lt;em>回调地狱&lt;/em>中沉溺。&lt;/p>
&lt;p>它被称为回调地狱的原因是，在回调层之间很容易产生不明显的依赖关系。它们最终会共享状态，使得在回调被触发时很难推理整个系统的状态。你可以通过创建一个流程管道来避免这种令人沮丧的结果。这样一来，每个逻辑单元都生活在自己独立的进程中，逻辑单元之间的所有通信都通过明确定义的输入和输出通道进行。&lt;/p>
&lt;p>在下面的例子中，我们创建了三个通过通道连接的无限循环进程，将一个进程的&lt;em>输出&lt;/em>通道作为管道中下一个进程的&lt;em>输入&lt;/em>通道。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn upper-caser
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [in］
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [out (chan)] (让 [out (chan)])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (while true (&amp;gt;! out (clojure.string/upper-case (&amp;lt;! in))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn reverser
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [in］
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [out (chan)] (go (while true (&amp;gt;!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (while true (&amp;gt;! out (clojure.string/reverse (&amp;lt;! in))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn printer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [in］
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (go (while true (println (&amp;lt;! in))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def in-chan (chan))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def upper-caser-out (upper-caser in-chan))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def reverser-out (reverser upper-caser-out))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(Printer reverser-out)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;！！in-chan &amp;#34;redrum&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; MURDER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;gt;!! in-chan &amp;#34;repaid&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; DIAPER
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过使用这样的流程处理事件，推理整个数据转换系统的各个步骤就更容易了。你可以查看每个步骤并理解它的作用，而不必参考之前可能发生的事情或之后可能发生的事情；每个过程就像一个纯函数一样容易推理。&lt;/p>
&lt;h2 id="额外资源">额外资源&lt;/h2>
&lt;p>Clojure 的 core.async 库在很大程度上受到 Go 的并发模型的启发，它是基于 Tony Hoare 在&lt;em>Communicating Sequential&lt;/em> &lt;em>Processes&lt;/em>中的工作，可在*&lt;a class="link" href="http://www.usingcsp.com/" target="_blank" rel="noopener"
>http://www.usingcsp.com/&lt;/a>。*&lt;/p>
&lt;p>Go 的共同创造者 Rob Pike 有一个很好的关于并发的演讲，可在*&lt;a class="link" href="https://www.youtube.com/watch?v=f6kdp27TYZs" target="_blank" rel="noopener"
>Google I/O 2012 - Go 并发模式 - YouTube&lt;/a>*。&lt;/p>
&lt;p>ClojureScript，也被称为浏览器的最佳选择，使用 core.async。不再有回调的地狱! 你可以在*&lt;a class="link" href="https://github.com/clojure/clojurescript%3C/span%3E" target="_blank" rel="noopener"
>https://github.com/clojure/clojurescript&lt;/a>*了解 ClojureScript 的情况。&lt;/p>
&lt;p>最后，在*&lt;a class="link" href="http://clojure.github.io/core.async/" target="_blank" rel="noopener"
>clojure.core.async - core.async 1.2.599-SNAPSHOT API documentation&lt;/a>*查看 API 文档。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中，你了解了 core.async 如何允许你创建并发进程，以响应通道上的 put 和 take 通信事件。你了解了如何使用&lt;code>go&lt;/code>和&lt;code>thread&lt;/code>来创建并发进程，通过停放和阻塞来等待通信事件。你还学习了如何通过使一个进程的&lt;em>出&lt;/em>通道成为另一个进程的&lt;em>入&lt;/em>通道来创建进程管道，以及这如何使你写的代码比嵌套回调更容易理解。最后，你思考了你是否只是一台花哨的热狗售货机。&lt;/p></description></item><item><title>Chapter10 形而上学</title><link>https://example.com/p/chapter10-%E5%BD%A2%E8%80%8C%E4%B8%8A%E5%AD%A6/</link><pubDate>Sat, 15 Jan 2022 12:42:26 +0800</pubDate><guid>https://example.com/p/chapter10-%E5%BD%A2%E8%80%8C%E4%B8%8A%E5%AD%A6/</guid><description>&lt;h1 id="clojure-metaphysics-原子refsvars-和拥抱僵尸">Clojure Metaphysics: 原子、Refs、Vars 和拥抱僵尸&lt;/h1>
&lt;p>三个并发性的小妖精都是从同一个邪恶的坑里生出来的：对可变状态的共享访问。你可以在第九章的引用单元讨论中看到这一点。当两个线程对引用单元进行不协调的更改时，结果是不可预测的。&lt;/p>
&lt;p>Rich Hickey 设计 Clojure 是为了专门解决共享访问易变状态所产生的问题。事实上，Clojure 体现了一种非常清晰的状态概念，使其在本质上比大多数流行的编程语言更安全。它是安全的，一直到它的&lt;em>meta-freakin-physics&lt;/em>。&lt;/p>
&lt;p>在本章中，你将了解 Clojure 的底层形而上学，与典型的面向对象（OO）语言的形而上学相比较。学习这种哲学将使你准备好处理 Clojure 剩下的并发工具，&lt;em>atom&lt;/em>、&lt;em>ref&lt;/em>和&lt;em>var&lt;/em>引用类型。(Clojure 还有一个额外的引用类型，&lt;em>agents&lt;/em>，本书没有涉及。) 这些类型中的每一个都能让你安全地同时执行状态修改操作。你还会学到一些简单的方法，使你的程序更有效率，而不需要引入状态。&lt;/p>
&lt;p>形而上学试图用最广泛的术语来回答两个基本问题。&lt;/p>
&lt;ul>
&lt;li>那里有什么？&lt;/li>
&lt;li>它是什么样子的？&lt;/li>
&lt;/ul>
&lt;p>为了引出 Clojure 和 OO 语言之间的差异，我将解释两种不同的拥抱僵尸的建模方式。与普通的僵尸不同，拥抱僵尸并不想要吞噬你的大脑。它只想用勺子舀你，也许还想闻闻你的脖子。这使得它的不死、摇晃、腐烂的状态更加悲惨。你怎么能试图杀死只想要爱的东西呢？谁是这里真正的怪物？&lt;/p>
&lt;h2 id="面向对象的形而上学">面向对象的形而上学&lt;/h2>
&lt;p>OO 形而上学将拥抱僵尸视为存在于世界上的一个对象。这个对象的属性可能会随着时间的推移而改变，但它仍然被当作一个单一的、不变的对象。如果这看起来是一个完全明显的、没有争议的僵尸形而上学的方法，那么你可能没有在哲学入门课上花几个小时来争论一把椅子的存在意味着什么，以及什么真正使它首先成为一把椅子。&lt;/p>
&lt;p>棘手的部分是，拥抱的僵尸总是在变化。它的身体慢慢恶化。随着时间的推移，它对拥抱的不灭渴望越来越强烈。在 OO 术语中，我们会说拥抱僵尸是一个具有可改变状态的对象，它的状态是不断波动的。但是不管这个僵尸有多大的变化，我们仍然把它认定为同一个僵尸。下面是你如何在 Ruby 中对抱团僵尸进行建模和交互。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class CuddleZombie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # attr_accessor is just a shorthand way for creating getters and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # setters for the listed instance variables
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> attr_accessor :cuddle_hunger_level, :percent_deteriorated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> def initialize(cuddle_hunger_level = 1, percent_deteriorated = 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.cuddle_hunger_level = cuddle_hunger_level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> self.percent_deteriorated = percent_deteriorated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred = CuddleZombie.new(2, 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred.cuddle_hunger_level # =&amp;gt; 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred.percent_deteriorated # =&amp;gt; 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred.cuddle_hunger_level = 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred.cuddle_hunger_level # =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>10-1. 用 Ruby 建立抱团僵尸行为模型&lt;/li>
&lt;/ol>
&lt;p>在这个例子中，你创建了一个抱团僵尸，&lt;code>fred&lt;/code>，有两个属性。&lt;code>cuddle_hunger_level&lt;/code>和&lt;code>percent_deteriorated&lt;/code>。&lt;code>fred&lt;/code>一开始的&lt;code>cuddle_hunger_level&lt;/code>是 2，但是你可以把它改成任何你想要的东西，它仍然是好的&amp;rsquo;Fred，同一个拥抱僵尸。在这种情况下，你把它的`cuddle_hunger_level&amp;rsquo;改为 3。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/cuddle-zombie.png"
loading="lazy"
>&lt;/p>
&lt;p>你可以看到，这个对象只是一个花哨的引用单元。在多线程环境下，它也会受到同样的非确定性结果的影响。例如，如果两个线程试图用&lt;code>fred.cuddle_hunger_level = fred.cuddle_hunger_level + 1&lt;/code>这样的方式来增加 Fred 的饥饿度，其中一个增量可能会丢失，就像《三个小妖精》中两个线程向&lt;code>X&lt;/code>写入的例子一样。参考单元格、相互排斥和矮人狂战士 &amp;ldquo;中的例子。&lt;/p>
&lt;p>即使你只在一个单独的线程上进行读取，程序仍将是非确定性的。例如，假设你正在进行关于抱团僵尸行为的研究。你想记录一个僵尸的饥饿程度，只要它达到 50%的恶化程度，但你想在另一个线程上进行，以提高性能，使用类似清单 10-1 中的代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if fred.percent_deteriorated &amp;gt;= 50
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Thread.new { database_logger.log(fred.cuddle_hunger_level) }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>这段 Ruby 代码在并发执行时并不安全。&lt;/li>
&lt;/ol>
&lt;p>问题是，另一个线程可能在实际写入之前改变&lt;code>fred&lt;/code>。&lt;/p>
&lt;p>例如，图 10-1 显示了两个从上到下执行的线程。在这种情况下，将 5 写入数据库是正确的，但 10 却被写入了。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/fred-read.png"
loading="lazy"
>&lt;/p>
&lt;p>图 10-1：记录不一致的抱团僵尸数据&lt;/p>
&lt;p>这将是很不幸的。当你试图从拥抱僵尸的启示中恢复时，你不希望你的数据是不一致的。然而，没有办法保留一个对象在某一特定时刻的状态。&lt;/p>
&lt;p>此外，为了同时改变&lt;code>cuddle_hunger_level&lt;/code>和&lt;code>percent_deteriorated&lt;/code>，你必须特别小心。否则，&lt;code>fred&lt;/code>有可能被视为不一致的状态，因为另一个线程可能会在你打算同时进行的两个变化之间&lt;code>读取&lt;/code>fred`对象，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">fred.cuddle_hunger_level = fred.cuddle_hunger_level + 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># At this time, another thread could read fred&amp;#39;s attributes and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># &amp;#34;perceive&amp;#34; fred in an inconsistent state unless you use a mutex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fred.percent_deteriorated = fred.percent_deteriorated + 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是另一个版本的互斥问题。在面向对象编程（OOP）中，你可以用&lt;em>mutex&lt;/em>来手动解决这个问题，它可以确保在 mutex 的持续时间内，每次只有一个线程可以访问一个资源（在本例中，就是&lt;code>fred&lt;/code>对象）。&lt;/p>
&lt;p>对象永远不稳定的事实并不妨碍我们把它们当作程序的基本构件。事实上，这被认为是 OOP 的一个优势。状态如何变化并不重要；你仍然可以与一个稳定的接口进行交互，一切都会正常工作。这符合我们对世界的直观感觉。一块蜡仍然是同一块蜡，即使它的属性发生了变化：如果我改变了它的颜色，融化了它，然后把它倒在我的敌人的脸上，我仍然会认为它是我开始时的那个蜡对象。&lt;/p>
&lt;p>另外，在 OOP 中，对象也会做事。它们相互作用，在程序运行时改变状态。同样，这也符合我们对世界的直观感觉：变化是对象相互作用的结果。一个人的对象推到一个门的对象上，进入一个房子的对象。&lt;/p>
&lt;h2 id="clojure-形而上学">Clojure 形而上学&lt;/h2>
&lt;p>在 Clojure 形而上学中，我们会说，我们永远不会遇到两次相同的拥抱僵尸。拥抱僵尸并不是一个独立于其变异而存在于世界上的离散事物：它实际上是一连串的&lt;em>价值&lt;/em>。&lt;/p>
&lt;p>术语&lt;em>值&lt;/em>经常被 Clojurists 使用，其具体含义可能与你的习惯不同。价值是*原子性的，即它们在一个更大的系统中形成一个单一的不可还原的单位或组成部分；它们是不可分割的、不变的、稳定的实体。数字是价值：数字 15 变异为另一个数字是没有意义的。当你从 15 加减时，你并没有改变 15 这个数字；你只是得到了一个不同的数字。Clojure 的数据结构也是价值，因为它们是不可改变的。当你在一个 Map 上使用&lt;code>assoc&lt;/code>时，你不会修改原来的 Map；相反，你会派生出一个新的 Map。&lt;/p>
&lt;p>所以一个值不会改变，但是你可以对一个值应用一个&lt;em>过程来产生一个新的值。例如，假设我们从一个值&lt;/em>F1&lt;em>开始，然后我们把&lt;/em>拥抱僵尸&lt;em>过程应用到&lt;/em>F1*，产生值&lt;em>F2&lt;/em>。然后这个过程又被应用到&lt;em>F2&lt;/em>的值上，产生&lt;em>F3&lt;/em>的值，以此类推。&lt;/p>
&lt;p>这导致了对&lt;em>身份&lt;/em>的不同概念。Clojure 形而上学不是像 OO 形而上学那样把身份理解为变化的对象所固有的，而是把身份理解为我们人类强加给由一个过程随时间产生的一连串不变的值的东西。我们使用&lt;em>名字&lt;/em>来指定身份。名字&lt;em>Fred&lt;/em>是指一系列单独的状态&lt;em>F1&lt;/em>、&lt;em>F2&lt;/em>、&lt;em>F3&lt;/em>等等的方便方法。从这个角度来看，不存在所谓的可改变的状态。相反，&lt;em>state&lt;/em>指的是某个时间点上的身份值。&lt;/p>
&lt;p>Rich Hickey 用电话号码的比喻来解释状态。 &lt;em>Alan 的电话号码&lt;/em>已经改变了 10 次，但我们将永远用同一个名字来称呼这些号码，即&lt;em>Alan 的电话号码&lt;/em>。艾伦五年前的电话号码与今天的电话号码是不同的数值，两者是艾伦电话号码身份的两种状态。&lt;/p>
&lt;p>当你考虑到在你的程序中你是在处理关于世界的信息时，这是有意义的。与其说信息发生了变化，不如说你收到了新的信息。周五中午 12 点，&amp;ldquo;抱抱僵尸 &amp;ldquo;弗雷德处于 50%的腐烂状态。在下午 1 点，他是 60%的腐烂。这都是你可以处理的事实，引入一个新的事实并不会使以前的事实失效。即使弗雷德的衰变率从 50%增加到 60%，但在下午 12:00 时他处于 50%的衰变状态仍然是事实。&lt;/p>
&lt;p>图 10-2 显示了你可以如何将价值、过程、身份和状态可视化。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/fp-metaphysics.png"
loading="lazy"
>&lt;/p>
&lt;p>图 10-2：价值、过程、身份和状态&lt;/p>
&lt;p>这些价值不会相互作用，也不能被改变。它们不能*做任何事情。只有在以下情况下才会发生变化：a）一个过程产生了一个新的值；b）我们选择将身份与新的值联系起来。&lt;/p>
&lt;p>为了处理这种变化，Clojure 使用&lt;em>参考类型&lt;/em>。参考类型让你在 Clojure 中管理身份。使用它们，你可以命名一个身份并检索其状态。让我们来看看其中最简单的，&lt;em>原子&lt;/em>。&lt;/p>
&lt;h2 id="原子">原子&lt;/h2>
&lt;p>Clojure 的原子引用类型允许你赋予一连串的相关值以身份。下面是你如何创建一个原子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def fred (atom {:cuddle-hunger-level 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :percent-deteriorated 0}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将创建一个新的原子，并将其与名称&lt;code>fred&lt;/code>绑定。这个原子*引用了&lt;code>{:cuddle-hunger-level 0 :percent-deteriorated 0}&lt;/code>的值，你可以说这是它的当前状态。&lt;/p>
&lt;p>要得到一个原子的当前状态，你要解除对它的引用。下面是 Fred 的当前状态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@fred
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 0, :percent-deteriorated 0}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与期货、延迟和承诺不同，解除对原子（或任何其他引用类型）的引用将永远不会阻塞。当你解除对期货、延迟和承诺的引用时，就像你在说 &amp;ldquo;我现在需要一个值，我会一直等到我得到它&amp;rdquo;，所以这个操作会阻塞是合理的。然而，当你解除引用类型的引用时，就像你在说 &amp;ldquo;给我我现在引用的值&amp;rdquo;，所以操作不会阻塞是有道理的，因为它不需要等待任何东西。&lt;/p>
&lt;p>在清单 10-1 中的 Ruby 例子中，我们看到当你试图在一个单独的线程上记录数据时，对象数据可能会发生变化。当使用原子来管理状态时就不会发生这种危险，因为每个状态都是不可改变的。下面是你如何用&lt;code>println&lt;/code>来记录一个僵尸的状态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [zombie-state @fred]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (&amp;gt;= (:percent-deteriorated zombie-state) 50)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (println (:cuddle-hunger-level zombie-state)))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>清单 10-1 中的 Ruby 例子的问题是，它需要两步来读取僵尸的两个属性，而其他线程可能在这两步之间改变这些属性。然而，通过使用原子来引用不可变的数据结构，你只需要执行一次读取，并且返回的数据结构不会被其他线程改变。&lt;/p>
&lt;p>要更新原子，使其指向一个新的状态，你可以使用&lt;code>swap!&lt;/code>。这似乎是矛盾的，因为我说过，原子值是不变的。的确，它们是不变的。但是现在我们正在使用原子的&lt;em>参考类型&lt;/em>，一个指向原子值的结构。原子值不会改变，但是引用类型可以被更新并被分配一个新的值。&lt;/p>
&lt;p>&lt;code>swap!&lt;/code>接收一个原子和一个函数作为参数。它将函数应用于原子的当前状态以产生一个新的值，然后它更新原子以引用这个新的值。新的值也被返回。下面是你如何将 Fred 的拥抱饥饿度提高 1。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(swap! fred
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [current-state]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (merge-with + current-state {:cuddle-hunger-level 1})))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 1, :percent-deteriorated 0}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取消引用&lt;code>fred&lt;/code>将返回新的状态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@fred
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 1, :percent-deteriorated 0}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与 Ruby 不同，&lt;code>fred&lt;/code>不可能处于不一致的状态，因为你可以同时更新饥饿度和恶化百分比，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(swap! fred
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [current-state]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (merge-with + current-state {:cuddle-hunger-level 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :percent-deteriorated 1})))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 2, :percent-deteriorated 1}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码传递给&lt;code>swap!&lt;/code>一个只需要一个参数的函数，&lt;code>current-state&lt;/code>。你也可以传递&lt;code>swap!&lt;/code>一个需要多个参数的函数。例如，你可以创建一个需要两个参数的函数，一个是僵尸状态，另一个是增加其拥抱饥饿度的数量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn increase-cuddle-hunger-level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [zombie-state increase-by]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (merge-with + zombie-state {:cuddle-hunger-level increase-by}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们在僵尸状态下快速测试一下&lt;code>increase-cuddle-hunger-level&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(increase-cuddle-hunger-level @fred 10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 12, :percent-deteriorated 1}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，这段代码实际上并没有更新&lt;code>fred&lt;/code>，因为我们没有使用&lt;code>swap!&lt;/code>，我们只是对&lt;code>increase-cuddle-&lt;/code>hunger&lt;code>-level&lt;/code>做了一个正常的函数调用，它返回一个结果。&lt;/p>
&lt;p>现在用附加参数调用&lt;code>swap!&lt;/code>，&lt;code>@fred&lt;/code>将被更新，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(swap! fred increase-cuddle-hunger-level 10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 12, :percent-deteriorated 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@fred
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 12, :percent-deteriorated 1}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者你可以用 Clojure 的内置函数来表达整个事情。&lt;code>update-in&lt;/code>函数需要三个参数：一个集合，一个用于识别要更新的值的 Vector，以及一个更新该值的函数。它还可以接受额外的参数，这些参数将被传递给更新函数。下面是几个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(update-in {:a {:b 3}} [:a :b] inc)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a {:b 4}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(update-in {:a {:b 3}} [:a :b] + 10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a {:b 13}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，你正在更新 Map&lt;code>{:a {:b 3}}。Clojure使用Vector&lt;/code>[:a :b]&lt;code>来遍历嵌套图；&lt;/code>:a&lt;code>产生嵌套图&lt;/code>{:b 3}&lt;code>，&lt;/code>:b&lt;code>产生值&lt;/code>3&lt;code>。Clojure将&lt;/code>inc&lt;code>函数应用于&lt;/code>3&lt;code>，并返回一个替换了&lt;/code>3`的新 Map。&lt;/p>
&lt;p>下面是你如何使用&lt;code>update-in&lt;/code>函数来改变 Fred 的状态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(swap! fred update-in [:cuddle-hunger-level] + 10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:cuddle-hunger-level 22, : percent-deteriorated 1}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过使用原子，你可以保留过去的状态。你可以解除引用一个原子来检索状态 1，然后更新该原子，创建状态 2，并仍然使用状态 1。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [num (atom 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s1 @num]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (swap! num inc)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;State 1:&amp;#34; s1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Current state:&amp;#34; @num))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; State 1: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Current state: 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码创建了一个名为 &amp;ldquo;num &amp;ldquo;的原子，检索其状态，更新其状态，然后打印其过去的状态和当前的状态，表明当我说你可以保留过去的状态时，我并不是要欺骗你，因此你可以信任我所有的东西&amp;ndash;包括你的真实姓名，我保证只说出你的真实姓名，以拯救你脱离致命的危险。&lt;/p>
&lt;p>这一切都很有趣，但如果两个独立的线程调用&amp;rdquo;（交换！弗雷德增加-拥抱-饥饿等级 1）&amp;ldquo;会发生什么？是否有可能像清单 10-1 中的 Ruby 例子那样，其中一个增量被丢失？&lt;/p>
&lt;p>答案是否定的! &lt;code>swap!&lt;/code>实现了&lt;em>比较和设置&lt;/em>的语义，意味着它在内部做了以下工作。&lt;/p>
&lt;ol>
&lt;li>它读取原子的当前状态。&lt;/li>
&lt;li>然后将更新函数应用于该状态。&lt;/li>
&lt;li>接下来，它检查它在步骤 1 中读取的值是否与原子的当前值相同。&lt;/li>
&lt;li>如果是，那么&lt;code>swap!&lt;/code>就更新原子以引用步骤 2 的结果。&lt;/li>
&lt;li>如果不是，那么&lt;code>swap!&lt;/code>重试，从第 1 步开始再次经历这个过程。&lt;/li>
&lt;/ol>
&lt;p>这个过程保证了没有交换会丢失。&lt;/p>
&lt;p>关于&lt;code>swap!&lt;/code>需要注意的一个细节是，原子更新是同步发生的；它们将阻塞其线程。例如，如果你的更新函数由于某种原因调用了&lt;code>Thread/sleep 1000&lt;/code>，那么当&lt;code>swap!&lt;/code>完成时，线程将阻塞至少一秒钟。&lt;/p>
&lt;p>有时你会想更新一个原子而不检查它的当前值。例如，你可能会开发一种血清，将一个抱枕僵尸的饥饿度和恶化度设置为零。对于这些情况，你可以使用&lt;code>reset!&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(reset! fred {:cuddle-hunger-level 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :percent-deteriorated 0})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就涵盖了 atoms 的所有核心功能! 总结一下：原子实现了 Clojure 的状态概念。它们允许你为一系列不可变的值赋予一个身份。它们通过比较和设置语义为引用单元和互斥问题提供了解决方案。它们还允许你处理过去的状态，而不用担心它们会在原地变异。&lt;/p>
&lt;p>除了这些核心特性外，原子还与其他引用类型共享两个特性。你可以在原子上附加&lt;em>watches&lt;/em>和&lt;em>validators&lt;/em>。现在让我们来看看这些。&lt;/p>
&lt;h2 id="手表和验证器">手表和验证器&lt;/h2>
&lt;p>观察器允许你超级猥琐地检查你的参考类型的一举一动。验证器允许你有超强的控制力，限制哪些状态是可以允许的。钟表和验证器都是普通的函数。&lt;/p>
&lt;h3 id="手表">手表&lt;/h3>
&lt;p>一个&lt;em>watch&lt;/em>是一个函数，它需要四个参数：一个键，被监视的引用，它的前一个状态，以及它的新状态。你可以为一个引用类型注册任意数量的手表。&lt;/p>
&lt;p>比方说，一个僵尸的洗牌速度（以每小时洗牌次数衡量，或称 SPH）取决于其饥饿程度和恶化程度。下面是你的计算方法，用拥抱的饥饿程度乘以它的完整程度。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn shuffle-speed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [zombie]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (* (:cuddle-hunger-level zombie)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (- 100 (:percent-deteriorated zombie))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们还可以说，每当僵尸的洗牌速度达到 5000SPH 的危险水平时，你都想得到提醒。否则，你想被告知一切都很好。下面是一个观察函数，你可以用来在 SPH 超过 5000 时打印一个警告信息，否则打印一个一切正常的信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn shuffle-alert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [key watched old-state new-state]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [sph (shuffle-speed new-state)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (&amp;gt; sph 5000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Run, you fool!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;The zombie&amp;#39;s SPH is now &amp;#34; sph)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;This message brought to your courtesy of &amp;#34; key))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;All&amp;#39;s well with &amp;#34; key)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Cuddle hunger: &amp;#34; (:cuddle-hunger-level new-state))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Percent deteriorated: &amp;#34; (:percent-deteriorated new-state))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;SPH: &amp;#34; sph)))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>观察函数有四个参数：一个可以用来报告的键，被观察的原子，原子更新前的状态，以及原子更新后的状态。这个观察函数计算新状态的洗牌速度，如果它过高，就打印一个警告信息，当洗牌速度安全时，就打印一个一切正常的信息，如上所述。在这两组信息中，&lt;code>key&lt;/code>被用来让你知道信息的来源。&lt;/p>
&lt;p>你可以用&lt;code>add-watch&lt;/code>把这个函数附加到&lt;code>fred&lt;/code>上。&lt;code>add-watch&lt;/code>的一般形式是&lt;code>（add-watch&lt;/code> ref key watch-fn&lt;code>）&lt;/code>。在这个例子中，我们要重置&lt;code>fred&lt;/code>的状态，添加&lt;code>shuffle-alert&lt;/code>的观察函数，然后多次更新&lt;code>fred&lt;/code>的状态以触发&lt;code>shuffle-alert&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(reset! fred {:cuddle-hunger-level 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :percent-deteriorated 2})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(add-watch fred :fred-shuffle-alert shuffle-alert)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(swap! fred update-in [:percent-deteriorated] + 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; All&amp;#39;s well with :fred-shuffle-alert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Cuddle hunger: 22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Percent deteriorated: 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; SPH: 2134
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(swap! fred update-in [:cuddle-hunger-level] + 30)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Run, you fool!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; The zombie&amp;#39;s SPH is now 5044
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; This message brought to your courtesy of :fred-shuffle-alert
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个观察函数的例子没有使用&lt;code>watched&lt;/code>或&lt;code>old-state&lt;/code>，但如果有需要，它们就在那里。现在我们来谈谈验证器。&lt;/p>
&lt;h3 id="验证器">验证器&lt;/h3>
&lt;p>&lt;em>验证器&lt;/em>可以让你指定一个引用可以有哪些状态。例如，这里有一个验证器，你可以用来确保一个僵尸的&lt;code>:%-deteriorated&lt;/code>在 0 到 100 之间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn percent-deteriorated-validator
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:keys [percent-deteriorated]}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (and (&amp;gt;= percent-deteriorated 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;lt;= percent-deteriorated 100)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，验证器只需要一个参数。当你给一个引用添加验证器时，该引用被修改，这样，每当它被更新时，它将调用这个验证器，并将更新函数返回的值作为其参数。如果验证器因返回 &amp;ldquo;false &amp;ldquo;或抛出一个异常而失败，引用将不会改变以指向新的值。&lt;/p>
&lt;p>你可以在创建原子时附加一个验证器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def bobby
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (atom
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:cuddle-hunger-level 0 :percent-deteriorated 0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :validator percent-deteriorated-validator))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(swap! bobby update-in [:percent-deteriorated] + 200)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; This throws &amp;#34;Invalid reference state&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>percent-deteriorated-validator&lt;/code>返回&lt;code>false&lt;/code>，原子更新失败。&lt;/p>
&lt;p>你可以抛出一个异常，以获得一个更具描述性的错误信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn percent-deteriorated-validator
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:keys [percent-deteriorated]}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (or (and (&amp;gt;= percent-deteriorated 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;lt;= percent-deteriorated 100))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (throw (IllegalStateException. &amp;#34;That&amp;#39;s not mathy!&amp;#34;))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def bobby
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (atom
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:cuddle-hunger-level 0 :percent-deteriorated 0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :validator percent-deteriorated-validator))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(swap! bobby update-in [:percent-deteriorated] + 200)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; This throws &amp;#34;IllegalStateException: That&amp;#39;s not mathy!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当不错! 现在让我们来看看裁判。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/sock-gnome.png"
loading="lazy"
>&lt;/p>
&lt;p>原子是管理独立身份状态的理想选择。但有时，我们需要表达一个事件应该同时更新一个以上的身份的状态。 &lt;em>Refs&lt;/em>是这种情况下的完美工具。&lt;/p>
&lt;p>一个典型的例子是记录 sock gnome 交易。我们都知道，袜子侏儒从世界各地的每一个干衣机中取出一只袜子。他们用这些袜子来孵化他们的孩子。作为对这种*&amp;quot;*礼物 &amp;ldquo;的回报，袜子地精保护你的家不被 El Chupacabra 入侵。如果你最近没有被 El Chupacabra 拜访，你要感谢袜子侏儒。&lt;/p>
&lt;p>为了建立袜子转移的模型，我们需要表达的是，一个烘干机失去了一只袜子，一个地精同时得到了一只袜子。这一刻，袜子属于烘干机；下一刻，它属于地精。这只袜子不应该同时属于烘干机和侏儒，也不应该同时属于这两个人。&lt;/p>
&lt;h3 id="为袜子转移建模">为袜子转移建模&lt;/h3>
&lt;p>你可以用 refs 来模拟这个 sock 传输。Refs 允许你使用事务语义来更新多个身份的状态。这些交易有三个特点。&lt;/p>
&lt;ul>
&lt;li>它们是&lt;em>原子性的&lt;/em>，意味着所有的参考文献都被更新，或者都不被更新。&lt;/li>
&lt;li>它们是&lt;em>一致的&lt;/em>，这意味着引用总是显示为有效的状态。一个 sock 总是属于一个 dryer 或一个 gnome，但绝不是两者都属于。&lt;/li>
&lt;li>它们是&lt;em>隔离的&lt;/em>，这意味着事务的行为就像它们是连续执行的一样；如果两个线程同时运行改变同一参考信息的事务，一个事务将重试。这类似于原子的比较和设置语义。&lt;/li>
&lt;/ul>
&lt;p>你可能认识到这些是数据库事务的 ACID 属性中的&lt;em>A&lt;/em>、&lt;em>C&lt;/em>和&lt;em>I&lt;/em>。你可以认为 Refs 给你提供了与数据库事务相同的并发安全性，只是在内存中的数据。&lt;/p>
&lt;p>Clojure 使用*软件事务性内存（STM）*来实现这种行为。STM 非常酷，但当你开始使用 Clojure 时，你不需要对它了解太多；你只需要知道如何使用它，这就是本节要告诉你的。&lt;/p>
&lt;p>让我们开始转移一些袜子吧! 首先，你需要编码一些袜子和 gnome 的创建技术。下面的代码定义了一些袜子品种，然后定义了几个辅助函数。 &lt;code>sock-count'将被用来帮助记录每一种袜子有多少只属于地精或烘干机，而&lt;/code>generate-sock-gnome&amp;rsquo;将创建一个新的、没有袜子的地精。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def sock-varieties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #{&amp;#34;darned&amp;#34; &amp;#34;argyle&amp;#34; &amp;#34;wool&amp;#34; &amp;#34;horsehair&amp;#34; &amp;#34;mulleted&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;passive-aggressive&amp;#34; &amp;#34;striped&amp;#34; &amp;#34;polka-dotted&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;athletic&amp;#34; &amp;#34;business&amp;#34; &amp;#34;power&amp;#34; &amp;#34;invisible&amp;#34; &amp;#34;gollumed&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn sock-count
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [sock-variety count]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety sock-variety
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :count count})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn generate-sock-gnome
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Create an initial sock gnome state with no socks&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [name]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :socks #{}})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以创建你的实际参照物了。侏儒将有 0 只袜子。另一方面，烘干机将有一组由袜子品种集生成的袜子对。下面是我们的参考文献。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def sock-gnome (ref (generate-sock-gnome &amp;#34;Barumpharumph&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def dryer (ref {:name &amp;#34;LG 1337&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :socks (set (map #(sock-count % 2) sock-varieties))}))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以像解除对原子的引用一样解除对 ref 的引用。在这个例子中，你的袜子的顺序可能会不同，因为我们使用的是一个无序的集合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(:socks @dryer)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{{:variety &amp;#34;passive-aggressive&amp;#34;, :count 2} {:variety &amp;#34;power&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;athletic&amp;#34;, :count 2} {:variety &amp;#34;business&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;argyle&amp;#34;, :count 2} {:variety &amp;#34;horsehair&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;gollumed&amp;#34;, :count 2} {:variety &amp;#34;darned&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;polka-dotted&amp;#34;, :count 2} {:variety &amp;#34;wool&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;mulleted&amp;#34;, :count 2} {:variety &amp;#34;striped&amp;#34;, :count 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:variety &amp;#34;invisible&amp;#34;, :count 2}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在一切都准备好了，可以进行转移了。我们要修改&lt;code>sock-gnome&lt;/code>参数，以显示它获得了一只袜子，并修改&lt;code>dryer&lt;/code>参数，以显示它失去了一只袜子。你用&lt;code>alter'来修改引用，而且你必须在一个事务中使用&lt;/code>alter&amp;rsquo;。 &lt;code>dosync&lt;/code>启动一个事务并定义其范围；你把所有的事务操作放在其主体中。这里我们使用这些工具来定义一个`steal-sock&amp;rsquo;函数，然后在我们的两个参考文件上调用它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn steal-sock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [gnome dryer]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (dosync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (when-let [pair (some #(if (= (:count %) 2) %) (:socks @dryer))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [updated-count (sock-count (:variety pair) 1)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (alter gnome update-in [:socks] conj updated-count)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (alter dryer update-in [:socks] disj pair)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (alter dryer update-in [:socks] conj updated-count)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(steal-sock sock-gnome dryer)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(:socks @sock-gnome)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{{:variety &amp;#34;passive-aggressive&amp;#34;, :count 1}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在团子有一只被动攻击型的袜子，而烘干机少了一只（你的团子可能偷了一只不同的袜子，因为袜子是以无序的方式存储的）。让我们确保所有被动攻击的袜子都被计算在内。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn similar-socks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [target-sock sock-set]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (filter #(= (:variety %) (:variety target-sock)) sock-set))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(similar-socks (first (:socks @sock-gnome)) (:socks @dryer))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:variety &amp;#34;passive-aggressive&amp;#34;, :count 1})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有几个细节需要注意：当你&lt;code>改变&lt;/code>一个引用时，这个改变在当前事务之外并不立即可见。这使得你可以在一个事务中对&lt;code>dryer&lt;/code>调用&lt;code>alter&lt;/code>两次，而不用担心&lt;code>dryer&lt;/code>会在不一致的状态下被读取。同样的，如果你&lt;code>改变&lt;/code>一个引用，然后在同一个事务中&lt;code>deref&lt;/code>它，&lt;code>deref&lt;/code>将返回新的状态。&lt;/p>
&lt;p>这里有一个例子来证明这个交易中状态的想法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def counter (ref 0))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(future
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (dosync
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (alter counter inc)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println @counter)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 500)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (alter counter inc)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println @counter)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(Thread/sleep 250)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(println @counter)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将依次打印出 1、0 和 2。首先，你创建了一个引用，&lt;code>counter&lt;/code>，用来保存数字 0。然后你用&lt;code>future&lt;/code>创建一个新的线程来运行一个事务。在事务线程中，你增加计数器并打印它，然后数字 1 被打印出来。同时，主线程等待了 250 毫秒，也打印了计数器的值。然而，主线程上的计数器的值仍然是 0&amp;ndash;主线程是在事务之外的，不能访问事务的状态。这就像事务有自己的私有区域，用于尝试对状态的改变，而世界上的其他人在事务完成之前不能知道它们。这在事务代码中得到了进一步说明：在它第一次打印之后，它再次将计数器从 1 增加到 2，并打印出结果 2。&lt;/p>
&lt;p>事务只有在结束时才会尝试提交其变更。提交的工作原理类似于原子的比较和设置语义。每个引用都会被检查，看它在你第一次试图改变它之后是否有变化。如果有任何&lt;em>个引用发生了变化，那么&lt;/em>个引用都不会被更新，事务会被重试。例如，如果事务 A 和事务 B 在同一时间被尝试，并且事件按以下顺序发生，事务 A 将被重试。&lt;/p>
&lt;ol>
&lt;li>事务 A： alter gnome&lt;/li>
&lt;li>交易 B: alter gnome&lt;/li>
&lt;li>交易 B：改变烘干机&lt;/li>
&lt;li>交易 B：改变烘干机&lt;/li>
&lt;li>事务 B：提交-成功地更新 gnome 和 dryer&lt;/li>
&lt;li>事务 A：改变 dryer&lt;/li>
&lt;li>事务 A：改变烘干机&lt;/li>
&lt;li>事务 A：提交失败，因为 dryer 和 gnome 已经改变；重试。&lt;/li>
&lt;/ol>
&lt;p>这就是你的工作! 安全、简单、并发地协调状态变化。但这还不是全部! Refs 还有一个可疑的长袖子的技巧：&lt;code>commute&lt;/code>。&lt;/p>
&lt;h3 id="commute">commute&lt;/h3>
&lt;p>&lt;code>commute&lt;/code>允许你在一个事务中更新一个 ref 的状态，就像 &lt;code>alter&lt;/code>一样。然而，它在提交时的行为是完全不同的。下面是`alter&amp;rsquo;的行为方式。&lt;/p>
&lt;ol>
&lt;li>在事务之外，读取 Ref 的当前状态。&lt;/li>
&lt;li>将当前状态与引用者在事务中开始时的状态进行比较。&lt;/li>
&lt;li>如果两者不同，则重试交易。&lt;/li>
&lt;li>否则，提交改变后的引用状态。&lt;/li>
&lt;/ol>
&lt;p>另一方面，&lt;code>commute&lt;/code>在提交时的行为是这样的。&lt;/p>
&lt;ol>
&lt;li>在事务之外，读取引用的当前状态。&lt;/li>
&lt;li>使用当前状态再次运行&lt;code>commute&lt;/code>函数。&lt;/li>
&lt;li>提交结果。&lt;/li>
&lt;/ol>
&lt;p>正如你所看到的，&lt;code>commute&lt;/code>并不强迫事务重试。这可以帮助提高性能，但重要的是，只有当你确定你的 refs 不可能最终处于无效状态时才使用 &lt;code>commute'。让我们看看&lt;/code>commute`的安全和不安全使用的例子。&lt;/p>
&lt;p>下面是一个安全使用的例子。&lt;code>sleep-print-update&lt;/code>函数返回更新的状态，但同时也睡眠了指定的毫秒数，所以我们可以强制事务重叠。它打印了它试图更新的状态，所以我们可以深入了解正在发生的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn sleep-print-update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [sleep-time thread-name update-fn]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [state]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep sleep-time)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str thread-name &amp;#34;: &amp;#34; state))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (update-fn state)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def counter (ref 0))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(future (dosync (commute counter (sleep-print-update 100 &amp;#34;Thread A&amp;#34; inc))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(future (dosync (commute counter (sleep-print-update 150 &amp;#34;Thread B&amp;#34; inc))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是打印的时间线。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Thread A: 0 | 100ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Thread B: 0 | 150ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Thread A: 0 | 200ms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Thread B: 1 | 300ms
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，最后打印的一行是 &amp;ldquo;线程 B：1&amp;rdquo;。这意味着&lt;code>sleep-print-update&lt;/code>在第二次运行时收到&lt;code>1&lt;/code>作为状态参数。这是有道理的，因为此时线程 A 已经提交了它的结果。如果你在事务运行后解除对&lt;code>counter&lt;/code>的引用，你会发现其值是&lt;code>2&lt;/code>。&lt;/p>
&lt;p>现在，这里有一个不安全交换的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def receiver-a (ref #{}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def receiver-b (ref #{}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def giver (ref #{1}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(do (future (dosync (let [gift (first @giver)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (commute receiver-a conj gift)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (commute giver disj gift))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (dosync (let [gift (first @giver)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 50)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (commute receiver-b conj gift)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (commute giver disj gift)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@receiver-a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@receiver-b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@giver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>1&lt;/code>被赋予了&lt;code>receiver-a&lt;/code>和&lt;code>receiver-b&lt;/code>，你最终得到了两个&lt;code>1&lt;/code>的实例，这对你的程序是无效的。这个例子的不同之处在于，应用的函数，基本上是&lt;code>#(conj % gift)&lt;/code>和&lt;code>#(disj % gift)&lt;/code>，是由&lt;code>giver&lt;/code>的状态派生的。一旦&lt;code>giver&lt;/code>发生变化，派生的函数就会产生一个无效的状态，但是&lt;code>commute&lt;/code>并不关心产生的状态是无效的，无论如何都会提交结果。这里的教训是，尽管&lt;code>commute&lt;/code>可以帮助你加快程序的速度，但你必须明智地决定何时使用它。&lt;/p>
&lt;p>现在你已经准备好开始安全、理智地使用 Refs 了。引用还有一些细微的差别，我在此不做介绍，但如果你对它们感到好奇，你可以研究&lt;code>ensure&lt;/code>函数和&lt;em>write skew&lt;/em>现象。&lt;/p>
&lt;p>接下来是本书涉及的最后一种参考文献类型。 &lt;em>vars&lt;/em>。&lt;/p>
&lt;h2 id="vars">Vars&lt;/h2>
&lt;p>你已经在第 6 章中了解了一些关于 vars 的知识。简单的说, &lt;em>vars&lt;/em>是符号和对象之间的关联。你可以用&lt;code>def&lt;/code>创建新的变量。&lt;/p>
&lt;p>尽管 vars 并不像原子和 refs 那样用来管理状态，但它们确实有一些并发的技巧：你可以动态地绑定它们，并且可以改变它们的根。让我们先来看看动态绑定。&lt;/p>
&lt;h3 id="动态绑定">动态绑定&lt;/h3>
&lt;p>当我第一次介绍&lt;code>def&lt;/code>时，我恳请你把它当作定义一个常量。事实证明，vars 比这更灵活：你可以创建一个&lt;em>动态&lt;/em>的 var，它的绑定可以被改变。动态变量对于创建一个全局名称是非常有用的，它应该在不同的情况下指代不同的值。&lt;/p>
&lt;h4 id="创建和绑定动态变量">创建和绑定动态变量&lt;/h4>
&lt;p>首先，创建一个动态 var。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def:dynamic *notification-address* &amp;#34;dobby@elf.org&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意这里有两个重要的细节。首先，你用&lt;code>^:dynamic&lt;/code>向 Clojure 发出信号，表明一个 var 是动态的。第二，var 的名字是由星号括起来的。Lispers 称这些为&lt;em>earmuffs&lt;/em>，这很可爱。Clojure 要求你将动态变量的名字用耳罩括起来。这有助于向其他程序员发出该变量的&lt;em>动态性&lt;/em>的信号。&lt;/p>
&lt;p>与普通变量不同，你可以通过使用&lt;code>binding&lt;/code>来临时改变动态变量的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(binding [*notification-address* &amp;#34;test@elf.org&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *notification-address*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;test@elf.org&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以堆叠绑定（就像你可以用&lt;code>let&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(binding [*notification-address* &amp;#34;tester-1@elf.org&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println *notification-address*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (binding [*notification-address* &amp;#34;tester-2@elf.org&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println *notification-address*))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println *notification-address*))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; tester-1@elf.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; tester-2@elf.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; tester-1@elf.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你知道了如何动态绑定一个 var，让我们看看一个真实世界的应用。&lt;/p>
&lt;h4 id="动态-var-的用途">动态 var 的用途&lt;/h4>
&lt;p>比方说，你有一个发送通知邮件的函数。在这个例子中，我们将只是返回一个字符串，但假装这个函数真的发送了电子邮件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn notify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [message]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;TO: &amp;#34; *notification-address* &amp;#34;\n&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;MESSAGE: &amp;#34; message))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(notify &amp;#34;I fell.&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;TO: dobby@elf.org\nMESSAGE: I fell.&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你想测试这个函数，而不在每次你的规格运行时向多比发送垃圾邮件，怎么办？这时就需要&lt;code>binding&lt;/code>来帮忙了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(binding [*notification-address* &amp;#34;test@elf.org&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (notify &amp;#34;test!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;TO: test@elf.org\nMESSAGE: test!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，你可以直接定义&lt;code>notify&lt;/code>来接受一个电子邮件地址作为参数。事实上，这通常是正确的选择。为什么要用动态变量来代替呢？&lt;/p>
&lt;p>动态变量最常被用来命名一个或多个函数的目标资源。在这个例子中，你可以把电子邮件地址看作是你写给它的资源。事实上，Clojure 为这个目的提供了大量的内置动态变量。 例如，&amp;quot;&lt;em>out&lt;/em>&amp;ldquo;代表打印操作的标准输出。在你的程序中，你可以重新绑定&lt;code>*out*&lt;/code>，使打印语句写到一个文件中，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(binding [*out* (clojure.java.io/writer &amp;#34;print-output&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;A man who carries a cat by the tail learns
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">something he can learn in no other way.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-- Mark Twain&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(slurp &amp;#34;print-output&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; A man who carries a cat by the tail learns
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> something he can learn in no other way.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -- Mark Twain
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这比每次调用 &amp;ldquo;println &amp;ldquo;都传递一个输出目的地要轻松得多。动态变量是一种指定通用资源的好方法，同时保留了在特殊情况下改变它的灵活性。&lt;/p>
&lt;p>动态变量也被用于配置。例如，内置的 var&lt;code>*print-length*&lt;/code>允许你指定 Clojure 应该打印一个集合中的多少个项目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(println [&amp;#34;Print&amp;#34; &amp;#34;all&amp;#34; &amp;#34;the&amp;#34; &amp;#34;things!&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [Print all the things!]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(binding [*print-length* 1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println [&amp;#34;Print&amp;#34; &amp;#34;just&amp;#34; &amp;#34;one!&amp;#34;]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [Print ...]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/troll.png"
loading="lazy"
>&lt;/p>
&lt;p>最后，可以对已经绑定的动态变量进行&lt;code>set!&lt;/code>。到目前为止，你所看到的例子允许你将信息&lt;em>输入到一个函数，而不需要将信息作为参数传入，而&lt;code>set!&lt;/code>允许你将信息&lt;/em>输出到一个函数，而不需要将其作为参数返回。&lt;/p>
&lt;p>例如，假设你是一个心灵感应者，但你的读心能力有点延迟。你只有在了解别人的想法对你有用的时候，才能读懂他们的想法。不过，不要觉得太糟糕，你仍然是一个心灵感应者，这很了不起。总之，假设你想穿过一座由巨魔看守的桥，如果你不回答他的谜语，他就会吃掉你。他的谜语是 &amp;ldquo;我想的是 1 和 2 之间的哪个数字？&amp;rdquo; 在巨魔吞噬你的情况下，你至少可以知道巨魔到底在想什么而死。&lt;/p>
&lt;p>在这个例子中，你创建了动态 var &lt;code>*troll-thought*&lt;/code>来传达巨魔的想法，从&lt;code>troll-riddle&lt;/code>函数中出来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def ^:dynamic *troll-thought* nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn troll-riddle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [your-answer]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [number &amp;#34;man meat&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (when (thread-bound? #&amp;#39;*troll-thought*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (set! *troll-thought* number))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (= number your-answer)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;TROLL: You can cross the bridge!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;TROLL: Time to eat you, succulent human!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(binding [*troll-thought* nil]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (troll-riddle 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;SUCCULENT HUMAN: Oooooh! The answer was&amp;#34; *troll-thought*))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; TROLL: Time to eat you, succulent human!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; SUCCULENT HUMAN: Oooooh! The answer was man meat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你在➊处使用&lt;code>thread-bound?&lt;/code>函数来检查 var 是否已经被绑定，如果是，你就&lt;code>set! *troll-thought*&lt;/code>到➋处的巨魔的思想。&lt;/p>
&lt;p>变量在绑定之外返回到它的原始值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">*troll-thought*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，你必须将&lt;code>#'*troll-thought*&lt;/code>（包括&lt;code>#'），而不是&lt;/code>&lt;em>troll-thought&lt;/em>&lt;code>，传递给函数&lt;/code>thread-bound?&lt;code>。这是因为&lt;/code>thread-bound?`将 var 本身作为一个参数，而不是它所指向的值。&lt;/p>
&lt;h4 id="单线程绑定">单线程绑定&lt;/h4>
&lt;p>关于绑定的最后一点要注意：如果你从一个手动创建的线程中访问一个动态绑定的 var，该 var 将求值为原始值。如果你是 Clojure（和 Java）的新手，这个特性不会立即发生作用；你可以跳过这一节，以后再来讨论它。&lt;/p>
&lt;p>具有讽刺意味的是，这种绑定行为使我们无法在 REPL 中轻松创建一个有趣的演示，因为 REPL 绑定了&lt;code>*out*&lt;/code>。就好像你在 REPL 中运行的所有代码都被隐含地包裹在类似&lt;code>(&lt;/code>binding[&lt;em>out&lt;/em> repl-printer] your-code&lt;code>的东西中。如果你创建一个新的线程，&lt;/code>&lt;em>out&lt;/em>`就不会被绑定到 REPL 打印机上。&lt;/p>
&lt;p>下面的例子使用了一些基本的 Java 互操作。即使它看起来很陌生，下面代码的要点也应该很清楚，你将在第 12 章中准确地了解发生了什么。&lt;/p>
&lt;p>这段代码向 REPL 打印输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(.write *out* &amp;#34;prints to repl&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; prints to repl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的代码没有打印输出到 REPL，因为&lt;code>*out*&lt;/code>没有绑定到 REPL 打印机。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(.start (Thread. #(.write *out* &amp;#34;prints to standard out&amp;#34;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以通过使用这个愚蠢的代码来解决这个问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [out *out*]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread. #(binding [*out* out]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (.write *out* &amp;#34;prints to repl from thread&amp;#34;)))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者你可以使用&lt;code>bound-fn&lt;/code>，它将所有当前的绑定带到新的线程中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(.start (Thread. (bound-fn [] (.write *out* &amp;#34;prints to repl from thread&amp;#34;))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>let&lt;/code>绑定捕获了&lt;code>*out*&lt;/code>，所以我们可以在子线程中重新绑定它，这是很傻的。重点是，绑定不会被传递到&lt;em>手动&lt;/em>创建的线程中。然而，它们确实被传递给了期货。这就是所谓的 &amp;ldquo;绑定传递&amp;rdquo;。在本章中，我们一直在从期货中打印，没有任何问题，比如说。&lt;/p>
&lt;p>关于动态绑定就到此为止。让我们把注意力转向最后一个 var 主题：改变 var 的&lt;em>根&lt;/em>。&lt;/p>
&lt;h3 id="改变变量根值">改变变量根值&lt;/h3>
&lt;p>当你创建一个新的 var 时，你提供的初始值是它的&lt;em>根&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def power-source &amp;#34;hair&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>&amp;quot;头发&amp;quot;&lt;/code>是&lt;code>power-source&lt;/code>的根值。Clojure 允许你用函数&lt;code>alter-var-root&lt;/code>永久地改变这个根值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(alter-var-root #&amp;#39;power-source (fn [_] &amp;#34;7-eleven parking lot&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">power-source
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;7-eleven parking lot&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就像使用&lt;code>swap!&lt;/code>来更新一个原子或&lt;code>alter!&lt;/code>来更新一个 ref 一样，你使用&lt;code>alter-var-root&lt;/code>和一个函数来更新一个 var 的状态。在这种情况下，函数只是返回一个新的字符串，与之前的值没有关系，不像&lt;code>alter!&lt;/code>的例子，我们使用&lt;code>inc&lt;/code>来从当前的数字衍生出一个新数字。&lt;/p>
&lt;p>你几乎不会想这样做。你尤其不想这样做来执行简单的变量赋值。如果你这样做了，你就会不顾一切地把绑定的变量创建为一个可变的变量，这与 Clojure 的理念相悖；最好是使用你在第 5 章学到的函数式编程技术。&lt;/p>
&lt;p>你也可以用&lt;code>with-redefs&lt;/code>暂时改变一个 var 的根。这与绑定的工作原理类似，只是改变的内容会出现在子线程中。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(with-redefs [*out* *out*]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (doto (Thread. #(println &amp;#34;with redefs allows me to show up in the REPL&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .join))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>with-redefs&lt;/code>可以用于任何 var，而不仅仅是动态的。因为它有如此深远的影响，你应该只在测试时使用它。例如，你可以用它来重新定义一个从网络调用中返回数据的函数，这样该函数就会返回模拟数据而不需要实际进行网络请求。&lt;/p>
&lt;p>现在你知道所有关于 vars 的知识了吧! 尽量不要用它们来伤害你自己或你认识的任何人。&lt;/p>
&lt;h2 id="使用-pmap-的无状态并发性和并行性">使用 pmap 的无状态并发性和并行性&lt;/h2>
&lt;p>到目前为止，本章的重点是那些旨在减少并发编程中固有风险的工具。你已经了解了共享访问可变状态所带来的危险，以及 Clojure 是如何实现状态的重新概念化，从而帮助你安全地编写并发程序。&lt;/p>
&lt;p>但通常情况下，你会想把那些完全独立的任务并发化。没有对易变状态的共享访问；因此，并发运行这些任务没有任何风险，你也不必费心使用我刚才说过的任何工具。&lt;/p>
&lt;p>事实证明，Clojure 让你可以很容易地编写代码来实现无状态并发。在这一节中，你将了解到&lt;code>pmap&lt;/code>，它几乎免费为你提供了并发性能的好处。&lt;/p>
&lt;p>&lt;code>map&lt;/code>是并行化的完美候选者：当你使用它时，你所做的只是通过对现有集合的每个元素应用一个函数，从现有集合中派生出一个新集合。不需要维护状态；每个函数的应用都是完全独立的。Clojure 通过&lt;code>pmap&lt;/code>使执行并行 Map 变得容易。通过&lt;code>pmap&lt;/code>，Clojure 在一个单独的线程上处理 Map 函数的每个应用的运行。&lt;/p>
&lt;p>为了比较&lt;code>map&lt;/code>和&lt;code>pmap&lt;/code>，我们需要大量的例子数据，为了生成这些数据，我们将使用&lt;code>repeatedly&lt;/code>函数。这个函数接收另一个函数作为参数，并返回一个懒惰序列。懒惰序列的元素是通过调用传递的函数生成的，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn always-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(take 5 (repeatedly always-1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 1 1 1 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是你如何创建一个 0 到 9 之间的随机数的懒人序列。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(take 5 (repeatedly (partial rand-int 10)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 5 0 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们使用&lt;code>repeatedly&lt;/code>来创建示例数据，该数据由 3000 个随机字符串序列组成，每个字符串长 7000 个字符。我们将比较&lt;code>map&lt;/code>和&lt;code>pmap&lt;/code>，用它们在这里创建的&lt;code>orc-names&lt;/code>序列上运行&lt;code>clojure.string/lowercase&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def alphabet-length 26)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Vector of chars, A-Z
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def letters (mapv (comp str char (partial + 65)) (range alphabet-length)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn random-string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Returns a random string of specified length&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [length]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply str (take length (repeatedly #(rand-nth letters)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn random-string-list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [list-length string-length]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (doall (take list-length (repeatedly (partial random-string string-length)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def orc-names (random-string-list 3000 7000))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为&lt;code>map&lt;/code>和&lt;code>pmap&lt;/code>是懒惰的，我们必须强迫它们实现。但我们不希望将结果打印到 REPL 中，因为那会花费很多时间。&lt;code>dorun&lt;/code>函数做了我们需要的事情：它实现了序列，但返回&lt;code>nil&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (dorun (map clojure.string/lower-case orc-names)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 270.182 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(time (dorun (pmap clojure.string/lower-case orc-names)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 147.562 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用&lt;code>map&lt;/code>串行执行的时间是&lt;code>pmap&lt;/code>的 1.8 倍，而你所要做的只是增加一个额外的字母 你的性能可能会更好，这取决于你的计算机有多少个内核；这段代码是在双核机器上运行的。&lt;/p>
&lt;p>你可能会想，为什么并行版本所花的时间不正好是串行版本的一半。毕竟，两个核心的时间应该只有单核心的一半，不是吗？原因是，在创建和协调线程的过程中，总是会有一些开销。有时，事实上，这种开销所花费的时间会使每个函数应用的时间相形见绌，&lt;code>pmap'实际上会比&lt;/code>map&amp;rsquo;花费更多时间。图 10-3 显示了你如何能直观地看到这一点。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/pmap-small-grain.png"
loading="lazy"
>&lt;/p>
&lt;p>图 10-3：并行化开销会使任务时间相形见绌，导致性能下降。&lt;/p>
&lt;p>如果我们对 20000 个缩写的兽人名字运行一个函数，每个 300 个字符的长度，我们就可以看到这种效果的作用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def orc-name-abbrevs (random-string-list 20000 300))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(time (dorun (map clojure.string/lower-case orc-name-abbrevs)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 78.23 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(time (dorun (pmap clojure.string/lower-case orc-name-abbrevs)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 124.727 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在&lt;code>pmap&lt;/code>实际上需要 1.6 倍的*时间。&lt;/p>
&lt;p>解决这个问题的方法是增加&lt;em>粒度&lt;/em>，或者说每个并行化任务所做的工作量。在这种情况下，任务是对集合中的一个元素应用 Map 函数。粒度不是用任何标准单位来衡量的，但你会说&lt;code>pmap&lt;/code>的粒度默认是 1。将粒度增加到 2 意味着你将 Map 函数应用于两个元素，而不是一个，所以任务所在的线程正在做更多的工作。图 10-4 显示了增加粒度是如何提高性能的。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/zombie-metaphysics/ppmap.png"
loading="lazy"
>&lt;/p>
&lt;p>图 10-4：可视化的粒度与并行化开销的关系&lt;/p>
&lt;p>为了在 Clojure 中实现这一点，你可以通过使用&lt;code>partition-all&lt;/code>使每个线程对多个元素应用&lt;code>clojure.string/lower-case&lt;/code>，而不是仅仅一个元素，来增加粒度。 &lt;code>partition-all&lt;/code>接收一个 seq，并将其分成指定长度的 seq。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def numbers [1 2 3 4 5 6 7 8 9 10])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(partition-all 3 numbers)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ((1 2 3) (4 5 6) (7 8 9) (10))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在假设你开始时的代码是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pmap inc numbers)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，颗粒大小是 1，因为每个线程都对一个元素应用了&lt;code>inc&lt;/code>。&lt;/p>
&lt;p>现在假设你把代码改成这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(pmap (fn [number-group] (doall (map inc number-group))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (partition-all 3 numbers))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ((2 3 4) (5 6 7) (8 9 10) (11))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有几件事要做。首先，你现在将颗粒大小增加到了三个，因为每个线程现在执行了三个&lt;code>inc&lt;/code>函数的应用，而不是一个。第二，注意你必须在 Map 函数中调用&lt;code>doall&lt;/code>。这迫使由&lt;code>(map inc number-group)&lt;/code>返回的懒惰序列在线程内实现。第三，我们需要取消对结果的分组。下面是我们如何做到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(apply concat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (pmap (fn [number-group] (doall (map inc number-group)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (partition-all 3 numbers)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用这个技术，我们可以增加 orc 名称低 ase 化的粒度，这样每个线程在 1000 个名称上运行&lt;code>clojure.string/lower-case&lt;/code>而不是只有一个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (dorun
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply concat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (pmap (fn [name] (doall (map clojure.string/lower-case name)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (partition-all 1000 orc-name-abbrevs)))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 44.677 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并行版本再次花费了近一半的时间。为了好玩，我们可以把这个技术概括为一个叫做 &amp;ldquo;ppmap &amp;ldquo;的函数，代表&lt;em>分区的 pmap&lt;/em>。它可以接收一个以上的集合，就像&lt;code>map&lt;/code>一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn ppmap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Partitioned pmap, for grouping map ops together to make parallel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> overhead worthwhile&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [grain-size f &amp;amp; colls]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply concat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply pmap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [&amp;amp; pgroups] (doall (apply map f pgroups)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map (partial partition-all grain-size) colls))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(time (dorun (ppmap 1000 clojure.string/lower-case orc-name-abbrevs)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 44.902 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我不知道你怎么想的，但我觉得这东西就是好玩。要想获得更多的乐趣，可以看看 clojure.core.reducers 库（&lt;em>&lt;a class="link" href="http://clojure.org/reducers/" target="_blank" rel="noopener"
>http://clojure.org/reducers/&lt;/a>&lt;/em>）。 这个库提供了 seq 函数的替代实现，如&lt;code>map&lt;/code>和&lt;code>reduce&lt;/code>，通常比它们在&lt;code>clojure.core&lt;/code>中的表亲更快。其代价是它们并不懒惰。总的来说，clojure.core.reducers 库为创建和使用&lt;code>ppmap&lt;/code>这样的函数提供了一种更精细和可组合的方式。&lt;/p>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>在本章中，你学到了比大多数人更多的关于安全处理并发任务的知识。你了解了支撑 Clojure 引用类型的形而上学。在 Clojure 的形而上学中，状态是某个时间点上的身份值，而身份是指由某个过程产生的一连串值的一种方便的方式。值是原子性的，就像数字是原子性的一样。它们是不可改变的，这使得它们可以安全地并发工作；你不必担心在你使用它们时其他线程会改变它们。&lt;/p>
&lt;p>原子引用类型允许你创建一个身份，你可以使用&lt;code>swap!&lt;/code>和&lt;code>reset!&lt;/code>安全地更新引用新值。当你想使用事务语义更新多个身份时，ref 引用类型很方便，你用&lt;code>alter!&lt;/code>和&lt;code>commute!&lt;/code>更新它。&lt;/p>
&lt;p>此外，你学会了如何通过使用&lt;code>pmap&lt;/code>和 core.reducers 库进行无状态数据转换来提高性能。呜呼!&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>创建一个初始值为 0 的原子，使用&lt;code>swap!&lt;/code>将其递增几次，然后取消引用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个函数，使用期货来并行处理从*&lt;a class="link" href="http://www.braveclojure.com/random-quote" target="_blank" rel="noopener"
>http://www.braveclojure.com/random-quote&lt;/a>*下载随机报价的任务，使用&lt;code>(slurp &amp;quot;http://www.braveclojure.com/random-quote&amp;quot;)&lt;/code>。期货应该更新一个原子，指的是所有引语的总字数。该函数将把要下载的引语数量作为参数，并返回原子的最终值。请记住，在返回原子的最终值之前，你需要确保所有的期货已经完成。下面是你如何调用它和一个示例结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(quote-word-count 5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {&amp;#34;ochre&amp;#34; 8, &amp;#34;smoothie&amp;#34; 2}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在一个游戏中创建两个角色的代表。第一个角色有 15 个命中率，总共有 40 个。第二个角色在他的库存中有一个治疗药水。使用参照物和交易来模拟治疗药水的消耗和第一个角色的治疗。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Chapter9 并发的艺术</title><link>https://example.com/p/chapter9-%E5%B9%B6%E5%8F%91%E7%9A%84%E8%89%BA%E6%9C%AF/</link><pubDate>Sat, 15 Jan 2022 12:30:14 +0800</pubDate><guid>https://example.com/p/chapter9-%E5%B9%B6%E5%8F%91%E7%9A%84%E8%89%BA%E6%9C%AF/</guid><description>&lt;h1 id="并发和并行编程的神圣艺术">并发和并行编程的神圣艺术&lt;/h1>
&lt;p>如果我是一个庄园的主人，而你是我的继承人，我会在你的第 13 个命名日让你坐下来，告诉你：&amp;ldquo;计算的世界正在改变，小姑娘，你必须为多核处理器的新世界做好准备，以免你被它践踏。&lt;/p>
&lt;p>&amp;ldquo;好好听着。近年来，CPU 的时钟速度几乎没有增加，但双核和四核计算机已经变得很普遍。物理定律是残酷而绝对的，它们要求提高时钟速度需要成倍的功率。领域内最好的工程师不太可能很快克服这一限制，如果有的话。因此，你可以预期单台机器上的内核不断增加的趋势将继续下去&amp;ndash;作为一个程序员，你将知道如何充分利用现代硬件的期望也是如此。&lt;/p>
&lt;p>&amp;ldquo;在这种新模式下学习编程将是有趣和迷人的，真的。但请注意：它也充满了危险。你必须学习&lt;em>并发和&lt;/em>并行编程*，这是一门神圣的艺术，使你的应用结构安全地管理多个同时执行的任务。&lt;/p>
&lt;p>&amp;ldquo;你从对并发和并行概念的概述开始学习这门艺术。然后，你将学习困扰每个从业者的三个小妖精：参考单元、互斥和矮人狂战士。你还将学习三种有助于你的工具：Future、许诺和延迟&amp;rdquo;。&lt;/p>
&lt;p>然后我会用键盘拍拍你的肩膀，示意你可以开始了。&lt;/p>
&lt;h2 id="并发和并行的概念">并发和并行的概念&lt;/h2>
&lt;p>并发和并行编程在程序执行的各个层面都涉及到很多混乱的细节，从硬件到操作系统，到编程语言库，再到从你的内心涌出的、落在编辑器中的代码。但在你为这些细节烦恼之前，在这一节中，我将介绍围绕并发和并行的高级概念。&lt;/p>
&lt;h3 id="管理多个任务与同时执行任务">管理多个任务与同时执行任务&lt;/h3>
&lt;p>&lt;em>并发&lt;/em>指的是在同一时间管理一个以上的任务。 &lt;em>任务&lt;/em>只是意味着 &amp;ldquo;需要完成的事情&amp;rdquo;，它并不意味着任何有关硬件或软件的实现。我们可以用 Lady Gaga 的歌曲《电话》来说明并发性。Gaga 唱道&lt;/p>
&lt;blockquote>
&lt;p>I cannot text you with a drink in my hand, eh&lt;/p>
&lt;/blockquote>
&lt;p>这里，她在解释她只能管理一个任务（喝酒）。她断然拒绝了她可以处理一个以上的任务的建议。然而，如果她决定同时处理任务，她会唱歌。&lt;/p>
&lt;blockquote>
&lt;p>I will put down this drink to text you, then put my phone away and continue drinking, eh&lt;/p>
&lt;/blockquote>
&lt;p>在这个假设的宇宙中，Lady Gaga 正在处理两个任务：喝酒和发短信。然而，她并没有同时执行这两项任务。相反，她在这两个任务之间进行切换，或者说是&lt;em>交错&lt;/em>。请注意，在交错过程中，你不必在切换之前完全完成一项任务：Gaga 可以打一个字，放下手机，拿起饮料喝一口，然后换回手机，再打一个字。&lt;/p>
&lt;p>&lt;em>平行性&lt;/em>指的是同时执行一个以上的任务。如果加加夫人平行地执行她的两项任务，她会唱歌。&lt;/p>
&lt;blockquote>
&lt;p>I can text you with one hand while I use the other to drink, eh&lt;/p>
&lt;/blockquote>
&lt;p>平行性是并发性的一个子类：在你同时执行多个任务之前，你首先要管理多个任务。&lt;/p>
&lt;p>Clojure 有很多功能，可以让你轻松实现并行化。虽然 Lady Gaga 系统是通过在多只手上同时执行任务来实现并行的，但计算机系统一般是通过在多个处理器上同时执行任务来实现并行的。&lt;/p>
&lt;p>将并行性与&lt;em>分布式区分开来是很重要的。分布式计算是并行计算的一个特殊版本，处理器在不同的计算机中，任务通过网络分布到计算机上。这就像 Lady Gaga 问 Beyoncé，&amp;ldquo;请在我喝酒时给这家伙发短信&amp;rdquo;。尽管你可以借助库在 Clojure 中进行分布式编程，但本书只涉及并行编程，在这里我用&lt;/em>parallel&lt;em>只指同居的处理器。如果你对分布式编程感兴趣，可以去看看 Kyle Kingsbury 的&lt;/em>Call Me Maybe&lt;em>系列，网址是&lt;/em>&lt;a class="link" href="https://aphyr.com/" target="_blank" rel="noopener"
>https://aphyr.com/&lt;/a>*。&lt;/p>
&lt;h3 id="阻塞和异步任务">阻塞和异步任务&lt;/h3>
&lt;p>并发编程的主要用例之一是用于&lt;em>阻塞&lt;/em>操作。阻塞实际上是指等待一个操作的完成。你最常听到的是与 I/O 操作有关的，比如读取文件或等待 HTTP 请求的完成。让我们用 Lady Gaga 并发的例子来研究这个问题。&lt;/p>
&lt;p>如果 Lady Gaga 给她的对话者发短信，然后拿着手机站在那里，盯着屏幕等待回应，而不喝水，那么你会说&lt;em>读下一条短信&lt;/em>操作是阻塞的，这些任务是*同步执行的。&lt;/p>
&lt;p>相反，如果她把手机收起来，这样她就可以喝酒了，直到手机发出哔哔声或振动来提醒她，那么&lt;em>阅读下一条短信&lt;/em>任务就不是阻塞的，你会说她是在*异步地处理这个任务。&lt;/p>
&lt;h3 id="并发编程和并行编程">并发编程和并行编程&lt;/h3>
&lt;p>并发编程和并行编程指的是将一个任务分解成可以并行执行的子任务的技术，以及管理程序同时执行多个任务时产生的风险。在本章的其余部分，我将交替使用这两个术语，因为两者的风险几乎是一样的。&lt;/p>
&lt;p>为了更好地理解这些风险以及 Clojure 如何帮助你避免这些风险，让我们来看看 Clojure 中是如何实现并发和并行的。&lt;/p>
&lt;h2 id="clojure-实现jvm-线程">Clojure 实现。JVM 线程&lt;/h2>
&lt;p>我一直在抽象地使用*任务这个词，指的是一系列相关的操作，而不考虑计算机可能如何实现任务的概念。例如，发短信就是一个由一系列相关操作组成的任务，它与往你脸上倒饮料的操作完全不同。&lt;/p>
&lt;p>在 Clojure 中，你可以把你正常的、&lt;em>串行的代码看作是任务的序列。你可以通过把任务放在 JVM 的&lt;/em>线程*上来表示任务可以并发执行。&lt;/p>
&lt;h3 id="什么是线程">什么是线程&lt;/h3>
&lt;p>我很高兴你问这个问题! 一个线程是一个子程序。一个程序可以有很多线程，每个线程执行自己的指令集，同时享受对程序状态的共享访问。&lt;/p>
&lt;p>！&lt;a class="link" href="https://www.braveclojure.com/assets/images/cftbat/concurrency/alligator.png" target="_blank" rel="noopener"
>&lt;/a>&lt;/p>
&lt;p>线程管理功能可以存在于计算机的多个层面。例如，操作系统内核通常提供系统调用来创建和管理线程。JVM 提供了自己的独立于平台的线程管理功能，由于 Clojure 程序在 JVM 中运行，所以它们使用 JVM 线程。你将在第 12 章中了解更多关于 JVM 的信息。&lt;/p>
&lt;p>你可以把线程看作是一个实际的、物理的线段，它把一连串的指令串起来。在我看来，这些指令是棉花糖，因为棉花糖很好吃。处理器按顺序执行这些指令。我把这想象成一条鳄鱼在吃这些指令，因为鳄鱼喜欢吃棉花糖（这是事实！）。因此，执行一个程序看起来就像一堆棉花糖串在一条线上，一条鳄鱼沿着这条线逐一吃掉。图 9-1 显示了单核处理器执行单线程程序的这个模型。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/single-thread.png"
loading="lazy"
>&lt;/p>
&lt;p>图 9-1：单核处理器执行一个单线程的程序&lt;/p>
&lt;p>一个线程可以*产生一个新的线程来并发地执行任务。在单处理器系统中，处理器在线程之间来回切换（交织）。这里就引入了潜在的并发性问题。尽管处理器按顺序执行每个线程的指令，但它不保证何时在线程之间来回切换。&lt;/p>
&lt;p>图 9-2 显示了两个线程，A 和 B，以及它们的指令如何执行的时间线。我对线程 B 的指令做了阴影处理，以帮助区分它们与线程 A 的指令。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/two-threads-one-processor.png"
loading="lazy"
>&lt;/p>
&lt;p>单核处理器执行两个线程&lt;/p>
&lt;p>请注意，这只是一种可能的指令执行顺序。例如，处理器也可以按照 A1、A2、A3、B1、A4、B2、B3 的顺序执行指令。这使程序变得&lt;em>不确定&lt;/em>。你不能事先知道结果是什么，因为你无法知道执行顺序，不同的执行顺序会产生不同的结果。&lt;/p>
&lt;p>这个例子显示了通过交织在单个处理器上的并发执行，而多核系统为每个核分配一个线程，允许计算机同时执行一个以上的线程。每个核心按顺序执行其线程的指令，如图 9-3 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/two-threads-two-processors.png"
loading="lazy"
>&lt;/p>
&lt;p>两个线程，两个处理器。&lt;/p>
&lt;p>与单核上的交织一样，整体执行顺序没有保证，所以程序是不确定的。当你在程序中加入第二个线程时，它就变得不确定了，这使得你的程序有可能成为三种问题的牺牲品。&lt;/p>
&lt;h3 id="三个小妖精参考单元互斥和矮人狂战士">三个小妖精。参考单元、互斥和矮人狂战士&lt;/h3>
&lt;p>并发编程中有三个核心挑战，也被称为 &amp;ldquo;三个并发妖精&amp;rdquo;。要知道为什么这些是可怕的，想象一下图 9-3 中的程序包括表 9-1 中的假指令。&lt;/p>
&lt;ol>
&lt;li>非确定结果的程序的指令&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ID&lt;/th>
&lt;th>Instruction&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>A1&lt;/td>
&lt;td>WRITE &lt;code>X = 0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A2&lt;/td>
&lt;td>READ &lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>A3&lt;/td>
&lt;td>WRITE &lt;code>X = X + 1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B1&lt;/td>
&lt;td>READ &lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>B2&lt;/td>
&lt;td>WRITE &lt;code>X = X + 1&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果处理器遵循 A1, A2, A3, B1, B2 的顺序，那么&lt;code>X&lt;/code>的值将是&lt;code>2&lt;/code>，正如你所期望的。但是如果它遵循 A1, A2, B1, A3, B2 的顺序，&lt;code>X'的值将是&lt;/code>1&amp;rsquo;，正如你在图 9-4 中看到的那样。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/reference-cell.png"
loading="lazy"
>&lt;/p>
&lt;p>两个线程与一个引用单元进行交互&lt;/p>
&lt;p>我们把这称为&lt;em>参考单元&lt;/em>问题（第一个并发性妖精）。 当两个线程可以对同一个位置进行读写时，就会出现引用单元问题，而该位置的值取决于读写的顺序。&lt;/p>
&lt;p>第二个并发妖精是&lt;em>互斥&lt;/em>。想象一下，两个线程，每个人都试图向一个文件写一个咒语。如果没有任何方法可以要求对文件进行独占性的写入访问，那么这个咒语最终会变成乱码，因为写入指令会被交错使用。考虑一下以下两个咒语。&lt;/p>
&lt;blockquote>
&lt;p>By the power invested in me&lt;br>
by the state of California,&lt;br>
I now pronounce you man and wife
Thunder, lightning, wind, and rain,&lt;br>
a delicious sandwich, I summon again&lt;/p>
&lt;/blockquote>
&lt;p>如果你把这些写到一个没有相互排斥的文件中，你可能会得到这样的结果。&lt;/p>
&lt;blockquote>
&lt;p>By the power invested in me&lt;br>
by Thunder, lightning, wind, and rain,&lt;br>
the state of California,&lt;br>
I now pronounce you a delicious man sandwich, and wife&lt;br>
I summon again&lt;/p>
&lt;/blockquote>
&lt;p>第三个并发妖精就是我所说的&lt;em>矮人狂战士&lt;/em>问题（又称&lt;em>死锁&lt;/em>）。想象一下，四个狂暴者围坐在一张粗糙的圆形木桌旁，互相安慰。&amp;ldquo;我知道我对我的孩子很疏远，但我就是不知道如何与他们沟通，&amp;ldquo;一个人咆哮道。其余的人啜饮着咖啡，有意无意地点头，他们的眼角处都有护理纹。&lt;/p>
&lt;p>现在，每个人都知道，矮人狂战士结束舒适的咖啡聚会的仪式是拿起他们的 &amp;ldquo;安慰棒&amp;rdquo;（双刃战斧），互相抓挠对方的背部。每对矮人之间放一把战斧，如图 9-5 所示。&lt;/p>
&lt;p>他们的仪式是这样进行的。&lt;/p>
&lt;ol>
&lt;li>拿起&lt;em>左边&lt;/em>的战斧，如果有的话。&lt;/li>
&lt;li>拿起&lt;em>右边&lt;/em>战斧，如果有的话。&lt;/li>
&lt;li>用你的 &amp;ldquo;安慰棒 &amp;ldquo;大力挥舞来安慰你的邻居。&lt;/li>
&lt;li>释放两把战斧。&lt;/li>
&lt;li>重复。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/deadlock.png"
loading="lazy"
>&lt;/p>
&lt;p>矮人狂热者在舒适的咖啡聚会中&lt;/p>
&lt;p>按照这个仪式，所有的矮人狂战士完全有可能拿起他们左边的安慰棒，然后无限期地阻挡，同时等待他们右边的安慰棒出现，导致僵局。(顺便说一下，如果你想进一步研究这种现象，它通常被称为&lt;em>吃饭的哲学家问题&lt;/em>，但这是一个更无聊的场景）。本书没有详细讨论死锁，但了解这个概念和术语是很好的。&lt;/p>
&lt;p>并发编程有它的小妖精，但有了正确的工具，它是可控的，甚至是有趣的。让我们开始看一下正确的工具。&lt;/p>
&lt;h2 id="futures-delays-and-promises">Futures, Delays, and Promises&lt;/h2>
&lt;p>Future、延迟和 Promise 是用于并发编程的简单、轻便的工具。在这一节中，你将学习每个工具的工作原理，以及如何一起使用它们来抵御引用单元的并发妖精和互斥的并发妖精。你会发现，虽然简单，但这些工具对满足你的并发需求有很大帮助。&lt;/p>
&lt;p>它们通过给予你比串行代码更多的灵活性来做到这一点。当你写串行代码时，你把这三个事件绑定在一起。&lt;/p>
&lt;ul>
&lt;li>任务定义&lt;/li>
&lt;li>任务执行&lt;/li>
&lt;li>要求任务的结果&lt;/li>
&lt;/ul>
&lt;p>作为一个例子，看一下这个假设的代码，它定义了一个简单的 API 调用任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(web-api/get :dwarven-beard-waxes)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一旦 Clojure 遇到这个任务定义，它就会执行它。它也需要&lt;em>现在&lt;/em>的结果，阻塞直到 API 调用完成。学习并发编程的一部分是学会识别何时不需要这些时间上的联接。Future、延迟和 Promise 允许你把任务定义、任务执行和要求结果分开。继续前进!&lt;/p>
&lt;h3 id="future">Future&lt;/h3>
&lt;p>在 Clojure 中，你可以使用&lt;em>futures&lt;/em>来定义一个任务，并把它放在另一个线程上，而不要求立即得到结果。你可以用&lt;code>future&lt;/code>宏来创建一个未来。在 REPL 中试试这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(future (Thread/sleep 4000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;I&amp;#39;ll print after 4 seconds&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(println &amp;#34;I&amp;#39;ll print immediately&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Thread/sleep&lt;/code>告诉当前线程在指定的毫秒数内坐着什么都不做。通常情况下，如果你在你的 REPL 中求值了&lt;code>Thread/sleep&lt;/code>，你就不能求值任何其他语句，直到 REPL 完成睡眠；执行你的 REPL 的线程将被阻塞。然而，&lt;code>future&lt;/code>创建了一个新的线程，并将你传递给它的每个表达式放在新的线程上，包括&lt;code>Thread/sleep&lt;/code>，允许 REPL 的线程继续运行，不受阻塞。&lt;/p>
&lt;p>你可以使用 future 在一个单独的线程上运行任务，然后忘记它们，但你经常想使用任务的结果。&lt;code>future&lt;/code>函数返回一个引用值，你可以用它来请求结果。参考值就像干洗店给你的票据：在任何时候你都可以用它来请求你的干净衣服，但是如果你的衣服还没有洗干净，你就必须等待。类似地，你可以使用参考值来请求一个未来的结果，但是如果未来还没有完成计算结果，你就必须等待。&lt;/p>
&lt;p>请求一个未来的结果被称为&lt;em>dereferencing&lt;/em>未来，你可以用&lt;code>deref&lt;/code>函数或&lt;code>@&lt;/code>读者宏来做。一个 future 的结果值是其主体中最后一个被求值的表达式的值。一个 future 的主体只执行一次，它的值被缓存起来。试试下面的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [result (future (println &amp;#34;this prints once&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ 1 1))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;deref: &amp;#34; (deref result))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;@: &amp;#34; @result))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;this prints once&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; deref: 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; @: 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，&amp;ldquo;this prints once &amp;ldquo;这个字符串确实只打印了一次，尽管你对 future 进行了两次推断。这表明 future 的主体只运行了一次，结果&lt;code>2&lt;/code>被缓存了。&lt;/p>
&lt;p>如果未来程序还没有完成运行，解指未来程序就会阻塞，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [result (future (Thread/sleep 3000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ 1 1))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;The result is: &amp;#34; @result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;It will be at least 3 seconds before I print&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; The result is: 2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; It will be at least 3 seconds before I print
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有时你想为一个未来的等待时间设置一个时间限制。要做到这一点，你可以给&lt;code>deref&lt;/code>一个等待的毫秒数，以及当&lt;code>deref&lt;/code>超时时要返回的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(deref (future (Thread/sleep 1000) 0) 10 5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码告诉&lt;code>deref&lt;/code>，如果 future 在 10 毫秒内没有返回一个值，则返回值&lt;code>5&lt;/code>。&lt;/p>
&lt;p>最后，你可以使用&lt;code>realized?&lt;/code>来询问一个 future，看看它是否已经运行完毕。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(realized? (future (Thread/sleep 1000)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let [f (future)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (realized? f))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Future 是一种简单的方法，可以在你的程序中撒上一些并发性。&lt;/p>
&lt;p>就其本身而言，它们让你有能力将任务转移到其他线程上，这可以使你的程序更有效率。它们还可以让你的程序表现得更加灵活，让你控制何时需要一个任务的结果。&lt;/p>
&lt;p>当你解除对一个 future 的引用时，你表明&lt;em>现在&lt;/em>需要这个结果，并且在获得这个结果之前应该停止计算。你会看到这如何帮助你处理相互排斥的问题。另外，你也可以忽略这个结果。例如，你可以使用 Future 来异步写入一个日志文件，在这种情况下，你不需要解除对 Future 的引用来获得任何返回值。&lt;/p>
&lt;p>Future 给你带来的灵活性是非常酷的。Clojure 还允许你用延迟和 Promise 来独立处理任务定义和要求结果。&lt;/p>
&lt;h3 id="延迟">延迟&lt;/h3>
&lt;p>&lt;em>延迟&lt;/em>允许你定义一个任务，而不需要立即执行它或要求得到结果。你可以使用&lt;code>delay&lt;/code>创建一个延迟。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def jackson-5-delay
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (delay (let [message &amp;#34;Just call my name and I&amp;#39;ll be there&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;First deref:&amp;#34; message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> message)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，没有任何东西被打印出来，因为我们还没有要求对&lt;code>let&lt;/code>形式进行求值。你可以求值延迟，并通过解构它或使用&lt;code>force&lt;/code>来获得其结果。 &lt;code>force&lt;/code>的行为与&lt;code>deref&lt;/code>相同，但它更清楚地表达了你正在使一个任务开始，而不是等待一个任务完成。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(force jackson-5-delay)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; First deref: Just call my name and I&amp;#39;ll be there
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Just call my name and I&amp;#39;ll be there&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像 Future 一样，延迟只运行一次，其结果被缓存。后续的取消引用将返回 Jackson 5 的信息，而不打印任何东西。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@jackson-5-delay
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Just call my name and I&amp;#39;ll be there&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以使用延迟的一种方式是在一组相关的 Future 中的一个 Future 第一次完成时启动一个语句。例如，假设你的应用程序将一组头像上传到一个头像分享网站，并在第一张头像完成后立即通知所有者，如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def gimli-headshots [&amp;#34;serious.jpg&amp;#34; &amp;#34;fun.jpg&amp;#34; &amp;#34;playful.jpg&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn email-user
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [email-address]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Sending headshot notification to&amp;#34; email-address))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn upload-document
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Needs to be implemented&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [headshot]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> true)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let [notify (delay ➊(email-user &amp;#34;and-my-axe@gmail.com&amp;#34;))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (doseq [headshot gimli-headshots]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (upload-document headshot)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➋(force notify))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，你定义了一个要上传头像的 Vector（&lt;code>gimli-headshots&lt;/code>）和两个函数（&lt;code>email-user&lt;/code>和&lt;code>upload-document&lt;/code>）来假装执行这两个操作。然后你用&lt;code>let&lt;/code>将&lt;code>notify&lt;/code>绑定到一个延迟。延迟的主体，&lt;code>(email-user &amp;quot;and-my-axe@gmail.com&amp;quot;)&lt;/code>➊，在创建延迟的时候并没有被求值。相反，当由&lt;code>doseq&lt;/code>Form 创建的 Future 之一第一次求值&lt;code>(force notify)&lt;/code>➋时，它就被求值了。即使&lt;code>(force notify)&lt;/code>将被求值三次，延迟主体只被求值一次。Gimli 会很高兴知道第一张头像什么时候可用，这样他就可以开始调整它并分享它。他也会感谢不被垃圾邮件，而你也会感谢不面对他的矮人之怒。&lt;/p>
&lt;p>这种技术可以帮助你避免相互排斥的并发妖精&amp;ndash;确保每次只有一个线程可以访问特定资源的问题。在这个例子中，延迟守护着电子邮件服务器资源。因为延迟的主体被保证只发射一次，所以你可以确定你永远不会遇到两个线程发送相同邮件的情况。当然，没有线程能够再次使用延迟来发送邮件。对于大多数情况来说，这可能是一个过于激烈的约束，但在像这个例子这样的情况下，它是完美的。&lt;/p>
&lt;h3 id="promise">Promise&lt;/h3>
&lt;p>&lt;em>Promise&lt;/em>允许你表达你期望的结果，而不需要定义应该产生结果的任务或该任务应该何时运行。你用&lt;code>promise'创建Promise，用&lt;/code>deliver&amp;rsquo;向他们传递一个结果。你通过取消引用来获得结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def my-promise (promise))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(deliver my-promise (+ 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@my-promise
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，你创建了一个 promise，然后向它传递一个值。最后，你通过解除对 Promise 的引用来获得该值。解除引用是你表达你期望一个结果的方式，如果你试图在没有首先传递一个值的情况下解除引用`my-promise&amp;rsquo;，程序将阻塞，直到一个 Promise 被传递，就像 Future 和延迟一样。你只能向一个 Promise 传递一次结果。&lt;/p>
&lt;p>Promise 的一个用途是在一个数据集合中找到第一个满意的元素。例如，假设你正在收集成分以使你的鹦鹉听起来像詹姆斯-厄尔-琼斯。因为詹姆斯-厄尔-琼斯的声音是世界上最顺畅的，所以其中一种成分是顺畅度达到 97 以上的优质牦牛油。你的预算是 100 美元一磅。&lt;/p>
&lt;p>你是一个现代神奇鸟类学艺术的实践者，因此，与其繁琐地浏览每个牦牛油零售网站，不如创建一个脚本，给你提供第一个符合你需求的牦牛油的 URL。&lt;/p>
&lt;p>下面的代码定义了一些牦牛油产品，创建了一个函数来模拟 API 调用，并创建了另一个函数来测试产品是否满意。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def yak-butter-international
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:store &amp;#34;Yak Butter International&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :price 90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :smoothness 90})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def butter-than-nothing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:store &amp;#34;Butter Than Nothing&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :price 150
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :smoothness 83})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; This is the butter that meets our requirements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def baby-got-yak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:store &amp;#34;Baby Got Yak&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :price 94
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :smoothness 99})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn mock-api-call
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [result]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 1000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn satisfactory?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;If the butter meets our criteria, return the butter, else return false&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [butter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (and (&amp;lt;= (:price butter) 100)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (&amp;gt;= (:smoothness butter) 97)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> butter))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该 API 调用在返回结果前等待一秒钟，以模拟执行实际调用的时间。&lt;/p>
&lt;p>为了说明同步检查网站需要多长时间，我们将使用&lt;code>some&lt;/code>对集合中的每个元素应用&lt;code>satisfactory?&lt;/code>函数，并返回第一个真实的结果，如果没有，则返回 nil。当你同步检查每个站点时，每个站点可能需要超过一秒钟的时间来获得结果，正如下面的代码所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (some (comp satisfactory? mock-api-call)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [yak-butter-international butter-than-nothing baby-got-yak]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 3002.132 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:store &amp;#34;Baby Got Yak&amp;#34;, :smoothness 99, :price 94}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我用&lt;code>comp&lt;/code>来组合函数，我用&lt;code>time&lt;/code>来打印求值一个 Form 的时间。你可以使用 promise 和 futures 来在一个单独的线程上执行每个检查。如果你的计算机有多个核心，这可以把时间减少到一秒钟左右。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [butter-promise (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (doseq [butter [yak-butter-international butter-than-nothing baby-got-yak]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (if-let [satisfactory-butter (satisfactory? (mock-api-call butter))]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (deliver butter-promise satisfactory-butter))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;And the winner is:&amp;#34; @butter-promise)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 1002.652 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; And the winner is: {:store Baby Got Yak, :smoothness 99, :price 94}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，你首先创建了一个 Promise，&lt;code>butter-promise&lt;/code>，然后创建了三个访问该 Promise 的 Future。每个 Future 的任务是求值一个牦牛黄油网站，如果该网站令人满意，则向 Promise 提供该网站的数据。最后，你解除对&lt;code>butter-promise&lt;/code>的引用，导致程序阻塞，直到网站数据被交付。这需要一秒钟而不是三秒钟，因为网站的求值是平行进行的。通过将对结果的要求与结果的实际计算方式脱钩，你可以并行地进行多个计算，并节省一些时间。&lt;/p>
&lt;p>你可以把这看作是一种保护自己不受参考单元格并发性妖精影响的方法。因为 Promise 只能被写入一次，你可以防止非确定性读写产生的那种不一致的状态。&lt;/p>
&lt;p>你可能想知道，如果牦牛油都不满意会怎么样。如果发生这种情况，解除引用将永远阻塞，并绑住线程。为了避免这种情况，你可以加入一个超时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(让 [p (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (deref p 100 &amp;#34;timed out&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将创建一个 Promise，&lt;code>p'，并试图解除对它的引用。数字100告诉&lt;/code>deref&lt;code>等待100毫秒，如果届时没有可用的值，就使用超时值，&lt;/code>&amp;ldquo;timed out&amp;rdquo;`。&lt;/p>
&lt;p>我应该提到的最后一个细节是，你也可以使用 Promise 来注册回调，实现与你在 JavaScript 中可能习惯的相同功能。JavaScript 的回调是一种定义代码的方式，一旦其他代码完成，就应该异步执行。下面是如何在 Clojure 中做到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [ferengi-wisdom-promise (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (println &amp;#34;Here&amp;#39;s some Ferengi wisdom:&amp;#34; @ferengi-wisdom-promise))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 100)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (deliver ferengi-wisdom-promise &amp;#34;Whisper your way to success.&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Here&amp;#39;s some Ferengi wisdom: Whisper your way to success.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子创建了一个立即开始执行的未来。然而，未来的线程是阻塞的，因为它在等待一个值被传递给&lt;code>ferengi-wisdom-promise&lt;/code>。100 毫秒后，你交付了值，未来中的`println&amp;rsquo;语句开始运行。&lt;/p>
&lt;p>Future、延迟和 Promise 是在你的应用程序中管理并发性的伟大而简单的方法。在下一节中，我们将看到一个更有趣的方法来控制你的并发应用程序。&lt;/p>
&lt;h3 id="滚动你自己的队列">滚动你自己的队列&lt;/h3>
&lt;p>到目前为止，你已经看到了一些简单的方法来结合 Future、延迟和 Promise，使你的并发程序更加安全。在这一节中，你将使用一个宏来以一种稍微复杂的方式结合 Future 和 Promise。你可能不一定会用到这段代码，但它会更多地展示这些适度的工具的力量。这个宏需要你在头脑中同时持有运行时逻辑和宏扩展逻辑，以了解正在发生的事情；如果你被卡住了，就跳过前面。&lt;/p>
&lt;p>三个并发妖精的一个共同特点是，它们都涉及到任务以不协调的方式并发地访问一个共享资源&amp;ndash;变量、打印机、矮人战斧。如果你想确保每次只有一个任务会访问一个资源，你可以把任务的资源访问部分放在一个序列执行的队列中。这有点像做蛋糕：你和一个朋友可以分别取回原料（鸡蛋、面粉、蝾螈的眼睛，等等），但有些步骤你必须连续执行。你必须在把面糊放进烤箱之前准备好它。图 9-6 说明了这个策略。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/concurrency/enqueue.png"
loading="lazy"
>&lt;/p>
&lt;p>将任务分为串行部分和并发部分，可以让你安全地使你的代码更有效率。&lt;/p>
&lt;p>为了实现排队宏，你要向英国人致敬，因为他们发明了队列。你将使用一个队列来确保英国人习惯的问候语 &amp;ldquo;Ello, gov&amp;rsquo;na! Pip Pip! Cheerio!&amp;ldquo;的正确顺序进行传递。这个演示将涉及到大量的 &amp;ldquo;睡眠&amp;rdquo;，所以这里有一个宏来更简洁地完成这个任务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">defmacro&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">wait&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;Sleep `timeout` seconds before evaluating body&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">do&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">~&lt;/span>&lt;span class="n">timeout&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">~@&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码所做的就是接受你给它的任何形式，并在它们之前插入对&lt;code>Thread/sleep&lt;/code>的调用，所有这些都被&lt;code>do&lt;/code>包裹起来。&lt;/p>
&lt;p>清单 9-1 中的代码将任务分成了并发部分和序列化部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [saying3 (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (deliver saying3 (wait 100 &amp;#34;Cheerio!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(let [saying2 (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (deliver saying2 (wait 400 &amp;#34;Pip pip!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ @(let [saying1 (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (deliver saying1 (wait 200 &amp;#34;&amp;#39;Ello, gov&amp;#39;na!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println @saying1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> saying1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println @saying2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> saying2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println @saying3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> saying3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>9-1. 一个 enqueue 宏调用的扩展&lt;/li>
&lt;/ol>
&lt;p>整体策略是为每个任务（在本例中，打印问候语的一部分）创建一个 Promise，以创建一个相应的未来，将并发计算的值交付给该 Promise。这确保了在任何一个 Promise 被解除引用之前，所有的未来都被创建，并且确保序列化的部分以正确的顺序执行。首先打印&lt;code>saying1'的值-&lt;/code>&amp;quot;&amp;lsquo;Ello, gov&amp;rsquo;na!&amp;quot;-然后是&lt;code>saying2'的值，最后是&lt;/code>saying3&amp;rsquo;。在&lt;code>let&lt;/code>块中返回&lt;code>saying1&lt;/code>，并在➊处解除对&lt;code>let&lt;/code>块的引用，可以确保在代码继续对&lt;code>saying2&lt;/code>做任何事情之前，你已经完全完成了&lt;code>saying1&lt;/code>，而且这种模式在&lt;code>saying2&lt;/code>和&lt;code>saying3&lt;/code>上重复。&lt;/p>
&lt;p>解除对&lt;code>let&lt;/code>块的引用似乎很傻，但这样做可以让你用一个宏来抽象这段代码。你肯定想使用宏，因为像前面的例子那样写出的代码会让你发疯（英国人会这么说）。理想情况下，这个宏的工作方式如清单 9-2 所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(-&amp;gt; (enqueue ➊saying ➋(wait 200 &amp;#34;&amp;#39;Ello, gov&amp;#39;na!&amp;#34;) ➌(println @saying))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ➍(enqueue saying (wait 400 &amp;#34;Pip pip!&amp;#34;) (println @saying))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (enqueue saying (wait 100 &amp;#34;Cheerio!&amp;#34;) (println @saying)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>这就是你使用 enqueue 的方法。&lt;/li>
&lt;/ol>
&lt;p>该宏让你命名被创建的 Promise➊，定义如何获取价值以交付该 Promise➋，并定义如何处理该 Promise➌。这个宏也可以把另一个&lt;code>enqueue&lt;/code>宏调用作为它的第一个参数，这样你就可以把它变成线程➍。清单 9-3 显示了你如何定义&lt;code>enqueue&lt;/code>宏。定义完&lt;code>enqueue&lt;/code>后，清单 9-2 中的代码将扩展为清单 9-1 中的代码，其中包含所有嵌套的&lt;code>let&lt;/code>表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro enqueue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ ([q concurrent-promise-name concurrent serialized]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ `(let [~concurrent-promise-name (promise)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (future (deliver ~concurrent-promise-name ~concurrent))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (deref ~q)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~serialized
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~concurrent-promise-name))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ ([concurrent-promise-name concurrent serialized]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(enqueue (future) ~concurrent-promise-name ~concurrent ~serialized)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>1.enqueue 的实现&lt;/p>
&lt;p>首先注意这个宏有两个 arities，以便提供一个缺省值。第一个 arity ➊是真正的工作所在。它有参数&lt;code>q&lt;/code>，而第二个 arity 则没有。第二个 arity ➍调用第一个 arity，为&lt;code>q&lt;/code>提供了&lt;code>(future)&lt;/code>的值；你将在一分钟内看到原因。在➋中，宏返回一个 Form，该 Form 创建了一个 Promise，在一个 future 中传递它的值，取消对提供给&lt;code>q&lt;/code>的任何 Form 的引用，求值序列化代码，最后返回 Promise。&lt;code>q&lt;/code>通常是一个嵌套的&lt;code>let&lt;/code>表达式，由另一个对&lt;code>enqueue&lt;/code>的调用返回，如清单 9-2 所示。如果没有为&lt;code>q&lt;/code>提供值，宏会提供一个未来，这样在➌的&lt;code>deref&lt;/code>就不会引起异常。&lt;/p>
&lt;p>现在我们已经写好了&lt;code>enqueue&lt;/code>宏，让我们试试它是否能减少执行时间&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time @(-&amp;gt; (enqueue saying (wait 200 &amp;#34;&amp;#39;Ello, gov&amp;#39;na!&amp;#34;) (println @saying))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (enqueue saying (wait 400 &amp;#34;Pip pip!&amp;#34;) (println @saying))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (enqueue saying (wait 100 &amp;#34;Cheerio!&amp;#34;) (println @saying))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#39;Ello, gov&amp;#39;na!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Pip pip!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Cheerio!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 401.635 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>天哪! 问候语是按照正确的顺序传递的，你可以通过耗时看到，睡眠的 &amp;ldquo;工作 &amp;ldquo;是同时进行的。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>对于像你这样的程序员来说，学习并发和并行编程技术很重要，这样你就可以设计出在现代硬件上高效运行的程序。并发是指一个程序能够执行一个以上的任务，在 Clojure 中，你可以通过将任务放在不同的线程上来实现。当计算机有一个以上的 CPU 时，程序就会并行执行，这样就可以在同一时间执行一个以上的线程。&lt;/p>
&lt;p>并发编程指的是用于管理三种并发风险的技术：引用单元、互斥和死锁。Clojure 为你提供了三个基本工具，帮助你减轻这些风险：Future、延迟和 Promise。每个工具都可以让你把定义任务、执行任务和要求任务结果这三个事件解耦。Future 让你定义一个任务并立即执行它，允许你稍后或永远不要求结果。 Future 也会缓存其结果。延迟（Delay）让你定义一个稍后才执行的任务，并且延迟的结果会被缓存起来。许诺让你表达你需要一个结果，而不需要知道产生该结果的任务。你只能向一个 Promise 传递一次值。&lt;/p>
&lt;p>在下一章中，你将探索并发编程的哲学层面，并学习更复杂的工具来管理风险。&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;ol>
&lt;li>编写一个函数，将一个字符串作为参数，使用&lt;code>slurp&lt;/code>函数在 Bing 和 Google 上搜索它。你的函数应该返回搜索到的第一个页面的 HTML。&lt;/li>
&lt;li>更新你的函数，使其接受第二个参数，包括要使用的搜索引擎。&lt;/li>
&lt;li>创建一个新的函数，将搜索词和搜索引擎作为参数，并从每个搜索引擎的第一页搜索结果中返回一个 URL 的 Vector。&lt;/li>
&lt;/ol></description></item><item><title>Chapter8 宏</title><link>https://example.com/p/chapter8-%E5%AE%8F/</link><pubDate>Sat, 15 Jan 2022 12:22:42 +0800</pubDate><guid>https://example.com/p/chapter8-%E5%AE%8F/</guid><description>&lt;h1 id="编写宏">编写宏&lt;/h1>
&lt;p>当我 18 岁时，我在新墨西哥州圣菲的一家酒店找到了一份夜班审计师的工作，每周工作四个晚上，从晚上 11 点到早上 7 点。经过几个月的这种不眠不休的工作，我的情绪有了自己的变化。一天晚上，大约在&lt;/p>
&lt;p>凌晨 3 点，我正在看一个信息广告，该产品声称可以恢复男人的头发。当我看到一个曾经秃头的人的故事时，我被真诚的喜悦所淹没。&amp;ldquo;终于来了！&amp;ldquo;我的大脑涌动着。&amp;ldquo;这个人得到了他应得的爱和成功! 多么不可思议的产品，给无望的人以希望！&amp;rdquo;&lt;/p>
&lt;p>从那时起，我发现自己一直在想，我是否能以某种方式重新创造因长期睡眠不足而引起的情感放弃和对生命的欣赏。也许是某种药水&amp;ndash;喝上几口，释放我内心的理查德-西蒙斯，但时间不会太长。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/writing-macros/simmons-potion.png"
loading="lazy"
>&lt;/p>
&lt;p>就像药水可以让我暂时改变我的基本性质一样，宏允许你以其他语言无法实现的方式修改 Clojure。有了宏，你可以扩展 Clojure 以适应你的问题空间，建立起语言。&lt;/p>
&lt;p>在这一章中，你将彻底研究如何编写宏，从基本的例子开始，逐步提高复杂性。最后，你将戴上你的假想帽，用宏来验证你想象中的在线药水店的客户订单。&lt;/p>
&lt;p>在本章结束时，你将了解你用来编写宏的所有工具：引号、语法引号、解引号、解引号拼接（又称皮纳塔工具）和 gensym。你还会了解到对毫无戒心的宏作者来说隐藏着的危险：双重求值、变量捕获和宏感染。&lt;/p>
&lt;h2 id="宏是必不可少的">宏是必不可少的&lt;/h2>
&lt;p>在你开始编写宏之前，我想帮助你把它们放在适当的环境中。是的，宏比北极熊的脚趾甲还要酷，但你不应该把宏看成是一些深奥的工具，当你想对你的代码进行额外的花哨处理时，就把它拿出来。事实上，宏允许 Clojure 从一个很小的函数和特殊形式的核心中获得大量的内置功能。以&lt;code>when&lt;/code>为例。 &lt;code>when&lt;/code>有这样的一般形式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(when boolean-expression
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-x)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能认为&lt;code>when&lt;/code>是一个像&lt;code>if&lt;/code>一样的特殊形式。那么你猜怎么着？它不是! 在大多数其他语言中，你只能使用特殊的关键字来创建条件表达式，而没有办法创建你自己的条件运算符。然而，&lt;code>when&lt;/code>实际上是一个宏。&lt;/p>
&lt;p>在这个宏扩展中，你可以看到&lt;code>when&lt;/code>是用&lt;code>if&lt;/code>和&lt;code>do&lt;/code>来实现的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(when boolean-expression
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (if boolean-expression
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do expression-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> expression-3))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这表明宏是 Clojure 开发中不可或缺的一部分&amp;ndash;它们甚至被用来提供基本操作。宏并不是为奇特的特殊情况而保留的；你应该把写宏看作是你工具包中的另一个工具。当你学会编写自己的宏时，你会发现它们是如何让你进一步扩展语言，使其适合你的特定问题领域的形状。&lt;/p>
&lt;h2 id="解剖巨集">解剖巨集&lt;/h2>
&lt;p>巨集定义看起来很像函数定义。它们有一个名称，一个可选的文档字符串，一个参数列表，以及一个主体。主体几乎总是返回一个列表。这是有道理的，因为宏是将数据结构转化为 Clojure 可以求值的形式的一种方式，而 Clojure 使用列表来表示函数调用、特殊形式调用和宏调用。你可以在宏主体中使用任何函数、宏或特殊形式，你调用宏就像调用函数或特殊形式一样。&lt;/p>
&lt;p>作为一个例子，这里有我们的老朋友&lt;code>infix&lt;/code>宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro infix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Use this macro when you pine for the notation of your childhood&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [infixed]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list (second infixed) (first infixed) (last infixed)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个宏将一个列表重新排列成正确的 infix 记号顺序。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(infix (1 + 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数和宏之间的一个关键区别是，函数参数在传递给函数之前被完全求值，而宏是以未求值的数据形式接收参数。你可以在这个例子中看到这一点。如果你试图单独求值&lt;code>(1+1)&lt;/code>，你会得到一个异常。然而，因为你在进行一个宏调用，未求值的列表&lt;code>(1 + 1)&lt;/code>被传递给&lt;code>infix&lt;/code>。然后宏可以使用&lt;code>first&lt;/code>、&lt;code>second&lt;/code>和&lt;code>last&lt;/code>来重新排列列表，这样 Clojure 就可以求值它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(infix (1 + 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过扩展宏，你可以看到&lt;code>infix&lt;/code>将&lt;code>(1 + 1)&lt;/code>重新排列成&lt;code>(+ 1 1)&lt;/code>。很方便!&lt;/p>
&lt;p>你也可以在宏定义中使用参数重构，就像你可以使用函数一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro infix-2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[operand1 op operand2]] (list op operand1 operand2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list op operand1 operand2))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解构参数可以让你根据序列参数中的位置简洁地将值与符号绑定。在这里，&lt;code>infix-2&lt;/code>将一个顺序数据结构作为参数，并按位置进行解构，因此第一个值被命名为&lt;code>operand1&lt;/code>，第二个值被命名为&lt;code>op&lt;/code>，第三个值在宏中被命名为&lt;code>operand2&lt;/code>。&lt;/p>
&lt;p>你也可以创建多属性的宏，事实上，基本的布尔运算&lt;code>and&lt;/code>和&lt;code>or&lt;/code>都被定义为宏。下面是&lt;code>and&lt;/code>的源代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Evaluates exprs one at a time, from left to right. If a form
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> returns logical false (nil or false), and returns that value and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doesn&amp;#39;t evaluate any of the other expressions, otherwise it returns
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> the value of the last expr. (and) returns true.&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:added &amp;#34;1.0&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([] true)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x] x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([x &amp;amp; next]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(let [and# ~x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if and# (and ~@next) and#))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中发生了很多事情，包括符号和&lt;code>~@&lt;/code>，你很快就会了解到这些。现在重要的是，这里有三个宏体：一个总是返回 &amp;ldquo;true &amp;ldquo;的 0-arity 宏体，一个返回操作数的 1-arity 宏体，以及一个递归调用自身的&lt;em>n&lt;/em>-arity 宏体。这是正确的：宏可以是递归的，它们也可以使用其余的参数（&lt;em>n&lt;/em>-arity 宏主体中的&lt;code>&amp;amp; next&lt;/code>），就像函数一样。&lt;/p>
&lt;p>现在你对宏的解剖已经很熟悉了，现在是时候把你自己绑在你的奥德修斯式思维的桅杆上，学习写宏体了。&lt;/p>
&lt;h2 id="为求值建立列表">为求值建立列表&lt;/h2>
&lt;p>编写宏就是要为 Clojure 建立一个列表来进行求值，这需要颠覆你的正常思维方式。首先，你经常需要引用表达式，以便在你的最终列表中获得未求值的数据结构（我们稍后会回到这个问题）。更普遍的是，你需要特别注意&lt;em>符号&lt;/em>和&lt;em>值&lt;/em>之间的区别。&lt;/p>
&lt;h3 id="区分符号和值">区分符号和值&lt;/h3>
&lt;p>假设你想创建一个宏，它接收一个表达式，并同时打印和返回其值。(这与&lt;code>println'不同，&lt;/code>println&amp;rsquo;总是返回`nil&amp;rsquo;。)你希望你的宏能够返回类似这样的列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [result expression]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你的宏的第一个版本可能看起来像这样，使用&lt;code>list&lt;/code>函数来创建 Clojure 应该求值的列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> (defmacro my-print-whoopsie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [expression]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list let [result expression]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list println result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> result))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，如果你尝试这样做，你会得到一个异常`不能接受一个宏的值。#&amp;lsquo;clojure.core/let&amp;rsquo;。这到底是怎么回事？&lt;/p>
&lt;p>发生这种情况的原因是，你的宏主体试图获取&lt;em>符号&lt;/em> &lt;code>let&lt;/code>所指的*值，而你实际想做的是返回&lt;code>let&lt;/code>符号本身。还有其他的问题：你试图获得&lt;code>result&lt;/code>的值，这是不绑定的，你试图获得&lt;code>println&lt;/code>的值，而不是返回其符号。下面是你如何写宏来做你想要的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro my-print
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [expression]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;let [&amp;#39;result expression]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;println &amp;#39;result)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;result))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里，你通过在每个符号前加上单引号&amp;rdquo;&amp;lsquo;&amp;lsquo;来引出你想作为一个符号使用。这告诉 Clojure&lt;em>关闭&lt;/em>后面的求值，在这种情况下，防止 Clojure 试图解决这些符号，而只是返回这些符号。使用引号来关闭求值的能力是编写宏的核心，所以让我们给这个主题一个独立的章节。&lt;/p>
&lt;h3 id="简单的引号">简单的引号&lt;/h3>
&lt;p>你几乎总是在你的宏中使用引号来获得一个未求值的符号。让我们简单地复习一下引号，然后看看你如何在宏中使用它。&lt;/p>
&lt;p>首先，这里是一个没有引号的简单函数调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我们在开头加上&lt;code>quote&lt;/code>，它就会返回一个未求值的数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(quote (+ 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里在返回的列表中，&lt;code>+&lt;/code>是一个符号。如果我们求值这个加号，就会产生加号函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;lt;core$_PLUS_ clojure.core$_PLUS_@47b36583&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而如果我们引用这个加号，它只是产生加号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(quote +)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; +
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>求值一个未绑定的符号会引发一个异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sweating-to-the-oldies
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Unable to resolve symbol: sweating-to-the-oldies in this context
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是引用符号会返回一个符号，不管这个符号是否有一个与之相关的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(quote sweating-to-the-oldies)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; sweating-to-the-oldies
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>单引号字符是&lt;code>(quote&lt;/code>x&lt;code>)&lt;/code>的读者宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;(+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#39;dr-jekyll-and-richard-simmons
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; dr-jekyll-and-richard-simmons
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以在&lt;code>when&lt;/code>宏中看到引用的工作。这是&lt;code>when&lt;/code>的实际源代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro when
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Evaluates test. If logical true, evaluates body in an implicit do.&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:added &amp;#34;1.0&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [test &amp;amp; body]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;if test (cons &amp;#39;do body)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，宏的定义同时引用了&lt;code>if&lt;/code>和&lt;code>do&lt;/code>。这是因为你想让这些符号出现在`when&amp;rsquo;返回的最终列表中进行计算。下面是一个返回列表的例子，它可能是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(when (the-cows-come :home)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (call me :pappy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (slap me :silly)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (if (the-cows-come :home)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (call me :pappy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (slap me :silly)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是另一个内置宏的源代码的例子，这次是关于&lt;code>unless&lt;/code>的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro unless
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Inverted &amp;#39;if&amp;#39;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [test &amp;amp; branches]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (conj (reverse branches) test &amp;#39;if))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同样，你必须引用&lt;code>if&lt;/code>，因为你想让未求值的符号放在结果列表中，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(unless (done-been slapped? me)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (slap me :silly)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (say &amp;#34;I reckon that&amp;#39;ll learn me&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (if (done-been slapped? me)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (say &amp;#34;I reckon that&amp;#39;ll learn me&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (slap me :silly))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在许多情况下，在编写宏时，你会使用这样的简单引号，但大多数情况下你会使用更强大的语法引号。&lt;/p>
&lt;h3 id="语法引用">语法引用&lt;/h3>
&lt;p>到目前为止, 你已经看到了通过使用&lt;code>list&lt;/code>函数来建立列表的宏，以及对列表进行操作的函数，如&lt;code>first&lt;/code>, &lt;code>second&lt;/code>, &lt;code>last&lt;/code>，等等。事实上，你可以这样写宏，直到奶牛回家。但有时，这将导致繁琐和冗长的代码。&lt;/p>
&lt;p>语法引号返回未求值的数据结构，与普通引号类似。然而，有两个重要的区别。一个区别是，语法引用将返回&lt;em>完全合格的&lt;/em>符号（即包括符号的命名空间）。让我们比较一下引号和语法引号。&lt;/p>
&lt;p>如果你的代码中不包括名字空间，那么引用就不包括名字空间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; +
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>写出命名空间，它将被正常的引用所返回。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;clojure.core/+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; clojure.core/+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>语法引号将总是包括符号的完整命名空间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; clojure.core/+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对一个列表的引用会递归地引用所有的元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;(+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>语法引用一个列表递归地引用所有的元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>语法引号包括名字空间的原因是为了帮助你避免名字的碰撞，这个话题在第 6 章中涉及。&lt;/p>
&lt;p>引号和语法引号之间的另一个区别是，后者允许你使用 &amp;ldquo;tilde&amp;rdquo;，即&amp;rdquo;~&amp;quot;，来*解除引号的形式。这有点像氪星石：只要超人在氪星石周围，他的能力就会消失。每当在一个语法引号的 Form 中出现 tilde，语法引号返回未求值的、完全命名的 Form 的能力就会消失。这里有一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(+ 1 ~(inc 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为它在 tilde 之后，&lt;code>(inc 1)&lt;/code>被求值而不是被引号。如果没有 unquote，语法引号会返回未求值的形式，并带有完全限定的符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(+ 1 (inc 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ 1 (clojure.core/inc 1))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你熟悉字符串插值，你可以类似地考虑语法引用/非引用的问题。在这两种情况下，你都在创建一种模板，将一些变量放在一个更大的静态结构中。例如，在 Ruby 中，你可以通过连接来创建字符串&lt;code>&amp;quot;Churn your butter, Jebediah!&amp;quot;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">name = &amp;#34;Jebediah&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Churn your butter, &amp;#34; + name + &amp;#34;!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或通过内插法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;Churn your butter, #{name}!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就像字符串插值可以使代码更清晰、更简洁一样，语法引号和解引号可以使你更清晰、更简洁地创建列表。比较一下使用&lt;code>list&lt;/code>函数和使用语法引号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(list &amp;#39;+ 1 (inc 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">`(+ 1 ~(inc 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，语法引号版本更加简洁。而且，它的视觉形式更接近列表的最终形式，使其更容易理解。&lt;/p>
&lt;h2 id="在宏中使用语法引语">在宏中使用语法引语&lt;/h2>
&lt;p>现在你已经很好地掌握了语法引号的工作原理，来看看&lt;code>code-critic&lt;/code>宏。你将使用语法引号编写一个更简洁的版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro code-critic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Phrases are courtesy Hermes Conrad from Futurama&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [bad good]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;println
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Great squid of Madrid, this is bad code:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;quote bad))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;println
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Sweet gorilla of Manila, this is good code:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list &amp;#39;quote good))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(code-critic (1 + 1) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Great squid of Madrid, this is bad code: (1 + 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Sweet gorilla of Manila, this is good code: (+ 1 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>仅仅是看着那些乏味的重复的&lt;code>list&lt;/code>和单引号，就让我感到害怕。但是如果你用语法引号重写&lt;code>code-critic&lt;/code>，你就可以使它变得圆滑简洁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro code-critic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Phrases are courtesy Hermes Conrad from Futurama&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [bad good]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(do (println &amp;#34;Great squid of Madrid, this is bad code:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (quote ~bad))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Sweet gorilla of Manila, this is good code:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (quote ~good))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，你想引用除符号&lt;code>good&lt;/code>和&lt;code>bad&lt;/code>以外的所有内容。在原来的版本中，你必须单独引用每一块，并明确地把它放在一个不方便的列表中，只是为了防止这两个符号被引用。有了语法引号，你只需将整个&lt;code>do&lt;/code>表达式包裹在一个引号中，并简单地取消你要求值的两个符号的引号。&lt;/p>
&lt;p>宏的编写方法介绍到此结束! 亲爱的西萨摩亚和东萨摩亚的神圣蟒蛇，这是很重要的!&lt;/p>
&lt;p>总而言之，宏接收未经求值的、任意的数据结构作为参数，并返回 Clojure 求值的数据结构。在定义宏的时候，你可以使用参数重构，就像你可以使用函数和&lt;code>let&lt;/code>绑定一样。你也可以编写多属性和递归的宏。&lt;/p>
&lt;p>大多数情况下，你的宏会返回列表。你可以通过使用&lt;code>list&lt;/code>函数或使用语法引号来建立要返回的列表。语法引号通常会使代码更清晰、更简洁，因为它可以让你创建一个你想返回的数据结构的模板，更容易进行视觉上的解析。无论你使用语法引号还是普通引号，重要的是在建立你的列表时要清楚地了解符号和它所求值的值之间的区别。如果你想让你的宏返回多种形式供 Clojure 求值，一定要用&lt;code>do&lt;/code>来包装它们。&lt;/p>
&lt;h2 id="重构一个宏和取消引号拼接">重构一个宏和取消引号拼接&lt;/h2>
&lt;p>上一节中的 &amp;ldquo;code-critic &amp;ldquo;宏仍然需要一些改进。看看这个重复的地方! 两个 &amp;ldquo;println &amp;ldquo;的调用几乎是一样的。让我们把它清理一下。首先，让我们创建一个函数来生成这些`println&amp;rsquo;列表。函数比宏更容易思考和使用，所以把宏的内容移到辅助函数中通常是个好主意。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn criticize-code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [criticism code]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(println ~criticism (quote ~code)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmacro code-critic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [bad good]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(do ~(criticize-code &amp;#34;Cursed bacteria of Liberia, this is bad code:&amp;#34; bad)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~(criticize-code &amp;#34;Sweet sacred boa of Western and Eastern Samoa, this is good code:&amp;#34; good)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意到&lt;code>criticize-code&lt;/code>函数如何返回一个语法引号的列表。这就是你如何建立起宏将返回的列表。&lt;/p>
&lt;p>不过，还有更多的改进空间。这段代码仍然有多个几乎相同的函数调用。在这种情况下，你想对一个值的集合应用同一个函数，使用像&lt;code>map&lt;/code>这样的 seq 函数是有意义的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro code-critic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [bad good]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(do ~(map #(apply criticize-code %)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[&amp;#34;Great squid of Madrid, this is bad code:&amp;#34; bad]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Sweet gorilla of Manila, this is good code:&amp;#34; good]])))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这看起来好一点了。你正在 Map 每个批评/代码对，并将 &amp;ldquo;批评-代码 &amp;ldquo;函数应用于该对。让我们试着运行这段代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(code-critic (1 + 1) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; NullPointerException
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哦，不！这根本就没有用! 发生了什么？问题是，&lt;code>map&lt;/code>返回一个列表，在这种情况下，它返回一个&lt;code>println&lt;/code>表达式的列表。我们只想得到每个&lt;code>println&lt;/code>调用的结果，但是相反，这段代码把两个结果都放在一个列表中，然后试图求值这个列表。&lt;/p>
&lt;p>换句话说，当它求值这段代码时，Clojure 会得到类似这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ((clojure.core/println &amp;#34; criticism&amp;#34; &amp;#39; (1 + 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.core/println &amp;#34;critism&amp;#34; &amp;#39;(+ 1 1)))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后求值第一个 &amp;ldquo;println &amp;ldquo;的调用，给我们提供这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.core/println &amp;#34;criticism&amp;#34; &amp;#39;(+ 1 1))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>并在求值了第二个`println&amp;rsquo;调用后，这样做。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (nil nil))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就是导致异常的原因。&lt;code>println&lt;/code>求值为&lt;code>nil&lt;/code>，所以我们最后得到的结果是&lt;code>(nil nil)&lt;/code>。&lt;code>nil&lt;/code>是不可调用的，我们得到一个&lt;code>NullPointerException&lt;/code>。&lt;/p>
&lt;p>多么不方便啊 但恰恰相反，无引号拼接正是为了处理这种情况而发明的。取消引号拼接是用&lt;code>~@&lt;/code>来完成的。如果你只是取消引用一个列表，你会得到这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(+ ~(list 1 2 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ (1 2 3))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，如果你使用 unquote 拼接，你会得到这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(+ ~@(list 1 2 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/+ 1 2 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Unquote 拼接将一个可排序的数据结构解开，将其内容直接放在包围的语法引号数据结构中。这就像&lt;code>~@&lt;/code>是一把大锤子，后面的东西是一个皮纳塔，其结果是你曾经参加过的最可怕和最棒的聚会。&lt;/p>
&lt;p>总之，如果你在你的代码批评中使用非引号拼接，那么一切都会很顺利。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro code-critic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:keys [good bad]}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(do ~@(map #(apply criticize-code %)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[&amp;#34;Sweet lion of Zion, this is bad code:&amp;#34; bad]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Great cow of Moscow, this is good code:&amp;#34; good]])))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(code-critic (1 + 1) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Sweet lion of Zion, this is bad code: (1 + 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Great cow of Moscow, this is good code: (+ 1 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>呜呼! 你已经成功地将重复的代码提取到一个函数中，并使你的宏代码更加简洁。温尼伯的可爱豚鼠，这是很好的代码!&lt;/p>
&lt;h2 id="需要注意的事项">需要注意的事项&lt;/h2>
&lt;p>宏有一些偷偷摸摸的问题，你应该注意到。在本节中，你将了解到一些宏的陷阱以及如何避免它们。我希望你还没有把自己从你的思想桅杆上解下来。&lt;/p>
&lt;h3 id="变量捕获">变量捕获&lt;/h3>
&lt;p>&lt;em>变量捕获&lt;/em>发生在一个宏引入了一个绑定，而这个绑定对宏的用户来说是未知的，它使一个现有的绑定黯然失色。例如，在下面的代码中，一个宏顽皮地引入了它自己的&lt;code>let&lt;/code>绑定，这就把代码搞乱了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def message &amp;#34;Good job!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmacro with-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;amp; stuff-to-do]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (concat (list &amp;#39;let [&amp;#39;message &amp;#34;Oh, big deal!&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stuff-to-do))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(with-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Here&amp;#39;s how I feel about that thing you did: &amp;#34; message))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Here&amp;#39;s how I feel about that thing you did: Oh, big deal!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>println&lt;/code>调用引用了符号&lt;code>message&lt;/code>，我们认为它与字符串&lt;code>&amp;quot;好样的！&amp;quot;&lt;/code>绑定。然而，&lt;code>with-mischief&lt;/code>宏为&lt;code>message&lt;/code>创建了一个新的绑定。&lt;/p>
&lt;p>注意，这个宏没有使用语法引号。这样做会导致一个异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def message &amp;#34;Good job!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defmacro with-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;amp; stuff-to-do]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(let [message &amp;#34;Oh, big deal!&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~@stuff-to-do))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(with-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Here&amp;#39;s how I feel about that thing you did: &amp;#34; message))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; Exception: Can&amp;#39;t let qualified name: user/message
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个异常是为了你自己好：语法引号的设计是为了防止你在宏中意外地捕捉到变量。如果你想在你的宏中引入&lt;code>let&lt;/code>绑定，你可以使用一个&lt;em>gensym&lt;/em>。&lt;code>gensym&lt;/code>函数在每次连续调用时产生唯一的符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(gensym)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; G__655
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gensym)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; G__658
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以传递一个符号前缀。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(gensym &amp;#39;message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; message4760
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(gensym &amp;#39;message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; message4763
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是你如何改写&lt;code>with-mischief&lt;/code>，使之不那么调皮。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro without-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;amp; stuff-to-do]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [macro-message (gensym &amp;#39;message)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(let [~macro-message &amp;#34;Oh, big deal!&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~@stuff-to-do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;I still need to say: &amp;#34; ~macro-message))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(without-mischief
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Here&amp;#39;s how I feel about that thing you did: &amp;#34; message))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Here&amp;#39;s how I feel about that thing you did: Good job!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; I still need to say: Oh, big deal!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子通过使用&lt;code>gensym&lt;/code>来创建一个新的、唯一的符号，然后与&lt;code>macro-message&lt;/code>绑定，避免了变量捕获。在语法引用的&lt;code>let&lt;/code>表达式中，&lt;code>macro-message&lt;/code>没有被引用，被解析为 gensym 的符号。这个源码符号与&lt;code>stuff-to-do&lt;/code>中的任何符号都不同，所以你可以避免变量捕获。因为这是一个常见的模式，你可以使用&lt;em>自动源码&lt;/em>。自动源码是使用源码的更简洁和方便的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">`(blarg# blarg#)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(blarg__2869__auto__ blarg__2869__auto__)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">`(let [name# &amp;#34;Larry Potter&amp;#34;] name#)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/let [name__2872__auto__ &amp;#34;Larry Potter&amp;#34;] name__2872__auto__)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，你通过在语法引号列表中的一个符号上附加一个哈希标记（或者&lt;em>哈希标记&lt;/em>，如果你一定要坚持的话）来创建一个自动源码。Clojure 会自动确保 x&lt;code>#&lt;/code>的每个实例在同一个语法引号列表中解析为相同的符号，y&lt;code>#&lt;/code>的每个实例也是如此，以此类推。&lt;/p>
&lt;p>&lt;code>gensym&lt;/code>和 auto-gensym 在编写宏时经常使用，它们允许你避免变量捕获。&lt;/p>
&lt;h3 id="双重求值">双重求值&lt;/h3>
&lt;p>编写宏时要注意的另一个问题是&lt;em>双重求值&lt;/em>，当一个作为参数传递给宏的表格被求值了不止一次时，就会出现这种情况。请看下面的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro report
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [to-try]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(if ~to-try
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (quote ~to-try) &amp;#34;was successful:&amp;#34; ~to-try)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (quote ~to-try) &amp;#34;was not successful:&amp;#34; ~to-try)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Thread/sleep takes a number of milliseconds to sleep for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(report (do (Thread/sleep 1000) (+ 1 1)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码是为了测试其参数的真实性。如果参数是真实的，它被认为是成功的；如果是虚假的，它是不成功的。该宏打印出其参数是否成功。在这种情况下，你实际上会睡两秒钟，因为&lt;code>(Thread/sleep 1000)&lt;/code>被求值了两次：一次在&lt;code>if&lt;/code>之后，另一次在&lt;code>println&lt;/code>被调用时。这是因为&lt;code>(do (Thread/sleep 1000) (+ 1 1))&lt;/code>的代码在整个宏扩展中被重复。这就像你写的一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if (do (Thread/sleep 1000) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#39;(do (Thread/sleep 1000) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;was successful:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (Thread/sleep 1000) (+ 1 1)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#39;(do (Thread/sleep 1000) (+ 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;was not successful:&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (Thread/sleep 1000) (+ 1 1))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;大问题！&amp;ldquo;你内心的例子评论家说。好吧，如果你的代码是在银行账户之间转账，这将是一个非常大的问题。以下是你如何避免这个问题的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro report
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [to-try]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(let [result# ~to-try]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if result#
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (quote ~to-try) &amp;#34;was successful:&amp;#34; result#)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (quote ~to-try) &amp;#34;was not successful:&amp;#34; result#))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 &amp;ldquo;to-try &amp;ldquo;放在一个 &amp;ldquo;let &amp;ldquo;表达式中，你只需求值一次该代码，并将结果绑定到一个自动标示的符号 &amp;ldquo;result#&amp;ldquo;上，现在你可以引用该符号而无需重新求值 &amp;ldquo;to-try &amp;ldquo;代码。&lt;/p>
&lt;h3 id="宏的所有方式">宏的所有方式&lt;/h3>
&lt;p>使用宏的一个微妙的缺陷是，你可能最终不得不写越来越多的宏来完成任何事情。这是由于宏的扩展发生在求值之前。&lt;/p>
&lt;p>例如，假设你想用&lt;code>report&lt;/code>宏来&lt;code>doseq&lt;/code>。而不是多次调用报告。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(report (= 1 1))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (= 1 1) was successful: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(report (= 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (= 1 2) was not successful: false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们进行迭代。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(doseq [code [&amp;#39;(= 1 1) &amp;#39;(= 1 2)]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (report code))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; code was successful: (= 1 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; code was successful: (= 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们单独传递函数时，报告宏工作正常，但当我们使用&lt;code>doseq&lt;/code>对多个函数进行&lt;code>report&lt;/code>迭代时，它是一个毫无价值的失败。下面是其中一个&lt;code>doseq&lt;/code>迭代的宏扩展的样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.core/println &amp;#39;code &amp;#34;was successful:&amp;#34; code)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.core/println &amp;#39;code &amp;#34;was not successful:&amp;#34; code))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，&lt;code>report&lt;/code>在每个迭代中接收未求值的符号&lt;code>code&lt;/code>；然而，我们希望它在求值时接收任何&lt;code>code&lt;/code>被绑定的内容。但是&lt;code>report&lt;/code>在宏扩展时操作，就是不能访问这些值。这就像它有 T.Rex 的手臂，运行时的值永远不在它的掌握之中。&lt;/p>
&lt;p>为了解决这种情况，我们可以再写一个宏，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro doseq-macro
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [macroname &amp;amp; args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(do
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~@(map (fn [arg] (list macroname arg)) args)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(doseq-macro report (= 1 1) (= 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (= 1 1) was successful: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (= 1 2) was not successful: false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你遇到这种情况，请花些时间重新思考你的方法。这很容易使你自己陷入困境，使你无法通过普通的函数调用来完成任何事情。你会被卡住，不得不写更多的宏。宏是非常强大和令人敬畏的，你不应该害怕使用它们。它们把 Clojure 处理数据的设施变成了创造新语言的设施，而这些新语言是根据你的编程问题来设计的。对于某些程序来说，你的代码 90%以上都是宏，这是合适的。尽管它们很棒，但它们也增加了新的组合挑战。它们只是真正的相互组合，所以通过使用它们，你可能会错过 Clojure 中其他类型的组合（函数式、面向对象）。&lt;/p>
&lt;p>我们现在已经涵盖了编写宏的所有机制。拍拍你的背吧! 这是一个相当大的交易!&lt;/p>
&lt;p>在本章的最后，终于到了戴上你的伪装帽，在本章最开始谈到的网上药水店工作的时候了。&lt;/p>
&lt;h2 id="为勇敢和真实的人而酿的酒">为勇敢和真实的人而酿的酒&lt;/h2>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/writing-macros/wizard.png"
loading="lazy"
>&lt;/p>
&lt;p>在这一章的开头，我透露了一个梦想：找到某种可饮用的东西，一旦摄入，就能暂时让我拥有 80 年代健身大师的力量和气质，把我从抑制和自我意识的牢笼中解放出来。我相信有一天某个地方会有人发明这样的灵丹妙药，所以我们不妨着手建立一个系统来销售这种神话般的药水。让我们把这种假想的混合物称为&lt;em>勇敢和真实的啤酒&lt;/em>。这个名字是我无缘无故想到的。&lt;/p>
&lt;p>在订单纷至沓来之前（双关语！击掌！），我们需要有一些验证的地方。本节向你展示了一种在功能上进行验证的方法，以及如何使用你将编写的名为 &amp;ldquo;if-valid &amp;ldquo;的宏更简洁地编写执行验证的代码。这将帮助你了解编写自己的宏的典型情况。如果你只想知道宏的定义，可以跳到&lt;a class="link" href="https://www.braveclojure.com/writing-macros/#Anchor" target="_blank" rel="noopener"
>&amp;quot;&lt;code>if-valid&lt;/code>&amp;rdquo; 第 182 页&lt;/a>。&lt;/p>
&lt;h3 id="验证函数">验证函数&lt;/h3>
&lt;p>为了简单起见，我们只担心验证每个订单的姓名和电子邮件。对于我们的商店，我想我们希望这些订单的细节能像这样表示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def order-details
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;Mitchard Blimmons&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :email &amp;#34;mitchard.blimmonsgmail.com&amp;#34;})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个特殊的 Map 有一个无效的电子邮件地址（缺少&lt;code>@&lt;/code>符号），所以这正是我们的验证代码应该捕捉的订单类型 理想情况下，我们希望编写的代码能产生这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(validate order-details order-details-validations)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:email [&amp;#34;Your email address doesn&amp;#39;t look like an email address.&amp;#34;]}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也就是说，我们希望能够调用一个函数，`validate&amp;rsquo;，其中包含需要验证的数据和如何验证的定义。结果应该是一个 Map，其中每个键对应一个无效的字段，每个值是该字段的一个或多个验证信息的 Vector。下面的两个函数完成了这项工作。&lt;/p>
&lt;p>让我们先看看&lt;code>order-details-validations&lt;/code>。以下是你如何表示验证信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def order-details-validations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Please enter a name&amp;#34; not-empty]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :email
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Please enter an email address&amp;#34; not-empty
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Your email address doesn&amp;#39;t look like an email address&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #(or (empty? %) (re-seq #&amp;#34;@&amp;#34; %))]})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是一个 Map，每个键都与错误信息和验证函数对的 Vector 相关。例如，&lt;code>:name&lt;/code>有一个验证函数，&lt;code>not-empty&lt;/code>；如果验证失败，你应该得到&lt;code>&amp;quot;请输入一个名字&amp;quot;&lt;/code>的错误信息。&lt;/p>
&lt;p>接下来，我们需要写出&lt;code>validate'函数。&lt;/code>validate&lt;code>函数可以分解成两个函数：一个是对单个字段进行验证，另一个是将这些错误信息累积成一个最终的错误信息Map，如&lt;/code>{:email [&amp;ldquo;你的邮箱地址看起来不像邮箱地址。&amp;rdquo;]}&lt;code>。这里有一个叫做&lt;/code>error-messages-for`的函数，对一个单一的值进行验证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn error-messages-for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Return a seq of error messages&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [to-validate message-validator-pairs]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map first (filter #(not ((second %) to-validate))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (partition 2 message-validator-pairs))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个参数，&lt;code>to-validate&lt;/code>，是你要验证的字段。第二个参数，&lt;code>message-validator-pairs&lt;/code>，应该是一个有偶数元素的序列。这个序列被分组为&lt;code>(partition 2 message-validator-pairs)'的对。对中的第一个元素应该是一个错误信息，对中的第二个元素应该是一个函数（就像在&lt;/code>order-details-validations&lt;code>中安排的对）。&lt;/code>error-messages-for&lt;code>函数的工作原理是过滤出所有错误信息和验证对，其中验证函数在应用于&lt;/code>to-validate&lt;code>时返回&lt;/code>true&lt;code>。然后，它使用&lt;/code>map first`来获取每对元素的第一个元素，即错误信息。下面是它的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(error-messages-for &amp;#34;&amp;#34; [&amp;#34;Please enter a name&amp;#34; not-empty])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Please enter a name&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在我们需要将这些错误信息积累到一个 Map 中。&lt;/p>
&lt;p>下面是完整的&lt;code>validate&lt;/code>函数，以及我们将其应用于&lt;code>order-details&lt;/code>和&lt;code>order-details-validations&lt;/code>时的输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn validate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Returns a map with a vector of errors for each key&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [to-validate validations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (reduce (fn [errors validation]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [[fieldname validation-check-groups] validation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> value (get to-validate fieldname)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error-messages (error-messages-for value validation-check-groups)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (empty? error-messages)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> errors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (assoc errors fieldname error-messages))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> validations))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(validate order-details order-details-validations)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:email (&amp;#34;Your email address doesn&amp;#39;t look like an email address&amp;#34;)}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功了! 这个函数是通过减少&lt;code>order-details-validations'并将&lt;/code>order-details&amp;rsquo;的每个键的错误信息（如果有的话）关联到一个最终的错误信息 Map。&lt;/p>
&lt;h3 id="if-valid">if-valid&lt;/h3>
&lt;p>有了我们的验证代码，我们现在可以随心所欲地验证记录了。大多数情况下，验证会像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [errors (validate order-details order-details-validations)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (empty? errors)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :success)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :failure errors)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该模式是做以下工作。&lt;/p>
&lt;ol>
&lt;li>验证一条记录并将结果绑定到&lt;code>errors&lt;/code>。&lt;/li>
&lt;li>检查是否有任何错误&lt;/li>
&lt;li>3.如果有，做成功的事情，这里&lt;code>(println :success)&lt;/code>。&lt;/li>
&lt;li>否则，做失败的事情，这里&lt;code>(println :failure errors)&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>我已经在实际生产的网站中使用了这个验证代码。起初，我发现自己不断重复代码的微小变化，这无疑表明我需要引入一个抽象，以隐藏重复的部分：应用&lt;code>validate&lt;/code>函数，将结果绑定到一些符号，并检查结果是否为空。为了创建这种抽象，你可能会想写一个这样的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn if-valid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [record validations success-code failure-code]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [errors (validate record validations)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (empty? errors)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> success-code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> failure-code)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，这不会起作用，因为&lt;code>success-code&lt;/code>和&lt;code>failure-code&lt;/code>每次都会被求值。宏会起作用，因为宏允许你控制求值。下面是你如何使用宏的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if-valid order-details order-details-validations errors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (render :success)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (render :failure errors))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个宏隐藏了重复的细节，帮助你更简洁地表达你的意图。这就像要求别人给你开瓶器，而不是说：&amp;ldquo;请给我手动装置，用于去除玻璃容器中液体的临时密封剂。&amp;rdquo; 下面是实施方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro if-valid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Handle validation more concisely&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [to-validate validations errors-name &amp;amp; then-else]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> `(let [~errors-name (validate ~to-validate ~validations)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (empty? ~errors-name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ~@then-else)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个宏需要四个参数。 &lt;code>to-validate&lt;/code>, &lt;code>validations&lt;/code>, &lt;code>errors-name&lt;/code>, 和其余参数&lt;code>then-else&lt;/code>. 像这样使用&lt;code>errors-name&lt;/code>是一个新的策略。我们想在&lt;code>then-else&lt;/code>语句中访问&lt;code>validate&lt;/code>函数返回的错误。要做到这一点，我们要告诉宏它应该把结果绑定到什么符号上。下面的宏扩展显示了它是如何工作的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> (macroexpand
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;(if-valid order-details order-details-validations my-error-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :success)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :failure my-error-name)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [my-error-name (user/validate order-details order-details-validations)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (clojure.core/empty? my-error-name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :success)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println :failure my-error-name)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>语法引号抽象了你之前看到的&lt;code>let/validate/if&lt;/code>模式的一般形式。然后我们使用 unquote 拼接来解压&lt;code>if&lt;/code>分支，这些分支被打包到&lt;code>then-else&lt;/code>其余参数中。&lt;/p>
&lt;p>这真是太简单了! 说了这么多关于宏的内容，并详细介绍了它们的机制，我打赌你一定以为会有更复杂的东西。对不起，朋友。如果你对你的失望感到难以接受，我知道有一种饮料可以帮助你。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中，你学会了如何编写自己的宏。宏的定义与函数非常相似：它们有参数、文件串和主体。它们可以使用参数重构和休息参数，而且可以是递归的。你的宏几乎都会返回列表。你有时会使用&lt;code>list&lt;/code>和&lt;code>seq&lt;/code>函数来编写简单的宏，但大多数时候你会使用语法引号，，它让你使用安全模板来编写宏。&lt;/p>
&lt;p>当你编写宏时，重要的是要记住符号和值之间的区别：宏在代码被求值之前被展开，因此不能访问求值的结果。双重求值和变量捕获是另外两个微妙的陷阱，但你可以通过明智地使用 &amp;ldquo;let &amp;ldquo;表达式和代词来避免它们。&lt;/p>
&lt;p>宏是一种有趣的工具，可以让你在编码时少一些拘束。通过让你控制求值，宏给你一定程度的自由和表达，这是其他语言所不允许的。在你的 Clojure 旅程中，你可能会听到有人告诫你不要使用宏，说什么 &amp;ldquo;宏是邪恶的 &amp;ldquo;和 &amp;ldquo;你不应该使用宏&amp;rdquo;。不要听这些假正经的人的话&amp;ndash;至少在开始的时候不要听他们的。走出去，享受美好的时光。这是你学习在哪些情况下适合使用宏的唯一途径。你会从另一个角度知道如何有技巧地、潇洒地使用宏。&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>编写宏&lt;code>when-valid&lt;/code>，使它的行为与&lt;code>when&lt;/code>相似。下面是一个调用它的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(when-valid order-details order-details-validations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(println &amp;#34;It&amp;#39;s a success!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(render :success))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当数据有效时，应该求值&lt;code>println&lt;/code>和&lt;code>render&lt;/code>形式，如果数据无效，&lt;code>when-valid&lt;/code>应该返回&lt;code>nil&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你看到&lt;code>and&lt;/code>是作为一个宏实现的。把`or&amp;rsquo;作为一个宏来实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在第 5 章中，你创建了一系列函数（&lt;code>c-int&lt;/code>, &lt;code>c-str&lt;/code>, &lt;code>c-dex&lt;/code>）来读取一个 RPG 字符的属性。写一个宏，用一个宏调用来定义任意数量的属性检索函数。以下是你如何调用它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>(defattrs c-int :intelligence
c-str :strength
c-dex :dexterity)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Chapter7 炼金术</title><link>https://example.com/p/chapter7-%E7%82%BC%E9%87%91%E6%9C%AF/</link><pubDate>Sat, 15 Jan 2022 12:14:36 +0800</pubDate><guid>https://example.com/p/chapter7-%E7%82%BC%E9%87%91%E6%9C%AF/</guid><description>&lt;h1 id="clojure-炼金术读取器求值器和宏">Clojure 炼金术：读取器、求值器和宏&lt;/h1>
&lt;p>哲学家之石，与生命之药和伟哥一样，是炼金术传说中最著名的标本之一，因其能将铅转化为金而受到追捧。然而，Clojure 提供了一种工具，使哲学家的石头看起来只是一个小饰品：*宏。&lt;/p>
&lt;p>宏允许你将任意的表达式转化为有效的 Clojure，因此你可以扩展语言本身以满足你的需求。而且，你甚至不需要是一个穿长袍的老家伙或老太太来使用它们&lt;/p>
&lt;p>为了获得这种能力，请考虑这个微不足道的宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro backwards
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [form]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (reverse form))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(backwards (&amp;#34; backwards&amp;#34; &amp;#34; am&amp;#34; &amp;#34;I&amp;#34; str))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;I am backwards&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>backwards&lt;/code>宏允许 Clojure 成功地 Eval 表达式&lt;code>(&amp;quot; backwards&amp;quot; &amp;quot; am&amp;quot; &amp;quot;I&amp;quot; str)&lt;/code>，尽管它没有遵循 Clojure 的内置语法规则，这些规则要求表达式的操作数首先出现（更不用说表达式不能按相反顺序书写的规则）。如果没有 &amp;ldquo;向后&amp;rdquo;，这个表达式会比几千年来的炼金术士用他们的一生来追求不可能实现的长生不老的方法更难失败。有了`向后&amp;rsquo;，*你就创造了你自己的语法！*你扩展了 Clojure，这样你就可以随心所欲地写代码了 我告诉你，这比把铅变成金子要好得多!&lt;/p>
&lt;p>本章为你提供了编写自己的宏所需的概念基础，使你能够疯狂地编写自己的宏。它解释了 Clojure 求值模型的元素：&lt;em>读取器&lt;/em>，&lt;em>求值器&lt;/em>，和&lt;em>宏扩展器&lt;/em>。这就像 Clojure 元素的周期表。想想周期表是如何揭示原子的特性的：同一列的元素行为相似，因为它们有相同的核电荷。如果没有元素周期表及其基础理论，我们就会像过去的炼金术士一样，随意地把东西混在一起，看看什么东西会爆炸。但是，随着对元素的深入了解，你可以看到为什么东西会爆炸，并学会如何有目的地炸毁东西。&lt;/p>
&lt;h2 id="a-overview-of-clojures-evaluation-model">A Overview of Clojure&amp;rsquo;s Evaluation Model&lt;/h2>
&lt;p>Clojure（像所有的 Lisps）有一个不同于大多数其他语言的求值模型：它有一个两阶段的系统，它&lt;em>读&lt;/em>文本源代码，产生 Clojure 数据结构。然后对这些数据结构进行*求值。Clojure 遍历数据结构，并根据数据结构的类型执行函数应用或 var 查找等操作。例如，当 Clojure 读取文本&lt;code>(+ 1 2)&lt;/code>时，结果是一个列表数据结构，其第一个元素是一个&lt;code>+&lt;/code>符号，后面是数字 1 和 2。这个数据结构被传递给 Clojure 的求值器，求值器查找&lt;code>+&lt;/code>对应的函数，并将该函数应用于 1 和 2。&lt;/p>
&lt;p>在源代码、数据和求值之间有这种关系的语言被称为&lt;em>homoiconic&lt;/em>（顺便说一句，如果你在浴室的镜子前熄灯说三次&lt;em>homoiconic&lt;/em>，约翰-麦卡锡的幽灵就会出现并给你一个小括号）。同源语言使你能够将你的代码作为一组数据结构进行推理，你可以通过程序进行操作。为了说明这一点，让我们在编译的土地上走一圈。&lt;/p>
&lt;p>编程语言需要一个编译器或解释器来将你写的代码（由 Unicode 字符组成）翻译成其他东西：机器指令、其他编程语言的代码，等等。在这个过程中，编译器会构建一个&lt;em>抽象语法树（AST）&lt;/em>，这是一个代表你的程序的数据结构。你可以把 AST 看作是&lt;em>求值器&lt;/em>的输入，你可以把它看作是一个遍历该树的函数，以产生机器代码或其他什么作为其输出。&lt;/p>
&lt;p>到目前为止，这听起来很像我为 Clojure 描述的那样。然而，在大多数语言中，AST 的数据结构在编程语言中是无法访问的；编程语言空间和编译器空间是永远分离的，两者永远不会相遇。图 7-1 显示了在非 Lisp 编程语言中表达式的编译过程的可视化情况。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/non-lisp-eval.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-1：非 Lisp 编程语言的求值&lt;/p>
&lt;p>但 Clojure 是不同的，因为 Clojure 是 Lisp，而 Lisps 比偷来的 tamale 更热。Lisps 求值的是本地数据结构，而不是求值表示为某种无法访问的内部数据结构的 AST。Clojure 仍然求值树形结构，但树是用 Clojure 列表结构的，节点是 Clojure 值。&lt;/p>
&lt;p>列表是构建树形结构的理想选择。列表的第一个元素被视为根，每个后续元素被视为一个分支。要创建一个嵌套树，你可以直接使用嵌套列表，如图 7-2 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/trees.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-2：列表可以很容易地被当作树来处理。&lt;/p>
&lt;p>首先，Clojure 的&lt;em>读取器&lt;/em>将文本&lt;code>(+ 1 (* 6 7))&lt;/code>转换为一个嵌套列表。(你将在下一节了解更多关于读取器的信息。)然后，Clojure 的求值器将该数据作为输入并产生一个结果。(它还可以编译 Java 虚拟机（JVM）字节码，你会在第 12 章中了解到。现在，我们只关注概念层面上的求值模型）。&lt;/p>
&lt;p>考虑到这一点，图 7-3 显示了 Clojure 的求值过程是什么样的。&lt;/p>
&lt;p>S-表达式&lt;/p>
&lt;p>在你的 Lisp 冒险中，你会遇到一些资源，它们解释说 Lisp 求值 S-表达式。我在这里避免使用这个术语，因为它有歧义：你会看到它既指被求值的实际数据对象，也指表示该数据的源代码。对 Lisp 求值的两个不同组成部分（代码和数据）使用同一个术语，会掩盖重要的东西：你的文本代表了本地数据结构，而 Lisp 求值本地数据结构，这是独一无二的，令人敬畏的。关于 s-表达式的精彩处理，请查看&lt;a class="link" href="http://www.gigamonkeys.com/book/syntax-and-semantics.html" target="_blank" rel="noopener"
>http://www.gigamonkeys.com/book/syntax-and-semantics.html&lt;/a>。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/lisp-eval.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-3：Clojure 中的求值&lt;/p>
&lt;p>然而，求值器实际上并不关心它的输入来自哪里；它不一定要来自读者。因此，你可以用&lt;code>eval&lt;/code>将你的程序的数据结构直接发送给 Clojure 求值器。看哪!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def addition-list (list + 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(eval addition-list)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就对了，宝贝! 你的程序刚刚求值了一个 Clojure 列表。你很快就会读到关于 Clojure 求值规则的所有内容，但简单地说，这是发生了什么：当 Clojure 求值列表时，它查找了&lt;code>addition-list&lt;/code>所指的列表；然后它查找了与&lt;code>+&lt;/code>符号对应的函数；然后它用&lt;code>1&lt;/code>和&lt;code>2&lt;/code>作为参数调用了该函数，返回&lt;code>3&lt;/code>。你的运行程序的数据结构和求值器的数据结构生活在同一个空间，结果是你可以使用 Clojure 的全部力量和你写的所有代码来构建数据结构进行求值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval (concat addition-list [10]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(eval (list &amp;#39;def &amp;#39;lucky-number (concat addition-list [10])))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;user/lucky-number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lucky-number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 13
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>图 7-4 显示了你在这两个例子中发送给求值器的列表。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/data-to-eval.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-4：你求值的列表&lt;/p>
&lt;p>你的程序可以直接与自己的求值器对话，使用自己的函数和数据在运行中修改自己 你是不是已经被权力冲昏了头脑？我希望是这样！我希望你能坚持你的理智。不过，请保持你的理智，因为还有更多的东西要学。&lt;/p>
&lt;p>所以，Clojure 是同源的：它用列表表示抽象的语法树，当你写 Clojure 代码时，你写的是列表的文本表示。因为你写的代码代表了你习惯于操作的数据结构，而求值器则消耗这些数据结构，所以很容易推理出如何以编程方式修改你的程序。&lt;/p>
&lt;p>宏就是让你轻松进行这些操作的东西。本章的其余部分详细介绍了 Clojure 的读取器和求值规则，让你对宏的工作原理有一个准确的理解。&lt;/p>
&lt;h2 id="读取器">读取器&lt;/h2>
&lt;p>读取器将你保存在文件中或在 REPL 中输入的文本源代码转换为 Clojure 数据结构。它就像人类的 Unicode 字符世界和 Clojure 的列表、Vector、Map、符号和其他数据结构世界之间的翻译。在本节中，你将直接与读取器器互动，并学习一个方便的功能，即&lt;em>读取器宏&lt;/em>，如何让你更简洁地编写代码。&lt;/p>
&lt;h3 id="读取器-1">读取器&lt;/h3>
&lt;p>为了理解读取器，让我们首先仔细看看 Clojure 是如何处理你在 REPL 中输入的文本的。首先，REPL 会提示你输入文本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后你输入一点文本。也许像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt; (str &amp;#34;To understand what recursion is,&amp;#34; &amp;#34; you must first understand recursion.&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段文字实际上只是一串 Unicode 字符，但它是为了表示 Clojure 数据结构的组合。这种数据结构的文本表示法被称为&lt;em>读取器的形式&lt;/em>。在这个例子中，该表格代表了一个列表数据结构，其中又包含了三个表格：&lt;code>str&lt;/code>符号和两个字符串。&lt;/p>
&lt;p>一旦你在提示符中输入这些字符并按下回车键，这些文本就会进入读取器（记得 REPL 是 read-eval-print-loop 的缩写）。Clojure 读取字符流并在内部产生相应的数据结构。然后它对数据结构进行求值，并打印出结果的文本表示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;To understand what recursion is, you must first understand recursion.&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>读取和求值是不连续的过程，你可以独立执行。一种直接与读者互动的方法是使用&lt;code>read-string&lt;/code>函数。 &lt;code>read-string&lt;/code>接收一个字符串作为参数，并使用 Clojure 的读取器进行处理，返回一个数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;(+ 1 2)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(list? (read-string &amp;#34;(+ 1 2)&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(conj (read-string &amp;#34;(+ 1 2)&amp;#34;) :zagglewag)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (:zagglewag + 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，&lt;code>read-string&lt;/code>读取了一个包含加号和数字 1 和 2 的列表的字符串表示。返回值是一个实际的列表，正如第二个例子所证明的。最后一个例子使用&lt;code>conj&lt;/code>在列表中预置一个关键字。启示是，读取器和求值是相互独立的。你可以读取文本而不对其进行求值，你可以将结果传递给其他函数。如果你愿意，你也可以对结果进行求值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval (read-string &amp;#34;(+ 1 2)&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在到目前为止的所有例子中，读者形式和相应的数据结构之间一直是一对一的关系。下面是更多简单的读取器形式的例子，它们直接 Map 到它们所代表的数据结构。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>()&lt;/strong> 一个列表的读取形式&lt;/li>
&lt;li>*&lt;em>str&lt;/em> 一个符号读取器形式&lt;/li>
&lt;li>&lt;strong>[1 2]&lt;/strong> 一个 Vector 读取器形式，包含两个数字读取器形式&lt;/li>
&lt;li>&lt;strong>{:sound &amp;ldquo;hoot&amp;rdquo;}&lt;/strong> 一个包含关键字读取器形式和字符串读取器形式的 Map 读取器形式&lt;/li>
&lt;/ul>
&lt;p>然而，在将文本转换为数据结构时，读取器可以采用更复杂的行为。例如，还记得匿名函数吗？&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(#(+ 1 %) 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好吧，试试这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;#(+ 1 %)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (fn* [p1__423#] (+ 1 p1__423#))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哇! 这不是我们所习惯的一对一的 Map。读取&lt;code>#(+ 1 %)&lt;/code>的结果是一个由&lt;code>fn*&lt;/code>符号组成的列表，一个包含一个符号的 Vector，和一个包含三个元素的列表。刚刚发生了什么？&lt;/p>
&lt;h3 id="读者宏">读者宏&lt;/h3>
&lt;p>我来回答我自己的问题：读者使用了一个&lt;em>读者宏&lt;/em>来转换&lt;code>#(+ 1 %)&lt;/code>。读者宏是一组将文本转换为数据结构的规则。它们通常允许你以更紧凑的方式表示数据结构，因为它们采用了一个简略的读者形式，并将其扩展为完整的形式。它们由&lt;em>宏字符&lt;/em>指定，如&lt;code>'&lt;/code>（单引号）、&lt;code>#&lt;/code>和&lt;code>@&lt;/code>。它们也完全不同于我们后面要讲的宏。为了不把两者混淆，我总是用&lt;em>读者宏&lt;/em>这个全称来指代读者宏。&lt;/p>
&lt;p>例如，你可以在这里看到引用读者宏是如何扩展单引号字符的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;&amp;#39;(a b c)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (quote (a b c))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当读取器遇到单引号时，它将其扩展为一个列表，其第一个成员是符号&lt;code>quote&lt;/code>，第二个成员是单引号后面的数据结构。读取器的&lt;code>deref&lt;/code>宏对&lt;code>@&lt;/code>字符的作用与此类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;@var&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (clojure.core/deref var)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>读取器宏也可以做一些疯狂的事情，比如导致文本被忽略。分号指定了单行注释的读取器宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;; ignore!\n(+ 1 2)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就是读取器! 你卑微的伙伴，正在辛苦地将文本转化为数据结构。现在我们来看看 Clojure 是如何求值这些数据结构的。&lt;/p>
&lt;h2 id="求值器">求值器&lt;/h2>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/simple-eval.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-5：（+ 1 2）的数据结构&lt;/p>
&lt;p>你可以把 Clojure 的求值器看作是一个函数，它接收一个数据结构作为参数，使用与数据结构类型相对应的规则处理该数据结构，并返回一个结果。要求值一个符号，Clojure 会查找该符号所指的内容。要求值一个列表，Clojure 会查看该列表的第一个元素，并调用一个函数、宏或特殊形式。任何其他的值（包括字符串、数字和关键字）只是简单地对其进行求值。&lt;/p>
&lt;p>例如，假设你在 REPL 中输入了&lt;code>(+ 1 2)&lt;/code>。图 7-5 显示了一个被发送到求值器的数据结构图。&lt;/p>
&lt;p>因为它是一个列表，求值器从求值列表中的第一个元素开始。第一个元素是加号，求值器通过返回相应的函数来解决这个问题。因为列表中的第一个元素是一个函数，所以求值器对每个操作数进行求值。操作数 1 和 2 求值为自己，因为它们不是列表或符号。然后求值器以 1 和 2 为操作数调用加法函数，并返回结果。&lt;/p>
&lt;p>本节的其余部分将更全面地解释求值器对每种数据结构的规则。为了显示求值器是如何工作的，我们将在 REPL 中运行每个例子。请记住，REPL 首先读取你的文本以获得一个数据结构，然后将该数据结构发送到求值器，然后将结果打印为文本。&lt;/p>
&lt;p>数据&lt;/p>
&lt;p>我在本章中写到 Clojure 如何求值数据结构，但这是不精确的。从技术上讲，数据结构指的是某种集合，如链接列表或 B-树，或其他什么，但我也用这个术语来指标量（单数，非集合）值，如符号和数字。我考虑过使用数据对象这个术语，但不想暗示面向对象的编程，或者只使用数据，但不想将其与数据这个概念混淆。所以，数据结构就是这样，如果你觉得这很冒犯，我会给你一千次的道歉，深思熟虑地组织成一棵 Van Emde Boas 树。&lt;/p>
&lt;h3 id="这些东西都是自己求值的">这些东西都是自己求值的&lt;/h3>
&lt;p>每当 Clojure 对不是列表或符号的数据结构进行求值时，其结果就是数据结构本身。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:huzzah
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :huzzah
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>空的列表也会对自己进行求值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="符号">符号&lt;/h3>
&lt;p>作为一个程序员，你的基本任务之一是通过将名字和值联系起来来创建抽象。你在第 3 章中通过使用&lt;code>def&lt;/code>、&lt;code>let&lt;/code>和函数定义学会了如何做到这一点。Clojure 使用&lt;em>符号&lt;/em>来命名函数、宏、数据和其他任何你可以使用的东西，并通过&lt;em>解析&lt;/em>来求值它们。为了解析一个符号，Clojure 会遍历你所创建的任何绑定，然后在命名空间 Map 中查找该符号的条目，这一点你在第 6 章中了解过。最终，一个符号被解析为一个&lt;em>值&lt;/em>或一个&lt;em>特殊形式&lt;/em>&amp;ndash;一个内置的 Clojure 操作符，提供基本的行为。&lt;/p>
&lt;p>一般来说，Clojure 通过以下方式解析一个符号。&lt;/p>
&lt;ol>
&lt;li>查询该符号是否命名了一个特殊形式。如果它没有……。&lt;/li>
&lt;li>查询该符号是否对应于一个本地绑定。如果不是的话 .&lt;/li>
&lt;li>试图找到由&lt;code>def&lt;/code>引入的命名空间 Map。如果没有的话 . .&lt;/li>
&lt;li>抛出一个异常&lt;/li>
&lt;/ol>
&lt;p>让我们先看看一个符号解析到一个特殊形式。特殊形式，如&lt;code>if&lt;/code>，总是在一个操作的上下文中使用；它们总是一个列表中的第一个元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if true :a :b)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，&lt;code>if&lt;/code>是一个特殊的形式，它被作为一个操作符使用。如果你试图引用这个上下文之外的特殊形式，你会得到一个异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; CompilerException java.lang.RuntimeException: Unable to resolve symbol: if in this context, compiling:(NO_SOURCE_PATH:0:0)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，让我们求值一些本地绑定。本地绑定&lt;em>是指一个符号和一个不是由&lt;code>def&lt;/code>创建的值之间的任何关联。在下一个例子中，符号&lt;code>x&lt;/code>用&lt;code>let&lt;/code>与 5 绑定。当求值器解析&lt;code>x&lt;/code>时，它将&lt;/em>符号*&lt;code>x&lt;/code>解析为&lt;em>值&lt;/em> 5。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [x 5]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ x 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，如果我们创建一个&lt;code>x&lt;/code>到 15 的命名空间 Map，Clojure 会相应地解决它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def x 15)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(+ x 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 18
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在下一个例子中，&lt;code>x&lt;/code>被 Map 到 15，但是我们用&lt;code>let&lt;/code>引入了&lt;code>x&lt;/code>与 5 的局部绑定。所以&lt;code>x&lt;/code>被解析为 5。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def x 15)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(让 [x 5]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ x 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以对绑定进行嵌套，在这种情况下，最近定义的绑定具有优先权。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(让 [x 5]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (让 [x 6]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ x 3)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数还创建了局部绑定，将参数与函数体中的参数绑定。在下一个例子中，&lt;code>exclaim&lt;/code>被 Map 到一个函数。在函数主体中，参数名&lt;code>exclamation&lt;/code>被绑定到传递给函数的参数上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn exclaim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [exclamation]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str exclamation &amp;#34;!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(exclaim &amp;#34;Hadoken&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Hadoken!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，在这最后一个例子中，&lt;code>map&lt;/code>和&lt;code>inc&lt;/code>都指的是函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map inc [1 2 3])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (2 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当 Clojure 求值这段代码时，它首先求值&lt;code>map&lt;/code>符号，查找相应的函数并将其应用于参数。符号&lt;code>map&lt;/code>指的是 map 函数，但它不应该与函数本身相混淆。&lt;code>map&lt;/code>符号仍然是一个数据结构，就像字符串&lt;code>&amp;quot;fried salad&amp;quot;&lt;/code>是一个数据结构一样，但它与函数本身不同。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string (&amp;#34;+&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; +
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(type (read-string &amp;#34;+&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; clojure.lang.Symbol
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(list (read-string &amp;#34;+&amp;#34;) 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这些例子中，你正在与加号，&lt;code>+&lt;/code>，作为一个数据结构进行交互。你并没有与它所指的加法函数进行交互。如果你求值它，Clojure 会查找该函数并应用它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval (list (read-string &amp;#34;+&amp;#34;) 1 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就其本身而言，符号和它们的参照物实际上不做任何事情；Clojure 通过求值列表执行工作。&lt;/p>
&lt;h3 id="列表">列表&lt;/h3>
&lt;p>如果数据结构是一个空列表，它就会被求值为一个空列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval (read-string &amp;#34;()&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>否则，它被求值为对列表中第一个元素的*调用。执行调用的方式取决于第一个元素的性质。&lt;/p>
&lt;h4 id="函数调用">函数调用&lt;/h4>
&lt;p>当执行一个函数调用时，每个操作数都被完全求值，然后作为参数传递给函数。在这个例子中，&lt;code>+&lt;/code>符号解析为一个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clojure 看到列表的头部是一个函数，所以它继续求值列表中的其他元素。操作数 1 和 2 都对自己进行求值，在求值之后，Clojure 对它们应用加法函数。&lt;/p>
&lt;p>你也可以嵌套函数调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ 1 (+ 2 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即使第二个参数是一个列表，Clojure 在这里也遵循同样的过程：查找&lt;code>+&lt;/code>符号并求值每个参数。为了求值列表&lt;code>(+ 2 3)&lt;/code>，Clojure 将第一个成员解析为加法函数并继续求值每个参数。通过这种方式，求值是递归的。&lt;/p>
&lt;h4 id="特殊形式">特殊形式&lt;/h4>
&lt;p>你也可以调用*特殊形式。*一般来说，特殊形式是特殊的，因为它们实现了不能用函数实现的核心行为。比如说&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if true 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，我们要求 Clojure 求值一个以符号&lt;code>if&lt;/code>开始的列表。这个&lt;code>if&lt;/code>符号被解析为&lt;code>if&lt;/code>特殊形式，Clojure 用操作数&lt;code>true&lt;/code>、&lt;code>1&lt;/code>和&lt;code>2&lt;/code>调用这个特殊形式。&lt;/p>
&lt;p>特殊形式不遵循与普通函数相同的求值规则。例如，当你调用一个函数时，每个操作数都被求值。然而，对于&lt;code>if&lt;/code>，你不希望每个操作数都被求值。你只希望某些操作数被求值，这取决于条件是真还是假。&lt;/p>
&lt;p>另一个重要的特殊形式是&lt;code>quote&lt;/code>。你已经见过这样的列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;(a b c)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你在&lt;a class="link" href="https://www.braveclojure.com/read-and-eval/#Anchor" target="_blank" rel="noopener"
>&amp;ldquo;读取器 &amp;ldquo;第 153 页&lt;/a>中所看到的，这将调用一个读取器宏，所以我们最终得到这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(quote (a b c))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常，Clojure 会尝试解析&lt;code>a&lt;/code>符号，然后调用它，因为它是一个列表中的第一个元素。&lt;code>quote&lt;/code>的特殊形式告诉求值器，&amp;ldquo;与其像正常一样求值我的下一个数据结构，不如直接返回数据结构本身。&amp;rdquo; 在这种情况下，你最终得到一个由符号&lt;code>a&lt;/code>, &lt;code>b&lt;/code>, 和&lt;code>c&lt;/code>组成的列表。&lt;/p>
&lt;p>&lt;code>def&lt;/code>、&lt;code>let&lt;/code>、&lt;code>loop&lt;/code>、&lt;code>fn&lt;/code>、&lt;code>do&lt;/code>和&lt;code>recur&lt;/code>也都是特殊形式。你可以看到为什么：它们的求值方式与函数不一样。例如，通常当求值器求值一个符号时，它会解析该符号，但是&lt;code>def&lt;/code>和&lt;code>let&lt;/code>显然不是这样的行为。它们不是解析符号，而是在符号和值之间建立关联。因此，求值器从读者那里接收到一个数据结构的组合，然后它去解析符号并调用每个列表开头的函数或特殊形式。但还有更多的东西! 你也可以在列表的开头放置一个&lt;em>宏&lt;/em>，而不是一个函数或特殊形式，这可以为你提供巨大的权力，让你知道其余的数据结构如何被求值。&lt;/p>
&lt;h3 id="巨集">巨集&lt;/h3>
&lt;p>嗯 . . Clojure 求值数据结构&amp;ndash;与我们在 Clojure 程序中编写和操作的数据结构相同。如果我们能用 Clojure 来操作 Clojure 求值的数据结构，那不是很好吗？是的，是的，会的。你猜怎么着？你可以用宏来做这件事。你的脑袋是不是爆炸了？我的就是这样。&lt;/p>
&lt;p>为了了解宏的作用，让我们看看一些代码。假设我们想写一个函数，让 Clojure 读出 infix 符号（如&lt;code>1 + 1&lt;/code>），而不是其正常符号中的运算符优先（&lt;code>+ 1 1&lt;/code>）。这个例子不是**一个宏。相反，它只是表明你可以用 infix 符号写代码，然后用 Clojure 来转换它，使其实际执行。首先，创建一个代表 infix 加法的列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(read-string &amp;#34;(1 + 1)&amp;#34; )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 + 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你试图让它求值这个列表，Clojure 将抛出一个异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval (read-string &amp;#34;(1 + 1)&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ClassCastException java.lang.Long cannot be cast to clojure.lang.IFn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，&lt;code>read-string&lt;/code>返回一个列表，你可以用 Clojure 把这个列表重新组织成它&lt;em>可以&lt;/em>成功求值的东西。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [infix (read-string &amp;#34;(1 + 1)&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list (second infix) (first infix) (last infix)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你&lt;code>求值&lt;/code>这个，它返回&lt;code>2&lt;/code>，就像你所期望的那样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(eval
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [infix (read-string &amp;#34;(1 + 1)&amp;#34;)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list (second infix) (first infix) (last infix))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这很酷，但它也很笨重。这就是宏的作用。宏给了你一个方便的方法，在 Clojure 求值列表之前对其进行操作。宏很像函数：它们接受参数并返回一个值，就像一个函数那样。它们在 Clojure 数据结构上工作，就像函数那样。它们的独特和强大之处在于它们与求值过程的配合。它们在读取器和求值器之间执行&amp;ndash;所以它们可以操作读取器吐出的数据结构，并在将其传递给求值器之前与这些数据结构进行转换。&lt;/p>
&lt;p>让我们看一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro ignore-last-operand
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [function-call]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (butlast function-call))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ (ignore-last-operand (+ 1 2 10))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; This will not print anything
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(ignore-last-operand (+ 1 2 (println &amp;#34;look at me!!!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊，宏 &amp;ldquo;ignore-last-operand &amp;ldquo;接收列表&amp;rdquo;(+ 1 2 10) &amp;ldquo;作为其参数，&lt;em>不是&lt;/em>值 &amp;ldquo;13&amp;rdquo;。这与函数调用有很大的不同，因为函数调用总是求值所有传入的参数，所以函数不可能接触到它的一个操作数并改变或忽略它。相比之下，当你调用一个宏时，操作数是&lt;em>不&lt;/em>被求值的。特别是，符号不被解析；它们被当作符号传递。列表也不被求值；也就是说，列表中的第一个元素不作为一个函数、特殊形式或宏被调用。相反，未求值的列表数据结构被传入。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/read-and-eval/whole-shebang.png"
loading="lazy"
>&lt;/p>
&lt;p>图 7-6: (infix (1 + 2)) 的完整求值过程&lt;/p>
&lt;p>另一个区别是，函数返回的数据结构是&lt;em>不&lt;/em>求值的，但是宏返回的数据结构是&lt;em>求值的。确定宏的返回值的过程被称为&lt;/em>宏扩展*，你可以使用函数&lt;code>macroexpand&lt;/code>来查看宏在求值数据结构之前返回什么数据结构。注意，你必须引用你传递给&lt;code>macroexpand&lt;/code>的形式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(ignore-last-operand (+ 1 2 10)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(macroexpand &amp;#39;(ignore-last-operand (+ 1 2 (println &amp;#34;look at me!!!&amp;#34;))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (+ 1 2)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，这两种扩展的结果都是列表&lt;code>(+ 1 2)&lt;/code>。当这个列表被求值时，就像前面的例子一样，结果是&lt;code>3&lt;/code>。&lt;/p>
&lt;p>为了好玩，这里有一个做简单 infix 符号的宏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defmacro infix
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [infixed]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (list (second infixed)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (first infixed)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (last infixed)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(infix (1 + 2))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>思考这整个过程的最好方法是想象在读取和求值之间的一个阶段：&lt;em>宏扩展&lt;/em>阶段。图 7-6 显示了如何将&lt;code>(infix (1 + 2))&lt;/code>的整个求值过程可视化。&lt;/p>
&lt;p>而这就是宏是如何融入求值过程的。但你为什么要这样做呢？原因是宏允许你将任意的数据结构，如&lt;code>(1 + 2)&lt;/code>转化为 Clojure 可以求值的结构，即&lt;code>(+ 1 2)&lt;/code>。这意味着&lt;em>你可以使用 Clojure 来扩展自己&lt;/em>，所以你可以随心所欲地编写程序。换句话说，宏能够实现&lt;em>句法抽象&lt;/em>。句法抽象可能听起来有点抽象（哈哈！），所以我们来探讨一下。&lt;/p>
&lt;h3 id="语法抽象和---宏">语法抽象和 -&amp;gt; 宏&lt;/h3>
&lt;p>通常，Clojure 代码由一堆嵌套的函数调用组成。例如，我在我的一个项目中使用了下面这个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn read-resource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Read a resource into a string&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [path]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (read-string (slurp (clojure.java.io/resource path))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了理解函数体，你必须找到最内部的形式，在本例中是&lt;code>(clojure.java.io/resource path)&lt;/code>，然后从右到左向外走，看每个函数的结果如何传递给另一个函数。这种从右到左的流程与非 Lisp 程序员所习惯的相反。当你习惯于用 Clojure 写作时，这种代码会越来越容易理解。但如果你想翻译 Clojure 代码，以便你能以更熟悉的、从左到右、从上到下的方式来阅读它，你可以使用内置的&lt;code>-&amp;gt;&lt;/code>宏，它也被称为&lt;em>threading&lt;/em>或&lt;em>stabby&lt;/em>宏。它可以让你像这样重写前面的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn read-resource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [path]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (-&amp;gt; path
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clojure.java.io/resource
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> slurp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> read-string))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以把这理解为一个从上到下的流水线，而不是从内括号到外括号。首先，&lt;code>path&lt;/code>被传递给&lt;code>io/&lt;/code>resource&lt;code>，然后结果被传递给&lt;/code>slurp&lt;code>，最后结果被传递给&lt;/code>read-string`。&lt;/p>
&lt;p>这两种定义 &amp;ldquo;read-resource &amp;ldquo;的方式是完全等价的。然而，第二种方式可能更容易理解，因为我们可以从上到下接近它，一个我们习惯的方向。&lt;code>-&amp;gt;&lt;/code>也让我们省略了括号，这意味着有更少的视觉噪音需要处理。这是一个&lt;em>句法抽象&lt;/em>，因为它可以让你用一种不同于 Clojure 内置语法的语法来写代码，但对于人类的消费来说是比较好的。胜过点石成金!!!&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中，你了解了 Clojure 的求值过程。首先，读取器将文本转换为 Clojure 数据结构。接下来，宏扩展器用宏来转换这些数据结构，将你的自定义语法转换为语法上有效的数据结构。最后，这些数据结构被发送到求值器。求值器根据数据结构的类型对其进行处理：符号被解析为它们的参照物；列表导致函数、宏或特殊形式的调用；其他一切都被求值为自身。&lt;/p>
&lt;p>这个过程最酷的地方是，它允许你使用 Clojure 来扩展它自己的语法。这个过程变得更加容易，因为 Clojure 是同源的：它的文本代表数据结构，而这些数据结构代表抽象的语法树，让你更容易推理出如何构建扩展语法的宏。&lt;/p>
&lt;p>有了所有这些新的概念，你现在就可以像我承诺的那样，故意炸毁东西了。下一章将教你关于编写宏的一切知识。请抓紧你的袜子，否则它们很可能会被打掉!&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;p>这些练习的重点是读取器和求值。第 8 章有关于编写宏的练习。&lt;/p>
&lt;ol>
&lt;li>使用&lt;code>list&lt;/code>函数, 引用, 和&lt;code>read-string&lt;/code>来创建一个列表, 当求值时, 打印出你的名字和你最喜欢的科幻电影.&lt;/li>
&lt;li>创建一个 infix 函数，该函数接收一个类似&lt;code>(1 + 3 * 4 - 5)&lt;/code>的列表，并将其转换为 Clojure 需要的列表，以便使用运算符优先规则正确求值该表达式。&lt;/li>
&lt;/ol></description></item><item><title>Chapter6 组织你的项目</title><link>https://example.com/p/chapter6-%E7%BB%84%E7%BB%87%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/</link><pubDate>Fri, 14 Jan 2022 12:40:41 +0800</pubDate><guid>https://example.com/p/chapter6-%E7%BB%84%E7%BB%87%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h1 id="组织你的项目一个图书管理员的故事">组织你的项目：一个图书管理员的故事&lt;/h1>
&lt;p>在我们每个人心中都住着一个叫 Melvil 的图书管理员，一个以组织艺术为乐的奇异生物。日日夜夜，Melvil 都渴望为你的代码库带来秩序。幸运的是，Clojure 提供了一套工具，专门用来帮助这个侏儒与混乱的力量不断斗争。&lt;/p>
&lt;p>这些工具通过将相关的函数和数据分组来帮助你组织你的代码。它们还可以防止名称冲突，这样你就不会意外地覆盖别人的代码，反之亦然。在这个充满悬念和神秘的故事中，请和我一起学习如何使用这些工具，并解决一生中的抢劫案吧 在这个传奇故事的最后，你将了解以下内容。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>`def&amp;rsquo;是做什么的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>什么是命名空间以及如何使用它们&lt;/p>
&lt;/li>
&lt;li>
&lt;p>命名空间和文件系统之间的关系&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何使用&lt;code>refer&lt;/code>、&lt;code>alias&lt;/code>、&lt;code>require&lt;/code>、&lt;code>use&lt;/code>和&lt;code>ns&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何使用文件系统来组织 Clojure 项目&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>我先来介绍一下 Clojure 的组织系统，它的工作原理很像一个库。Melvil 兴奋地颤抖着!&lt;/p>
&lt;h2 id="你的项目是一个库">你的项目是一个库&lt;/h2>
&lt;p>现实世界中的图书馆存储对象的集合，如书籍、杂志和 DVD。他们使用寻址系统，所以当你得到一个物体的地址时，你可以导航到物理空间并检索到该物体。&lt;/p>
&lt;p>当然，没有人能够直接知道一本书或 DVD 的地址是什么。这就是为什么图书馆要记录一个物体的标题和它的地址之间的联系，并提供工具来搜索这些记录。在计算机之前的旧时代，图书馆提供卡片目录，即装满纸质卡片的柜子，其中包含每本书的标题、作者、&amp;ldquo;地址&amp;rdquo;（杜威十进制或国会图书馆编号）和其他信息。&lt;/p>
&lt;p>例如，要找到《达芬奇密码》，你可以翻阅书名目录（按书名排序的卡片），直到你找到正确的卡片。在那张卡片上，你会看到地址&lt;em>813.54&lt;/em>（如果它使用杜威十进制系统），浏览图书馆，找到&lt;em>达芬奇密码&lt;/em>所在的书架，并参与你一生中的文学和/或仇恨阅读冒险。&lt;/p>
&lt;p>在 Clojure 中想象一个类似的设置是很有用的。我认为 Clojure 是将对象（如数据结构和函数）存储在一组巨大的编号架上。没有人能够直接知道一个对象被存储在哪个架子上。相反，我们给 Clojure 一个标识符，它用来检索该对象。&lt;/p>
&lt;p>为了使之成功，Clojure 必须维护我们的标识符和货架地址之间的关联。它通过使用&lt;em>namespaces&lt;/em>来做到这一点。命名空间包含了人类友好的&lt;em>符号&lt;/em>和书架地址的引用之间的 Map，被称为&lt;em>vars&lt;/em>，很像卡片目录。&lt;/p>
&lt;p>从技术上讲，命名空间是 &amp;ldquo;clojure.lang.Namespace &amp;ldquo;类型的对象，你可以与它们互动，就像你可以与 Clojure 数据结构互动一样。例如，你可以用&lt;code>*ns*&lt;/code>来引用当前的命名空间，你可以用&lt;code>(ns-name *ns*)&lt;/code>来获得其名称。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns-name *ns*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; user
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>例如，当你启动 REPL 时，你在&lt;code>user&lt;/code>命名空间中（正如你在这里看到的）。提示符显示当前名称空间，使用&lt;code>user=&amp;gt;&lt;/code>。&lt;/p>
&lt;p>当前名字空间的概念意味着你可以有多个名字空间，事实上 Clojure 允许你创建任意多的名字空间（尽管从技术上讲，你可以创建的名字数量可能有一个上限）。在 Clojure 程序中，你总是&lt;em>在&lt;/em>个命名空间中。&lt;/p>
&lt;p>至于符号，你一直在使用它们，甚至没有意识到。例如，当你写&lt;code>(map inc [1 2])&lt;/code>时，&lt;code>map&lt;/code>和&lt;code>inc&lt;/code>都是符号。符号是 Clojure 中的数据类型，我将在下一章中彻底解释它们。现在，你需要知道的是，当你给 Clojure 一个像&lt;code>map&lt;/code>这样的符号时，它会在当前命名空间中找到相应的 var，得到一个架子上的地址，并为你从那个架子上检索一个对象&amp;ndash;在这里，就是&lt;code>map&lt;/code>所指的那个函数。如果你想只使用符号本身，而不是它所指的东西，你必须引用它。引述任何 Clojure 的形式告诉 Clojure 不要求值它，而是把它当作数据。接下来的几个例子显示了当你引用一个 Form 时会发生什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ inc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;lt;core$inc clojure.core$inc@30132014&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ &amp;#39;inc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; inc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (map inc [1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ &amp;#39;(map inc [1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (map inc [1 2])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你在 REPL 中求值 &lt;code>inc&lt;/code> 在 ➊ 处时，它会打印出 &lt;code>inc&lt;/code> 所指的函数的文本表述。接下来，你在➋引用&lt;code>inc&lt;/code>，所以结果是符号&lt;code>inc&lt;/code>。然后，你在➌处求值一个熟悉的&lt;code>map&lt;/code>应用程序，得到一个熟悉的结果。之后，你在➍处引用整个列表数据结构，结果是一个未求值的列表，包括&lt;code>map&lt;/code>符号、&lt;code>inc&lt;/code>符号和一个 Vector。&lt;/p>
&lt;p>现在你知道了 Clojure 的组织系统，让我们来看看如何使用它。&lt;/p>
&lt;h2 id="用-def-存储对象">用 def 存储对象&lt;/h2>
&lt;p>Clojure 中用于存储对象的主要工具是&lt;code>def&lt;/code>。其他的工具，如&lt;code>defn&lt;/code>，都是使用&lt;code>def&lt;/code>。下面是一个 def 的应用实例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def great-books [&amp;#34;East of Eden&amp;#34; &amp;#34;The Glass Bead Game&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;user/great-books
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">great-books
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;East of Eden&amp;#34; &amp;#34;The Glass Bead Game&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码告诉 Clojure。&lt;/p>
&lt;ol>
&lt;li>用&lt;code>great-books&lt;/code>和 var 之间的关联更新当前命名空间的 Map。&lt;/li>
&lt;li>找到一个空闲的存储架。&lt;/li>
&lt;li>将&lt;code>[《伊甸园之东》《玻璃珠游戏》]&lt;/code>存放在架子上。&lt;/li>
&lt;li>将书架的地址写在 var 上。&lt;/li>
&lt;li>5.返回 var（在这个例子中，`#&amp;lsquo;user/great-books&amp;rsquo;）。&lt;/li>
&lt;/ol>
&lt;p>这个过程被称为&lt;em>interning&lt;/em>一个 var。 你可以使用`ns-interns&amp;rsquo;与命名空间的符号到内含变量的 Map 进行交互。下面是你如何获得一个内部变量的 Map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns-interns *ns*)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {great-books #&amp;#39;user/great-books}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以使用`get&amp;rsquo;函数来获取一个特定的 var。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get (ns-interns *ns*) &amp;#39; great-books)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;user/great-books
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过求值&lt;code>(&lt;/code>ns-map &lt;em>ns&lt;/em>)&lt;code>,&lt;/code>你也可以得到命名空间在给定一个符号时用来查找 var 的完整 Map。&lt;code>(ns-map *ns*)&lt;/code>给你一个非常大的 Map，我不会在这里打印，但可以试试&lt;/p>
&lt;p>&lt;code>#'user/great-books'是var的*读者形式。 我将在第七章解释更多关于读者形式。现在，只需知道你可以使用&lt;/code>#&amp;lsquo;&amp;lsquo;来抓取与后面的符号对应的 var；&lt;code>#'user/great-books'让你在&lt;/code>user&amp;rsquo;命名空间中使用与符号&lt;code>great-books'相关的var。我们可以&lt;/code>deref&amp;rsquo;变量来获得它们所指向的对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(deref #&amp;#39;user/great-books)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;East of Eden&amp;#34; &amp;#34;The Glass Bead Game&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就像告诉 Clojure，&amp;ldquo;从 var 中获取书架号，去那个书架号，抓住上面的东西，然后给我！&amp;rdquo;&lt;/p>
&lt;p>但是通常情况下，你只需要使用符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">great-books
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;East of Eden&amp;#34; &amp;#34;The Glass Bead Game&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就像告诉 Clojure，&amp;ldquo;检索与 great-books 相关的 var，然后取消那个坏的杰克逊&amp;rdquo;。&lt;/p>
&lt;p>到目前为止还不错，对吗？好吧，请做好准备，因为这个田园诗般的组织天堂即将被颠覆 用同样的符号再次调用&lt;code>def&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def great-books [&amp;#34;The Power of Bees&amp;#34; &amp;#34;Journey to Upstairs&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">great-books
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;The Power of Bees&amp;#34; &amp;#34;Journey to Upstairs&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/organization/bee-power.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>var 已经更新了新的 Vector 的地址。这就像你在卡片目录中的卡片上的地址用了白笔，然后写了一个新地址。其结果是，你不能再要求 Clojure 找到第一个 Vector。这被称为&lt;em>名称碰撞&lt;/em>。混乱! 无政府状态!&lt;/p>
&lt;p>你可能在其他编程语言中经历过这种情况。JavaScript 在这方面是臭名昭著的，它也发生在 Ruby 中。这是个问题，因为你可能无意中覆盖了你自己的代码，而且你也不能保证第三方库不会覆盖你的代码。Melvil 惊恐地退缩了! 幸运的是，Clojure 允许你创建任意多的命名空间，这样你就可以避免这些碰撞。&lt;/p>
&lt;h2 id="创建和切换到命名空间">创建和切换到命名空间&lt;/h2>
&lt;p>Clojure 有三种创建命名空间的工具：函数&lt;code>create-ns&lt;/code>，函数&lt;code>in-ns&lt;/code>，以及宏&lt;code>ns&lt;/code>。你将在你的 Clojure 文件中主要使用&lt;code>ns&lt;/code>宏，但我将推迟几页来解释它，因为它结合了许多工具，而且在我讨论其他工具之后，它更容易理解。&lt;/p>
&lt;p>&lt;code>create-ns&lt;/code>接收一个符号，如果它不存在，就用这个名字创建一个命名空间，并返回这个命名空间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt; (create-ns &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;lt;Namespace cheese.taxonomy&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以使用返回的名字空间作为函数调用的参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt; (ns-name (create-ns &amp;#39;cheese.taxonomy))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; cheese-taxonomy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在实践中，你可能永远不会在你的代码中使用&lt;code>create-ns&lt;/code>，因为创建一个命名空间而不移入它并不是非常有用。使用&lt;code>in-ns&lt;/code>更常见，因为如果命名空间不存在，它会创建命名空间，并**切换到它，如清单 6-1 所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt; (in-ns &amp;#39;cheese.analysis)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;lt;Namespace cheese.analysis&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>6-1. 使用 in-ns 创建一个命名空间并切换到该空间&lt;/li>
&lt;/ol>
&lt;p>注意你的 REPL 提示符现在是&lt;code>cheese.analysis&amp;gt;&lt;/code>，表明你确实在你刚刚创建的新命名空间中。现在当你使用&lt;code>def&lt;/code>时，它将在&lt;code>cheese.analysis&lt;/code>命名空间中存储命名对象。&lt;/p>
&lt;p>但是如果你想使用其他命名空间的函数和数据怎么办？要做到这一点，你可以使用一个&lt;em>完全合格的&lt;/em>符号。一般的形式是 namespace&lt;code>/&lt;/code>name。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (in-ns &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (def cheddars [&amp;#34;mild&amp;#34; &amp;#34;medium&amp;#34; &amp;#34;strong&amp;#34; &amp;#34;sharp&amp;#34; &amp;#34;extra sharp&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (in-ns &amp;#39;cheese.analysis)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; cheddars
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Exception: Unable to resolve symbol: cheddars in this context
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这创建了一个新的命名空间，&lt;code>cheese.taxonomy&lt;/code>，在该命名空间中定义了&lt;code>cheddars&lt;/code>，然后切换回&lt;code>cheese.analysis&lt;/code>命名空间。如果你试图在&lt;code>cheese.analysis&lt;/code>中引用&lt;code>cheese.taxonomy&lt;/code>命名空间的&lt;code>cheddars&lt;/code>，你会得到一个异常，但是使用完全合格的符号可以。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; cheese.taxonomy/cheddars
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;mild&amp;#34; &amp;#34;medium&amp;#34; &amp;#34;strong&amp;#34; &amp;#34;sharp&amp;#34; &amp;#34;extra sharp&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入这些完全合格的符号很快就会成为一种困扰。 比如说，我是一个极不耐烦的学者，专门研究符号学-au-fromage，或者研究与奶酪有关的符号。&lt;/p>
&lt;p>突然间，可能发生的最糟糕的事情发生了！在全世界范围内，神圣的和有可能发生的事情都发生了。在世界各地，神圣的、具有历史意义的奶酪都失踪了。威斯康星州的标准切达干酪：不见了! 图坦卡蒙的大奶酪罐：被偷了! 都灵奶酪：被骗取的奶酪所取代! 这有可能使世界因某种原因而陷入完全的混乱! 自然，作为一个杰出的奶酪研究者，我有责任解开这个谜团。与此同时，我正被光明会、共济会和足部族追捕！因为我是一名学者，所以我必须为他们提供帮助。&lt;/p>
&lt;p>因为我是一个学者，我试图用我知道的最好的方式来解决这个谜团&amp;ndash;去图书馆研究这个狗屎。我可靠的助手 Clojure 陪着我。当我们从一个名字空间到另一个名字空间忙忙碌碌时，我喊着让 Clojure 把一个又一个东西交给我。&lt;/p>
&lt;p>但 Clojure 有点笨，很难弄清楚我指的是什么。在&lt;code>user&lt;/code>命名空间中，我大声说：&amp;quot;&lt;code>join&lt;/code>! 给我&lt;code>join'！&amp;quot;--我嘴里的唾沫星子飞了出来。&amp;quot;&lt;/code>RuntimeException: Unable to resolve symbol: join&lt;code>,&amp;quot; Clojure抱怨着回应。&amp;quot;看在布里的份上，把&lt;/code>clojure.string/join`交给我吧！&amp;rdquo; 我反驳道，Clojure 尽职尽责地把我要找的函数交给我。&lt;/p>
&lt;p>我的声音变得沙哑了。我需要一些方法来告诉 Clojure 要给我什么对象，而不必每次都使用完全合格的符号。&lt;/p>
&lt;p>幸运的是，Clojure 提供了 &amp;ldquo;refer &amp;ldquo;和 &amp;ldquo;alias &amp;ldquo;工具，让我可以更简洁地对它吼叫。&lt;/p>
&lt;h3 id="引用">引用&lt;/h3>
&lt;p>&lt;code>refer&lt;/code>使你能够精细地控制你如何引用其他命名空间的对象。启动一个新的 REPL 会话并尝试以下操作。请记住，在 REPL 中这样玩命名空间是可以的，但你不希望你的 Clojure 文件看起来像这样；正确的文件结构方式在&lt;a class="link" href="https://www.braveclojure.com/organization/#Anchor" target="_blank" rel="noopener"
>&amp;ldquo;真正的项目组织 &amp;ldquo;第 133 页&lt;/a>中涉及。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">user=&amp;gt; (in-ns &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (def cheddars [&amp;#34;mild&amp;#34; &amp;#34;medium&amp;#34; &amp;#34;strong&amp;#34; &amp;#34;sharp&amp;#34; &amp;#34;extra sharp&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (def bries [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (in-ns &amp;#39;cheese.analysis)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/refer &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; cheddars
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;mild&amp;#34; &amp;#34;medium&amp;#34; &amp;#34;strong&amp;#34; &amp;#34;sharp&amp;#34; &amp;#34;extra sharp&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码创建了一个 &amp;ldquo;cheese.taxonomy &amp;ldquo;命名空间和其中的两个 Vector。 &lt;code>cheddars&lt;/code>和&lt;code>bries&lt;/code>。然后它创建并移动到一个新的命名空间，称为&lt;code>cheese.analysis&lt;/code>。用命名空间的符号调用&lt;code>refer&lt;/code>可以让你引用相应的命名空间的对象，而不需要使用完全限定的符号。它通过更新当前命名空间的符号/对象 Map 来实现这一目的。你可以看到像这样的新条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/get (clojure.core/ns-map clojure.core/*ns*) &amp;#39;bries)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;cheese.taxonomy/bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/get (clojure.core/ns-map clojure.core/*ns*) &amp;#39;cheddars)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;cheese.taxonomy/cheddars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就好像 Clojure&lt;/p>
&lt;ol>
&lt;li>在&lt;code>cheese.taxonomy&lt;/code>命名空间上调用&lt;code>ns-interns&lt;/code>。&lt;/li>
&lt;li>将其与当前命名空间的&lt;code>ns-map&lt;/code>合并。&lt;/li>
&lt;li>将结果作为当前命名空间的新的`ns-map&amp;rsquo;。&lt;/li>
&lt;/ol>
&lt;p>当你调用&lt;code>refer&lt;/code>时，你也可以把过滤器&lt;code>:only&lt;/code>, &lt;code>:exclude&lt;/code>, 和&lt;code>:rename&lt;/code>传递给它。正如名字所暗示的，&lt;code>:only&lt;/code>和&lt;code>:exclude&lt;/code>限制了哪些符号/变量 Map 被合并到当前命名空间的&lt;code>ns-map&lt;/code>。 &lt;code>:rename&lt;/code>允许你使用不同的符号来表示被合并的变量。如果我们将前面的例子修改为使用&lt;code>:only&lt;/code>，会发生以下情况。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/refer &amp;#39;cheese.taxonomy :only [&amp;#39;bries])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; cheddars
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; RuntimeException: 无法解决符号：cheddars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是&lt;code>:exclude&lt;/code>的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/refer &amp;#39;cheese.taxonomy :only [&amp;#39;bries])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; cheddars
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; RuntimeException: Unable to resolve symbol: cheddars
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，一个&lt;code>:rename&lt;/code>的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/refer &amp;#39;cheese.taxonomy :rename {&amp;#39;bries &amp;#39;yummy-bries})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; RuntimeException: Unable to resolve symbol: bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; yummy-bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在这些最后的例子中，我们必须使用&lt;code>clojure.core&lt;/code>中所有对象的完全合格名称，如&lt;code>clojure.core/ns-map&lt;/code>和&lt;code>clojure.core/refer&lt;/code>。我们不需要在&lt;code>user&lt;/code>命名空间中这样做。这是因为 REPL 在&lt;code>user&lt;/code>命名空间中自动引用&lt;code>clojure.core&lt;/code>。当你创建一个新的命名空间时，你可以通过求值&lt;code>(clojure.core/refer-clojure)&lt;/code>来简化你的生活；这将引用 clojure.core 命名空间，从现在起我将使用它。在例子中你不会看到&lt;code>clojure.core/refer&lt;/code>，而只会看到&lt;code>refer&lt;/code>。&lt;/p>
&lt;p>另一件需要注意的事情是，你可以完全自由地组织你的函数和数据，跨越命名空间。这让你可以合理地将相关的函数和数据归入同一命名空间。&lt;/p>
&lt;p>有时你可能希望一个函数只对同一命名空间内的其他函数有效。Clojure 允许你使用&lt;code>defn-&lt;/code>来定义&lt;em>私有&lt;/em>的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;cheese.analysis)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Notice the dash after &amp;#34;defn&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn- private-function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Just an example function that does nothing&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你试图从其他命名空间调用这个函数或引用它，Clojure 将抛出一个异常。你可以在求值➊和➋的代码时看到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (in-ns &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.taxonomy=&amp;gt; (clojure.core/refer-clojure)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ cheese.taxonomy=&amp;gt; (cheese.analysis/private-function)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ cheese.taxonomy=&amp;gt; (refer &amp;#39;cheese.analysis :only [&amp;#39;private-function])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，即使你明确地 &amp;ldquo;引用 &amp;ldquo;这个函数，你也不能使用其他命名空间的函数，因为你把它变成了私有的。(如果你想狡猾一点，你仍然可以使用神秘的语法`@#&amp;lsquo;some/private-var&amp;rsquo;来访问私有变量，但你很少想这样做)。&lt;/p>
&lt;h3 id="alias">alias&lt;/h3>
&lt;p>与&lt;code>refer&lt;/code>相比，&lt;code>alias&lt;/code>相对简单。它所做的只是让你缩短一个命名空间的名称，以便使用完全合格的符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; (clojure.core/alias &amp;#39;taxonomy &amp;#39;cheese.taxonomy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cheese.analysis=&amp;gt; taxonomy/bries
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Wisconsin&amp;#34; &amp;#34;Somerset&amp;#34; &amp;#34;Brie de Meaux&amp;#34; &amp;#34;Brie de Melun&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码让我们使用来自&lt;code>cheese.taxonomy&lt;/code>命名空间的调用符号，并使用较短的别名&lt;code>taxonomy&lt;/code>。&lt;/p>
&lt;p>&lt;code>refer&lt;/code>和&lt;code>alias&lt;/code>是你引用当前命名空间以外的对象的两个基本工具! 它们是 REPL 开发的好帮手。&lt;/p>
&lt;p>然而，你不可能在 REPL 中创建整个程序。在下一节中，我将介绍你需要知道的一切，以组织一个真正的项目，使源代码在文件系统中生存。&lt;/p>
&lt;h2 id="真正的项目组织">真正的项目组织&lt;/h2>
&lt;p>现在我已经介绍了 Clojure 组织系统的构建模块，我将向你展示如何在实际项目中使用它们。我将讨论文件路径和命名空间名称之间的关系，解释如何用&lt;code>require&lt;/code>和&lt;code>use&lt;/code>加载文件，并展示如何使用&lt;code>ns&lt;/code>来设置一个命名空间。&lt;/p>
&lt;h3 id="文件路径和命名空间名称之间的关系">文件路径和命名空间名称之间的关系&lt;/h3>
&lt;p>为了一石二鸟（或者用一颗种子喂养两只鸟，这取决于你是多么的嬉皮士），我将介绍更多关于命名空间的内容，同时我们将通过绘制国际奶酪大盗的抢劫地点来抓捕这个讨厌的大盗。运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">lein new app the-divine-cheese-code
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这应该创建一个目录结构，看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">| .gitignore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| doc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | intro.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| project.clj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| resources
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | the_divine_cheese_code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | | core.clj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | the_divine_cheese_code
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | | core_test.clj
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，打开&lt;em>src/the_divine_cheese_code/core.clj&lt;/em>。你应该在第一行看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:gen-class))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>ns&lt;/code>是在 Clojure 中创建和管理命名空间的主要方式。我很快就会对它进行全面的解释。不过现在，只需知道这一行与我们在清单 6-1 中使用的&lt;code>in-ns&lt;/code>函数非常相似。如果一个命名空间不存在，它就创建一个命名空间，然后切换到它。我在第 12 章也详细介绍了&lt;code>(:gen-class)&lt;/code>。&lt;/p>
&lt;p>命名空间的名字是&lt;code>the-divine-cheese-code.core&lt;/code>。在 Clojure 中，命名空间的名称和声明命名空间的文件路径之间有一个一对一的 Map，根据以下约定。&lt;/p>
&lt;ul>
&lt;li>当你用&lt;code>lein&lt;/code>创建一个目录时（就像你在这里做的那样），源代码的根默认为&lt;em>src&lt;/em>。&lt;/li>
&lt;li>名称空间中的破折号对应于文件系统中的下划线。所以&lt;code>the-divine-cheese-code&lt;/code>在文件系统中被 Map 为&lt;em>the_divine_cheese_code&lt;/em>。&lt;/li>
&lt;li>命名空间名称中的句号（&lt;code>.&lt;/code>）前面的成分对应于一个目录。例如，由于&lt;code>the-divine-cheese-code.core&lt;/code>是命名空间的名称，&lt;em>the_divine_cheese_code&lt;/em>是一个目录。&lt;/li>
&lt;li>命名空间的最后一个组成部分对应于扩展名为*.clj&lt;em>的文件；&lt;code>core&lt;/code>被 Map 到&lt;/em>core.clj*。&lt;/li>
&lt;/ul>
&lt;p>你的项目将有一个命名空间，&lt;code>the-divine-cheese-code.visualization.svg&lt;/code>。现在继续为它创建文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkdir src/the_divine_cheese_code/visualization
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">touch src/the_divine_cheese_code/visualization/svg.clj
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，文件系统的路径遵循这些惯例。有了命名空间和文件系统之间的关系，我们来看看&lt;code>require&lt;/code>和&lt;code>use&lt;/code>。&lt;/p>
&lt;h3 id="要求和使用命名空间">要求和使用命名空间&lt;/h3>
&lt;p>在&lt;code>the-divine-cheese-code.core&lt;/code>命名空间的代码将使用&lt;code>the-divine-cheese-code.visualization.svg&lt;/code>命名空间的函数来创建 SVG 标记。为了使用&lt;code>svg&lt;/code>的函数，&lt;code>core&lt;/code>将不得不&lt;em>要求它。但首先，让我们在&lt;/em>svg.clj*中添加一些代码。让它看起来像这样（你以后会添加更多）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn latlng-&amp;gt;point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Convert lat/lng map to comma-separated string&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [latlng]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:lat latlng) &amp;#34;,&amp;#34; (:lng latlng)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn points
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.string/join &amp;#34; &amp;#34; (map latlng-&amp;gt;point locations)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这定义了两个函数，&lt;code>latlng-&amp;gt;point&lt;/code>和&lt;code>points&lt;/code>，你将用它们来把一串经纬度坐标转换成一串点。 要使用&lt;em>core.clj&lt;/em>文件中的这段代码，你必须&lt;code>require&lt;/code>它。&lt;code>require&lt;/code>接收一个指定命名空间的符号，并确保该命名空间存在并准备使用；在这种情况下，当你调用&lt;code>(require 'the-divine-cheese&lt;/code>-code.visualization.svg)&lt;code>，Clojure读取并求值相应的文件。通过求值该文件，它创建了&lt;/code>the-divine-cheese-code.visualization.svg&lt;code>命名空间，并在该命名空间中定义了函数&lt;/code>latlng-&amp;gt;point&lt;code>和&lt;/code>points`。即使文件&lt;em>svg.clj&lt;/em>在你的项目目录中，Clojure 在运行你的项目时也不会自动求值它；你必须明确告诉 Clojure 你想使用它。&lt;/p>
&lt;p>在要求命名空间之后，你可以&lt;em>参考&lt;/em>它，这样你就不必使用完全合格的名称来引用函数。继续要求&lt;code>the-divine-cheese-code.visualization.svg&lt;/code>，并添加&lt;code>heists&lt;/code>序列，使&lt;em>core.clj&lt;/em>与列表相符。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Ensure that the SVG code is evaluated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Refer the namespace so that you don&amp;#39;t have to use the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; fully qualified name to reference svg functions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def heists [{:location &amp;#34;Cologne, Germany&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;Archbishop Hildebold&amp;#39;s Cheese Pretzel&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 50.95
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 6.97}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Zurich, Switzerland&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Standard Emmental&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 47.37
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 8.55}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Marseille, France&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;Le Fromage de Cosquer&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 43.30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 5.37}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Zurich, Switzerland&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Lesser Emmental&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 47.37
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 8.55}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Vatican City&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Cheese of Turin&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 41.90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 12.45}])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn -main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;amp; args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (points heists)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你有一连串的 heist 位置可以使用，你可以使用&lt;code>visualization.svg&lt;/code>命名空间的函数。&lt;code>main&lt;/code>函数只是将&lt;code>points&lt;/code>函数应用于&lt;code>heists&lt;/code>。如果你用&lt;code>lein run&lt;/code>运行该项目，你应该看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">50.95,6.97 47.37,8.55 43.3,5.37 47.37,8.55 41.9,12.45
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>万岁! 你离抓到那个偷窃发酵乳的人又近了一步! 使用&lt;code>require&lt;/code>成功加载了&lt;code>the-divine-cheese-code.visualization.svg&lt;/code>以供使用。&lt;/p>
&lt;p>&lt;code>require&lt;/code>的细节实际上有点复杂，但为了实用，你可以认为&lt;code>require&lt;/code>是告诉 Clojure 以下内容。&lt;/p>
&lt;ol>
&lt;li>如果你已经用这个符号（&lt;code>the-divine-cheese-code.visualization.svg&lt;/code>）调用了&lt;code>require&lt;/code>，则不做任何事情。&lt;/li>
&lt;li>否则，使用&lt;a class="link" href="https://www.braveclojure.com/organization/#Anchor-3" target="_blank" rel="noopener"
>&amp;ldquo;文件路径和命名空间名称之间的关系 &amp;ldquo;第 133 页&lt;/a>中描述的规则找到与该符号对应的文件。在这种情况下，Clojure 找到&lt;code>src/the_divine_cheese_code/visualization/svg.clj&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>读取并求值该文件的内容。Clojure 希望该文件声明一个与它的路径相对应的命名空间（我们的文件就是如此）。&lt;/p>
&lt;p>&lt;code>require&lt;/code>也可以让你在需要一个命名空间时使用&lt;code>:as&lt;/code>或&lt;code>alias&lt;/code>来别名它。这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(require &amp;#39;[the-divine-cheese-code.visualization.svg :as svg] )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(alias &amp;#39;svg &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以使用别名的命名空间了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(svg/points heists)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;50.95,6.97 47.37,8.55 43.3,5.37 47.37,8.55 41.9,12.45&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clojure 提供了另一种捷径。函数&lt;code>use&lt;/code>不需要单独调用&lt;code>require&lt;/code>和&lt;code>refer&lt;/code>，而是同时调用。在生产代码中使用&lt;code>use&lt;/code>是不可取的，但当你在 REPL 中做实验，想快速获得一些函数时，它就很方便。例如，这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(use &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以用&lt;code>use&lt;/code>来别名一个命名空间，就像你可以用&lt;code>require&lt;/code>一样。这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(alias &amp;#39;svg &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于清单 6-2 中的代码，其中也显示了函数调用中使用的别名空间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(use &amp;#39;[the-divine-cheese-code.visualization.svg :as svg])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(= svg/points points)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(= svg/latlng-&amp;gt;point latlng-&amp;gt;point)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>6-2. 有时，既使用又别名一个命名空间是很方便的。&lt;/li>
&lt;/ol>
&lt;p>在这里用&lt;code>use&lt;/code>别名命名空间似乎是多余的，因为&lt;code>use&lt;/code>已经引用了命名空间（这让你可以简单地调用&lt;code>points&lt;/code>而不是&lt;code>svg/points&lt;/code>）。但在某些情况下，这很方便，因为&lt;code>use&lt;/code>和&lt;code>refer&lt;/code>有相同的选项（&lt;code>:only&lt;/code>, &lt;code>:exclude&lt;/code>, &lt;code>:as&lt;/code>, 和&lt;code>:rename&lt;/code>）。当你跳过引用一个符号时，你可能想用&lt;code>use&lt;/code>来别名一个命名空间。你可以这样使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg :as :only [&amp;#39;point])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者你可以使用清单 6-3 中的&lt;code>use&lt;/code>形式（其中还包括如何调用函数的例子）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(use &amp;#39;[the-divine-cheese-code.visualization.svg :as svg :only [points]])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg :as :only [&amp;#39;points])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(= svg/points points)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; We can use the alias to reach latlng-&amp;gt;point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">svg/latlng-&amp;gt;point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; This doesn&amp;#39;t throw an exception
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; But we can&amp;#39;t use the bare name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">latlng-&amp;gt;point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; This does throw an exception!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>在你使用一个命名空间后将其别名化，可以让你参考你排除的符号。&lt;/li>
&lt;/ol>
&lt;p>如果你在 REPL 中尝试清单 6-3，并且&lt;code>latlng-&amp;gt;point&lt;/code>没有抛出一个异常，这是因为你在清单 6-2 中引用了&lt;code>latlng-&amp;gt;point&lt;/code>。你需要重新启动你的 REPL 会话，使代码表现得如清单 6-3 所示。&lt;/p>
&lt;p>这里的启示是，&lt;code>require&lt;/code>和&lt;code>use&lt;/code>加载文件，并可选择&lt;code>alias&lt;/code>或&lt;code>refer&lt;/code>其命名空间。当你写 Clojure 程序和阅读别人写的代码时，你可能会遇到更多的&lt;code>require'和&lt;/code>use&amp;rsquo;的写法，这时，阅读 Clojure 的 API 文档（&lt;em>&lt;a class="link" href="http://clojure.org/libs/" target="_blank" rel="noopener"
>http://clojure.org/libs/&lt;/a>&lt;/em>）来了解发生了什么是有意义的。然而，到目前为止，你所学到的关于&lt;code>require&lt;/code>和&lt;code>use&lt;/code>的内容应该能满足你 95.3%的需求。&lt;/p>
&lt;h3 id="ns-宏">＃＃＃NS 宏&lt;/h3>
&lt;p>现在是时候看看&lt;code>ns&lt;/code>宏了。到目前为止所涉及的工具&amp;ndash;&lt;code>in-ns&lt;/code>, &lt;code>refer&lt;/code>, &lt;code>alias&lt;/code>, &lt;code>require&lt;/code>, 和 &lt;code>use&lt;/code>&amp;ndash;最常在你使用 REPL 时使用。在你的源代码文件中，你通常会使用&lt;code>ns&lt;/code>宏，因为它允许你简洁地使用迄今为止描述的工具，并提供其他有用的功能。在本节中，你将了解一个&lt;code>ns&lt;/code>调用如何结合&lt;code>require&lt;/code>、&lt;code>use&lt;/code>、&lt;code>in-ns&lt;/code>、&lt;code>alias&lt;/code>和&lt;code>refer&lt;/code>。&lt;/p>
&lt;p>&lt;code>ns&lt;/code>做的一个有用的任务是默认引用&lt;code>clojure.core&lt;/code>命名空间。这就是为什么你可以从&lt;code>the-divine-cheese-code.core&lt;/code>中调用&lt;code>println&lt;/code>，而不使用完全限定的名称&lt;code>clojure.core/println&lt;/code>。&lt;/p>
&lt;p>你可以用&lt;code>:refer-clojure&lt;/code>来控制从&lt;code>clojure-core&lt;/code>引用的内容，它的选项与&lt;code>refer&lt;/code>相同。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:refer-clojure :exclude [println])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你在&lt;em>divine_cheese_code.core.clj&lt;/em>的开头调用这个，会破坏你的代码，迫使你在&lt;code>-main'函数中使用&lt;/code>clojure.core/println&amp;rsquo;。&lt;/p>
&lt;p>在&lt;code>ns&lt;/code>中，&lt;code>(:&lt;/code>refer-clojure)`的形式被称为&lt;em>reference&lt;/em>。这对你来说可能看起来很奇怪。这个引用是一个函数调用？一个宏？它是什么？你将在第 7 章中了解更多关于底层机器的知识。现在，你只需要了解每个引用如何 Map 到函数调用。例如，前面的代码就相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;clojure.core :exclude [&amp;#39;println])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &amp;ldquo;ns &amp;ldquo;中，有六种可能的引用。&lt;/p>
&lt;ul>
&lt;li>&lt;code>(:refer-clojure)&lt;/code>.&lt;/li>
&lt;li>&amp;ldquo;(:require)&amp;quot;。&lt;/li>
&lt;li>&lt;code>(:use)&lt;/code>&lt;/li>
&lt;li>&lt;code>(:import)&lt;/code>&lt;/li>
&lt;li>&lt;code>(:load)&lt;/code>&lt;/li>
&lt;li>&lt;code>(:gen-class)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>(:import)&lt;/code>和&lt;code>(:gen-class)&lt;/code>将在第 12 章介绍。我将不介绍&lt;code>(:load)&lt;/code>，因为它很少被使用。&lt;/p>
&lt;p>&lt;code>(:require)&lt;/code>的工作方式很像&lt;code>require&lt;/code>函数。例如，这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require the-divine-cheese-code.visualization.svg))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，在 &amp;ldquo;ns &amp;ldquo;形式中（与 &amp;ldquo;in-ns &amp;ldquo;函数调用不同），你不需要用&amp;rdquo;&amp;lsquo;&amp;lsquo;来引用你的符号。在 &amp;ldquo;ns &amp;ldquo;中，你从来不需要引用符号。&lt;/p>
&lt;p>你也可以&lt;code>alias&lt;/code>一个你在&lt;code>ns&lt;/code>内&lt;code>require&lt;/code>的库，就像你调用函数时一样。这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [the-divine-cheese-code.visualization.svg :as svg])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require [&amp;#39;the-divine-cheese-code.visualization.svg :as &amp;#39;svg])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以在一个&lt;code>(:require)&lt;/code>引用中要求多个库，如下所示。 这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [the-divine-cheese-code.visualization.svg :as svg])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [clojure.java.browse :as browse]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require [&amp;#39;the-divine-cheese-code.visualization.svg :as &amp;#39;svg])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require [&amp;#39;clojure.java.browse :as &amp;#39;browse])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，&lt;code>(:require)&lt;/code>引用和&lt;code>require&lt;/code>函数之间的一个区别是，引用也允许你引用名字。这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [the-divine-cheese-code.visualization.svg :refer [point]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当于这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg :only [&amp;#39;point])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以引用所有的符号（注意&lt;code>:all&lt;/code>关键字）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [the-divine-cheese-code.visualization.svg :refer :all]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就相当于这样做了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(require &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(refer &amp;#39;the-divine-cheese-code.visualization.svg)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是要求代码、别名命名空间和引用符号的首选方式。建议你不要使用&lt;code>(:use)&lt;/code>，但由于你很可能会遇到它，所以知道它是如何工作的很好。你知道该怎么做。这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:use clojure.java.browse))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样做。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(use &amp;#39;clojure.java.browse)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:use [clojure.java browse io])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样做。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in-ns &amp;#39;the-divine-cheese-code.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(use &amp;#39;clojure.java.browse)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(use &amp;#39;clojure.java.io)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，当你在&lt;code>:use&lt;/code>后面加上一个 Vector 时，它把第一个符号作为&lt;em>base&lt;/em>，然后用后面的每个符号调用&lt;code>use&lt;/code>。&lt;/p>
&lt;p>哦，我的天哪，就是这样! 现在你可以像专家一样使用&lt;code>ns&lt;/code>了! 你需要这样做，该死的，因为那个&lt;em>voleur des fromages&lt;/em>（他们可能在法语中这样说）仍然在肆意妄为。还记得他/她吗？&lt;/p>
&lt;p>∮∮抓小偷&lt;/p>
&lt;p>我们不能让这个掠夺帕尔马干酪的人带着更多的干酪离开！是时候完成根据坐标画线的工作了。现在是时候根据盗窃案的坐标来完成画线了！这肯定会发现一些问题。这肯定会发现一些问题!&lt;/p>
&lt;p>使用每个抢劫案的纬度坐标，你将在一个 SVG 图像中连接这些点。但是，如果你用给定的坐标画线，结果看起来就不对了，原因有二。首先，纬度坐标是由南向北上升的，而 SVG 的 Y 坐标是由上向下上升的。换句话说，你需要翻转坐标，否则绘图就会颠倒过来。&lt;/p>
&lt;p>第二，绘图会非常小。为了解决这个问题，你将通过平移和缩放来放大它。这就像把一张看起来像图 6-1a 的图变成图 6-1b。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/organization/svg-before.png"
loading="lazy"
>
&lt;img src="https://www.braveclojure.com/assets/images/cftbat/organization/svg-after.png"
loading="lazy"
>&lt;/p>
&lt;p>图 6-1：通过翻转、平移和缩放纬度坐标来制作一张 SVG 图片。&lt;/p>
&lt;p>说实话，这些都是完全随意的，它已经与代码组织没有直接关系了，但是它很有趣，我想你会有一个很好的时间来浏览这些代码的 使你的&lt;em>svg.clj&lt;/em>文件与清单 6-4 一致。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.visualization.svg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [clojure.string :as s])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:refer-clojure :exclude [min max])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ （defn comparator-over-maps
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [比较-fn ks］
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [maps]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (zipmap ks
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (map (fn [k] (apply comparison-fn (map k maps)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ks))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ (def min (comparator-over-maps clojure.core/min [:lat :lng])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def max (comparator-over-maps clojure.core/max [:lat :lng]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>6-3. 构建 Map 比较函数&lt;/li>
&lt;/ol>
&lt;p>你在➊处定义了&lt;code>comparator-over-maps&lt;/code>函数。这可能是最棘手的部分，所以请忍受一下。 &lt;code>comparator-over-maps&lt;/code>是一个返回一个函数的函数。返回的函数使用所提供的比较函数&lt;code>comparison-fn&lt;/code>对参数&lt;code>ks&lt;/code>提供的键值进行比较。&lt;/p>
&lt;p>你使用&lt;code>comparator-over-map&lt;/code>来构造&lt;code>min&lt;/code>和&lt;code>max&lt;/code>函数➍，你将用它们来寻找我们图形的左上角和右下角。下面是`min&amp;rsquo;的操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(min [{:a 1 :b 3} {:a 5 :b 0}] )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a 1 :b 0}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你调用&lt;code>min&lt;/code>时，它调用&lt;code>zipmap&lt;/code>，它接受两个参数，都是 seq，并返回一个新的 map。第一个序列的元素成为键，第二个序列的元素成为值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(zipmap [:a :b] [1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a 1 :b 2}。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 ，&lt;code>zipmap&lt;/code>的第一个参数是&lt;code>ks&lt;/code>，所以&lt;code>ks&lt;/code>的元素将是返回 Map 的键。第二个参数是在➌的 Map 调用的结果。那个 Map 调用实际上是在进行比较。&lt;/p>
&lt;p>最后，在➍，你使用&lt;code>comparator-over-maps&lt;/code>来创建比较函数。如果你把图纸看作是刻在一个矩形里，那么&lt;code>min&lt;/code>是矩形中最接近（0，0）的角，&lt;code>max&lt;/code>是离它最远的角。&lt;/p>
&lt;p>下面是代码的下一部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> (defn translate-to-00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [mincoords (min locations)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map #(merge-with - % mincoords) locations)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (defn scale
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [width height locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [maxcoords (max locations)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ratio {:lat (/ height (:lat maxcoords))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng (/ width (:lng maxcoords))}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map #(merge-with * % ratio) locations)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>translate-to-00&lt;/code>，定义在 ，工作原理是找到我们位置的&lt;code>min'，然后从每个位置减去这个值。它使用&lt;/code>merge-with`，其工作原理如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(merge-with - {:lat 50 :lng 10} {:lat 5 :lng 5})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:lat 45 :lng 5}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们定义函数&lt;code>scale&lt;/code>，它将每个点乘以最大经纬度与所需高度和宽度之间的比率。&lt;/p>
&lt;p>下面是&lt;em>svg.clj&lt;/em>的其余代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn latlng-&amp;gt;point
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Convert lat/lng map to comma-separated string&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [latlng]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str (:lat latlng) &amp;#34;,&amp;#34; (:lng latlng)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn points
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Given a seq of lat/lng maps, return string of points joined by space&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (s/join &amp;#34; &amp;#34; (map latlng-&amp;gt;point locations)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn line
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [points]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;&amp;lt;polyline points=\&amp;#34;&amp;#34; points &amp;#34;\&amp;#34; /&amp;gt;&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn transform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Just chains other functions&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [width height locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (-&amp;gt;&amp;gt; locations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> translate-to-00
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (scale width height)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn xml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;svg &amp;#39;template&amp;#39;, which also flips the coordinate system&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [width height locations]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;&amp;lt;svg height=\&amp;#34;&amp;#34; height &amp;#34;\&amp;#34; width=\&amp;#34;&amp;#34; width &amp;#34;\&amp;#34;&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; These two &amp;lt;g&amp;gt; tags change the coordinate system so that
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; 0,0 is in the lower-left corner, instead of SVG&amp;#39;s default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; upper-left corner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;lt;g transform=\&amp;#34;translate(0,&amp;#34; height &amp;#34;)\&amp;#34;&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;lt;g transform=\&amp;#34;rotate(-90)\&amp;#34;&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (-&amp;gt; (transform width height locations)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> points
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> line)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;lt;/g&amp;gt;&amp;lt;/g&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;&amp;lt;/svg&amp;gt;&amp;#34;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的函数非常简单明了。它们只是接收&lt;code>{:lat x :lng y}&lt;/code>Map，并对其进行转换，以便创建一个 SVG。&lt;code>latlng-&amp;gt;point&lt;/code>返回一个字符串，可用于在 SVG 标记中定义一个点。&lt;code>points&lt;/code>将&lt;code>lat&lt;/code>/&lt;code>lng&lt;/code>Map 的序列转换为一个以空格分隔的点的字符串。 &lt;code>line&lt;/code>返回连接所有给定空间分隔的点字符串的 SVG 标记。 &lt;code>transform&lt;/code>接收一个位置序列，将它们翻译成从(0, 0)开始的点，并将它们缩放到给定的宽度和高度。最后，&lt;code>xml&lt;/code>产生标记，用 SVG 显示给定的位置。&lt;/p>
&lt;p>有了&lt;em>svg.clj&lt;/em>的所有代码，现在让&lt;em>core.clj&lt;/em>看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns the-divine-cheese-code.core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:require [clojure.java.browse :as browse]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [the-divine-cheese-code.visualization.svg :refer [xml]])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (:gen-class))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def heists [{:location &amp;#34;Cologne, Germany&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;Archbishop Hildebold&amp;#39;s Cheese Pretzel&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 50.95
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 6.97}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Zurich, Switzerland&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Standard Emmental&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 47.37
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 8.55}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Marseille, France&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;Le Fromage de Cosquer&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 43.30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 5.37}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Zurich, Switzerland&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Lesser Emmental&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 47.37
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 8.55}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:location &amp;#34;Vatican City&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :cheese-name &amp;#34;The Cheese of Turin&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lat 41.90
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :lng 12.45}])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn url
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [filename]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;file:///&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (System/getProperty &amp;#34;user.dir&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;/&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> filename))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [contents]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;&amp;lt;style&amp;gt;polyline { fill:none; stroke:#5881d8; stroke-width:3}&amp;lt;/style&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contents))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn -main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;amp; args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [filename &amp;#34;map.html&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (-&amp;gt;&amp;gt; heists
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (xml 50 100)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (spit filename))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (browse/browse-url (url filename))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里没有太复杂的事情发生。在 &amp;ldquo;main &amp;ldquo;中，你使用 &amp;ldquo;xml &amp;ldquo;和 &amp;ldquo;template &amp;ldquo;函数建立绘图，用 &amp;ldquo;spit &amp;ldquo;将绘图写入一个文件，然后用 &amp;ldquo;browse/browse-url &amp;ldquo;打开它。你现在应该试试! 运行&lt;code>lein run&lt;/code>，你会看到类似图 6-2 的东西。&lt;/p>
&lt;p>图 6-2: 抢劫模式的最终 SVG!&lt;/p>
&lt;p>等一下 ……这看起来很像 ……这看起来很像一个 lambda。Clojure 的标志是一个 lambda . ……哦，我的天啊! Clojure，一直以来都是你!&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中你学到了很多东西。在这一点上，你应该拥有所有你需要的工具来开始组织你的项目。你现在知道命名空间组织了符号和 vars 之间的 Map，vars 是对 Clojure 对象（数据结构、函数等）的引用。 &lt;code>def&lt;/code>存储一个对象，并用符号和指向该对象的 var 之间的 Map 来更新当前命名空间。你可以用&lt;code>defn-&lt;/code>创建私有函数。&lt;/p>
&lt;p>Clojure 允许你用&lt;code>create-ns&lt;/code>创建命名空间，但通常使用&lt;code>in-ns&lt;/code>更有用，它也会切换到命名空间。你可能只在 REPL 中使用这些函数。当你在 REPL 中时，你总是&lt;em>在&lt;/em>当前命名空间中。当你在文件中而不是在 REPL 中定义名字空间时，你应该使用 &lt;code>ns&lt;/code> 宏，名字空间和它在文件系统中的路径之间是一对一的关系。&lt;/p>
&lt;p>你可以通过使用完全限定的名称来引用其他命名空间中的对象，如&lt;code>cheese.taxonomy/cheddars&lt;/code>。 &lt;code>refer&lt;/code>可以让你使用其他命名空间的名字，而不需要完全限定它们，&lt;code>alias&lt;/code>可以让你在写出完全限定的名字时，使用一个更短的名字来命名空间。&lt;/p>
&lt;p>&lt;code>require&lt;/code>和&lt;code>use&lt;/code>确保一个名字空间的存在并准备好被使用，并且可以选择让你&lt;code>refer&lt;/code>和&lt;code>alias&lt;/code>相应的名字空间。你应该使用&lt;code>ns&lt;/code>在你的源文件中调用&lt;code>require&lt;/code>和&lt;code>use&lt;/code>。*&lt;a class="link" href="https://gist.github.com/ghoseb/287710/" target="_blank" rel="noopener"
>Clojure ns syntax cheat-sheet - GitHub&lt;/a>*是使用&lt;code>ns&lt;/code>的所有变化的一个很好的参考。&lt;/p>
&lt;p>最后，也是最重要的一点，做一个俗气的人并不容易。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/organization/cheese.png"
loading="lazy"
>&lt;/p></description></item><item><title>Chapter5 函数式编程</title><link>https://example.com/p/chapter5-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link><pubDate>Fri, 14 Jan 2022 10:00:07 +0800</pubDate><guid>https://example.com/p/chapter5-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid><description>&lt;h1 id="函数式编程">函数式编程&lt;/h1>
&lt;p>到目前为止，你已经专注于熟悉 Clojure 提供的工具：不可变的数据结构、函数、抽象，等等。在这一章中，你将学习如何思考你的编程任务，以最好的方式利用这些工具。你将开始把你的经验整合到一个新的函数式编程思维中。&lt;/p>
&lt;p>你将学到的核心概念包括：什么是纯函数，为什么它们很有用；如何使用不可变的数据结构，为什么它们比可变的表亲更有优势；如何将数据和函数分开，给你带来更多的力量和灵活性；以及为什么对一小部分数据抽象进行编程会很强大。一旦你把所有这些知识塞进你的大脑，你就会有一个全新的解决问题的方法&lt;/p>
&lt;p>在学习了这些主题之后，你将通过编写一个基于终端的游戏来运用你所学到的一切，这个游戏的灵感来自于美国各地 Cracker Barrel 餐馆中的一种古老而神秘的思维训练装置。Peg Thing!&lt;/p>
&lt;h2 id="纯函数是什么和为什么">纯函数：是什么和为什么&lt;/h2>
&lt;p>除了 &amp;ldquo;println &amp;ldquo;和 &amp;ldquo;rand&amp;rdquo;，到目前为止，你所使用的所有函数都是纯函数。是什么使它们成为纯函数，为什么会有这样的问题？如果一个函数符合两个条件，它就是纯函数。&lt;/p>
&lt;ul>
&lt;li>如果给出相同的参数，它总是返回相同的结果。这被称为&lt;em>引用透明度&lt;/em>，你可以把它添加到你的 5 美元编程术语列表中。&lt;/li>
&lt;li>它不能引起任何副作用。也就是说，该函数不能做出任何在函数本身之外可以观察到的改变&amp;ndash;例如，通过改变一个外部可访问的可改变对象或写到一个文件。&lt;/li>
&lt;/ul>
&lt;p>这些特性使你更容易推理你的程序，因为这些函数是完全隔离的，无法影响你系统的其他部分。当你使用它们时，你不必问自己，&amp;ldquo;我调用这个函数会破坏什么？&amp;rdquo; 它们也是一致的：你永远不需要搞清楚为什么给一个函数传递相同的参数会导致不同的返回值，因为这永远不会发生。&lt;/p>
&lt;p>纯函数和算术一样稳定，没有问题（你最后一次为两个数字相加而烦恼是什么时候？） 它们是巨大的函数小砖块，你可以自信地将其作为你程序的基础。让我们更详细地看看引用透明性和无副作用，看看它们到底是什么，以及它们是如何发挥作用的。&lt;/p>
&lt;h3 id="纯函数是引用透明的">纯函数是引用透明的&lt;/h3>
&lt;p>为了在调用相同参数时返回相同的结果，纯函数只依靠 1）自己的参数和 2）不可变的值来决定其返回值。例如，数学函数是引用透明的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果一个函数依赖于一个不可变的值，那么它就是引用透明的。字符串`&amp;rdquo;, Daniel-san &amp;ldquo;是不可变的，所以下面的函数也是引用透明的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">wisdom&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">words&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="nv">words&lt;/span> &lt;span class="s">&amp;#34;, Daniel-san&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">wisdom&lt;/span> &lt;span class="s">&amp;#34;Always bathe on Fridays&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Always bathe on Fridays, Daniel-san&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比之下，下面的函数在相同的参数下不会产生相同的结果；因此，它们在指称上是不透明的。任何依赖随机数生成器的函数都不可能是指称透明的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">year-end-evaluation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">rand&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;You get a raise!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Better luck next year!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你的函数从一个文件中读出，它就不是引用透明的，因为文件的内容可以改变。下面的函数&lt;code>analyze-file&lt;/code>不是引用透明的，但函数&lt;code>analysis&lt;/code>是透明的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">analyze-file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">filename&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">analysis&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">slurp &lt;/span>&lt;span class="nv">filename&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">analysis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">text&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="s">&amp;#34;Character count: &amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">count &lt;/span>&lt;span class="nv">text&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当使用一个引用透明的函数时，你永远不必考虑哪些可能的外部条件会影响函数的返回值。如果你的函数在多个地方被使用，或者它被深深地嵌套在一个函数调用链中，这一点就特别重要。在这两种情况下，你可以高枕无忧地知道，外部条件的变化不会导致你的代码中断。&lt;/p>
&lt;p>另一种思考方式是，现实在很大程度上是引用透明的。如果你把重力看作一个函数，那么引力就是在两个物体上调用该函数的返回值。因此，当你下次参加编程面试时，你可以通过把面试官桌上的东西打掉来证明你的函数式编程知识（这也证明你知道如何在一个集合上应用一个函数）。&lt;/p>
&lt;h3 id="纯函数没有副作用">纯函数没有副作用&lt;/h3>
&lt;p>执行副作用就是在一个给定的范围内改变一个名字和它的值之间的关联。下面是一个 JavaScript 的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">haplessObject&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">emotion&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s">&amp;#34;Carefree!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">evilMutator&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">object&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">object.emotion&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="s">&amp;#34;So emo :&amp;#39;(&amp;#34;&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">evilMutator&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">haplessObject&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">haplessObject.emotion&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">//&lt;/span> &lt;span class="nv">=&amp;gt;&lt;/span> &lt;span class="s">&amp;#34;So emo :&amp;#39;(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，你的程序必须要有一些副作用。它写入磁盘，改变了文件名和磁盘扇区集合之间的关联；它改变了显示器像素的 RGB 值；等等。否则，运行它就没有意义了。&lt;/p>
&lt;p>然而，副作用是潜在的有害的，因为它们带来了关于你的代码中的名称所指的不确定性。这就导致了很难追踪为什么以及如何将一个名字与一个值联系起来的情况，这就使程序的调试变得非常困难。当你调用一个没有副作用的函数时，你只需要考虑输入和输出之间的关系。你不必担心其他可能在你的系统中出现的变化。&lt;/p>
&lt;p>另一方面，有副作用的函数给你的思想葡萄带来了更多的负担：现在你必须担心当你调用这个函数时，世界是如何受到影响的。不仅如此，每一个依赖于副作用函数的函数都会被这种担忧所感染；它也会成为你在构建程序时需要格外小心和思考的另一个组件。&lt;/p>
&lt;p>如果你有使用 Ruby 或 JavaScript 等语言的重要经验，你可能已经遇到了这个问题。当一个对象被传来传去的时候，它的属性不知不觉地发生了变化，而你却不知道为什么。然后你不得不买一台新的电脑，因为你把你的电脑扔到了窗外。如果你读过任何关于面向对象设计的文章，你就会知道，很多文章都是关于管理状态和减少副作用的策略，正是因为这个原因。&lt;/p>
&lt;p>由于所有这些原因，在你的代码中寻找限制使用副作用的方法是个好主意。幸运的是，Clojure 通过不遗余力地限制副作用来使你的工作变得更容易&amp;ndash;它的所有核心数据结构都是不可改变的。无论你如何努力，你都无法在原地改变它们。然而，如果你不熟悉不可变的数据结构，你可能会觉得你最喜欢的工具被剥夺了。你怎么能*做没有副作用的事情呢？好吧，这就是下一节要讲的内容! 这段话怎么样，嗯？诶？&lt;/p>
&lt;h2 id="与不可变的数据结构共处">与不可变的数据结构共处&lt;/h2>
&lt;p>不可变的数据结构确保你的代码不会有副作用。正如你现在衷心知道的，这是一件好事。但你如何在没有副作用的情况下完成任何事情呢？&lt;/p>
&lt;h3 id="递归而不是-forwhile">递归而不是 for/while&lt;/h3>
&lt;p>如果你曾经在 JavaScript 中写过这样的东西，请举手。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">wrestlers&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">getAlligatorWrestlers&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">totalBites&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">l&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">wrestlers.length&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">var &lt;/span>&lt;span class="nv">i=0&lt;/span>&lt;span class="c1">; i &amp;lt; l; i++){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">totalBites&lt;/span> &lt;span class="nv">+=&lt;/span> &lt;span class="nv">wrestlers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nv">.timesBitten&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">allPatients&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">getArkhamPatients&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">analyzedPatients&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var &lt;/span>&lt;span class="nv">l&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">allPatients.length&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">var &lt;/span>&lt;span class="nv">i=0&lt;/span>&lt;span class="c1">; i &amp;lt; l; i++){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">allPatients&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nv">.analyzed&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">analyzedPatients.push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">allPatients&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">i&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="c1">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意这两个例子都对循环变量&lt;code>i&lt;/code>以及循环外的一个变量（第一个例子中的&lt;code>totalBites&lt;/code>和第二个例子中的&lt;code>analyzedPatients&lt;/code>）产生了副作用。以这种方式使用副作用&amp;ndash;改变***内部的变量&amp;ndash;是相当无害的。你在创造新的值，而不是改变你从程序中其他地方得到的对象。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/functional-programming/bloodthunder.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>但是 Clojure 的核心数据结构甚至不允许这些无害的变异。那么，你能做什么呢？首先，忽略一个事实，你可以很容易地使用&lt;code>map&lt;/code>和&lt;code>reduce&lt;/code>来完成前面的工作。在这些情况下&amp;ndash;对一些集合进行迭代以建立一个结果&amp;ndash;替代突变的函数是递归。&lt;/p>
&lt;p>让我们看一下第一个例子，建立一个总和。Clojure 没有赋值运算符。如果不创建一个新的作用域，你就无法将一个新的值与一个名字联系起来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">great-baby-name&lt;/span> &lt;span class="s">&amp;#34;Rosanthony&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">great-baby-name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Rosanthony&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">great-baby-name&lt;/span> &lt;span class="s">&amp;#34;Bloodthunder&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">great-baby-name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Bloodthunder&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">great-baby-name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Rosanthony&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，你首先在全局作用域中将 &amp;ldquo;great-baby-name &amp;ldquo;与 &amp;ldquo;Rosanthony &amp;ldquo;绑定。接下来，你用&lt;code>let&lt;/code>引入一个新的作用域。在这个作用域中，你将&lt;code>great-baby-name&lt;/code>绑定到&lt;code>&amp;quot;Bloodthunder&amp;quot;&lt;/code>。一旦 Clojure 完成了对&lt;code>let&lt;/code>表达式的求值，你就回到了全局范围，&lt;code>great-baby-name&lt;/code>再次被求值为&lt;code>&amp;quot;Rosanthony&amp;quot;&lt;/code>。&lt;/p>
&lt;p>Clojure 让你用递归来解决这个明显的限制。下面的例子显示了解决递归问题的一般方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">sum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➊&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="nb">vals &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nb">vals &lt;/span>&lt;span class="nv">accumulating-total&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➋&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty?&lt;/span> &lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">accumulating-total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">rest &lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">accumulating-total&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数需要两个参数，一个要处理的集合（&lt;code>vals&lt;/code>）和一个累加器（&lt;code>accumulating-total&lt;/code>），它使用了 arity 重载（在第三章有介绍），在➊为&lt;code>accumulating-total&lt;/code>提供一个默认值&lt;code>0&lt;/code>。&lt;/p>
&lt;p>像所有的递归解决方案一样，这个函数根据一个基本条件检查它所处理的参数。在这种情况下，我们检查&lt;code>vals&lt;/code>在➋是否为空。如果是，我们知道我们已经处理了集合中的所有元素，所以我们返回`累计-总数&amp;rsquo;。&lt;/p>
&lt;p>如果&lt;code>vals&lt;/code>不是空的，意味着我们还在处理这个序列，所以我们递归调用&lt;code>sum&lt;/code>，给它传递两个参数：用&lt;code>(其余的vals)&lt;/code>表示 vals 的*尾部，用&lt;code>(+(第一个vals)累加总数)&lt;/code>表示&lt;code>vals&lt;/code>的第一个元素与累加总数之和。通过这种方式，我们建立了&lt;code>累积总数&lt;/code>，同时减少&lt;code>vals&lt;/code>，直到它达到空集合的基本情况。&lt;/p>
&lt;p>下面是递归函数调用的情况，如果我们把它每次递归的情况分开，就会是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">39&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="c1">; single-arity body calls two-arity body&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">39&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">39&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">44&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; base case is reached, so return accumulating-total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 45&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对&lt;code>sum&lt;/code>的每次递归调用都会创建一个新的作用域，其中&lt;code>vals&lt;/code>和&lt;code>accumulating-total&lt;/code>被绑定到不同的值上，所有这些都不需要改变最初传递给函数的值或执行任何内部变异。正如你所看到的，你可以在没有突变的情况下顺利完成。&lt;/p>
&lt;p>请注意，出于性能的考虑，在进行递归时，你一般应该使用&lt;code>recur&lt;/code>。原因是 Clojure 不提供尾部调用的优化，这个话题我不会再提了！（请查看这个网址）。(查看这个网址以了解更多信息。&lt;em>&lt;a class="link" href="http://en.wikipedia.org/wiki/Tail_call" target="_blank" rel="noopener"
>http://en.wikipedia.org/wiki/Tail_call&lt;/a>&lt;/em>）。所以你可以用&lt;code>recur&lt;/code>来做这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">sum&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">sum&lt;/span> &lt;span class="nb">vals &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nb">vals &lt;/span>&lt;span class="nv">accumulating-total&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty?&lt;/span> &lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">accumulating-total&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recur&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">rest &lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">vals&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">accumulating-total&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你在一个小的集合上进行递归操作，使用&lt;code>recur&lt;/code>并不重要，但如果你的集合包含数千或数百万个值，你肯定需要使用&lt;code>recur&lt;/code>，这样你就不会因为堆栈溢出而使程序爆炸。&lt;/p>
&lt;p>最后一件事! 你可能会说，&amp;ldquo;等一下，如果我最终创造了成千上万的中间值怎么办？这不会因为垃圾收集或其他原因导致程序崩溃吗？&amp;rdquo;&lt;/p>
&lt;p>非常好的问题，鹰眼的读者! 答案是否定的。原因是，在幕后，Clojure 的不可变数据结构是使用&lt;em>结构共享&lt;/em>实现的，这完全超出了本书的范围。这有点像 Git! 如果你想了解更多，请阅读这篇伟大的文章。&lt;em>&lt;a class="link" href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="noopener"
>http://hypirion.com/musings/understanding-persistent-vector-pt-1&lt;/a>&lt;/em>。&lt;/p>
&lt;h3 id="函数组合而不是属性突变">函数组合而不是属性突变&lt;/h3>
&lt;p>你可能习惯于使用突变的另一种方式是建立起一个对象的最终状态。在下面的 Ruby 例子中，&lt;code>GlamourShotCaption&lt;/code>对象使用突变来清理输入，删除尾部的空格并将`&amp;ldquo;lol &amp;ldquo;大写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">class &lt;/span>&lt;span class="nv">GlamourShotCaption&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">attr_reader&lt;/span> &lt;span class="ss">:text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def &lt;/span>&lt;span class="nv">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">@&lt;/span>&lt;span class="nv">text&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">clean!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">private&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def &lt;/span>&lt;span class="nv">clean!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">text.trim!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">text.gsub!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">/lol/&lt;/span>, &lt;span class="s">&amp;#34;LOL&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">best&lt;/span> &lt;span class="nb">= &lt;/span>&lt;span class="nv">GlamourShotCaption.new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;My boa constrictor is so sassy lol! &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">best.text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;My boa constrictor is so sassy LOL!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这段代码中，&lt;code>GlamourShotCaption&lt;/code>类封装了如何清理魅力镜头标题的知识。在创建&lt;code>GlamourShotCaption&lt;/code>对象时，你将文本分配给一个实例变量，并逐步改变它。&lt;/p>
&lt;p>清单 5-1 显示了你如何在 Clojure 中做到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">require&lt;/span> &lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">clojure.string&lt;/span> &lt;span class="ss">:as&lt;/span> &lt;span class="nv">s&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">clean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">text&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">s/replace&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">s/trim&lt;/span> &lt;span class="nv">text&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;lol&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;LOL&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">clean&lt;/span> &lt;span class="s">&amp;#34;My boa constrictor is so sassy lol! &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;My boa constrictor is so sassy LOL!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>5-1. 使用函数组合来修改一个迷人的镜头标题&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/functional-programming/glamour-boa.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>在第一行，我们使用&lt;code>require&lt;/code>来访问字符串函数库（我将在第六章讨论这个函数和相关概念）。除此之外，这段代码很简单。不需要变异。&lt;code>clean&lt;/code>函数的工作方式是将一个不可变的值&lt;code>text&lt;/code>传递给一个纯函数&lt;code>s/trim&lt;/code>，该函数返回一个不可变的值（&lt;code>&amp;quot;我的蟒蛇真时髦 lol!&amp;quot;&lt;/code>；字符串末尾的空格已经被修剪）。然后，该值被传递给纯函数&lt;code>s/replace&lt;/code>，该函数返回另一个不可变的值（&amp;ldquo;我的蟒蛇是如此的时髦 LOL！&amp;quot;）。&lt;/p>
&lt;p>像这样组合函数&amp;ndash;使一个函数的返回值作为参数传递给另一个函数&amp;ndash;被称为&lt;em>函数组合&lt;/em>。事实上，这与之前使用递归的例子并没有什么不同，因为递归不断地将一个函数的结果传递给另一个函数；它只是碰巧是同一个函数。一般来说，函数式编程鼓励你通过组合更简单的函数来建立更复杂的函数。&lt;/p>
&lt;p>这种比较也开始揭示了面向对象编程（OOP）的一些限制。在 OOP 中，类的主要目的之一是防止对私有数据进行不必要的修改&amp;ndash;这在不可变的数据结构中是没有必要的。你还必须将方法与类紧密结合，从而限制了方法的可重用性。在 Ruby 的例子中，你必须做额外的工作来重复使用&lt;code>clean!&lt;/code>方法。在 Clojure 中，`clean&amp;rsquo;可以对任何字符串起作用。通过 a）将函数和数据解耦，以及 b）根据一组小的抽象进行编程，你最终会得到更多可重用的、可组合的代码。你获得了力量，却没有损失。&lt;/p>
&lt;p>除了直接的实际问题之外，你写面向对象的代码和函数式代码的方式之间的差异指向了两种思维方式之间更深层次的差异。编程是为了你自己邪恶的目的而操纵数据（就像你可以说它是&lt;em>关于&lt;/em>任何东西）。在 OOP 中，你把数据看成是可以体现在一个对象中的东西，你戳戳点点，直到它看起来合适。在这个过程中，你的原始数据会永远丢失，除非你非常小心地保存它。相比之下，在函数式编程中，你认为数据是不变的，你从现有的数据中导出新的数据。在这个过程中，原始数据仍然安全无恙。在前面的 Clojure 例子中，原始标题不会被修改。它是安全的，就像当你把数字加在一起时是安全的一样；当你把 3 加进去时，你不会以某种方式把 4 变成 7。&lt;/p>
&lt;p>一旦你有信心使用不可变的数据结构来完成工作，你会感到更加自信，因为你不必担心有什么肮脏的代码会在你宝贵的、可变的变量上沾上油腻的爪子。这将是很好的!&lt;/p>
&lt;h2 id="用纯函数做的酷事">用纯函数做的酷事&lt;/h2>
&lt;p>你可以从现有的函数中派生出新的函数，就像你从现有的数据中派生出新的数据一样。你已经看到了一个函数，&lt;code>partial&lt;/code>，它可以创建新的函数。本节将向你介绍另外两个函数, &lt;code>comp&lt;/code>和&lt;code>memoize&lt;/code>, 它们依赖于引用透明性, 不变性, 或两者兼有.&lt;/p>
&lt;h3 id="comp">comp&lt;/h3>
&lt;p>像我们在上一节中所做的那样，对纯函数进行组合总是安全的，因为你只需要担心它们的输入/输出关系。组合函数是如此的普遍，以至于 Clojure 提供了一个函数&lt;code>comp&lt;/code>，用于从任意数量的函数组合中创建一个新的函数。下面是一个简单的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">((&lt;/span>&lt;span class="nb">comp inc &lt;/span>&lt;span class="nv">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 7&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里，你通过组合&lt;code>inc&lt;/code>和&lt;code>*&lt;/code>函数来创建一个匿名函数。然后，你立即将这个函数应用于参数&lt;code>2&lt;/code>和&lt;code>3&lt;/code>。该函数将数字 2 和 3 相乘，然后将结果递增。使用数学符号，你会说，一般来说，对函数&lt;em>f&lt;/em>1, &lt;em>f&lt;/em>2, &amp;hellip; &lt;em>f&lt;/em>n，创建一个新的函数&lt;em>g&lt;/em>，使得&lt;em>g&lt;/em>(&lt;em>x&lt;/em>1, &lt;em>x&lt;/em>2, &amp;hellip; &lt;em>x&lt;/em>n)等于&lt;em>f&lt;/em>1( &lt;em>f&lt;/em>2( &lt;em>f&lt;/em>n(&lt;em>x&lt;/em>1, &lt;em>x&lt;/em>2, &amp;hellip; &lt;em>x&lt;/em>n))。这里需要注意的一个细节是，第一个应用的函数&amp;ndash;这里显示的代码中的&lt;code>*&lt;/code>&amp;ndash;可以接受任何数量的参数，而其余的函数必须只能接受一个参数。&lt;/p>
&lt;p>下面是一个例子，说明如何使用&lt;code>comp&lt;/code>来检索角色扮演游戏中的角色属性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">character&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;Smooches McCutes&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:attributes&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:intelligence&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:strength&lt;/span> &lt;span class="mi">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:dexterity&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">}})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">c-int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">comp &lt;/span>&lt;span class="ss">:intelligence&lt;/span> &lt;span class="ss">:attributes&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">c-str&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">comp &lt;/span>&lt;span class="ss">:strength&lt;/span> &lt;span class="ss">:attributes&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">c-dex&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">comp &lt;/span>&lt;span class="ss">:dexterity&lt;/span> &lt;span class="ss">:attributes&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">c-int&lt;/span> &lt;span class="nv">character&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">c-str&lt;/span> &lt;span class="nv">character&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">c-dex&lt;/span> &lt;span class="nv">character&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，你创建了三个函数来帮助你查询一个角色的属性。你可以不使用&lt;code>comp&lt;/code>，而是为每个属性写成这样的东西。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">c&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:strength&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:attributes&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但&lt;code>comp&lt;/code>更优雅，因为它用更少的代码来表达更多的意思。当你看到 &lt;code>comp&lt;/code>时，你立即知道所产生的函数的目的是以一种众所周知的方式组合现有的函数。&lt;/p>
&lt;p>如果你想组合的一个函数需要接受一个以上的参数，你会怎么做？你把它包在一个匿名函数中。请看下面这个片段，它根据你的角色的智力属性来计算她的法术槽的数量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">spell-slots&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">char&lt;/span>&lt;span class="err">］&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">int &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">c-int&lt;/span> &lt;span class="nv">char&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">spell-slots&lt;/span> &lt;span class="nv">character&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 6&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先，你用智力除以 2，然后加 1，然后用&lt;code>int&lt;/code>函数来取整。下面是你如何用&lt;code>comp&lt;/code>做同样的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">spell-slots-comp&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">comp int inc &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="nv">%&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">c-int&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要除以 2，你所要做的就是把除法包在一个匿名函数中。&lt;/p>
&lt;p>Clojure 的&lt;code>comp&lt;/code>函数可以组成任何数量的函数。为了了解它是如何做到这一点的，这里有一个实现，它只组合了两个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">two-comp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">f&lt;/span> &lt;span class="nv">g&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nv">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">f&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">apply &lt;/span>&lt;span class="nv">g&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我鼓励你求值这段代码，并使用&lt;code>two-comp&lt;/code>来组合两个函数! 另外，尝试重新实现 Clojure 的&lt;code>comp&lt;/code>函数，这样你就可以组成任何数量的函数。&lt;/p>
&lt;h3 id="记忆化">记忆化&lt;/h3>
&lt;p>你可以用纯函数做的另一件很酷的事情是对它们进行备忘，这样 Clojure 就会记住某个特定函数调用的结果。你可以这样做，因为正如你前面所学到的，纯函数在指代上是透明的。例如，&lt;code>+&lt;/code>是指代透明的。你可以把&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>替换为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而程序会有相同的行为。&lt;/p>
&lt;p>Memoization 让你通过存储传递给函数的参数和函数的返回值来利用引用的透明度。这样一来，以后用相同的参数调用该函数就可以立即返回结果。这对于需要大量时间运行的函数特别有用。例如，在这个没有备忘录的函数中，结果在一秒钟后被返回。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">sleepy-identity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Returns the given value after 1 second&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">Thread/sleep&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sleepy-identity&lt;/span> &lt;span class="s">&amp;#34;Mr. Fantastico&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Mr. Fantastico&amp;#34; after 1 second&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">sleepy-identity&lt;/span> &lt;span class="s">&amp;#34;Mr. Fantastico&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Mr. Fantastico&amp;#34; after 1 second&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，如果你用&lt;code>memoize&lt;/code>创建一个新的、记忆化的&lt;code>sleepy-identity&lt;/code>版本，只有第一次调用会等待一秒钟；随后的每个函数调用会立即返回。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">memo-sleepy-identity&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">memoize&lt;/span> &lt;span class="nv">sleepy-identity&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">memo-sleepy-identity&lt;/span> &lt;span class="s">&amp;#34;Mr. Fantastico&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Mr. Fantastico&amp;#34; after 1 second&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">memo-sleepy-identity&lt;/span> &lt;span class="s">&amp;#34;Mr. Fantastico&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;Mr. Fantastico&amp;#34; immediately&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>很酷啊! 从这里开始，&lt;code>memo-sleepy-identity&lt;/code>在调用`&amp;ldquo;Mr.Fantastico &amp;ldquo;时将不会产生最初的一秒钟的费用。这个实现对于那些计算密集型的函数或者提出网络请求的函数很有用。&lt;/p>
&lt;h2 id="peg-thing">Peg Thing&lt;/h2>
&lt;p>是时候了! 是时候用你到目前为止所学到的一切来构建 Peg Thing 的终端实现了：不可变的数据结构、懒惰序列、纯函数、递归&amp;ndash;一切！这将有助于你理解如何将这些概念和技术结合起来解决更大的问题。这样做将帮助你理解如何结合这些概念和技术来解决更大的问题。最重要的是，你将学会如何对玩家的每一次移动所产生的变化进行建模，而不必像在 OOP 中那样对对象进行变异。&lt;/p>
&lt;p>为了构建游戏，你将首先学习游戏的机制以及如何启动和播放程序。然后，我将解释代码的组织。最后，我将对每个函数进行讲解。&lt;/p>
&lt;p>你可以在*&lt;a class="link" href="https://www.nostarch.com/clojure/" target="_blank" rel="noopener"
>https://www.nostarch.com/clojure/&lt;/a>*找到 Peg Thing 的完整代码库。&lt;/p>
&lt;h2 id="播放">播放&lt;/h2>
&lt;p>如前所述，Peg Thing 是基于从古至今流传下来的秘密思维磨练工具，现在由 Cracker Barrel 发行。&lt;/p>
&lt;p>如果你不熟悉这个游戏，以下是游戏的机制。你开始时有一个三角形的棋盘，上面布满了钉子的孔，其中一个孔缺少一个钉子，如图 5-1 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/functional-programming/peg-thing-starting.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 5-1：Peg Thing 的初始设置&lt;/p>
&lt;p>游戏的目的是尽可能多地移除钉子。你通过*跳过钉子来实现这一目标。在图 5-2 中，图钉 A 跳过图钉 B 进入空洞，你就把图钉 B 从棋盘上移走。&lt;/p>
&lt;p>&lt;a class="link" href="https://www.braveclojure.com/assets/images/cftbat/functional-programming/peg-thing-jumping.png" target="_blank" rel="noopener"
>img&lt;/a>&lt;/p>
&lt;p>图 5-2：跳过一个钉子，把它从棋盘上移走。&lt;/p>
&lt;p>要启动 Peg Thing，请下载代码，然后在&lt;em>pegthing&lt;/em>目录下的终端运行&lt;code>lein run&lt;/code>。出现一个提示，看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Get&lt;/span> &lt;span class="nv">ready&lt;/span> &lt;span class="nv">to&lt;/span> &lt;span class="nv">play&lt;/span> &lt;span class="nv">Peg&lt;/span> &lt;span class="nv">Thing!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">How&lt;/span> &lt;span class="nv">many&lt;/span> &lt;span class="nv">rows?&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以输入棋盘的行数，使用&lt;code>5&lt;/code>作为默认值。如果你想要五行，就按回车键（否则，输入一个数字并按回车键）。然后你会看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Here&lt;/span>&lt;span class="ss">&amp;#39;s&lt;/span> &lt;span class="nv">your&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="err">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">a0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">b0&lt;/span> &lt;span class="nv">c0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">d0&lt;/span> &lt;span class="nv">e0&lt;/span> &lt;span class="nv">f0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">g0&lt;/span> &lt;span class="nv">h0&lt;/span> &lt;span class="nv">i0&lt;/span> &lt;span class="nv">j0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">k0&lt;/span> &lt;span class="nv">l0&lt;/span> &lt;span class="nv">m0&lt;/span> &lt;span class="nv">n0&lt;/span> &lt;span class="nv">o0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Remove&lt;/span> &lt;span class="nv">which&lt;/span> &lt;span class="nv">peg?&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">e&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每个字母代表棋盘上的一个位置。数字&lt;code>0&lt;/code>（应该是蓝色的，但如果不是，也没什么大不了的）表示一个位置被填满。在游戏开始之前，必须有一个钉子是空的，所以提示要求你输入第一个要移除的钉子的位置。默认是中间的钉子，`e&amp;rsquo;，但你可以选择一个不同的位置。移走棋子后，你会看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Here&lt;/span>&lt;span class="ss">&amp;#39;s&lt;/span> &lt;span class="nv">your&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="err">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">a0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">b0&lt;/span> &lt;span class="nv">c0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">d0&lt;/span> &lt;span class="nv">e-&lt;/span> &lt;span class="nv">f0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">g0&lt;/span> &lt;span class="nv">h0&lt;/span> &lt;span class="nv">i0&lt;/span> &lt;span class="nv">j0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">k0&lt;/span> &lt;span class="nv">l0&lt;/span> &lt;span class="nv">m0&lt;/span> &lt;span class="nv">n0&lt;/span> &lt;span class="nv">o0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Move&lt;/span> &lt;span class="nv">from&lt;/span> &lt;span class="nv">where&lt;/span> &lt;span class="nv">to&lt;/span> &lt;span class="nv">where?&lt;/span> &lt;span class="nv">Enter&lt;/span> &lt;span class="nv">two&lt;/span> &lt;span class="nv">letters&lt;/span>&lt;span class="err">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，&lt;code>e&lt;/code>位置现在有一个破折号，&lt;code>-&lt;/code>（应该是红色的，但如果不是，也没什么大不了的）。这个破折号表示这个位置是空的。要移动，你要输入你想*拿起的棋子的位置，然后是你想把它放在的空位置的位置。例如，如果你输入`le&amp;rsquo;，你会得到这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Here&lt;/span>&lt;span class="ss">&amp;#39;s&lt;/span> &lt;span class="nv">your&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="err">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">a0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">b0&lt;/span> &lt;span class="nv">c0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">d0&lt;/span> &lt;span class="nv">e0&lt;/span> &lt;span class="nv">f0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">g0&lt;/span> &lt;span class="nv">h-&lt;/span> &lt;span class="nv">i0&lt;/span> &lt;span class="nv">j0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">k0&lt;/span> &lt;span class="nv">l-&lt;/span> &lt;span class="nv">m0&lt;/span> &lt;span class="nv">n0&lt;/span> &lt;span class="nv">o0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Move&lt;/span> &lt;span class="nv">from&lt;/span> &lt;span class="nv">where&lt;/span> &lt;span class="nv">to&lt;/span> &lt;span class="nv">where?&lt;/span> &lt;span class="nv">Enter&lt;/span> &lt;span class="nv">two&lt;/span> &lt;span class="nv">letters&lt;/span>&lt;span class="err">:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你把棋子从&lt;code>l&lt;/code>移到&lt;code>e&lt;/code>，跳过&lt;code>h&lt;/code>，根据图 5-2 所示的规则移走它的棋子。游戏继续提示你走棋，直到没有棋子可用为止，这时它就会提示你再次下棋。&lt;/p>
&lt;h3 id="代码组织">代码组织&lt;/h3>
&lt;p>该程序必须处理四个主要任务，源代码也相应地组织起来，每个任务的函数都归为一组。&lt;/p>
&lt;ol>
&lt;li>创建一个新的棋盘&lt;/li>
&lt;li>返回一个带有棋手行动结果的棋盘&lt;/li>
&lt;li>用文字表示棋盘&lt;/li>
&lt;li>处理用户互动&lt;/li>
&lt;/ol>
&lt;p>关于组织结构还有两点。首先，代码有一个基本的&lt;em>架构&lt;/em>，或概念性的组织，由两层组成。顶层由处理用户交互的函数组成。这些函数产生了程序的所有副作用，打印出棋盘并为玩家的互动提供提示。这一层的函数使用底层的函数来创建一个新的棋盘，进行移动，并创建一个文本表述，但底层的函数完全不使用顶层的函数。即使是这么小的程序，一个小小的架构也有助于使代码更容易管理。&lt;/p>
&lt;p>第二，我尽可能地将任务分解成小的函数，以便每个函数都做一个微小的、可理解的任务。其中一些函数只被另外一个函数使用。我发现这很有帮助，因为它可以让我为每个微小的子任务命名，使我能够更好地表达代码的意图。&lt;/p>
&lt;p>但在所有的架构之前，还有这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">pegthing.core&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">require&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">clojure.set&lt;/span> &lt;span class="ss">:as&lt;/span> &lt;span class="nv">set&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="ss">:gen-class&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">declare &lt;/span>&lt;span class="nv">successful-move&lt;/span> &lt;span class="nv">prompt-move&lt;/span> &lt;span class="nv">game-over&lt;/span> &lt;span class="nv">query-rows&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我将在第六章详细解释这里的函数。如果你好奇这是怎么回事，简短的解释是：&lt;code>(&lt;/code>require &lt;code>[&lt;/code>clojure&lt;code>.set :as set])&lt;/code>允许你轻松使用&lt;code>clojure.set&lt;/code>命名空间的函数，&lt;code>(:gen-class)&lt;/code>允许你从命令行运行程序，&lt;code>(declaration successful-move prompt-move game-over query-rows)&lt;/code>允许函数在被定义之前引用这些名称。如果这还不太明白，相信我很快就会解释。&lt;/p>
&lt;h3 id="创建棋盘">创建棋盘&lt;/h3>
&lt;p>你用来表示棋盘的数据结构应该使你能够很容易地打印棋盘，检查棋手是否下了一步有效的棋，实际执行一步棋，以及检查游戏是否结束。你可以用很多方式来构造棋盘，以实现这些任务。在这种情况下，你将用一个 Map 来表示棋盘，Map 上有对应于每个棋盘位置的数字键和包含该位置连接信息的值。该 Map 还将包含一个&lt;code>:rows&lt;/code>键，存储行的总数。图 5-3 显示了一个有每个位置编号的棋盘。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/functional-programming/peg-thing-data-structure.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 5-3：有编号的钉子板&lt;/p>
&lt;p>下面是为表示它而建立的数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">3&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">2&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="mi">5&lt;/span>, &lt;span class="mi">7&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">3&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">6&lt;/span>, &lt;span class="mi">8&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">13&lt;/span> &lt;span class="mi">8&lt;/span>, &lt;span class="mi">11&lt;/span> &lt;span class="mi">7&lt;/span>, &lt;span class="mi">6&lt;/span> &lt;span class="mi">5&lt;/span>, &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">5&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">14&lt;/span> &lt;span class="mi">9&lt;/span>, &lt;span class="mi">12&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">15&lt;/span> &lt;span class="mi">10&lt;/span>, &lt;span class="mi">13&lt;/span> &lt;span class="mi">9&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">5&lt;/span>, &lt;span class="mi">1&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">7&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="mi">8&lt;/span>, &lt;span class="mi">2&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">8&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="mi">9&lt;/span>, &lt;span class="mi">3&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">9&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">7&lt;/span> &lt;span class="mi">8&lt;/span>, &lt;span class="mi">2&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">8&lt;/span> &lt;span class="mi">9&lt;/span>, &lt;span class="mi">3&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">11&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">13&lt;/span> &lt;span class="mi">12&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">12&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">14&lt;/span> &lt;span class="mi">13&lt;/span>, &lt;span class="mi">5&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">13&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">15&lt;/span> &lt;span class="mi">14&lt;/span>, &lt;span class="mi">11&lt;/span> &lt;span class="mi">12&lt;/span>, &lt;span class="mi">6&lt;/span> &lt;span class="mi">9&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">14&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">12&lt;/span> &lt;span class="mi">13&lt;/span>, &lt;span class="mi">5&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">15&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">13&lt;/span> &lt;span class="mi">14&lt;/span>, &lt;span class="mi">6&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">}}&lt;/span>,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:rows&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能会想，为什么在你玩游戏的时候，每个位置都用字母表示，而在这里，位置却用数字表示。使用数字作为内部表示，可以让你在验证和下棋时利用棋盘布局的一些数学特性。另一方面，字母则更适合于显示，因为它们只占用一个字符空间。一些转换函数在&lt;a class="link" href="https://www.braveclojure.com/functional-programming/#Anchor-19" target="_blank" rel="noopener"
>第 120 页的 &amp;ldquo;渲染和打印棋盘&amp;rdquo;&lt;/a>中有所介绍。&lt;/p>
&lt;p>在数据结构中，每个位置都与一个 Map 相关联，其内容是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>, &lt;span class="ss">:connection&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">3&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}&lt;/span>&lt;span class="nv">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pegged &amp;ldquo;的含义很清楚；它表示该位置是否有一个钉子。`:connections&amp;rsquo;就比较隐蔽了。它是一个 Map，每个键标识一个&lt;em>合法的目的地，每个值代表&lt;/em>将被&lt;em>跳过的位置。例如，位置 1 的棋子可以&lt;/em>跳到*位置 6，&lt;em>越过&lt;/em>位置 3。这可能看起来很落后，但当你看到棋步验证是如何实现的时候，你就会明白其中的道理。&lt;/p>
&lt;p>现在你已经看到了代表棋盘的最终 Map 应该是什么样子的，我们可以开始探索在程序中实际建立这个 Map 的函数了。你不会简单地开始随意地分配可变状态来表示每个位置以及它是否被钉住。相反，你将使用嵌套的递归函数调用来逐个建立最终的棋盘位置。这类似于你之前创建魅力镜头标题的方式，通过将参数传递给一连串的函数，从输入中获得新的数据，从而得到最终结果。&lt;/p>
&lt;p>本节代码中的前几个表达式是关于三角形数的。三角形数是由前&lt;em>n&lt;/em>个自然数相加产生的。第一个三角数是 1，第二个是 3（1+2），第三个是 6（1+2+3），以此类推。这些数字很好地与棋盘上每一行末尾的位置数字相一致，这将成为一个非常有用的属性。首先，你定义了函数&lt;code>tri*&lt;/code>，它可以创建一个三角形数字的懒散序列。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">tri*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Generates 惰性序列uence of triangular numbers&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">tri*&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">sum&lt;/span> &lt;span class="nv">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">new-sum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">sum&lt;/span> &lt;span class="nv">n&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">cons &lt;/span>&lt;span class="nv">new-sum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">lazy-seq&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">tri*&lt;/span> &lt;span class="nv">new-sum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="p">)))))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>快速回顾一下工作原理，调用没有参数的&lt;code>tri*&lt;/code>会递归调用&lt;code>(tri* 0 1)&lt;/code>。这将返回一个懒惰列表，其元素是 &amp;ldquo;new-sum&amp;rdquo;，在本例中它的值为 &amp;ldquo;1&amp;rdquo;。懒惰列表包括一个配方，用于在请求时生成列表的下一个元素，如第四章所述。&lt;/p>
&lt;p>下一个表达式调用&lt;code>tri*&lt;/code>，实际上是创建懒惰序列并将其绑定到&lt;code>tri&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">tri&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">tri*&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以验证它是否真的有效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">take &lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="nv">tri&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; (1 3 6 10 15)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来的几个函数对三角形数的序列进行操作。&lt;code>triangular?&lt;/code>找出它的参数是否在&lt;code>tri&lt;/code>懒惰序列中。它通过使用&lt;code>take-while&lt;/code>创建一个三角形数列，其最后一个元素是一个小于或等于参数的三角形数。然后它将最后一个元素与参数进行比较。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">triangular?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Is the number triangular? e.g. 1, 3, 6, 10, 15, etc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="nv">n&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">last &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">take-while &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt;= &lt;/span>&lt;span class="nv">n&lt;/span> &lt;span class="nv">%&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">tri&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">triangular?&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">triangular?&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来是&lt;code>row-tri&lt;/code>，它接收一个行号，并给出该行末尾的三角形数字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">row-tri&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;The triangular number at the end of row n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">last &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">take &lt;/span>&lt;span class="nv">n&lt;/span> &lt;span class="nv">tri&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 6&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，还有&lt;code>row-num&lt;/code>，它接收一个棋盘位置，并返回它所属的行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">row-num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Returns row number the position belongs to: pos 1 in row 1,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> positions 2 and 3 in row 2, etc&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">count &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">take-while &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="nv">%&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">tri&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">row-num&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">row-num&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后是&lt;code>connect&lt;/code>，它被用来在两个位置之间实际形成相互连接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">connect&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Form a mutual connection between two positions&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span> &lt;span class="nv">neighbor&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;lt;= &lt;/span>&lt;span class="nv">destination&lt;/span> &lt;span class="nv">max-pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">new-board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="nv">new-board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">p1&lt;/span> &lt;span class="ss">:connections&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">neighbor&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">destination&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">board&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">connect&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {1 {:connections {4 2}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>connect&lt;/code>做的第一件事是检查目的地是否真的是棋盘上的一个位置，确认它是否小于棋盘的最大位置。例如，如果你有五行，最大位置是 15。然而，当游戏棋盘被创建时，&lt;code>connect&lt;/code>函数将被调用，参数为&lt;code>(connect {} 15 7 16 22)&lt;/code>。&lt;code>connect&lt;/code>开头的&lt;code>if&lt;/code>语句确保你的程序不允许这种离谱的连接，当你要求它做一些愚蠢的事情时，它只是返回未修改的棋盘。&lt;/p>
&lt;p>接下来，&lt;code>connect&lt;/code>通过&lt;code>reduce&lt;/code>使用递归，逐步建立起棋盘的最终状态。在这个例子中，你正在减少嵌套 Vector&lt;code>[[1 4] [4 1]]。这就是允许你返回一个更新的棋盘，&lt;/code>pos&amp;rsquo;和`destination&amp;rsquo;（1 和 4）在它们的连接中都指向对方。&lt;/p>
&lt;p>传给&lt;code>reduce&lt;/code>的匿名函数使用了一个你以前没有见过的函数&lt;code>assoc-in&lt;/code>。函数&lt;code>get-in&lt;/code>可以让你在嵌套的 Map 中查找值，而&lt;code>assoc-in&lt;/code>可以让你在指定的嵌套中返回一个带有给定值的新 Map。下面是几个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:cookie&lt;/span> &lt;span class="ss">:monster&lt;/span> &lt;span class="ss">:vocals&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="s">&amp;#34;Finntroll&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:cookie {:monster {:vocals &amp;#34;Finntroll&amp;#34;}}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">get-in&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:cookie&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:monster&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:vocals&lt;/span> &lt;span class="s">&amp;#34;Finntroll&amp;#34;&lt;/span>&lt;span class="p">}}}&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">:cookie&lt;/span> &lt;span class="ss">:monster&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:vocals &amp;#34;Finntroll&amp;#34;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="ss">:connections&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {1 {:connections {4 2}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这些例子中，你可以看到，新的、嵌套的 Map 被创建，以适应所有提供的键。&lt;/p>
&lt;p>现在我们有了一个连接两个位置的方法，但程序首先应该如何选择两个位置来连接呢？这由&lt;code>connect-right&lt;/code>、&lt;code>connect-down-left&lt;/code>和&lt;code>connect-down-right&lt;/code>来处理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">connect-right&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">neighbor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">destination&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">neighbor&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">if-not &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">or &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">triangular?&lt;/span> &lt;span class="nv">neighbor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">triangular?&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">connect&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span> &lt;span class="nv">neighbor&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">board&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">connect-down-left&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">row&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">row-num&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">neighbor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">row&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">destination&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="nv">row&lt;/span> &lt;span class="nv">neighbor&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">connect&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span> &lt;span class="nv">neighbor&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">connect-down-right&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">row&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">row-num&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">neighbor&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="nv">row&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">destination&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="nv">row&lt;/span> &lt;span class="nv">neighbor&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">connect&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span> &lt;span class="nv">neighbor&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些函数分别取了棋盘的最大位置和一个棋盘的位置，并使用一个小的三角形数学来计算出哪些数字要送入&lt;code>connect&lt;/code>。例如，&lt;code>connect-down-left&lt;/code>将试图连接位置 1 和位置 4。如果你想知道为什么没有定义&lt;code>connect-left&lt;/code>、&lt;code>connect-up-left&lt;/code>和&lt;code>connect-up-right&lt;/code>函数，原因是现有的函数实际上涵盖了这些情况。&lt;code>connect&lt;/code>返回一个建立了相互连接的棋盘；当 4&lt;em>向右&lt;/em>连接到 6 时，6&lt;em>向左&lt;/em>连接到 4。 下面是几个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">connect-down-left&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {1 {:connections {4 2}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">connect-down-right&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {3 {:connections {10 6}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，&lt;code>connect&lt;/code>-down-left&lt;code>接收一个最大位置为15的空棋盘，并返回一个新的棋盘，该棋盘上有1和它下面及左边的位置之间的相互连接。&lt;/code>connect&lt;code>-down-right&lt;/code>做了类似的事情，返回一个由 3 和它下面及右边的位置之间的相互连接组成的棋盘。&lt;/p>
&lt;p>下一个函数，`add-pos&amp;rsquo;，很有趣，因为它实际上是在一个&lt;em>函数&lt;/em>的 Vector 上进行还原，依次应用每个函数来建立结果的棋盘。但它首先更新棋盘，以表示一个棋子在给定的位置上。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">add-pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Pegs the position and performs connections&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">pegged-board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">true&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">new-board&lt;/span> &lt;span class="nv">connection-creation-fn&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">connection-creation-fn&lt;/span> &lt;span class="nv">new-board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pegged-board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">connect-right&lt;/span> &lt;span class="nv">connect-down-left&lt;/span> &lt;span class="nv">connect-down-right&lt;/span>&lt;span class="p">])))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">add-pos&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="mi">15&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">3&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>, &lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">4&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">6&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就像这个函数首先在&lt;code>pegged-board&lt;/code>绑定中说：&amp;ldquo;在棋盘的 X 位置添加一个钉子。&amp;rdquo; 然后，在 &amp;ldquo;reduce &amp;ldquo;中，它说：&amp;ldquo;在 X 的位置上采取新钉子的棋盘，并尝试将 X 的位置连接到一个合法的、向右的位置。取该操作产生的棋盘，并尝试将位置 X 连接到一个合法的、向左下方的位置。最后，取该*操作产生的棋盘，并尝试将位置 X 连接到合法的右下位置。返回所得到的棋盘&amp;rdquo;。&lt;/p>
&lt;p>像这样对函数进行还原是组成函数的另一种方式。为了说明这一点，下面是清单 5-1（&lt;a class="link" href="https://www.braveclojure.com/functional-programming/#Anchor-20" target="_blank" rel="noopener"
>第 103 页&lt;/a>）中定义&lt;code>clean&lt;/code>函数的另一种方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">clean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">text&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="nv">string-fn&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">string-fn&lt;/span> &lt;span class="nv">string&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">text&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">s/trim&lt;/span> &lt;span class="o">#&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">s/replace&lt;/span> &lt;span class="nv">%&lt;/span> &lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;lol&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;LOL&amp;#34;&lt;/span>&lt;span class="p">)]))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个对&lt;code>clean&lt;/code>的重新定义减少了一个函数 Vector，将第一个函数&lt;code>s/trim&lt;/code>应用于初始字符串，然后将下一个函数，匿名函数&lt;code>#(s/replace % #&amp;quot;lol&amp;quot; &amp;quot;LOL&amp;quot;)&lt;/code>，应用于结果。&lt;/p>
&lt;p>对一个函数集合进行缩减并不是一个你经常使用的技术，但它偶尔会很有用，而且它显示了函数式编程的多函数性。&lt;/p>
&lt;p>最后一个创建棋盘的函数是&lt;code>new-board&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">new-board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Creates a new board with the given number of rows&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">rows&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">initial-board&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:rows&lt;/span> &lt;span class="nv">rows&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">max-pos&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="nv">rows&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">add-pos&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">max-pos&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">initial-board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">range &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">max-pos&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码首先创建了初始的、空的棋盘，并得到了最大的位置。假设你使用的是 5 行，最大位置将是 15。接下来，该函数使用&lt;code>(range 1 (inc max-pos))&lt;/code>得到一个从 1 到 15 的数字列表，也就是棋盘的位置。最后，它对位置列表进行还原。缩减的每一次迭代都会调用&lt;code>(add-pos board max-pos pos)&lt;/code>，正如你前面所看到的，它获取一个现有的棋盘，并返回一个新的棋盘，并添加位置。&lt;/p>
&lt;h3 id="移动图钉">移动图钉&lt;/h3>
&lt;p>下一节代码将验证并执行钉子的移动。许多函数（&lt;code>pegged?&lt;/code>, &lt;code>remove-peg&lt;/code>, &lt;code>place-peg&lt;/code>, &lt;code>move-peg&lt;/code>）都是简单的、不言自明的单行代码。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">pegged?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Does the position have a peg in it?&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">remove-peg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Take the peg at given position out of the board&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">false&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">place-peg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Put a peg in the board at given position&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">true&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">move-peg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Take peg out of p1 and place it in p2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">place-peg&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">remove-peg&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们花点时间来欣赏一下这段代码是多么的整洁。在面向对象的程序中，你通常会在这里进行突变；毕竟，你还能如何改变棋盘？然而，这些都是纯函数，而且它们很好地完成了工作。我还喜欢你不需要类的开销来使用这些小家伙。这样的编程感觉更轻松。&lt;/p>
&lt;p>接下来是&lt;code>valid-moves&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">valid-moves&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Return a map of all valid moves for pos, where the key is the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> destination and the value is the jumped position&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">into &lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">filter &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="nv">destination&lt;/span> &lt;span class="nv">jumped&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">and &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">not &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">pegged?&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">destination&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">pegged?&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">jumped&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:connections&lt;/span>&lt;span class="p">]))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码浏览了给定位置的每个连接，并测试目的地位置是否为空，跳转的位置是否有钉子。为了看到这个动作，你可以创建一个 4 号位置为空的棋盘。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">my-board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc-in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">new-board&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">false&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>图 5-4 显示了这个棋盘的样子。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/functional-programming/peg-thing-valid-moves.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 5-4：4 号位置为空的钉子板&lt;/p>
&lt;p>考虑到这个棋盘，1、6、11 和 13 位有有效的棋步，但其他位置都没有。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {4 2}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {4 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {4 7}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能想知道为什么&lt;code>valid-moves&lt;/code>会返回一个 Map 而不是一个集合或 Vector。原因是，返回 Map 允许你轻松地查找目标位置，以检查特定的棋步是否有效，这就是&lt;code>valid-move?&lt;/code>（下一个函数）的作用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">valid-move?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Return jumped position if the move from p1 to p2 is valid, nil
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> otherwise&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">get &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-moves&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-move?&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">8&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">valid-move?&lt;/span> &lt;span class="nv">my-board&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，&lt;code>valid-move?&lt;/code>从 Map 上查找目标位置，然后返回将被跳过的钉子的位置。这是让&lt;code>valid-moves&lt;/code>返回 Map 的另一个很好的好处，因为从 Map 中获取的跳跃位置正是我们想要传递给下一个函数&lt;code>make-move&lt;/code>的东西。当你花时间构建一个丰富的数据结构时，执行有用的操作会更容易。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">make-move&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Move peg from p1 to p2, removing jumped peg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">if-let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">jumped&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">valid-move?&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">move-peg&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">remove-peg&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">jumped&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">p1&lt;/span> &lt;span class="nv">p2&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>if-let&lt;/code>是一种很好的方式，表示 &amp;ldquo;如果一个表达式求值为一个真实的值，那么就把这个值绑定到一个名字上，就像我在&lt;code>let&lt;/code>表达式中一样。否则，如果我提供了一个 &amp;ldquo;else &amp;ldquo;子句，就执行该 &amp;ldquo;else &amp;ldquo;子句；如果我没有提供 &amp;ldquo;else &amp;ldquo;子句，就返回 &amp;ldquo;nil&amp;rdquo;。在这种情况下，测试表达式是&lt;code>(valid-move? board p1 p2)&lt;/code>，如果结果是真实的，你要把结果分配给&lt;code>jumped&lt;/code>这个名字。这将用于调用&lt;code>move-peg&lt;/code>，它将返回一个新棋盘。你没有提供 &amp;ldquo;else &amp;ldquo;子句，所以如果移动无效，整个表达式的返回值为 &amp;ldquo;nil&amp;rdquo;。&lt;/p>
&lt;p>最后，函数`can-move? 是用来确定游戏是否结束的，方法是找到第一个有棋步的钉子位置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">can-move?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Do any of the pegged positions have valid moves?&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">some &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">comp &lt;/span>&lt;span class="nv">not-empty&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">partial &lt;/span>&lt;span class="nv">valid-moves&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">map first &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">filter &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">get &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">second &lt;/span>&lt;span class="nv">%&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数名称末尾的问号表明它是一个&lt;em>谓词函数&lt;/em>，这个函数是为了在布尔表达式中使用。&lt;em>谓词&lt;/em>取自谓词逻辑，它关注的是确定一个语句是真还是假。(你已经看到了一些内置的谓词函数，如&lt;code>empty?&lt;/code>和&lt;code>every?&lt;/code>。)&lt;/p>
&lt;p>&lt;code>can-move?&lt;/code>的工作原理是通过&lt;code>(map first (filter #(get (second %) :pegged) board))&lt;/code>获得一个所有挂点的序列。你可以将其进一步分解为&lt;code>filter'和&lt;/code>map&amp;rsquo;的函数调用：因为&lt;code>filter'是一个seq函数，它将&lt;/code>board&amp;rsquo;，一个 Map，转换成一个两元素 Vector 的 seq（也称为&lt;em>tuples&lt;/em>），看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connection&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="mi">3&lt;/span>, &lt;span class="mi">4&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>, &lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:connections&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="mi">5&lt;/span>, &lt;span class="mi">7&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span>, &lt;span class="ss">:pegged&lt;/span> &lt;span class="nv">true&lt;/span>&lt;span class="p">}])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>元组的第一个元素是一个位置号，第二个元素是该位置的信息。&lt;code>filter&lt;/code>然后将匿名函数&lt;code>#(get (second %) :pegged)&lt;/code>应用于这些元组中的每一个，过滤掉那些位置信息表明该位置目前没有挂点的元组。最后，结果被传递给&lt;code>map&lt;/code>，它在每个元组上调用&lt;code>first&lt;/code>，只从元组中抓取位置号。&lt;/p>
&lt;p>当你得到一连串的钉子位置号码后，你对每个位置调用一个谓词函数，找到第一个返回真值的位置。这个谓词函数是用&lt;code>(&lt;/code>comp not-empty (&lt;code>partial valid-moves board))&lt;/code>创建的。我们的想法是首先返回一个位置的所有有效棋步的 Map，然后测试该 Map 是否为空。&lt;/p>
&lt;p>首先，表达式&lt;code>(partial valid-moves board)&lt;/code>从&lt;code>valid-moves&lt;/code>派生出一个匿名函数，第一个参数&lt;code>board&lt;/code>用&lt;code>partial&lt;/code>填入（因为你每次调用&lt;code>valid-moves&lt;/code>时使用的是同一个棋盘）。这个新函数可以接受一个位置，并返回它在当前棋盘上的所有有效棋步的 Map。&lt;/p>
&lt;p>第二，你用&lt;code>comp&lt;/code>将这个函数与&lt;code>not-empty&lt;/code>组成。这个函数是自述的；如果给定的集合是空的，它返回 &amp;ldquo;true&amp;rdquo;，否则返回 &amp;ldquo;false&amp;rdquo;。&lt;/p>
&lt;p>这段代码最有趣的地方在于，你在使用一个函数链来推导一个新的函数，类似于你使用函数链来推导新的数据。在第三章中，你了解到 Clojure 将函数视为数据，因为函数可以接收函数作为参数并返回。希望这能说明为什么这个函数是有趣和有用的。&lt;/p>
&lt;h3 id="渲染和打印棋盘">渲染和打印棋盘&lt;/h3>
&lt;p>在棋盘表示和打印部分的前几个表达式只是定义常数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">alpha-start&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">alpha-end&lt;/span> &lt;span class="mi">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">letters&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">comp str &lt;/span>&lt;span class="nv">char&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">range &lt;/span>&lt;span class="nv">alpha-start&lt;/span> &lt;span class="nv">alpha-end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">pos-chars&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>绑定 &amp;ldquo;alpha-start &amp;ldquo;和 &amp;ldquo;alpha-end &amp;ldquo;为字母&lt;em>a&lt;/em>到&lt;em>z&lt;/em>设定了数值的开始和结束。我们用这些来建立一个 &amp;ldquo;字母 &amp;ldquo;的序列。&lt;code>char&lt;/code>，当应用于一个整数时，返回该整数对应的字符，&lt;code>str&lt;/code>将&lt;code>char&lt;/code>变成一个字符串。&lt;code>pos-chars&lt;/code>被函数&lt;code>row-padding&lt;/code>使用，以确定在每一行的开头增加多少间距。接下来的几个定义，&lt;code>ansi-styles&lt;/code>，&lt;code>ansi&lt;/code>，和&lt;code>colorize&lt;/code>向终端输出彩色文本。&lt;/p>
&lt;p>函数&lt;code>render-pos&lt;/code>, &lt;code>row-positions&lt;/code>, &lt;code>row-padding&lt;/code>, 和&lt;code>render-row&lt;/code>创建字符串来表示棋盘。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">render-pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">pos&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">nth &lt;/span>&lt;span class="nv">letters&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">dec &lt;/span>&lt;span class="nv">pos&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">get-in&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">pos&lt;/span> &lt;span class="ss">:pegged&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">colorize&lt;/span> &lt;span class="s">&amp;#34;0&amp;#34;&lt;/span> &lt;span class="ss">:blue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">colorize&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span> &lt;span class="ss">:red&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">row-positions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Return all positions in the given row&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">row-num&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">range &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">or &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">dec &lt;/span>&lt;span class="nv">row-num&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">row-tri&lt;/span> &lt;span class="nv">row-num&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">row-padding&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;String of spaces to add to the beginning of a row to center it&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">row-num&lt;/span> &lt;span class="nv">rows&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">pad-length&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">rows&lt;/span> &lt;span class="nv">row-num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">pos-chars&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">apply str &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">take &lt;/span>&lt;span class="nv">pad-length&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">repeat &lt;/span>&lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">render-row&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span> &lt;span class="nv">row-num&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">row-padding&lt;/span> &lt;span class="nv">row-num&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:rows&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">clojure.string/join&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">partial &lt;/span>&lt;span class="nv">render-pos&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">row-positions&lt;/span> &lt;span class="nv">row-num&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你从下往上看，你可以看到&lt;code>render-row&lt;/code>调用它上面的每个函数来返回给定行的字符串表示。注意表达式&lt;code>(map (partial render-pos board) (row-positions row-num))&lt;/code>。这展示了部分函数的一个很好的用例，即多次应用同一函数，并填入一个或多个参数，就像前面展示的&lt;code>can-move?&lt;/code>函数一样。&lt;/p>
&lt;p>还请注意，`render-pos&amp;rsquo;使用字母而不是数字来标识每个位置。这在棋盘显示时节省了一点空间，因为它允许每个位置只有一个字符来表示一个五行棋盘。&lt;/p>
&lt;p>最后，&lt;code>print-board&lt;/code>只是用&lt;code>doseq&lt;/code>遍历每一行的编号，打印该行的字符串表示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">print-board&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">doseq &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">row-num&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">range &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:rows&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)))]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">render-row&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="nv">row-num&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你想对一个集合中的元素进行副作用的操作（比如打印到终端）时，你可以使用&lt;code>doseq&lt;/code>。紧跟在名字&lt;code>doseq&lt;/code>后面的 Vector 描述了如何将一个集合中的所有元素逐一绑定到一个名字上，以便你可以对它们进行操作。在这个例子中，你要把数字 1 到 5（假设有五行）分配给&lt;code>row-num&lt;/code>这个名字，这样你就可以打印每一行。&lt;/p>
&lt;p>虽然打印棋盘在技术上属于&lt;em>交互&lt;/em>，但我想在这里用渲染函数来展示它。当我第一次开始写这个游戏时，&lt;code>print-board&lt;/code>函数也生成了棋盘的字符串表示。然而，现在&lt;code>print-board&lt;/code>将所有的渲染工作推迟到纯函数，这使得代码更容易理解，并减少了我们不纯函数的表面积。&lt;/p>
&lt;h3 id="玩家互动">玩家互动&lt;/h3>
&lt;p>下一个函数集合处理玩家互动。首先，有&lt;code>letter-&amp;gt;pos&lt;/code>，它将字母（这是玩家显示和识别位置的方式）转换为相应的位置编号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">letter-&amp;gt;pos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Converts a letter string to the corresponding position number&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">letter&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">letter&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="nv">alpha-start&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，辅助函数&lt;code>get-input&lt;/code>允许你读取和清理玩家的输入。你也可以提供一个默认值，如果玩家没有输入任何东西就按下回车键，就会使用这个值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">get-input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Waits for user to enter text and hit enter, then cleans the input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-input&lt;/span> &lt;span class="nv">nil&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">default&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">input&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">clojure.string/trim&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">read-line&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty?&lt;/span> &lt;span class="nv">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">default&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">clojure.string/lower-case&lt;/span> &lt;span class="nv">input&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下一个函数，&lt;code>characters-as-strings&lt;/code>，是一个很小的辅助函数，被&lt;code>prompt-move&lt;/code>用来接收一个字符串并返回一个字母集合，所有非字母的输入都被丢弃。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">characters-as-strings&lt;/span> &lt;span class="s">&amp;#34;a b&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; (&amp;#34;a&amp;#34; &amp;#34;b&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">characters-as-strings&lt;/span> &lt;span class="s">&amp;#34;a cb&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; (&amp;#34;a&amp;#34; &amp;#34;c&amp;#34; &amp;#34;b&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来，&lt;code>prompt-move&lt;/code>读取玩家的输入，并对其采取行动。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">prompt-move&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;\nHere&amp;#39;s your board:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">print-board&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Move from where to where? Enter two letters:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">input&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="nv">letter-&amp;gt;pos&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">characters-as-strings&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-input&lt;/span>&lt;span class="p">)))]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">if-let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">new-board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">make-move&lt;/span>&lt;span class="err">➊&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">second &lt;/span>&lt;span class="nv">input&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">user-entered-valid-move&lt;/span> &lt;span class="nv">new-board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">user-entered-invalid-move&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊，如果棋手的棋步无效，&lt;code>make-move&lt;/code>返回&lt;code>nil&lt;/code>，你用&lt;code>user-entered-invalid-move&lt;/code>函数来通知她的错误。你将未经修改的棋盘传递给&lt;code>user-entered-invalid-move&lt;/code>，这样它就可以用棋盘再次提示棋手。下面是函数的定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">user-entered-invalid-move&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Handles the next step after a user has entered an invalid move&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;\n!!! That was an invalid move :(\n&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">prompt-move&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，如果这步棋是有效的，&amp;ldquo;new-board &amp;ldquo;将被传递给 &amp;ldquo;user-entered-valid-move&amp;rdquo;，如果还有棋步要走，它将控制权交还给 &amp;ldquo;prompt-move&amp;rdquo;。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">user-entered-valid-move&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Handles the next step after a user has entered a valid move&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">can-move?&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">prompt-move&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">game-over&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在我们的棋盘创建函数中，我们看到递归是如何使用不可变的数据结构来建立一个值的。同样的事情也发生在这里，只是它涉及两个相互递归的函数和一些用户输入。没有看到可变的属性!&lt;/p>
&lt;p>游戏结束后会发生什么？这就是所发生的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">game-over&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Announce the game is over and prompt to play again&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">remaining-pegs&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">count &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">filter &lt;/span>&lt;span class="ss">:pegged&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">vals &lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">)))]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Game over! You had&amp;#34;&lt;/span> &lt;span class="nv">remaining-pegs&lt;/span> &lt;span class="s">&amp;#34;pegs left:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">print-board&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Play again? y/n [y]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">input&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-input&lt;/span> &lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">= &lt;/span>&lt;span class="s">&amp;#34;y&amp;#34;&lt;/span> &lt;span class="nv">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">prompt-rows&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Bye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">System/exit&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里发生的所有事情是，游戏告诉你你的表现，打印出最后的棋盘，并提示你再玩一次。如果你选择&lt;em>y&lt;/em>，游戏就会调用&lt;code>prompt-rows&lt;/code>，这就给我们带来了最后一组函数，用来开始新的游戏。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">prompt-empty-peg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">board&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Here&amp;#39;s your board:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">print-board&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Remove which peg? [e]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">prompt-move&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">remove-peg&lt;/span> &lt;span class="nv">board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">letter-&amp;gt;pos&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-input&lt;/span> &lt;span class="s">&amp;#34;e&amp;#34;&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">prompt-rows&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;How many rows? [5]&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">rows&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">Integer.&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">get-input&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">board&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">new-board&lt;/span> &lt;span class="nv">rows&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">prompt-empty-peg&lt;/span> &lt;span class="nv">board&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你使用&lt;code>prompt-rows&lt;/code>开始游戏，让玩家输入要包括多少行。然后你把控制权交给&lt;code>prompt-empty-peg&lt;/code>，这样玩家就可以告诉游戏要先移除哪个钉子。从这里开始，程序提示你走棋，直到没有任何棋步。&lt;/p>
&lt;p>尽管这个程序的所有副作用都是相对无害的（你所做的只是提示和打印），但像这样将它们封存在自己的函数中是函数式编程的最佳实践。一般来说，如果你能确定哪些函数是透明的、无副作用的，并将这些函数放在自己的函数中，你将从函数式编程中获得更多的好处。这些函数不可能在你的程序的不相关部分引起奇怪的错误。它们更容易在 REPL 中测试和开发，因为它们只依赖于你传递给它们的参数，而不是一些复杂的隐藏状态对象。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>纯函数在本质上是透明的，并且没有副作用，这使得它们很容易被推理。为了从 Clojure 中获得最大的收益，请尽量减少不纯函数的使用。在一个不可变的世界里，你可以使用递归而不是&lt;code>for&lt;/code>/&lt;code>while&lt;/code>循环，使用函数组合而不是连续的突变。纯函数允许强大的技术，如函数组合函数和备忘化。它们也是超级有趣的!&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;p>发展函数式编程技能的最好方法之一是尝试实现现有的函数。为此，下面的大多数练习都建议你实现一个函数，但不要止步于此；通过 Clojure 小抄（&lt;em>&lt;a class="link" href="http://clojure.org/cheatsheet/" target="_blank" rel="noopener"
>http://clojure.org/cheatsheet/&lt;/a>&lt;/em>），可以挑选更多的函数&lt;/p>
&lt;ol>
&lt;li>你用&lt;code>(comp :intelligence :attribute)&lt;/code>创建了一个函数来返回一个角色的智力。创建一个新的函数，&lt;code>attr&lt;/code>，你可以像&lt;code>(attr :intelligence)&lt;/code>那样调用它，做同样的事情。&lt;/li>
&lt;li>实现&lt;code>comp&lt;/code>函数。&lt;/li>
&lt;li>实现&lt;code>assoc-in&lt;/code>函数。提示：使用&lt;code>assoc&lt;/code>函数并将其参数定义为&lt;code>[m [k &amp;amp; ks] v]&lt;/code>。&lt;/li>
&lt;li>查阅并使用&lt;code>update-in&lt;/code>函数。&lt;/li>
&lt;li>实现 &amp;ldquo;update-in&amp;rdquo;。&lt;/li>
&lt;/ol></description></item><item><title>Chapter4 深入研究核心函数</title><link>https://example.com/p/chapter4-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 13 Jan 2022 17:39:28 +0800</pubDate><guid>https://example.com/p/chapter4-%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="核心函数的深入研究">核心函数的深入研究&lt;/h1>
&lt;p>如果你像我一样是焦虑的、以青少年为中心的准肥皂剧*《吸血鬼日记》*的超级粉丝，你一定记得主角埃琳娜开始质疑她苍白的、神秘的暗恋者的行为的那一集。&amp;ldquo;为什么当我的膝盖被刮伤时，他立刻消失得无影无踪？&amp;ldquo;和 &amp;ldquo;为什么当我的手指被划破时，他的脸变成了一个怪异的死亡面具？&amp;ldquo;等等。&lt;/p>
&lt;p>如果你已经开始把玩 Clojure 的核心函数，你可能也会问自己类似的问题。&amp;ldquo;为什么&lt;code>map&lt;/code>会返回一个列表，而我给它的是一个 Vector？&amp;ldquo;和 &amp;ldquo;为什么&lt;code>reduce&lt;/code>会把我的 map 当成一个 Vector？&amp;ldquo;等等。(不过，有了 Clojure，你至少可以免于思考作为一个 17 岁孩子的深刻的存在恐惧，直到永远）。&lt;/p>
&lt;p>在这一章中，你将了解到 Clojure 的深邃、黑暗、嗜血、超自然的&lt;em>cough&lt;/em>，我的意思是，在这一章中，你将了解到 Clojure 的&lt;em>抽象的基本概念以及序列和集合的抽象&lt;/em>。你还会了解到&lt;em>疯狂的序列&lt;/em>。这将为你提供所需的基础，使你能够阅读你以前没有使用过的函数的文档，并理解当你试着使用它们时发生了什么。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/sparkly.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>接下来，你将获得更多关于你最需要使用的函数的经验。你将学习如何用函数&lt;code>map&lt;/code>、&lt;code>reduce&lt;/code>、&lt;code>into&lt;/code>、&lt;code>conj&lt;/code>、&lt;code>concat&lt;/code>、&lt;code>some&lt;/code>、&lt;code>filter&lt;/code>、&lt;code>take&lt;/code>、&lt;code>drop&lt;/code>、&lt;code>sort&lt;/code>、&lt;code>sort-by&lt;/code>和&lt;code>identity&lt;/code>来处理列表、Vector、Map 和 Set。你还将学习如何用&lt;code>apply&lt;/code>、&lt;code>partial&lt;/code>和&lt;code>complement&lt;/code>创建新的函数。所有这些信息将帮助你了解如何以 Clojure 的方式做事，它将为你编写自己的代码以及阅读和学习他人的项目打下坚实的基础。&lt;/p>
&lt;p>最后，你将学会如何解析和查询 CSV 中的吸血鬼数据，以确定在你的家乡潜伏着哪些诺斯费拉图。&lt;/p>
&lt;h2 id="从编程到抽象">从编程到抽象&lt;/h2>
&lt;p>为了理解从编程到抽象，让我们把 Clojure 与一种没有考虑到这个原则的语言进行比较。Emacs Lisp（elisp）。在 elisp 中，你可以使用&lt;code>mapcar&lt;/code>函数来导出一个新的列表，这与你在 Clojure 中使用&lt;code>map&lt;/code>的方式相似。然而，如果你想在 elisp 中 Map 一个哈希 Map（类似于 Clojure 的 map 数据结构），你需要使用&lt;code>maphash&lt;/code>函数，而在 Clojure 中你仍然可以只使用&lt;code>map&lt;/code>。换句话说，elisp 使用两个不同的、针对数据结构的函数来实现&lt;em>map&lt;/em>操作，而 Clojure 只使用一个。你也可以在 Clojure 中对 map 调用&lt;code>reduce&lt;/code>，而 elisp 并没有提供一个函数来减少散列 map。&lt;/p>
&lt;p>原因是 Clojure 在&lt;em>序列抽象&lt;/em>方面定义了&lt;code>map&lt;/code>和&lt;code>reduce&lt;/code>函数，而不是在具体的数据结构方面。只要数据结构响应核心序列操作（函数&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>，我们稍后会仔细研究），它就能与&lt;code>map&lt;/code>、&lt;code>reduce&lt;/code>以及其他大量的序列函数免费工作。这就是 Clojurists 所说的抽象编程，也是 Clojure 哲学的一个核心原则。&lt;/p>
&lt;p>我认为抽象是操作的命名集合。如果你能在一个对象上执行一个抽象的所有操作，那么这个对象就是该抽象的一个实例。我甚至在编程之外也是这样想的。例如，&lt;em>电池&lt;/em>抽象包括 &amp;ldquo;将导电介质连接到其阳极和阴极 &amp;ldquo;的操作，而该操作的输出是&lt;em>电流&lt;/em>。电池是用锂还是用土豆做的并不重要。只要它对定义&lt;em>电池&lt;/em>的一系列操作做出反应，它就是一个电池。&lt;/p>
&lt;p>同样地，&lt;code>map&lt;/code>并不关心列表、Vector、Set 和 Map 是如何实现的。它只关心它是否能对它们进行序列操作。让我们看看&lt;code>map&lt;/code>是如何在序列抽象中定义的，这样你就能理解一般的抽象编程。&lt;/p>
&lt;h3 id="把列表vectorset-和-map-当作序列对待">把列表、Vector、Set 和 Map 当作序列对待&lt;/h3>
&lt;p>如果你把&lt;code>map&lt;/code>操作独立于任何编程语言，甚至是编程，它的基本行为是用一个函数&lt;em>ƒ&lt;/em>从现有的序列&lt;em>x&lt;/em>导出一个新的序列&lt;em>y&lt;/em>，这样 y1 = ƒ(x1), y2 = ƒ(x2), . . . yn = ƒ(xn)。图 4-1 说明了你如何将应用于序列的 Map 可视化。&lt;/p>
&lt;p>! &lt;a class="link" href="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/mapping.png" target="_blank" rel="noopener"
>img&lt;/a>&lt;/p>
&lt;p>图 4-1：Map 的可视化&lt;/p>
&lt;p>术语&lt;em>序列&lt;/em>在这里指的是以线性顺序组织的元素集合，而不是无序集合或节点之间没有前后关系的图。图 4-2 显示了你如何将一个序列可视化，与上述其他两个集合形成对比。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/collections.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 4-2：序列和非序列集合&lt;/p>
&lt;p>在这个关于 Map 和序列的描述中，没有提到列表、Vector 或其他具体的数据结构。Clojure 的设计是让我们尽可能地用这种抽象的术语来思考和编程，它通过用数据结构的抽象来实现函数。在这个例子中，&lt;code>map&lt;/code>是根据序列抽象来定义的。在对话中，你会说&lt;code>map&lt;/code>、&lt;code>reduce&lt;/code>和其他序列函数&lt;em>取一个序列&lt;/em>或甚至&lt;em>取一个 seq&lt;/em>。事实上，Clojurists 通常使用&lt;em>seq&lt;/em>而不是&lt;em>sequence&lt;/em>，使用&lt;em>seq 函数&lt;/em>和&lt;em>seq 库&lt;/em>等术语来指代执行顺序操作的函数。无论你使用&lt;em>sequence&lt;/em>还是&lt;em>seq&lt;/em>，你都表明有关的数据结构将被视为一个序列，在这种情况下，它实际上是什么最真实的心态并不重要。&lt;/p>
&lt;p>如果核心序列函数 &amp;ldquo;first&amp;rdquo;、&amp;ldquo;rest &amp;ldquo;和 &amp;ldquo;cons &amp;ldquo;在一个数据结构上工作，你可以说这个数据结构&lt;em>实现了&lt;/em>序列的抽象。列表、Vector、Set 和 Map 都实现了序列抽象，所以它们都可以用&lt;code>map&lt;/code>，如图所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn titleize
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [topic]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str topic &amp;#34; for the Brave and True&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map titleize [&amp;#34;Hamsters&amp;#34; &amp;#34;Ragnarok&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Hamsters for the Brave and True&amp;#34; &amp;#34;Ragnarok for the Brave and True&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map titleize &amp;#39;(&amp;#34;Empathy&amp;#34; &amp;#34;Decorating&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Empathy for the Brave and True&amp;#34; &amp;#34;Decorating for the Brave and True&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map titleize #{&amp;#34;Elbows&amp;#34; &amp;#34;Soap Carving&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Elbows for the Brave and True&amp;#34; &amp;#34;Soap Carving for the Brave and True&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map #(titleize (second %)) {:uncomfortable-thing &amp;#34;Winking&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Winking for the Brave and True&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前两个例子表明&lt;code>map&lt;/code>对 Vector 和列表的工作方式是相同的。第三个例子显示&lt;code>map&lt;/code>可以与未排序的集合一起工作。在第四个例子中，你必须在匿名函数的参数上调用&lt;code>second&lt;/code>，然后再将其标题化，因为参数是一个 map。我将很快解释原因，但首先让我们看看定义序列抽象的三个函数。&lt;/p>
&lt;h3 id="first-rest-and-cons">first, rest, and cons&lt;/h3>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/hamster.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>在这一节中，我们将快速迂回到 JavaScript 中，实现一个链表和三个核心函数。&lt;code>first&lt;/code>,&lt;code>rest&lt;/code>, 和&lt;code>cons&lt;/code>。在这三个核心函数实现之后，我将展示如何用它们来构建&lt;code>map&lt;/code>。&lt;/p>
&lt;p>重点是要理解 Clojure 中的 seq 抽象和链接列表的具体实现之间的区别。如何实现一个特定的数据结构并不重要：当涉及到在一个数据结构上使用 seq 函数时，Clojure 所问的是 &amp;ldquo;我可以&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>吗？&amp;rdquo; 如果答案是肯定的，你就可以在该数据结构上使用 seq 库。&lt;/p>
&lt;p>在一个链接列表中，节点是以线性顺序链接的。下面是你如何在 JavaScript 中创建一个。在这个片段中，&lt;code>next&lt;/code>是空的，因为它是列表中的最后一个节点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var node3 = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> value: &amp;#34;last&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next: null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个代码中，&lt;code>node2&lt;/code>的&lt;code>next&lt;/code>指向&lt;code>node3&lt;/code>，而&lt;code>node1&lt;/code>的&lt;code>next&lt;/code>指向&lt;code>node2&lt;/code>；这就是 &amp;ldquo;链表 &amp;ldquo;中的 &amp;ldquo;链接&amp;rdquo;。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var node2 = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> value: &amp;#34;middle&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next: node3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var node1 = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> value: &amp;#34;first&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next: node2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从图形上看，你可以如图 4-3 所示表示这个列表。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/linked-list.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 4-3: 一个链接列表&lt;/p>
&lt;p>你可以在一个链表上执行三个核心函数。&lt;code>first&lt;/code>, &lt;code>rest&lt;/code>, 和&lt;code>cons&lt;/code>. &lt;code>first&lt;/code>返回请求的节点的值，&lt;code>rest&lt;/code>返回请求的节点之后的剩余值，&lt;code>cons&lt;/code>在列表的开头添加一个具有给定值的新节点。在这些实现之后，你可以在它们之上实现&lt;code>map&lt;/code>、&lt;code>reduce&lt;/code>、&lt;code>filter&lt;/code>和其他 seq 函数。&lt;/p>
&lt;p>下面的代码显示了我们如何用我们的 JavaScript 例子实现和使用&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>，以及如何使用它们来返回特定的节点并导出一个新的列表。请注意，&lt;code>first&lt;/code>和&lt;code>rest&lt;/code>的参数被命名为&lt;em>node&lt;/em>。这可能会让人感到困惑，因为你可能会说：&amp;ldquo;我不是在获取一个&lt;em>列表&lt;/em>的第一个元素吗？&amp;rdquo; 好吧，你一次对列表中的元素进行操作，是一个节点一个节点地操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var first = function(node) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return node.value;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var rest = function(node) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return node.next;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var cons = function(newValue, node) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> value: newValue,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next: node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">first(node1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;first&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">first(rest(node1));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;middle&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">first(rest(rest(node1)));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;last&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var node0 = cons(&amp;#34;new first&amp;#34;, node1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">first(node0);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;new first&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">first(rest(node0));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;first&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如前所述，你可以用&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>来实现&lt;code>map&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var map = function (list, transform) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (list === null) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return cons(transform(first(list)), map(rest(list), transform));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数转换了 list 的第一个元素，然后在 list 的其余部分再次调用自己，直到到达结尾（一个空值）。让我们看看它的运行情况 在这个例子中，你对以 &lt;code>node1&lt;/code> 开始的列表进行 Map，返回一个新的列表，字符串 &lt;code>&amp;quot; mapped!&amp;quot;&lt;/code> 被附加到每个节点的值上。然后你用&lt;code>first&lt;/code>来返回第一个节点的值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">first(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> map(node1, function (val) { return val + &amp;#34; mapped!&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; &amp;#34;first mapped!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有件很酷的事：因为&lt;code>map&lt;/code>是完全用&lt;code>cons&lt;/code>、&lt;code>first&lt;/code>和&lt;code>rest&lt;/code>实现的，你实际上可以把任何数据结构传给它，只要&lt;code>cons&lt;/code>、&lt;code>first&lt;/code>和&lt;code>rest&lt;/code>对该数据结构起作用，它就能工作。&lt;/p>
&lt;p>下面是它们对一个数组的作用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var first = function (array) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return array[0];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var rest = function (array) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var sliced = array.slice(1, array.length);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (sliced.length == 0) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return sliced;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var cons = function (newValue, array) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return [newValue].concat(array);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var list = [&amp;#34;Transylvania&amp;#34;, &amp;#34;Forks, WA&amp;#34;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">map(list, function (val) { return val + &amp;#34; mapped!&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// =&amp;gt; [&amp;#34;Transylvania mapped!&amp;#34;, &amp;#34;Forks, WA mapped!&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个代码片段用 JavaScript 的数组函数定义了&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>。同时，&lt;code>map&lt;/code>继续引用名为&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>的函数，所以现在它在&lt;code>array&lt;/code>上工作。所以，如果你能实现&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>，你就能免费得到&lt;code>map&lt;/code>和前面提到的大量其他函数。&lt;/p>
&lt;h3 id="通过中间层抽象">通过中间层抽象&lt;/h3>
&lt;p>在这一点上，你可能会反对我只是在踢皮球，因为我们仍然面临着像&lt;code>first&lt;/code>这样的函数如何能够与不同的数据结构一起工作的问题。Clojure 使用两种形式的指示来实现这一目标。在编程中，&lt;em>中间层&lt;/em>是一个通用术语，指的是一种语言所采用的机制，这样一个名字可以有多种相关的含义。在这个例子中，&amp;ldquo;first &amp;ldquo;这个名字有多种数据结构的含义。方向性是使抽象化成为可能的原因。&lt;/p>
&lt;p>&lt;em>多态&lt;/em>是 Clojure 提供中间层的一种方式。我不想在细节上迷失方向，但基本上，多态函数根据提供的参数类型分配给不同的函数体。(这与多态函数根据你提供的参数数量派发到不同的函数体并无太大区别）。&lt;/p>
&lt;p>注意 Clojure 有两种结构来定义多态分发：主机平台的接口结构和平台独立的协议。但在你刚开始的时候，没有必要了解这些东西是如何工作的。我将在第 13 章介绍协议。&lt;/p>
&lt;p>当涉及到序列时，Clojure 也通过做一种轻量级的类型转换来创造中间层，产生一种数据结构，与抽象的函数一起工作。每当 Clojure 期望一个序列&amp;ndash;例如，当你调用&lt;code>map&lt;/code>、&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>或&lt;code>cons&lt;/code>时，它就会调用相关数据结构上的&lt;code>seq&lt;/code>函数，以获得一个允许&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>的数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(seq &amp;#39;(1 2 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(seq [1 2 3])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(seq #{1 2 3})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(seq {:name &amp;#34;Bill Compton&amp;#34; :occupation &amp;#34;Dead mopey guy&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ([:name &amp;#34;Bill Compton&amp;#34;] [:occupation &amp;#34;Dead mopey guy&amp;#34;])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有两个值得注意的细节。首先，&lt;code>seq&lt;/code>总是返回一个看起来像列表的值；你会把这个值称为&lt;em>sequence&lt;/em>或&lt;em>seq&lt;/em>。第二，Map 的 seq 由两个元素的键值 Vector 组成。这就是为什么&lt;code>map&lt;/code>把你的 Map 当作 Vector 列表的原因! 你可以在 &amp;ldquo;Bill Compton &amp;ldquo;的例子中看到这一点。我想特别指出这个例子，因为它可能是令人惊讶和困惑的。在我刚开始使用 Clojure 的时候就是这样。了解这些底层机制将使你不至于像试图保留人性的男性吸血鬼那样，经常表现出挫折感和普遍的拖沓感。&lt;/p>
&lt;p>你可以通过使用&lt;code>into&lt;/code>将 seq 转换回 Map，将结果粘到一个空的 Map 中（后面你会仔细看&lt;code>into&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(into {} (seq {:a 1 :b 2 :c 3})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a 1, :c 3, :b 2}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，Clojure 的序列函数在其参数上使用&lt;code>seq&lt;/code>。序列函数是根据序列抽象定义的，使用&lt;code>first&lt;/code>、&lt;code>rest&lt;/code>和&lt;code>cons&lt;/code>。只要一个数据结构实现了序列抽象，它就可以使用广泛的 seq 库，其中包括诸如&lt;code>reduce&lt;/code>、&lt;code>filter&lt;/code>、&lt;code>distinct&lt;/code>、&lt;code>group-by&lt;/code>等超级明星函数。&lt;/p>
&lt;p>这里的启示是，把注意力集中在我们能对一个数据结构做什么，并尽可能地忽略它的实现，是非常有力的。实现本身并不重要。它们只是达到目的的一种手段。一般来说，抽象编程可以让你在不同的数据结构上使用函数库，不管这些数据结构是如何实现的。&lt;/p>
&lt;h2 id="seq-函数的例子">Seq 函数的例子&lt;/h2>
&lt;p>Clojure 的 seq 库中有很多有用的函数，你会经常用到。现在你已经对 Clojure 的序列抽象有了更深的了解，让我们来详细看看这些函数。如果你是 Lisp 和函数式编程的新手，这些例子将是令人惊讶和愉快的。&lt;/p>
&lt;h3 id="map">Map&lt;/h3>
&lt;p>你现在已经看过很多&lt;code>map&lt;/code>的例子了，但是这一节展示了&lt;code>map&lt;/code>做了两个新的任务：把多个集合作为参数，以及把一个函数集合作为参数。它还强调了一个常见的&lt;code>map&lt;/code>模式：使用关键字作为 Map 函数。&lt;/p>
&lt;p>到目前为止，你只看到了&lt;code>map&lt;/code>在一个集合上操作的例子。在下面的代码中，这个集合是 Vector&lt;code>[1 2 3]&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map inc [1 2 3])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (2 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，你也可以给&lt;code>map&lt;/code>多个集合。下面是一个简单的例子来说明这个方法的作用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map str [&amp;#34;a&amp;#34; &amp;#34;b&amp;#34; &amp;#34;c&amp;#34;] [&amp;#34;A&amp;#34; &amp;#34;B&amp;#34; &amp;#34;C&amp;#34;] )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;aA&amp;#34; &amp;#34;bB&amp;#34; &amp;#34;cC&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就好像&lt;code>map&lt;/code>做了以下的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(list (str &amp;#34;a&amp;#34; &amp;#34;A&amp;#34;) (str &amp;#34;b&amp;#34; &amp;#34;B&amp;#34;) (str &amp;#34;c&amp;#34; &amp;#34;C&amp;#34;))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/core-functions-in-depth/vampire-diary.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>当你传递给&lt;code>map&lt;/code>多个集合时，第一个集合的元素（&lt;code>[&amp;quot;a&amp;quot; &amp;quot;b&amp;quot; &amp;quot;c&amp;quot;]&lt;/code>）将作为 Map 函数（&lt;code>str&lt;/code>）的第一个参数传递，第二个集合的元素（&lt;code>[&amp;quot;A&amp;quot; &amp;quot;B&amp;quot; &amp;quot;C&amp;quot;&lt;/code>）将作为第二个参数传递，以此类推。只要确保你的 Map 函数可以接受的参数数量与你传递给&lt;code>map&lt;/code>的集合数量相等。&lt;/p>
&lt;p>下面的例子显示了如果你是一个试图抑制人类消费的吸血鬼，你可以如何使用这种能力。你有两个 Vector，一个代表人类摄入的升数，另一个代表过去四天的小动物摄入量。&lt;code>unify-diet-data&lt;/code> 函数获取人类和动物的单日数据，并将两者统一为一张 Map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def human-consumption [8.1 7.3 6.6 5.0])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def critter-consumption [0.0 0.2 0.3 1.1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn unify-diet-data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [human critter]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:human human
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :critter critter})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map unify-diet-data human-consumption critter-consumption)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:human 8.1, :critter 0.0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:human 7.3, :critter 0.2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:human 6.6, :critter 0.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:human 5.0, :critter 1.1})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>好样的，把人裁掉了!&lt;/p>
&lt;p>你可以用&lt;code>map&lt;/code>做的另一件有趣的事是把一个函数集合传给它。如果你想对不同的数字集合进行一系列的计算，你可以使用这个方法，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def sum #(reduce + %))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def avg #(/ (sum %) (count %)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn stats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [numbers]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map #(% numbers) [sum count avg]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(stats [3 4 10])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (17 3 17/3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(stats [80 1 44 13 6])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (144 5 144/5)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>stats&lt;/code>函数遍历了一个函数的 Vector，将每个函数应用于&lt;code>numbers&lt;/code>。&lt;/p>
&lt;p>此外，Clojurists 经常使用&lt;code>map&lt;/code>从 map 数据结构的集合中检索与一个关键词相关的值。因为关键字可以作为函数使用，你可以简洁地做到这一点。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def identities
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:alias &amp;#34;Batman&amp;#34; :real &amp;#34;Bruce Wayne&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:alias &amp;#34;Spider-Man&amp;#34; :real &amp;#34;Peter Parker&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:alias &amp;#34;Santa&amp;#34; :real &amp;#34;Your mom&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:alias &amp;#34;Easter Bunny&amp;#34; :real &amp;#34;Your dad&amp;#34;}])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map :real identities)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Bruce Wayne&amp;#34; &amp;#34;Peter Parker&amp;#34; &amp;#34;Your mom&amp;#34; &amp;#34;Your dad&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(如果你是五岁，那么我深表歉意）。&lt;/p>
&lt;h3 id="reduce">reduce&lt;/h3>
&lt;p>第 3 章展示了&lt;code>reduce&lt;/code>如何处理序列中的每个元素来生成一个结果。本节展示了其他一些可能不经常使用的使用方法。&lt;/p>
&lt;p>第一种用法是转换一个 Map 的值，产生一个新的 Map，其键值相同，但数值更新。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(reduce (fn [new-map [key val]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (assoc new-map key (inc val)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:max 30 :min 10})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:max 31, :min 11}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>reduce&lt;/code>将参数&lt;code>{:max 30 :min 10}&lt;/code>视为一个 Vector 序列，如&lt;code>([:max 30] [:min 10])&lt;/code>。然后，它从一个空 Map（第二个参数）开始，用第一个参数，一个匿名函数来建立它。就像&lt;code>reduce&lt;/code>这样做：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(assoc (assoc {} :max (inc 30))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :min (inc 10))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数&lt;code>assoc&lt;/code>需要三个参数：一个 Map，一个键，和一个值。它通过&lt;em>关联&lt;/em>给定的键和给定的值，从你给它的 Map 中派生出一个新的 Map。例如，&lt;code>(assoc {:a 1} :b 2)&lt;/code>将返回&lt;code>{:a 1 :b 2}&lt;/code>。&lt;/p>
&lt;p>&lt;code>reduce&lt;/code> 的另一个用途是根据键值从 Map 中过滤出来。在下面的例子中，匿名函数检查一个键值对的值是否大于 4，如果不是，那么这个键值对就被过滤掉了。在 Map&lt;code>{:human 4.1 :critter 3.9}&lt;/code>中，3.9 小于 4，所以&lt;code>:critter&lt;/code>键和它的 3.9 值被过滤掉了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(reduce (fn [new-map [key val]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (&amp;gt; val 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (assoc new-map key val)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> new-map))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:human 4.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :critter 3.9})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:human 4.1}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的启示是，&lt;code>reduce&lt;/code>是一个比最初看起来更灵活的函数。每当你想从一个序列中得到一个新的值时，&lt;code>reduce&lt;/code>通常能够满足你的需要。如果你想做一个真正能让你的头发倒竖的练习，试着用&lt;code>reduce&lt;/code>实现&lt;code>map&lt;/code>，然后在本章后面的内容中对&lt;code>filter&lt;/code>和&lt;code>some&lt;/code>做同样的练习。&lt;/p>
&lt;h3 id="take-drop-take-while-and-drop-while">take, drop, take-while, and drop-while&lt;/h3>
&lt;p>&lt;code>take&lt;/code>和&lt;code>drop&lt;/code>都接受两个参数：一个数字和一个序列。&lt;code>take&lt;/code>返回序列的前 n 个元素，而&lt;code>drop&lt;/code>返回除去前 n 个元素的序列。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(take 3 [1 2 3 4 5 6 7 8 9 10])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(drop 3 [1 2 3 4 5 6 7 8 9 10])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (4 5 6 7 8 9 10)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它们的表亲&lt;code>take-while&lt;/code>和&lt;code>drop-while&lt;/code>更有趣一些。每一个都需要一个&lt;em>谓词函数&lt;/em>（一个其返回值为真或假的函数）来决定它何时应该停止取舍。例如，假设你有一个 Vector，代表你 &amp;ldquo;食物 &amp;ldquo;日记中的条目。每个条目都有月份和日期，以及你吃了什么。为了保留空间，我们将只包括几个条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def food-journal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:month 1 :day 1 :human 5.3 :critter 2.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 1 :day 2 :human 5.1 :critter 2.0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 1 :human 4.9 :critter 2.1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 2 :human 5.0 :critter 2.5}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 1 :human 4.2 :critter 3.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 2 :human 4.0 :critter 3.8}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 1 :human 3.7 :critter 3.9}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 2 :human 3.7 :critter 3.6}])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>take-while&lt;/code>，你可以只检索一月和二月的数据。&lt;code>take-while&lt;/code>遍历给定的序列（在本例中是&lt;code>food-journal&lt;/code>），对每个元素应用谓词函数。&lt;/p>
&lt;p>这个例子使用匿名函数&lt;code>#(&amp;lt; (:month %) 3)&lt;/code>来测试日记条目的月份是否超出范围。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(take-while #(&amp;lt; (:month %) 3) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:month 1 :day 1 :human 5.3 :critter 2.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 1 :day 2 :human 5.1 :critter 2.0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 1 :human 4.9 :critter 2.1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 2 :human 5.0 :critter 2.5})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当&lt;code>take-while&lt;/code>到达第一个 March 条目时，匿名函数返回&lt;code>false&lt;/code>，而&lt;code>take-while&lt;/code>返回它在这之前测试的每个元素的序列。&lt;/p>
&lt;p>同样的想法也适用于&lt;code>drop-while&lt;/code>，只是它一直在丢弃元素，直到有一个测试为真。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(drop-while #(&amp;lt; (:month %) 3) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:month 3 :day 1 :human 4.2 :critter 3.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 2 :human 4.0 :critter 3.8}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 1 :human 3.7 :critter 3.9}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 2 :human 3.7 :critter 3.6})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过同时使用&lt;code>take-while&lt;/code>和&lt;code>drop-while&lt;/code>，你可以只获得 2 月和 3 月的数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(take-while #(&amp;lt; (:month %) 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (drop-while #(&amp;lt; (:month %) 2) food-journal))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:month 2 :day 1 :human 4.9 :critter 2.1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 2 :human 5.0 :critter 2.5}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 1 :human 4.2 :critter 3.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 2 :human 4.0 :critter 3.8})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子使用 &amp;ldquo;drop-while &amp;ldquo;去掉 1 月份的条目，然后对结果使用 &amp;ldquo;take-while &amp;ldquo;继续取条目，直到到达 4 月份的第一个条目。&lt;/p>
&lt;h3 id="filter-和-some">Filter 和 Some&lt;/h3>
&lt;p>使用&lt;code>filter&lt;/code>来返回一个序列中对一个谓词函数为真的所有元素。这里是人类消费少于 5 升的日记条目：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(filter #(&amp;lt; (:human %) 5) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:month 2 :day 1 :human 4.9 :critter 2.1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 1 :human 4.2 :critter 3.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 3 :day 2 :human 4.0 :critter 3.8}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 1 :human 3.7 :critter 3.9}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 4 :day 2 :human 3.7 :critter 3.6})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能想知道为什么我们不在前面的 &amp;ldquo;take-while &amp;ldquo;和 &amp;ldquo;drop-while &amp;ldquo;例子中使用&lt;code>filter&lt;/code>。事实上，&lt;code>filter&lt;/code>也可以用于此。这里我们要抓取 1 月和 2 月的数据，就像在&lt;code>take-while&lt;/code>例子中一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(filter #(&amp;lt; (:month %) 3) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ({:month 1 :day 1 :human 5.3 :critter 2.3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 1 :day 2 :human 5.1 :critter 2.0}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 1 :human 4.9 :critter 2.1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:month 2 :day 2 :human 5.0 :critter 2.5})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种用法完全没有问题，但是&lt;code>filter&lt;/code>最终会处理你的所有数据，这并不总是必要的。因为食物日记已经按日期排序，我们知道&lt;code>take-while&lt;/code>会返回我们想要的数据，而不需要检查任何我们不需要的数据。因此，&lt;code>take-while&lt;/code>可以更有效率。&lt;/p>
&lt;p>通常情况下，你想知道一个集合是否包含对一个谓词函数测试为真的任何值。&lt;code>some&lt;/code>函数就是这样做的，它返回由一个谓词函数返回的第一个真值（任何不是&lt;code>false&lt;/code>或&lt;code>nil&lt;/code>的值）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(some #(&amp;gt; (:critter %) 5) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(some #(&amp;gt; (:critter %) 3) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你没有任何食物日记条目显示你从小动物来源中消耗了超过 5 升的食物，但是你至少有一条显示你消耗了超过 3 升的食物。请注意，第二个例子中的返回值是&lt;code>true&lt;/code>，而不是产生真值的实际条目。原因是匿名函数&lt;code>#(&amp;gt; (:critter %) 3)&lt;/code>返回&lt;code>true&lt;/code>或&lt;code>false&lt;/code>。下面是你如何返回该条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(some #(and (&amp;gt; (:critter %) 3) %) food-journal)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:month 3 :day 1 :human 4.2 :critter 3.3}。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，一个稍有不同的匿名函数使用&lt;code>and&lt;/code>首先检查条件&lt;code>(&amp;gt; (:critter %) 3)&lt;/code>是否为真，然后在条件确实为真时返回条目。&lt;/p>
&lt;h3 id="sort-and-sort-by">sort and sort-by&lt;/h3>
&lt;p>你可以用&lt;code>sort&lt;/code>将元素按升序排序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(sort [3 1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你的排序需求更复杂，你可以使用&lt;code>sort-by&lt;/code>，它允许你将一个函数（有时称为&lt;em>键函数&lt;/em>）应用于一个序列的元素，并使用它返回的值来决定排序顺序。在下面的例子中，取自*&lt;a class="link" href="http://clojuredocs.org/" target="_blank" rel="noopener"
>http://clojuredocs.org/&lt;/a>*，&lt;code>count&lt;/code>是关键函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(sort-by count [&amp;#34;aaa&amp;#34; &amp;#34;c&amp;#34; &amp;#34;bb&amp;#34;] )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;c&amp;#34; &amp;#34;bb&amp;#34; &amp;#34;aaa&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你使用&lt;code>sort&lt;/code>进行排序，元素将按字母顺序进行排序，返回&lt;code>(&amp;quot;aaa&amp;quot; &amp;quot;bb&amp;quot; &amp;quot;c&amp;quot;)&lt;/code>。相反，结果是&lt;code>(&amp;quot;c&amp;quot; &amp;quot;bb&amp;quot; &amp;quot;aaa&amp;quot;)&lt;/code>，因为你是按&lt;code>count&lt;/code>排序，而&lt;code>&amp;quot;c &amp;quot;的计数是1，&lt;/code>&amp;ldquo;bb &amp;ldquo;是 2，`&amp;ldquo;aaa &amp;ldquo;是 3。&lt;/p>
&lt;h3 id="concat">Concat&lt;/h3>
&lt;p>最后, &lt;code>concat&lt;/code>简单地将一个序列的成员附加到另一个序列的末尾:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(concat [1 2] [3 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="惰性序列">惰性序列&lt;/h2>
&lt;p>正如你之前看到的，&lt;code>map&lt;/code>首先在你传递给它的集合上调用&lt;code>seq&lt;/code>。但这并不是故事的全部。许多函数，包括&lt;code>map&lt;/code>和&lt;code>filter&lt;/code>，都返回一个&lt;em>惰性序列&lt;/em>。惰性序列 是一个 seq，它的成员在你试图访问它们时才被计算。计算一个 seq 的成员被称为&lt;em>实现&lt;/em>seq。将计算推迟到需要的时候，可以使你的程序更有效率，而且它还有一个令人惊讶的好处，就是允许你构建无穷的序列。&lt;/p>
&lt;h3 id="演示惰性序列的效率">演示惰性序列的效率&lt;/h3>
&lt;p>为了看到惰性序列的作用，假装你是一个现代任务组的成员，其目的是为了识别吸血鬼。你的情报人员告诉你，在你的城市里只有一个活跃的吸血鬼，而且他们已经帮助你把嫌疑人的名单缩小到一百万人。你的老板给了你一份一百万个社会安全号码的名单，并喊道：&amp;ldquo;搞定它，麦克菲斯维奇！&amp;rdquo;&lt;/p>
&lt;p>值得庆幸的是，你拥有一台 Vampmatic 3000 计算机，这是用于识别吸血鬼的最先进的设备。由于这种猎杀吸血鬼的技术的源代码是专有的，我把它存根出来，模拟执行这项任务所需的时间。这里是一个吸血鬼数据库的子集。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def vampire-database
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {0 {:makes-blood-puns? false, :has-pulse? true :name &amp;#34;McFishwich&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1 {:makes-blood-puns? false, :has-pulse? true :name &amp;#34;McMackson&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2 {:makes-blood-puns? true, :has-pulse? false :name &amp;#34;Damon Salvatore&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3 {:makes-blood-puns? true, :has-pulse? true :name &amp;#34;Mickey Mouse&amp;#34;}})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn vampire-related-details
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [social-security-number]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Thread/sleep 1000)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (get vampire-database social-security-number))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn vampire?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [record]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (and (:makes-blood-puns? record)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (not (:has-pulse? record))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> record))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn identify-vampire
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [social-security-numbers]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (first (filter vampire?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map vampire-related-details social-security-numbers))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你有一个函数，&lt;code>vampire-related-details&lt;/code>，它需要一秒钟从数据库中查找一个条目。接下来，你有一个函数，&lt;code>vampire?&lt;/code>，如果它通过了吸血鬼测试，就返回一条记录；否则，就返回&lt;code>false&lt;/code>。最后，&lt;code>identify-vampire&lt;/code>将社会安全号码 Map 到数据库记录，然后返回第一条表明有吸血鬼的记录。&lt;/p>
&lt;p>为了显示运行这些函数需要多少时间，你可以使用&lt;code>time&lt;/code>操作。当你使用&lt;code>time&lt;/code>时，你的代码的行为与你不使用&lt;code>time&lt;/code>时完全一样，但有一个例外：会打印出一份经过时间的报告。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (vampire-related-details 0))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 1001.042 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;McFishwich&amp;#34;, :makes-blood-puns? false, :has-pulse? true}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个打印行报告了给定操作所花费的时间&amp;ndash;本例是 1,001.042 毫秒。第二行是返回值，在本例中是你的数据库记录。返回值与没有使用&lt;code>time&lt;/code>的情况下完全相同。&lt;/p>
&lt;p>一个不笨的&lt;code>map&lt;/code>的实现首先要对&lt;code>social-security-numbers&lt;/code>的每个成员应用&lt;code>vampire-&lt;/code>related-details&lt;code>，然后再把结果传给&lt;/code>filter`。因为你有一百万个嫌疑人，这将需要一百万秒，也就是 12 天，到那时你的一半城市都会死掉！&amp;quot;。当然，如果结果是唯一的吸血鬼是记录中的最后一个嫌疑人，用懒人版本还是会花那么多时间，但至少有一个很好的机会，它不会。&lt;/p>
&lt;p>因为&lt;code>map&lt;/code>是惰性的，在你试图访问 Map 的元素之前，它实际上并没有将&lt;code>吸血鬼相关的细节&lt;/code>应用于社会安全号码。事实上，&lt;code>map&lt;/code>几乎立刻就会返回一个值。&lt;/p>
&lt;p>第一个打印行报告了给定操作所花费的时间&amp;ndash;本例中是 1,001.042 毫秒。第二行是返回值，在这个例子中是你的数据库记录。返回值与没有使用&lt;code>time&lt;/code>的情况下完全相同。&lt;/p>
&lt;p>一个不笨的&lt;code>map&lt;/code>的实现首先要对&lt;code>social-security-numbers&lt;/code>的每个成员应用&lt;code>vampire-&lt;/code>related-details&lt;code>，然后再把结果传给&lt;/code>filter`。因为你有一百万个嫌疑人，这将需要一百万秒，也就是 12 天，到那时你的一半城市都会死掉！&amp;quot;。当然，如果结果是唯一的吸血鬼是记录中的最后一个嫌疑人，用懒人版本还是会花那么多时间，但至少有一个很好的机会，它不会。&lt;/p>
&lt;p>因为&lt;code>map&lt;/code>是惰性的，在你试图访问 Map 的元素之前，它实际上并没有将&lt;code>吸血鬼相关的细节&lt;/code>应用于社会安全号码。事实上，&lt;code>map&lt;/code>几乎马上就会返回一个值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (def mapped-details (map vampire-related-details (range 0 1000000))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 0.049 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;#39;user/mapped-details
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>range&lt;/code>返回一个由 0 到 999,999 的整数组成的惰性序列。然后，&lt;code>map&lt;/code>返回一个与名称&lt;code>mapped-details&lt;/code>相关的惰性序列。因为&lt;code>map&lt;/code>实际上没有对&lt;code>range&lt;/code>返回的任何元素应用&lt;code>vampire-related-details&lt;/code>，整个操作几乎没有花费任何时间，当然，少于 12 天。&lt;/p>
&lt;p>你可以认为懒人序列是由两部分组成的：一个关于如何实现序列元素的配方和到目前为止已经实现的元素。当你使用&lt;code>map&lt;/code>时，它返回的懒人序列不包括任何已实现的元素，但它确实有生成其元素的配方。每当你试图访问一个未实现的元素时，懒人序列将使用它的配方来生成所请求的元素。&lt;/p>
&lt;p>在前面的例子中，&lt;code>mapped-details&lt;/code>是未实现的。一旦你试图访问&lt;code>mapped-details&lt;/code>的一个成员，它将使用它的配方来生成你所请求的元素，你将产生每秒钟的数据库查询费用。&lt;/p>
&lt;p>在这个例子中，&lt;code>range&lt;/code>返回一个由 0 到 999,999 的整数组成的惰性序列。然后，&lt;code>map&lt;/code>返回一个与&lt;code>mapped-details&lt;/code>名称相关的惰性序列。因为&lt;code>map&lt;/code>实际上没有对&lt;code>range&lt;/code>返回的任何元素应用&lt;code>vampire-related-details&lt;/code>，整个操作几乎没有花费任何时间，当然，少于 12 天。&lt;/p>
&lt;p>你可以认为懒人序列由两部分组成：一个关于如何实现序列元素的配方和到目前为止已经实现的元素。当你使用&lt;code>map&lt;/code>时，它返回的惰性序列不包括任何已实现的元素，但它确实有生成其元素的配方。每当你试图访问一个未实现的元素时，懒人序列将使用它的配方来生成所请求的元素。&lt;/p>
&lt;p>在前面的例子中，&lt;code>mapped-details&lt;/code>是未实现的。一旦你试图访问&lt;code>mapped-details&lt;/code>的一个成员，它将使用它的配方来生成你所请求的元素，你将产生每秒钟的数据库查询费用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (first mapped-details))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 32030.767 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;McFishwich&amp;#34;, :makes-blood-puns? false, :has-pulse? true}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个操作花了大约 32 秒。这比一百万秒好得多，但还是比我们预期的多了 31 秒。毕竟，你只是试图访问第一个元素，所以它应该只花一秒钟。&lt;/p>
&lt;p>花了 32 秒的原因是 Clojure&lt;em>chunks&lt;/em>它的惰性序列，这只是意味着每当 Clojure 要实现一个元素时，它也会预先实现一些下一个元素的实现。在这个例子中，你只想要&lt;code>mapped-details&lt;/code>的第一个元素，但 Clojure 继续前进，也准备了后面的 31 个元素。Clojure 这样做是因为它几乎总是能带来更好的性能。&lt;/p>
&lt;p>值得庆幸的是，惰性的 seq 元素只需要实现一次。再次访问&lt;code>mapped-details&lt;/code>的第一个元素几乎不需要时间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (first mapped-details))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Elapsed time: 0.022 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;McFishwich&amp;#34;, :makes-blood-puns? false, :has-pulse? true}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有了这些新发现的知识，你就可以有效地挖掘吸血鬼数据库，找到带獠牙的罪魁祸首。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(time (identify-vampire (range 0 1000000)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;Elapsed time: 32019.912 msecs&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;Damon Salvatore&amp;#34;, :makes-blood-puns? true, :has-pulse? false}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哦！这就是为什么达蒙会做出那些令人毛骨悚然的双关语的原因。&lt;/p>
&lt;h3 id="无穷序列">无穷序列&lt;/h3>
&lt;p>惰性序列 给你的一个很酷、很有用的能力是构建无穷序列的能力。到目前为止，你只处理过从 Vector 或列表中生成的惰性序列，这些序列是终止的。然而，Clojure 自带了一些函数来创建无穷序列。创建无穷序列的一个简单方法是使用&lt;code>repeat&lt;/code>，它创建一个序列，其每个成员都是你传递的参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(concat (take 8 (repeat &amp;#34;na&amp;#34;)) [&amp;#34;Batman!&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;na&amp;#34; &amp;#34;Batman!&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，你创建了一个无穷的序列，其中每个元素都是字符串 &amp;ldquo;na&amp;rdquo;，然后用它来构建一个可能引起或不引起怀旧情绪的序列。&lt;/p>
&lt;p>你也可以使用&lt;code>repeatedly&lt;/code>，它将调用提供的函数来生成序列中的每个元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(take 3 (repeatedly (fn [] (rand-int 10))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 4 0)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，由&lt;code>repeatedly&lt;/code>返回的惰性序列通过调用匿名函数&lt;code>(fn [] (rand-int 10))&lt;/code>生成每个新元素，该函数返回一个 0 到 9 之间的随机整数。如果你在你的 REPL 中运行这个，你的结果很可能与此不同。&lt;/p>
&lt;p>惰性序列 的配方不需要指定一个端点。像&lt;code>first&lt;/code>和&lt;code>take&lt;/code>这样的函数实现了惰性序列，它们没有办法知道序列的下一步是什么，如果序列一直提供元素，那么它们就会一直取走它们。如果你构建你自己的无穷序列，你就可以看到这一点。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn even-numbers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([] (even-numbers 0))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([n] (cons n (lazy-seq (even-numbers (+ n 2))))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(take 10 (even-numbers))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (0 2 4 6 8 10 12 14 16 18)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子有点令人费解，因为它使用了递归。记住&lt;code>cons&lt;/code>返回一个新的列表，并将一个元素追加到给定的列表中，会有所帮助。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(cons 0 &amp;#39;(2 4 6))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (0 2 4 6)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(顺便说一下，Lisp 程序员在使用&lt;code>cons&lt;/code>函数时称它为&lt;em>consing&lt;/em>)。&lt;/p>
&lt;p>在 &amp;ldquo;偶数 &amp;ldquo;中，你是在对一个惰性列表进行 consing，其中包括一个关于下一个元素的配方（一个函数）（而不是对一个完全实现的列表进行 consing）。&lt;/p>
&lt;p>这就涵盖了惰性序列! 现在你知道了关于序列抽象的所有知识，我们可以转向集合抽象了。&lt;/p>
&lt;h2 id="集合抽象">集合抽象&lt;/h2>
&lt;p>集合的抽象与序列的抽象密切相关。所有 Clojure 的核心数据结构&amp;ndash;Vector、Map、列表和集合&amp;ndash;都参与了这两个抽象。&lt;/p>
&lt;p>序列抽象是关于对成员的单独操作，而集合抽象是关于数据结构的整体。例如，集合函数 &lt;code>count&lt;/code>, &lt;code>empty?&lt;/code>, 和 &lt;code>every?&lt;/code> 不是关于任何单独的元素；它们是关于整体的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(empty?[])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(empty? [&amp;#34;no!&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>实际上，你很少会有意识的说：&amp;ldquo;好的，自己！&amp;quot;。你现在是在和整个集合一起工作。从集合抽象的角度来考虑！&amp;rdquo; 尽管如此，了解这些作为你所使用的函数和数据结构基础的概念还是很有用的。&lt;/p>
&lt;p>现在我们来研究两个常见的集合函数&amp;ndash;&lt;code>into&lt;/code>和&lt;code>conj&lt;/code>，它们的相似性可能会让人有点困惑。&lt;/p>
&lt;h3 id="into">into&lt;/h3>
&lt;p>最重要的集合函数之一是&lt;code>into&lt;/code>。正如你现在所知，许多 seq 函数返回一个 seq，而不是原始数据结构。你可能想把返回值转换成原始值, &lt;code>into&lt;/code>让你做到这一点:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map identity {:sunlight-reaction &amp;#34;Glitter!&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ([:sunlight-reaction &amp;#34;Glitter!&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(into {} (map identity {:sunlight-reaction &amp;#34;Glitter!&amp;#34;}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:sunlight-reaction &amp;#34;Glitter!&amp;#34;}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里，&lt;code>map&lt;/code>函数在得到一个 map 数据结构后返回一个顺序数据结构，并将 seq 转换回 map。&lt;/p>
&lt;p>这也适用于其他数据结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map identity [:garlic :sesame-oil :fried-eggs])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (:garlic :sesame-oil :fried-eggs)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(into [] (map identity [:garlic :sesame-oil :fried-eggs]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [:garlic :sesame-oil :fried-eggs]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，在第一行，&lt;code>map&lt;/code>返回一个序列，我们在第二行使用&lt;code>into&lt;/code>将结果转换为一个 Vector。&lt;/p>
&lt;p>在下面的例子中，我们从一个有两个相同条目的 Vector 开始，&lt;code>map&lt;/code>把它转换为一个列表，然后我们用&lt;code>into&lt;/code>把值粘到一个集合中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map identity [:garlic-clove :garlic-clove])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (:garlic-clove :garlic-clove)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(into #{} (map identity [:garlic-clove :garlic-clove]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{:garlic-clove}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为集合只包含唯一的值，所以集合中最终只有一个值。&lt;/p>
&lt;p>&lt;code>into&lt;/code>的第一个参数不一定是空的。这里，第一个例子显示了如何使用&lt;code>into&lt;/code>向 Map 添加元素，第二个例子显示了如何向 Vector 添加元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(into {:favorite-emotion &amp;#34;gloomy&amp;#34;} [[:sunlight-reaction &amp;#34;Glitter!&amp;#34;]])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:favorite-emotion &amp;#34;gloomy&amp;#34; :sunlight-reaction &amp;#34;Glitter!&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(into [&amp;#34;cherry&amp;#34;] &amp;#39;(&amp;#34;pine&amp;#34; &amp;#34;spruce&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;cherry&amp;#34; &amp;#34;pine&amp;#34; &amp;#34;spruce&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，两个参数也可以是同一类型。在下一个例子中，两个参数都是 Map，而之前所有的例子都有不同类型的参数。它的工作原理和你所期望的一样，返回一个新的 Map，将第二个 Map 的元素添加到第一个 Map 中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(into {:favorite-animal &amp;#34;kitty&amp;#34;} {:least-favorite-smell &amp;#34;dog&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :relationship-with-teenager &amp;#34;creepy&amp;#34;})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:favorite-animal &amp;#34;kitty&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :relationship-with-teenager &amp;#34;creepy&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :least-favorite-smell &amp;#34;dog&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果&lt;code>into&lt;/code>在求职面试中被要求描述它的优势，它会说：&amp;ldquo;我很擅长处理两个集合，并将第二个集合中的所有元素添加到第一个集合中。&amp;rdquo;&lt;/p>
&lt;h3 id="conj">conj&lt;/h3>
&lt;p>&lt;code>conj&lt;/code>也是向一个集合添加元素，但它的方式略有不同。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(conj [0] [1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 [1]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>呜呜呜! 看起来它把整个 Vector&lt;code>[1]&lt;/code>添加到&lt;code>[0]&lt;/code>。与&lt;code>into&lt;/code>比较。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(into [0] [1])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是我们如何用&lt;code>conj&lt;/code>做同样的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(conj [0] 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，数字 1 是作为标量（单数，非集合）值传递的，而&lt;code>into&lt;/code>的第二个参数必须是一个集合。&lt;/p>
&lt;p>你可以提供尽可能多的元素与&lt;code>conj&lt;/code>一起添加，你也可以添加到其他集合中，如 map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(conj [0] 1 2 3 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1 2 3 4]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(conj {:time &amp;#34;midnight&amp;#34;} [:place &amp;#34;ye olde cemetarium&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:place &amp;#34;ye olde cemetarium&amp;#34; :time &amp;#34;midnight&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>conj&lt;/code>和&lt;code>into&lt;/code>如此相似，你甚至可以用&lt;code>into&lt;/code>来定义&lt;code>conj&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn my-conj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [target &amp;amp; additions]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (into target additions))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-conj [0] 1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1 2 3]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="功能函数">功能函数&lt;/h2>
&lt;p>学习利用 Clojure 的接受函数作为参数和返回函数作为值的能力是非常有趣的，即使它需要一些适应。&lt;/p>
&lt;p>Clojure 的两个函数，&lt;code>apply&lt;/code>和&lt;code>partial&lt;/code>，可能看起来特别奇怪，因为它们都&lt;em>接受&lt;/em>和&lt;em>返回&lt;/em>函数。让我们来解开它们的疑惑。&lt;/p>
&lt;h3 id="apply">Apply&lt;/h3>
&lt;p>&lt;code>apply&lt;/code> 会展开一个序列，所以它可以被传递给一个期望有其余参数的函数。例如，&lt;code>max&lt;/code>接受任何数量的参数，并返回所有参数中最大的一个。这里是你如何找到最大的数字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(max 0 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但如果你想找到一个 Vector 的最大元素，怎么办？你不能只把 Vector 传给&lt;code>max&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(max [0 1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1 2]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这不会返回 Vector 中最大的元素，因为&lt;code>max&lt;/code>返回所有传递给它的参数中最大的，在这种情况下，你只是传递给它一个包含所有你想比较的数字的 Vector，而不是把数字作为单独的参数传递进去。&lt;code>apply&lt;/code>是这种情况的完美选择。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(apply max [0 1 2])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过使用&lt;code>apply&lt;/code>，就像你调用&lt;code>(max 0 1 2)&lt;/code>一样。你经常会像这样使用&lt;code>apply&lt;/code>，对一个集合的元素进行分解，使它们作为单独的参数被传递给一个函数。&lt;/p>
&lt;p>还记得我们之前是如何用 &amp;ldquo;into &amp;ldquo;来定义 &amp;ldquo;conj &amp;ldquo;的吗？那么，我们也可以通过使用&lt;code>apply&lt;/code>在&lt;code>conj&lt;/code>的基础上定义&lt;code>into&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn my-into
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [target additions]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply conj target additions))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-into [0] [1 2 3])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [0 1 2 3]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对&lt;code>my-into&lt;/code>的调用相当于调用&lt;code>(conj [0] 1 2 3)&lt;/code>。&lt;/p>
&lt;h3 id="partial">Partial&lt;/h3>
&lt;p>&lt;code>partial&lt;/code>接收一个函数和任意数量的参数。然后它返回一个新的函数。当你调用返回的函数时，它用你提供的原参数和新参数一起调用原函数。&lt;/p>
&lt;p>这里有一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def add10 (partial + 10))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(add10 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 13
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(add10 5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 15
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def add-missing-elements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (partial conj [&amp;#34;water&amp;#34; &amp;#34;earth&amp;#34; &amp;#34;air&amp;#34;]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(add-missing-elements &amp;#34;unobtainium&amp;#34; &amp;#34;adamantium&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;water&amp;#34; &amp;#34;earth&amp;#34; &amp;#34;air&amp;#34; &amp;#34;unobtainium&amp;#34; &amp;#34;adamantium&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以当你调用&lt;code>add10&lt;/code>时，它会调用原始函数和参数&lt;code>（+ 10）&lt;/code>，并附加你调用&lt;code>add10&lt;/code>的任何参数。为了帮助澄清&lt;code>partial&lt;/code>的工作原理，下面演示了如何定义：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn my-partial
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [partialized-fn &amp;amp; args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [&amp;amp; more-args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply partialized-fn (into args more-args))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def add20 (my-partial + 20))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(add20 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 23
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>add20&lt;/code>的值是由&lt;code>my-partial&lt;/code>返回的匿名函数。这个匿名函数是这样定义的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fn [&amp;amp; more-args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (apply + (into [20] more-args)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般来说，当你发现你在许多不同的情况下重复相同的函数和参数组合时，你会想使用 partial。这个玩具例子显示了你如何使用&lt;code>partial&lt;/code>来专门化一个记录器，创建一个&lt;code>warn&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn lousy-logger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [log-level message]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (condp = log-level
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :warn (clojure.string/lower-case message)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :emergency (clojure.string/upper-case message)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def warn (partial lousy-logger :warn))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(warn &amp;#34;Red light ahead&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;red light ahead&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里调用&lt;code>(warning &amp;quot;Red light ahead&amp;quot;)&lt;/code>与调用&lt;code>(lousy-logger :warning &amp;quot;Red light ahead&amp;quot;)&lt;/code>是相同的。&lt;/p>
&lt;h3 id="complement">Complement&lt;/h3>
&lt;p>早些时候，你创建了&lt;code>识别吸血鬼&lt;/code>函数，以便在一百万人中找到一个吸血鬼。如果你想创建一个函数来寻找所有的人类呢？也许你想给他们发送感谢卡，因为他们没有成为不死的掠夺者。这里是你可以做的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn identify-humans
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [social-security-numbers]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (filter #(not (vampire? %))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map vampire-related-details social-security-numbers)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看看&lt;code>filter&lt;/code>的第一个参数，&lt;code>#(not (vampire? %))&lt;/code>。想要得到一个布尔函数的&lt;em>complement&lt;/em>（否定）是很常见的，所以有一个函数，&lt;code>complement&lt;/code>，用于此。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def not-vampire? (complement vampire?))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn identify-humans
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [social-security-numbers]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (filter not-vampire?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map vampire-related-details social-security-numbers)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是你如何实现 &amp;ldquo;complement&amp;quot;的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn my-complement
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [fun]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (fn [&amp;amp; args]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (not (apply fun args))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def my-pos? (complement neg?))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-pos? 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-pos? -1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，&lt;code>complement&lt;/code>是一个不起眼的函数。它只做一件小事，而且做得很好。&lt;code>complement&lt;/code>使创建一个&lt;code>不吸血&lt;/code>的函数变得微不足道，而且任何阅读代码的人都能理解代码的意图。&lt;/p>
&lt;p>这不会为你提供数兆字节的数据的 MapReduce 或类似的东西，但它确实证明了高阶函数的力量。它们允许你以一种在某些语言中不可能实现的方式建立起实用函数库。总的来说，这些实用函数使你的生活变得更加轻松。&lt;/p>
&lt;h2 id="为华盛顿州福克斯警察局fwpd编写一个复杂的吸血鬼数据分析程序">为华盛顿州福克斯警察局（FWPD）编写一个复杂的吸血鬼数据分析程序&lt;/h2>
&lt;p>为了把所有的事情联系起来，让我们为华盛顿州福克斯警察局（FWPD）编写一个复杂的吸血鬼数据分析程序的雏形。&lt;/p>
&lt;p>FWPD 有一个花哨的新数据库技术，叫做&lt;em>CSV&lt;/em> &lt;em>（逗号-**分隔的&lt;/em>值）&lt;em>。你的工作是解析这个最先进的 CSV，并分析它是否有潜在的吸血鬼。我们将通过过滤每个嫌疑人的&lt;/em>闪光指数*来做到这一点，这是一个由某个少女开发的对嫌疑人的吸血鬼性的 0-10 预测。继续并为你的工具创建一个新的 Leiningen 项目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">lein new app fwpd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在新的&lt;em>fwpd&lt;/em>目录下，创建一个名为&lt;em>suspects.csv&lt;/em>的文件，输入如下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Edward Cullen,10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bella Swan,0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Charlie Swan,0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Jacob Black,3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Carlisle Cullen,6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在是时候通过建立&lt;em>fwpd/src/fwpd/core.clj&lt;/em>文件来弄脏你的手了。我建议你启动一个新的 REPL 会话，这样你就可以边走边试。在 Emacs 中，你可以通过打开&lt;em>fwpd/**src/fwpd/core.clj&lt;/em>并运行&lt;strong>M-x&lt;/strong> cider-restart 来实现。一旦 REPL 启动，删除&lt;em>core.clj&lt;/em>的内容，然后加入以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(ns fwpd.core)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def filename &amp;#34;suspects.csv&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一行建立了命名空间，第二行只是使你创建的 CSV 更容易被引用。你可以通过编译你的文件（Emacs 中的&lt;strong>C-c C-k&lt;/strong>）并运行以下程序，在你的 REPL 中做一个快速的理智检查。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(slurp filename)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Edward Cullen,10\nBella Swan,0\nCharlie Swan,0\nJacob Black, 3\nCarlisle Cullen, 6&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果&lt;code>slurp&lt;/code>函数没有返回前面的字符串，试着在&lt;em>core.clj&lt;/em>打开的情况下重新启动你的 REPL 会话。&lt;/p>
&lt;p>接下来，在&lt;em>core.clj&lt;/em>中添加这个内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (def vamp-keys [:name :glitter-index])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ (defn str-&amp;gt;int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [str]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (Integer. str))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ (def conversions {:name identity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :glitter-index str-&amp;gt;int})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ (defn convert
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [vamp-key value]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ((get conversions vamp-key) value))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最终，你会得到一串看起来像&lt;code>{:name &amp;quot;Edward Cullen&amp;quot; :glitter-index 10}&lt;/code>的 Map，前面的定义可以帮助你达到目的。首先，&lt;code>vamp-keys&lt;/code>➊是一个键的 Vector，你很快会用它来创建吸血鬼 Map。接下来，函数&lt;code>str-&amp;gt;int&lt;/code>➋将一个字符串转换为一个整数。Map&lt;code>conversions&lt;/code>➌将一个转换函数与每个吸血鬼键相关联。你根本不需要转换名字，所以它的转换函数是&lt;code>identity&lt;/code>，它只是返回传递给它的参数。熠熠生辉的索引被转换为一个整数，所以它的转换函数是&lt;code>str-&amp;gt;int&lt;/code>。最后，&lt;code>convert&lt;/code>函数➍接收一个 vamp 键和一个值，并返回转换后的值。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(convert :glitter-index &amp;#34;3&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在把这个添加到你的文件中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn parse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Convert a CSV into rows of columns&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [string]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map #(clojure.string/split % #&amp;#34;,&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.string/split string #&amp;#34;\n&amp;#34;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>parse&lt;/code>函数接收一个字符串，首先在换行符上进行分割，创建一个字符串的序列。接下来，它对字符串序列进行 Map，在逗号字符上分割每一个字符串。试着在你的 CSV 上运行&lt;code>parse&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(parse (slurp filename))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; ([&amp;#34;Edward Cullen&amp;#34; &amp;#34;10&amp;#34;] [&amp;#34;Bella Swan&amp;#34; &amp;#34;0&amp;#34;] [&amp;#34;Charlie Swan&amp;#34; &amp;#34;0&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Jacob Black&amp;#34; &amp;#34;3&amp;#34;] [&amp;#34;Carlisle Cullen&amp;#34; &amp;#34;6&amp;#34;])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来的代码将 Vector 序列与你的吸血鬼钥匙结合起来，创建 Map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn mapify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Return a seq of maps like {:name \&amp;#34;Edward Cullen\&amp;#34; :glitter-index 10}&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [rows]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map (fn [unmapped-row]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (reduce (fn [row-map [vamp-key value]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (assoc row-map vamp-key (convert vamp-key value)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map vector vamp-keys unmapped-row)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rows))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个函数中，&lt;code>map&lt;/code>通过使用&lt;code>reduce&lt;/code>将每一行 Vector 如&lt;code>[&amp;quot;Bella Swan&amp;quot; 0]&lt;/code>转化为一个 Map，其方式与上面&amp;rdquo;&lt;code>reduce&lt;/code>&amp;ldquo;中的第一个例子相似。首先，&lt;code>map&lt;/code>创建一个键值对序列，如&lt;code>([:name &amp;quot;Bella Swan&amp;quot;] [:glitter-index 0])&lt;/code>。然后，&amp;ldquo;reduce &amp;ldquo;通过将一个 vamp 键和一个转换后的 vamp 值关联到 &amp;ldquo;row-map &amp;ldquo;来建立一个 Map。下面是第一行的 Map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(first (mapify (parse (slurp filename))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:glitter-index 10, :name &amp;#34;Edward Cullen&amp;#34; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，添加这个&lt;code>glitter-filter&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn glitter-filter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [minimum-glitter records]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (filter #(&amp;gt;= (:glitter-index %) minimum-glitter) records))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这需要完全 Map 的吸血鬼记录，并过滤掉那些&lt;code>:glitter-index&lt;/code>小于所提供的&lt;code>minimum-glitter&lt;/code>的记录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(glitter-filter 3 (mapify (parse (slurp filename))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">({:name &amp;#34;Edward Cullen&amp;#34;, :glitter-index 10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;Jacob Black&amp;#34;, :glitter-index 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;Carlisle Cullen&amp;#34;, :glitter-index 6})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Et voilà! 你现在离实现你的梦想又近了一步，即成为一名猎杀超自然生物的义务警员。你最好去围捕那些粗略的人物!&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>在本章中，你了解到 Clojure 强调对抽象的编程。序列抽象处理的是对序列中各个元素的操作，而 seq 函数通常将其参数转换为 seq，并返回一个惰性的 seq。惰性求值通过将计算推迟到需要时再进行，从而提高性能。你所学到的另一个抽象，即集合抽象，处理的是整个数据结构。最后，你学到的最重要的东西是，你不应该相信那些在阳光下闪光的人。&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;p>你现在拥有的吸血鬼分析程序已经领先于市场上的任何其他程序几十年了。但你怎样才能使它变得更好呢？我建议尝试以下几点。&lt;/p>
&lt;ol>
&lt;li>把你的闪光过滤器的结果变成一个名字的列表。&lt;/li>
&lt;li>写一个函数，&lt;code>append&lt;/code>，它将把一个新的嫌疑人追加到你的嫌疑人列表中。&lt;/li>
&lt;li>写一个函数，&lt;code>validate&lt;/code>，它将在你&lt;code>append&lt;/code>时检查&lt;code>:name&lt;/code>和&lt;code>:glitter-index&lt;/code>是否存在。&lt;code>validate&lt;/code>函数应该接受两个参数：一个类似于&lt;code>conversions&lt;/code>的验证函数的关键词 Map，以及要验证的记录。&lt;/li>
&lt;li>编写一个函数，将你的 Map 列表转换为 CSV 字符串。你需要使用&lt;code>clojure.string/join&lt;/code>函数。&lt;/li>
&lt;/ol>
&lt;p>祝你好运，McFishwich!&lt;/p></description></item><item><title>Chapter3 速成班</title><link>https://example.com/p/chapter3-%E9%80%9F%E6%88%90%E7%8F%AD/</link><pubDate>Thu, 13 Jan 2022 11:12:19 +0800</pubDate><guid>https://example.com/p/chapter3-%E9%80%9F%E6%88%90%E7%8F%AD/</guid><description>&lt;h1 id="做事情clojure-速成班">做事情：Clojure 速成班&lt;/h1>
&lt;p>是时候学习如何用 Clojure 真正地&lt;em>做事&lt;/em>了! 该死的! 尽管你无疑已经听说过 Clojure 令人敬畏的并发支持和其他了不起的功能，但 Clojure 最突出的特点是它是一种 Lisp 语言。在本章中，你将探索构成这个 Lisp 核心的元素：语法、函数和数据。它们将共同为你在 Clojure 中表示和解决问题打下坚实的基础。&lt;/p>
&lt;p>在打下这个基础之后，你将能够编写一些超级重要的代码。在最后一节中，你将通过创建一个霍比特人的模型，并编写一个函数将其打在一个随机的位置上，从而将一切联系起来。超级! 重要的!&lt;/p>
&lt;p>当你阅读本章时，我建议你在 REPL 中输入例子并运行它们。用一种新的语言编程是一种技能，就像约德尔舞或花样游泳一样，你必须通过练习来学习它。 请留意它!&lt;/p>
&lt;h2 id="语法">语法&lt;/h2>
&lt;p>Clojure 的语法很简单。像所有的 Lisp 一样，它采用了统一的结构、少量的特殊运算符，以及从藏在麻省理工学院下面的小括号矿井中不断提供的小括号，Lisp 就是在那里诞生的。&lt;/p>
&lt;h3 id="form">Form&lt;/h3>
&lt;p>所有的 Clojure 代码都是以统一结构编写的。Clojure 可以识别两种结构。&lt;/p>
&lt;ul>
&lt;li>数据结构的字面表示（如数字、字符串、Map 和 Vector）&lt;/li>
&lt;li>操作&lt;/li>
&lt;/ul>
&lt;p>我们使用术语&lt;em>form&lt;/em>来指代有效的代码。我有时也会用&lt;em>表达式&lt;/em>来指代 Clojure Form。但不要太纠结于术语。Clojure &lt;em>求值&lt;/em>每一个 Form，以产生一个值。这些字面意义的表达都是有效的 Form。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;a string&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[&amp;#34;a&amp;#34; &amp;#34;vector&amp;#34; &amp;#34;of&amp;#34; &amp;#34;strings&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然，你的代码很少包含自由浮动的字符，因为它们本身实际上并不做什么。相反，你会在操作中使用字面符号。操作是你&lt;em>做事情&lt;/em>的方式。所有操作的 Form 都是：&lt;em>开括号&lt;/em>，&lt;em>操作符&lt;/em>，&lt;em>操作数&lt;/em>，&lt;em>闭括号&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(operator operand1 operand2 ... operandn)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，这里没有逗号。Clojure 使用空格来分隔操作数，它将逗号视为空格。下面是一些操作的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ 1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(str &amp;#34;It was the panda &amp;#34; &amp;#34;in the library &amp;#34; &amp;#34;with a dust buster&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;It was the panda in the library with a dust buster&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/panda.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>在第一个操作中，运算符&lt;code>+&lt;/code>将操作数&lt;code>1&lt;/code>、&lt;code>2&lt;/code>和&lt;code>3&lt;/code>相加。在第二个操作中，运算符&lt;code>str&lt;/code>将三个字符串连接起来，形成一个新的字符串。这两种 Form 都是有效的。这里有一个不是 Form 的东西，因为它没有一个结束的小括号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clojure 的结构统一性可能与你所习惯的不同。在其他语言中，不同的操作可能有不同的结构，这取决于操作符和操作数。例如，JavaScript 采用的是 中缀符号、点运算符和小括号的大杂烩。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">1 + 2 + 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;It was the panda &amp;#34;.concat(&amp;#34;in the library &amp;#34;, &amp;#34;with a dust buster&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相比之下，Clojure 的结构是非常简单和一致的。无论你使用哪种运算符，或对哪种数据进行操作，其结构都是一样的。&lt;/p>
&lt;h3 id="控制流">控制流&lt;/h3>
&lt;p>让我们来看看三个基本的控制流操作符。&lt;code>if&lt;/code>, &lt;code>do&lt;/code>, 和&lt;code>when&lt;/code>。在本书中，你会遇到更多的操作，但这些操作可以让你开始。&lt;/p>
&lt;h4 id="if">if&lt;/h4>
&lt;p>这是一个 &lt;code>if&lt;/code> 表达式的一般结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if boolean-form
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then-form
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> optional-else-form)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>布尔 Form 只是一个求值为真或假的 Form。你会在下一节中了解到逻辑真和逻辑假。下面是几个&lt;code>if&lt;/code>的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Zeus&amp;#39;s hammer!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Aquaman&amp;#39;s trident!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;By Zeus&amp;#39;s hammer!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(if false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Zeus&amp;#39;s hammer!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Aquaman&amp;#39;s trident!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;By Aquaman&amp;#39;s trident!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一个例子返回 &amp;ldquo;By Zeus&amp;rsquo;s hammer!&amp;quot;，因为其布尔 Form 求值为 &lt;code>true&lt;/code>，是一个真值；第二个例子返回 &amp;ldquo;By Aquaman&amp;rsquo;s trident!&amp;quot;，因为其布尔 Form &amp;ldquo;false&amp;rdquo;，求值为一个假值。&lt;/p>
&lt;p>你也可以省略&lt;code>else&lt;/code>分支。如果你这样做，并且布尔表达式是假的，Clojure 会返回&lt;code>nil&lt;/code>，就像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Odin&amp;#39;s Elbow!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意&lt;code>if&lt;/code>使用操作数位置将操作数与&lt;code>then&lt;/code>和&lt;code>else&lt;/code>分支联系起来：第一个操作数是&lt;code>then&lt;/code>分支，第二个操作数是（可选）&lt;code>else&lt;/code>分支。因此，每个分支只能有一种 Form。这与大多数语言不同。例如，你可以在 Ruby 中这样写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doer.do_thing(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doer.do_thing(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> other_doer.do_thing(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> other_doer.do_thing(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了绕过这个明显的限制，你可以使用&lt;code>do&lt;/code>操作符。&lt;/p>
&lt;h4 id="do">do&lt;/h4>
&lt;p>&lt;code>do&lt;/code>操作符可以让你在括号中&lt;em>包裹&lt;/em>起多个 Form，并运行其中的每一个。在你的 REPL 中尝试以下操作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (println &amp;#34;Success!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Zeus&amp;#39;s hammer!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do (println &amp;#34;Failure!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;By Aquaman&amp;#39;s trident!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Success!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;By Zeus&amp;#39;s hammer!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个操作符让你在&lt;code>if&lt;/code>表达式的每个分支中做多件事情。在这种情况下，会发生两件事。&lt;code>Success!&lt;/code>被打印在 REPL 中，&lt;code>By Zeus's hammer!&lt;/code>被作为整个&lt;code>if&lt;/code>表达式的值返回。&lt;/p>
&lt;h4 id="when">when&lt;/h4>
&lt;p>&lt;code>when&lt;/code>操作符就像&lt;code>if&lt;/code>和&lt;code>do&lt;/code>的组合，但没有&lt;code>else&lt;/code>分支。下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(when true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println &amp;#34;Success!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;abra cadabra&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Success!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;abra cadabra&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你想在某个条件为真时做多件事，而你总是想在条件为假时返回&lt;code>nil&lt;/code>，请使用&lt;code>when&lt;/code>。&lt;/p>
&lt;h4 id="nil-true-false-truthiness-equality-and-boolean-expressions">nil, true, false, Truthiness, Equality, and Boolean Expressions&lt;/h4>
&lt;p>Clojure 有&lt;code>true&lt;/code>和&lt;code>false&lt;/code>。&lt;code>nil&lt;/code>在 Clojure 中用来表示&lt;em>没有值&lt;/em>。你可以用&lt;code>nil?&lt;/code>函数来检查一个值是否为&lt;code>nil&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(nil? 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(nil? nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>nil&lt;/code>和&lt;code>false&lt;/code>都是用来表示逻辑上的虚假性，而所有其他的值都是逻辑上的真实性。&lt;em>Truthy&lt;/em>和&lt;em>falsey&lt;/em>指的是在布尔表达式中如何处理一个值，比如传递给&lt;code>if&lt;/code>的第一个表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if &amp;#34;bears eat beets&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;bears beets Battlestar Galactica&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;bears beets Battlestar Galactica&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(if nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;This won&amp;#39;t be the result because nil is falsey&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;nil is falsey&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;nil is falsey&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，字符串&lt;code>bears eat beets&lt;/code>被认为是&lt;code>true&lt;/code>，所以&lt;code>if&lt;/code>表达式求值为 bears beets Battlestar Galactica`。第二个例子显示一个 nil 是假的。&lt;/p>
&lt;p>Clojure 的等于运算符是&lt;code>=&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(= 1 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(= nil nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(= 1 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他一些语言要求你在比较不同类型的值时使用不同的运算符。例如，你可能不得不使用某种专门为字符串制作的特殊字符串等于运算符。但在使用 Clojure 的内置数据结构时，你不需要像这样奇怪或繁琐的东西来测试等于。&lt;/p>
&lt;p>Clojure 使用布尔运算符&lt;code>or&lt;/code>和&lt;code>and&lt;/code>。&lt;code>or&lt;/code>返回第一个真值或最后一个值。&lt;code>and&lt;/code>返回第一个 false 的值，如果没有 false 的值，则返回最后一个 true 的值。让我们先看一下&lt;code>or&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(or false nil :large_I_mean_venti :why_cant_I_just_say_large)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :large_I_mean_venti
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(or (= 0 1) (= &amp;#34;yes&amp;#34; &amp;#34;no&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(or nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，返回值是&lt;code>:large_I_mean_venti&lt;/code>，因为它是第一个真值。第二个例子没有真值，所以&lt;code>or&lt;/code>返回最后一个值，即&lt;code>false&lt;/code>。在最后一个例子中，同样没有真值存在，&lt;code>or&lt;/code>返回最后一个值，即&lt;code>nil&lt;/code>。现在我们来看看&lt;code>and&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(and :free_wifi :hot_coffee)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :hot_coffee
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(and :feelin_super_cool nil false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，&lt;code>and&lt;/code>返回最后一个真值，&lt;code>:hot_coffee&lt;/code>。在第二个例子中, &lt;code>and&lt;/code>返回&lt;code>nil&lt;/code>, 这是第一个 false 的值.&lt;/p>
&lt;h3 id="用-def-命名">用 def 命名&lt;/h3>
&lt;p>在 Clojure 中, 你可以使用&lt;code>def&lt;/code>将一个名字与一个值绑定起来:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def failed-protagonist-names
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Larry Potter&amp;#34; &amp;#34;Doreen the Explorer&amp;#34; &amp;#34;The Incredible Bulk&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">failed-protagonist-names
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Larry Potter&amp;#34; &amp;#34;Doreen the Explorer&amp;#34; &amp;#34;The Incredible Bulk&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/larry-potter.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>在这个例子中，你把名字&lt;code>failed-protagonist-names&lt;/code>绑定到一个包含三个字符串的 Vector（你将在&lt;a class="link" href="https://www.braveclojure.com/do-things/#Anchor-3" target="_blank" rel="noopener"
>&amp;ldquo;Vector &amp;ldquo;第 45 页&lt;/a>中了解 Vector）。&lt;/p>
&lt;p>请注意，我使用的是 &amp;ldquo;绑定&amp;quot;一词，而在其他语言中，你会说你是在给一个&lt;em>变量&lt;/em>赋值。那些其他语言通常鼓励你对同一个变量进行多次赋值。&lt;/p>
&lt;p>例如，在 Ruby 中，你可以对一个变量进行多次赋值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">severity = :mild
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error_message = &amp;#34;OH GOD! IT&amp;#39;S A DISASTER! WE&amp;#39;RE &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if severity == :mild
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error_message = error_message + &amp;#34;MILDLY INCONVENIENCED!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">else
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error_message = error_message + &amp;#34;DOOOOOOOMED!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可能想在 Clojure 中做类似的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def severity :mild)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def error-message &amp;#34;OH GOD! IT&amp;#39;S A DISASTER! WE&amp;#39;RE &amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(if (= severity :mild)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (def error-message (str error-message &amp;#34;MILDLY INCONVENIENCED!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (def error-message (str error-message &amp;#34;DOOOOOOOMED!&amp;#34;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然而，像这样改变与名字相关的值会使你更难理解你的程序的行为，因为更难知道哪个值是与名字相关的，或者为什么这个值可能已经改变了。Clojure 有一套处理变化的工具，你会在第 10 章中了解到。随着你对 Clojure 的学习，你会发现你很少需要改变一个名字/值的关联。下面是你写前面代码的一种方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn error-message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [severity]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;OH GOD! IT&amp;#39;S A DISASTER! WE&amp;#39;RE &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (= severity :mild)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;MILDLY INCONVENIENCED!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;DOOOOOOOMED!&amp;#34;)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(error-message :mild)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;OH GOD! IT&amp;#39;S A DISASTER! WE&amp;#39;RE MILDLY INCONVENIENCED!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，你创建了一个函数，&lt;code>error-message&lt;/code>，它接受一个参数，&lt;code>severity&lt;/code>，并使用它来决定返回哪个字符串。然后你用&lt;code>:mild&lt;/code>作为严重程度来调用这个函数。你将在&lt;a class="link" href="https://www.braveclojure.com/do-things/#Anchor-4" target="_blank" rel="noopener"
>&amp;ldquo;函数 &amp;ldquo;第 48 页&lt;/a>中学习所有关于创建函数的知识；与此同时，你应该把&lt;code>def&lt;/code>当作定义常量。在接下来的几章中，你将学习如何通过接受函数式编程范式来处理这个明显的限制。&lt;/p>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;p>Clojure 带有少量的数据结构，你在大多数时候都会用到。如果你来自面向对象的背景，你会惊讶于你可以用这里介绍的看似基本的类型做很多事情。&lt;/p>
&lt;p>Clojure 的所有数据结构都是不可改变的，这意味着你不能在原地改变它们。例如，在 Ruby 中，你可以做以下事情来重新分配索引为 0 的失败主角的名字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">failed_protagonist_names = [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Larry Potter&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Doreen the Explorer&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;The Incredible Bulk&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">failed_protagonist_names[0] = &amp;#34;Gary Potter&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">failed_protagonist_names
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># =&amp;gt; [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># &amp;#34;Gary Potter&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># &amp;#34;Doreen the Explorer&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># &amp;#34;The Incredible Bulk&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clojure 没有与之对应的东西。你会在第 10 章中了解到更多关于 Clojure 这样实现的原因，但现在只学习如何做事情，而不考虑所有的哲学问题，这很有趣。不多说了，让我们来看看 Clojure 中的数字。&lt;/p>
&lt;h3 id="number">Number&lt;/h3>
&lt;p>Clojure 有相当复杂的 Number 支持。我不会花太多时间纠缠于无聊的技术细节（比如强制和传染），因为那会妨碍&lt;em>做事情&lt;/em>。如果你对这些枯燥的细节感兴趣，请查看*&lt;a class="link" href="http://clojure.org/data_structures#Data%20Structures-Numbers" target="_blank" rel="noopener"
>http://clojure.org/data_structures#Data%20Structures-Numbers&lt;/a>*的文档。可以说，Clojure 会很高兴地处理你扔给它的所有东西。&lt;/p>
&lt;p>在此期间，我们将使用整数和浮点数。我们还将使用分数，Clojure 可以直接表示这些分数。下面分别是一个整数、一个浮点数和一个分数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">93
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1.2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1/5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="字符串">字符串&lt;/h3>
&lt;p>字符串代表文本。这个名字来自于古代腓尼基人，他们在一次涉及纱线的事故后，有一天发明了字母表。下面是一些字符串字面的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#34;Lord Voldemort&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;\&amp;#34;He who must not be named\&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;\&amp;#34;Great cow of Moscow!\&amp;#34; - Hermes Conrad&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/wookie.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>注意，Clojure 只允许用双引号来划分字符串。例如，&amp;lsquo;Lord Voldemort&amp;rsquo; 就不是一个有效的字符串。还要注意，Clojure 没有字符串插值。它只允许通过&lt;code>str&lt;/code>函数进行拼接。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def name &amp;#34;Chewbacca&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(str &amp;#34;\&amp;#34;Uggllglglglglglll\&amp;#34; - &amp;#34; name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Uggllglglglglglll&amp;#34; - Chewbacca
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="map">Map&lt;/h3>
&lt;p>Map 类似于其他语言中的字典或哈希值。它们是一种将一些值与另一些值联系起来的方式。Clojure 中的两种 Map 是哈希 Map 和排序 Map。我将只介绍更基本的哈希 Map。让我们来看看 Map 字面的一些例子。这里有一个空 Map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>:first-name&lt;/code>和&lt;code>:last-name&lt;/code>是关键字（我将在下一节介绍这些）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{:first-name &amp;#34;Charlie&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :last-name &amp;#34;McFishwich&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我们把&lt;code>&amp;quot;string-key&amp;quot;&lt;/code>和&lt;code>+&lt;/code>函数联系起来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{&amp;#34;string-key&amp;#34; +}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Map 可以被嵌套。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{:name {:first &amp;#34;John&amp;#34; :middle &amp;#34;Jacob&amp;#34; :last &amp;#34;Jingleheimerschmidt&amp;#34;}}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，Map 的值可以是任何类型&amp;ndash;字符串、数字、Map、Vector，甚至函数。Clojure 并不关心这个问题。&lt;/p>
&lt;p>除了使用 map 字面，你还可以使用&lt;code>hash-map&lt;/code>函数来创建一个 map。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(hash-map :a 1 :b 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:a 1 :b 2}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以用&lt;code>get&lt;/code>函数在 Map 中查询数值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get {:a 0 :b 1} :b)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(get {:a 0 :b {:c &amp;#34;ho hum&amp;#34;}} :b)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:c &amp;#34;ho hum&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这两个例子中，我们向&lt;code>get&lt;/code>询问给定 Map 中&lt;code>:b&lt;/code>键的值&amp;ndash;在第一个例子中，它返回&lt;code>1&lt;/code>，而在第二个例子中，它返回嵌套 Map&lt;code>{:c &amp;quot;ho hum&amp;quot;}&lt;/code>。&lt;/p>
&lt;p>如果没有找到你的键，&lt;code>get&lt;/code>将返回&lt;code>nil&lt;/code>，或者你可以给它一个默认值，例如&lt;code>&amp;quot;unicorns？&amp;quot;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get {:a 0 :b 1} :c)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(get {:a 0 :b 1} :c &amp;#34;unicorns?&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;unicorns?&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>get-in&lt;/code>函数可以让你在嵌套 Map 中查询数值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get-in {:a 0 :b {:c &amp;#34;ho hum&amp;#34;}} [:b :c])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;ho hum&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>另一种在 Map 中查询数值的方法是把 Map 当作一个以键为参数的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">({:name &amp;#34;The Human Coffeepot&amp;#34;} :name)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;The Human Coffeepot&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以用 Map 做的另一件很酷的事情是把 Keywords 作为函数来查询它们的值，这就引出了下一个主题，Keywords。&lt;/p>
&lt;h3 id="keywords">Keywords&lt;/h3>
&lt;p>了解 Clojure 关键字的最好方法是看它们是如何被使用的。正如你在上一节中所看到的，它们主要是作为 Map 中的键来使用。下面是一些 Keywords 的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">:a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:rumplestiltsken
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:34
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:_?
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Keywords 可以作为函数使用，在数据结构中查找相应的值。例如，你可以在一个 Map 中查找&lt;code>:a&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(:a {:a 1 :b 2 :c 3})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这相当于。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get {:a 1 :b 2 :c 3} :a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以提供一个默认值，和&lt;code>get&lt;/code>一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(:d {:a 1 :b 2 :c 3} &amp;#34;No gnome knows homes like Noah knows&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;No gnome knows homes like Noah knows&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用关键字作为一个函数是令人愉快的简洁，Real Clojurists 一直在这样做。你也应该这样做!&lt;/p>
&lt;h3 id="vector">Vector&lt;/h3>
&lt;p>Vector 类似于数组, 它是一个以 0 为索引的 Set。例如, 下面是一个 Vector 的字面意思:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[3 2 1]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我们要返回一个 Vector 的第 0 个元素。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get [3 2 1] 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是另一个按索引获取的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get [&amp;#34;a&amp;#34; {:name &amp;#34;Pugsley Winterbottom&amp;#34;} &amp;#34;c&amp;#34;] 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; {:name &amp;#34;Pugsley Winterbottom&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以看到，Vector 元素可以是任何类型，而且你可以混合类型。还注意到我们使用的&lt;code>get&lt;/code>函数与我们在 Map 中查找数值时使用的相同。&lt;/p>
&lt;p>你可以用&lt;code>vector&lt;/code>函数来创建 Vector。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(vector &amp;#34;creepy&amp;#34; &amp;#34;full&amp;#34; &amp;#34;moon&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;creepy&amp;#34; &amp;#34;full&amp;#34; &amp;#34;moon&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以使用&lt;code>conj&lt;/code>函数来添加额外的元素到 Vector 中。元素被添加到 Vector 的&lt;em>尾部&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(conj [1 2 3] 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [1 2 3 4]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vector 不是存储序列的唯一方法；Clojure 还有&lt;em>列表&lt;/em>。&lt;/p>
&lt;h3 id="列表">列表&lt;/h3>
&lt;p>列表 与 Vector 类似，它们都是数值的线性 Set。但也有一些区别。例如，你不能用&lt;code>get&lt;/code>检索列表元素。要写一个列表的字面意思, 只需将元素插入括号内, 并在开头使用单引号:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;#39;(1 2 3 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，当 REPL 打印出列表时，它不包括单引号。我们将在后面的第 7 章中再来讨论为什么会这样。如果你想从一个列表中检索一个元素，你可以使用 &lt;code>nth&lt;/code> 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(nth &amp;#39;(:a :b :c) 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(nth &amp;#39;(:a :b :c) 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我在本书中没有详细介绍性能，因为我认为只有你熟悉一种语言之后再关注它才是有用的。然而，知道使用&lt;code>nth&lt;/code>从列表中检索一个元素比使用&lt;code>get&lt;/code>从 Vector 中检索一个元素要慢一些是很好的。这是因为 Clojure 必须遍历一个列表中的所有&lt;em>n&lt;/em>个元素才能到达&lt;em>n&lt;/em>个，而通过索引访问一个 Vector 元素最多只需要几跳。&lt;/p>
&lt;p>列表值可以有任何类型，你可以用&lt;code>list&lt;/code>函数创建列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(list 1 &amp;#34;two&amp;#34; {3 4})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 &amp;#34;二&amp;#34; {3 4})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>元素被添加到一个列表的&lt;em>开头&lt;/em>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(conj &amp;#39;(1 2 3) 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (4 1 2 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>什么时候应该使用列表，什么时候应该使用 Vector？一个好的经验法则是，如果你需要很容易地把项目添加到一个序列的开头，或者你正在写一个宏，你应该使用一个列表。否则，你应该使用 Vector。随着你学习的深入，你会对何时使用哪种方法有很好的感觉。&lt;/p>
&lt;h3 id="set">Set&lt;/h3>
&lt;p>Set 是唯一值的集合。Clojure 有两种类型的 Set：哈希 Set 和排序 Set。我将专注于哈希 Set，因为它们更经常被使用。下面是一个哈希 Set 的文字符号。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#{&amp;#34;kurt vonnegut&amp;#34; 20 :icicle}.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以用&lt;code>hash-set&lt;/code>来创建一个 Set:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(hash-set 1 1 2 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{1 2}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，一个值的多个实例在 Set 中成为一个唯一的值，所以我们只剩下一个&lt;code>1&lt;/code>和一个&lt;code>2&lt;/code>。如果你试图将一个值添加到一个已经包含该值的 Set 中（比如下面代码中的&lt;code>:b&lt;/code>），它仍然只有一个该值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">( conj #{:a :b} :b)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{:a :b}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以通过使用&lt;code>set&lt;/code>函数从现有的 Vector 和列表中创建 Set。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(set [3 3 3 4 4])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #{3 4}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以使用&lt;code>contains?&lt;/code>函数来检查 Set 的成员资格，通过使用&lt;code>get&lt;/code>，或通过使用关键字作为函数，以 Set 为参数。&lt;code>contains?&lt;/code>返回&lt;code>true&lt;/code>或&lt;code>false&lt;/code>，而&lt;code>get&lt;/code>和关键字查找将返回存在的值，如果不存在，则返回&lt;code>nil&lt;/code>。&lt;/p>
&lt;p>下面是你如何使用&lt;code>contains?&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(contains? #{:a :b} :a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(contains? #{:a :b} 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(contains? #{nil} nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是你如何使用关键字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(:a #{:a :b})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里是你如何使用&lt;code>get&lt;/code>的方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(get #{:a :b} :a)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; :a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(get #{:a nil} nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(get #{:a :b} &amp;#34;kurt vonnegut&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; nil
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，使用&lt;code>get&lt;/code>来测试一个 Set 是否包含&lt;code>nil&lt;/code>，将总是返回&lt;code>nil&lt;/code>，这令人困惑。当你专门测试 Set 成员时，&lt;code>contains?&lt;/code>可能是更好的选择。&lt;/p>
&lt;h3 id="简单性">简单性&lt;/h3>
&lt;p>你可能已经注意到，到目前为止，对数据结构的处理并不包括对如何创建新类型或类的描述。原因是 Clojure 对简单性的强调鼓励你首先去接触内置的数据结构。&lt;/p>
&lt;p>如果你来自面向对象的背景，你可能会认为这种方法很奇怪而且落后。然而，你会发现，你的数据不一定非要和一个类紧密地捆绑在一起，才是有用和可理解的。这里有一个被 Clojurists 喜爱的寓言故事，暗示了 Clojure 的哲学。&lt;/p>
&lt;blockquote>
&lt;p>让 100 个函数操作一个数据结构比让 10 个函数操作 10 个数据结构要好。
-Alan Perlis&lt;/p>
&lt;/blockquote>
&lt;p>在接下来的章节中，你会了解到更多关于 Clojure 哲学的这个方面。现在，请留意你通过坚持使用基本数据结构来获得代码重用性的方法。&lt;/p>
&lt;p>我们的 Clojure 数据结构入门课程到此结束。现在，是时候深入到函数中去，学习如何使用这些数据结构了&lt;/p>
&lt;h2 id="函数">函数&lt;/h2>
&lt;p>人们为 Lisp 疯狂的原因之一是，这些语言可以让你建立起行为复杂的程序，但主要的构件&amp;ndash;函数&amp;ndash;却是如此简单。本节通过解释以下内容，让你开始了解 Lisp 函数的美丽和优雅。&lt;/p>
&lt;ul>
&lt;li>调用函数&lt;/li>
&lt;li>函数与宏和特殊 Form 有什么不同&lt;/li>
&lt;li>定义函数&lt;/li>
&lt;li>匿名函数&lt;/li>
&lt;li>返回函数&lt;/li>
&lt;/ul>
&lt;h3 id="调用函数">调用函数&lt;/h3>
&lt;p>现在你已经看到了许多函数调用的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ 1 2 3 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(* 1 2 3 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(first [1 2 3 4])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请记住，所有的 Clojure 操作都有相同的语法：开括号、操作符、操作数、闭括号。&lt;em>函数**调用&lt;/em>只是操作的另一个术语，其中运算符是一个函数或一个&lt;em>函数**表达式&lt;/em>（一个返回函数的表达式）。&lt;/p>
&lt;p>这可以让你写出一些相当有趣的代码。下面是一个函数表达式，它返回&lt;code>+&lt;/code>（加法）函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(or + -)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; #&amp;lt;core$_PLUS_ clojure.core$_PLUS_@76dace31&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该返回值是加法函数的字符串表示。因为&lt;code>or&lt;/code>的返回值是第一个真值，而这里的加法函数是真值，所以返回的是加法函数。你也可以在另一个表达式中使用这个表达式作为运算符。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">((or + -) 1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为&lt;code>(or + -)&lt;/code>返回&lt;code>+&lt;/code>，这个表达式被求值为&lt;code>1&lt;/code>、&lt;code>2&lt;/code>和&lt;code>3&lt;/code>之和，返回&lt;code>6&lt;/code>。&lt;/p>
&lt;p>下面是几个有效的函数调用，它们都返回&lt;code>6&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">((and (= 1 1) +) 1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">((first [+ 0]) 1 2 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，&lt;code>and&lt;/code>的返回值是第一个假值或最后一个真值。在这个例子中，&lt;code>+&lt;/code>被返回，因为它是最后一个真值，然后被应用于参数&lt;code>1 2 3&lt;/code>，返回&lt;code>6&lt;/code>。在第二个例子中，&lt;code>first&lt;/code>的返回值是一个序列中的第一个元素，在这个例子中是&lt;code>+&lt;/code>。&lt;/p>
&lt;p>然而，这些都不是有效的函数调用，因为数字和字符串都不是函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(1 2 3 4)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(&amp;#34;test&amp;#34; 1 2 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你在 REPL 中运行这些，你会得到这样的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ClassCastException java.lang.String cannot be cast to clojure.lang.IFn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">user/eval728 (NO_SOURCE_FILE:1)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你继续使用 Clojure 时，你可能会多次看到这个错误：&lt;em>&lt;!-- raw HTML omitted --> cannot be cast to clojure.lang.IFn&lt;/em> 。只是意味着你试图将某个东西作为一个函数使用，而它并不是。&lt;/p>
&lt;p>函数的灵活性并没有随着函数表达式的出现而结束! 在语法上，函数可以接受任何表达式作为参数&amp;ndash;包括&lt;em>其他函数&lt;/em>。可以接受一个函数作为参数或返回一个函数的函数被称为&lt;em>高阶函数&lt;/em>。具有高阶函数的编程语言被称为支持&lt;em>函数一等公民&lt;/em>，因为你可以像对待数字和 Vector 等更熟悉的数据类型一样，将函数作为值来处理。&lt;/p>
&lt;p>以&lt;code>map&lt;/code>函数（不要与 map 数据结构混淆）为例。&lt;code>map&lt;/code>通过对一个集合的每个成员应用一个函数来创建一个新的列表。这里，&lt;code>inc&lt;/code>函数将一个数字增加 1。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(inc 1.1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 2.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(map inc [0 1 2 3])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 2 3 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(注意&lt;code>map&lt;/code>并不返回一个 Vector，尽管我们提供了一个 Vector 作为参数。你将在第四章中了解原因。现在，请相信这是好的，也是预期的）。&lt;/p>
&lt;p>Clojure 对一等公民函数的支持使你能够建立比没有一等公民函数的语言更强大的抽象概念。那些不熟悉这种编程方式的人认为函数允许你对数据实例进行泛化操作。例如，&lt;code>+&lt;/code>函数对任何特定数字的加法进行了抽象。&lt;/p>
&lt;p>相比之下，Clojure（以及所有 Lisp）允许你创建泛化进程的函数。&lt;code>map&lt;/code>允许你通过在任何集合上应用一个函数&amp;ndash;任何函数&amp;ndash;来概括转换一个集合的过程。&lt;/p>
&lt;p>你需要知道的关于函数调用的最后一个细节是，Clojure 在将所有函数参数传递给函数之前，会递归地求值这些参数。下面是 Clojure 如何求值一个参数也是函数调用的函数调用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(+ (inc 199) (/ 100 (- 7 2)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(+ 200 (/ 100 (- 7 2))) ; evaluated &amp;#34;(inc 199)&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(+ 200 (/ 100 5)) ; evaluated (- 7 2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(+ 200 20) ; evaluated (/ 100 5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">220 ; final evaluation
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数调用启动了求值过程，在应用&lt;code>+&lt;/code>函数之前，所有的子 Form 都被求值了。&lt;/p>
&lt;h3 id="函数调用宏调用和特殊-form">函数调用、宏调用和特殊 Form&lt;/h3>
&lt;p>在上一节中，你了解到函数调用是以函数表达式为操作符的表达式。另外两种表达式是&lt;em>宏调用&lt;/em>和&lt;em>特殊 Form&lt;/em>。你已经看到了几种特殊 Form：&lt;code>def&lt;/code> 和&lt;code>if&lt;/code>表达式。&lt;/p>
&lt;p>你将在第 7 章中学习关于宏调用和特殊 Form 的所有知识。现在，使特殊 Form &amp;ldquo;特殊&amp;quot;的主要特征是，与函数调用不同，它们不求值所有的操作数。&lt;/p>
&lt;p>以 &amp;ldquo;if &amp;ldquo;为例。这是它的一般结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if boolean-form
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> then-form
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> optional-else-form)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在想象一下你有一个这样的&lt;code>if&lt;/code>语句。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(if good-mood
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (tweet walking-on-sunshine-lyrics)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (tweet mopey-country-song-lyrics))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>显然，在这样的&lt;code>if&lt;/code>表达中，我们希望 Clojure 只求值两个分支中的一个。如果 Clojure 同时求值两个&lt;code>tweet&lt;/code>函数调用，你的 Twitter 粉丝们最终会非常困惑。&lt;/p>
&lt;p>另一个区别于特殊 Form 的特征是，你不能把它们作为函数的参数。一般来说，特殊 Form 实现了 Clojure 的核心功能，只是不能用函数实现。Clojure 只有少量的特殊 Form，而如此丰富的语言是用如此小的一组构建块来实现的，这是很令人惊讶的。&lt;/p>
&lt;p>宏与特殊 Form 类似，它们对操作数的求值与函数调用不同，而且它们也不能作为参数传递给函数。但这段弯路已经走得够长了；现在是学习如何定义函数的时候了!&lt;/p>
&lt;h3 id="定义函数">定义函数&lt;/h3>
&lt;p>函数的定义由五个主要部分组成。&lt;/p>
&lt;ul>
&lt;li>&lt;code>defn&lt;/code>&lt;/li>
&lt;li>函数名&lt;/li>
&lt;li>描述该函数的 docstring(可选)&lt;/li>
&lt;li>括号中列出的参数&lt;/li>
&lt;li>函数体&lt;/li>
&lt;/ul>
&lt;p>下面是一个函数定义的例子和函数的调用示例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">➊ (defn too-enthusiastic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➋ &amp;#34;Return a cheer that might be a bit too enthusiastic&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➌ [name]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➍ (str &amp;#34;OH. MY. GOD! &amp;#34; name &amp;#34; YOU ARE MOST DEFINITELY LIKE THE BEST &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;MAN SLASH WOMAN EVER I LOVE YOU AND WE SHOULD RUN AWAY SOMEWHERE&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(too-enthusiastic &amp;#34;Zelda&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;OH. MY. GOD! Zelda YOU ARE MOST DEFINITELY LIKE THE BEST MAN SLASH WOMAN EVER I LOVE YOU AND WE SHOULD RUN AWAY SOMEWHERE&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在➊处，&lt;code>too-enthusiastic&lt;/code>是函数的名称，在➋处有一个描述性的 docstring。参数 &amp;ldquo;name &amp;ldquo;在➌处给出，函数体在➍处接受参数，并做了它所描述的事情&amp;ndash;返回一个可能有点过于热情的欢呼。&lt;/p>
&lt;p>让我们更深入地了解 docstring、参数和函数体。&lt;/p>
&lt;h4 id="docstring">docstring&lt;/h4>
&lt;p>docstring*是一种描述和记录你的代码的有用方法。你可以在 REPL 中用 &lt;code>(doc&lt;/code>fn-name&lt;code>)&lt;/code>查看一个函数的 docstring，例如 &lt;code>(doc map)&lt;/code>。如果你使用一个工具为你的代码生成文档，那么 docstring 也会发挥作用。&lt;/p>
&lt;h4 id="参数和-arity">参数和 Arity&lt;/h4>
&lt;p>Clojure 函数可以用零个或多个参数来定义。你传递给函数的值被称为&lt;em>arguments&lt;/em>，参数可以是任何类型。参数的数量就是函数的特性。下面是一些具有不同性质的函数定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn no-params
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;I take no parameters!&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn one-param
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;I take one parameter: &amp;#34; x))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn two-params
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [x y]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;Two parameters! That&amp;#39;s nothing! Pah! I will smoosh them &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;together to spite you! &amp;#34; x y))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这些例子中，&lt;code>no-params&lt;/code>是一个 0-arity 函数，&lt;code>one-param&lt;/code>是 1-arity，&lt;code>two-params&lt;/code>是 2-arity。&lt;/p>
&lt;p>函数也支持 &lt;em>参数重载&lt;/em>。这意味着你可以定义一个函数，使不同的函数体根据不同的参数来运行。下面是一个多义性函数定义的一般方式。请注意，每个数位定义都被括在括号里，并且有一个参数列表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn multi-arity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; 3-arity arguments and body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([first-arg second-arg third-arg]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do-things first-arg second-arg third-arg))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; 2-arity arguments and body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([first-arg second-arg]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do-things first-arg second-arg))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; 1-arity arguments and body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([first-arg]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (do-things first-arg)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数参数重载是为参数提供默认值的一种方法。在下面的例子中，&lt;code>&amp;quot;karate&amp;quot;&lt;/code>是&lt;code>chop-type&lt;/code>参数的默认参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn x-chop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Describe the kind of chop you&amp;#39;re inflicting on someone&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([name chop-type]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;I &amp;#34; chop-type &amp;#34; chop &amp;#34; name &amp;#34;! Take that!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([name]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (x-chop name &amp;#34;karate&amp;#34;)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你用两个参数调用&lt;code>x-chop&lt;/code>，该函数的工作原理和它不是一个多义性函数时一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(x-chop &amp;#34;Kanye West&amp;#34; &amp;#34;slap&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;I slap chop Kanye West! Take that!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/kanye.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>如果你调用&lt;code>x-chop&lt;/code>时只有一个参数，&lt;code>x-chop&lt;/code>实际上会在提供第二个参数&lt;code>karate&lt;/code>时调用自己。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(x-chop &amp;#34;Kanye East&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;I karate chop Kanye East! Take that!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像这样用函数本身来定义一个函数，可能显得不寻常。如果是这样，那就好了! 你正在学习一种新的方法来做事!&lt;/p>
&lt;p>你也可以让每种函数做一些完全不相关的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn weird-arity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Destiny dressed you this morning, my friend, and now Fear is
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> trying to pull off your pants. If you give up, if you give in,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> you&amp;#39;re gonna end up naked with Fear just standing there laughing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at your dangling unmentionables! - the Tick&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ([number]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (inc number)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>0-arity 主体返回一个明智的引号，1-arity 主体增加一个数字。最有可能的是，你不会想写一个这样的函数，因为有两个完全不相关的函数体会让人困惑。&lt;/p>
&lt;p>Clojure 还允许你通过包括一个&lt;em>可变参数&lt;/em>来定义函数，就像 &amp;ldquo;把这些参数的其余部分放在一个列表中，名称如下&amp;rdquo;。可变参数用安培号（&lt;code>&amp;amp;&lt;/code>）表示，如➊所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/old-man.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn codger-communication
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [whippersnapper]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;Get off my lawn, &amp;#34; whippersnapper &amp;#34;!!!&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn codger
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ [&amp;amp; whippersnappers]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (map codger-communication whippersnappers))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(codger &amp;#34;Billy&amp;#34; &amp;#34;Anne-Marie&amp;#34; &amp;#34;The Incredible Bulk&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Get off my lawn, Billy!!!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Get off my lawn, Anne-Marie!!!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Get off my lawn, The Incredible Bulk!!!&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，当你为变量性质的函数提供参数时，参数被当作一个列表来处理。你可以把可变参数和普通参数混在一起，但可变参数必须放在最后。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn favorite-things
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [name &amp;amp; things]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (str &amp;#34;Hi, &amp;#34; name &amp;#34;, here are my favorite things: &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.string/join &amp;#34;, &amp;#34; things)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(favorite-things &amp;#34;Doreen&amp;#34; &amp;#34;gum&amp;#34; &amp;#34;shoes&amp;#34; &amp;#34;kara-te&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Hi, Doreen, here are my favorite things: gum, shoes, kara-te&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，Clojure 有一种更复杂的定义参数的方法，叫做&lt;em>解构&lt;/em>，这值得有自己的小节。&lt;/p>
&lt;h4 id="解构">解构&lt;/h4>
&lt;p>解构的基本思想是，它可以让你在一个集合中简洁地将名字与值绑定。让我们看看一个基本的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">;; Return the first element of a collection
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn my-first
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[first-thing]] ; Notice that first-thing is within a vector
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> first-thing)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-first [&amp;#34;oven&amp;#34; &amp;#34;bike&amp;#34; &amp;#34;war-axe&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;oven&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，&lt;code>my-first&lt;/code>函数将符号&lt;code>first-thing&lt;/code>与作为参数传入的 Vector 中的第一个元素联系起来。你告诉&lt;code>my-first&lt;/code>这样做，就是把符号&lt;code>first-thing&lt;/code>放在一个 Vector 中。&lt;/p>
&lt;p>Vector 就像一个巨大的牌子，对 Clojure 说：&amp;ldquo;嘿！这个函数将收到一个列表或 Vector 作为参数。让我的生活更轻松，为我拆开参数的结构，并将有意义的名字与参数的不同部分联系起来！&amp;rdquo; 当对一个 Vector 或列表进行解构时，你可以随意命名你想要的元素，也可以使用其他参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn chooser
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [[first-choice second-choice &amp;amp; unimportant-choices]]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Your first choice is: &amp;#34; first-choice))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Your second choice is: &amp;#34; second-choice))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;We&amp;#39;re ignoring the rest of your choices. &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Here they are in case you need to cry over them: &amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (clojure.string/join &amp;#34;, &amp;#34; unimportant-choices))))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(chooser [&amp;#34;Marmalade&amp;#34;, &amp;#34;Handsome Jack&amp;#34;, &amp;#34;Pigpen&amp;#34;, &amp;#34;Aquaman&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Your first choice is: Marmalade
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Your second choice is: Handsome Jack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; We&amp;#39;re ignoring the rest of your choices. Here they are in case \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> you need to cry over them: Pigpen, Aquaman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，其余的参数&lt;code>unimportant``-choices&lt;/code>处理用户在第一和第二选择之后的任何数量的额外选择。&lt;/p>
&lt;p>你也可以对 Map 进行去结构化。就像你告诉 Clojure 通过提供一个 Vector 作为参数来解除 Vector 或列表的结构一样，你可以通过提供一个 Map 作为参数来解除 Map 的结构。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn announce-treasure-location
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">➊ [{lat :lat lng :lng}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lat: &amp;#34; lat))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lng: &amp;#34; lng)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(announce-treasure-location {:lat 28.22 :lng 81.33})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Treasure lat: 28.22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; Treasure lng: 81.33
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们更详细地看看➊的那一行。这就像告诉 Clojure，&amp;ldquo;哟！Clojure! 为我做一件事，把&lt;code>lat&lt;/code>这个名字与键&lt;code>:lat&lt;/code>对应的值联系起来。对&lt;code>lng&lt;/code>和&lt;code>:lng&lt;/code>做同样的事情，好吗？&amp;rdquo;&lt;/p>
&lt;p>我们经常想直接把关键词从 Map 中分离出来，所以有一个更短的语法。这和前面的例子有相同的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn announce-treasure-location
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:keys [lat lng]}] 。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lat: &amp;#34; lat))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lng: &amp;#34; lng)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以通过使用&lt;code>:as&lt;/code>关键字保留对原始 Map 参数的访问。在下面的例子中，原始 Map 是用&lt;code>treasure-location&lt;/code>来访问的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn receive-treasure-location
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [{:keys [lat lng] :as treasure-location}]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lat: &amp;#34; lat))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (println (str &amp;#34;Treasure lng: &amp;#34; lng))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ;; One would assume that this would put in new coordinates for your ship
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (steer-ship! treasure-location))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般来说，你可以把解构看作是指示 Clojure 如何将名字与列表、Map、集合或 Vector 中的值联系起来。现在，我们来看看函数中真正起作用的部分：函数体!&lt;/p>
&lt;h4 id="函数体">函数体&lt;/h4>
&lt;p>函数主体可以包含任何 Form 的 Form。Clojure 会自动返回最后求值的 Form。这个函数体只包含三种 Form，当你调用这个函数时，它会吐出最后一种 Form，&lt;code>&amp;quot;joe&amp;quot;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn illustrative-function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> []
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (+ 1 304)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;joe&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(exstrative-function)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;joe&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是另一个函数体，它使用一个&lt;code>if&lt;/code>表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn number-comment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [x]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (&amp;gt; x 6)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Oh my gosh! What a big number!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;That number&amp;#39;s OK, I guess&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(number-comment 5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;That number&amp;#39;s OK, I guess&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(number-comment 7)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;Oh my gosh! What a big number!&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="所有函数都是平等的">所有函数都是平等的&lt;/h4>
&lt;p>最后说明一下：Clojure 没有特权函数。&lt;code>+&lt;/code>只是一个函数，&lt;code>-&lt;/code>只是一个函数，而&lt;code>inc&lt;/code>和&lt;code>map&lt;/code>也只是函数。它们并不比你自己定义的函数好。所以，不要让他们给你任何口实!&lt;/p>
&lt;p>更重要的是，这个事实有助于证明 Clojure 的底层简单性。在某种程度上，Clojure 是非常愚蠢的。当你进行函数调用时，Clojure 只是说，&amp;quot;&lt;code>map&lt;/code>？当然，不管怎样! 我只是应用这个并继续前进&amp;rdquo;。它并不关心这个函数是什么，或者它来自哪里；它对所有的函数都一视同仁。在它的核心，Clojure 并不关心加法、乘法或 Map 的问题。它只关心函数的应用。&lt;/p>
&lt;p>当你继续用 Clojure 编程时，你会发现这种简单性是很理想的。你不必为处理不同的函数而担心特殊的规则或语法。它们的工作原理都是一样的!&lt;/p>
&lt;h3 id="匿名函数">匿名函数&lt;/h3>
&lt;p>在 Clojure 中，函数不需要有名字。事实上，你会一直使用&lt;em>匿名函数&lt;/em>。多么神秘啊! 你可以通过两种方式创建匿名函数。第一种是使用&lt;code>fn&lt;/code>Form。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(fn [param-list]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function body)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看起来很像&lt;code>defn&lt;/code>，不是吗？让我们试一试几个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map (fn [name] (str &amp;#34;Hi, &amp;#34; name))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Darth Vader&amp;#34; &amp;#34;Mr. Magoo&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Hi, Darth Vader&amp;#34; &amp;#34;Hi, Mr. Magoo&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">((fn [x] (* x 3)) 8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以用处理&lt;code>fn&lt;/code>的方式来处理&lt;code>defn&lt;/code>，这几乎是相同的。参数列表和函数体的工作原理完全相同。你可以使用参数解构，可变参数，等等。你甚至可以将你的匿名函数与一个名字联系起来，这不应该是一个惊喜（如果这确实是一个惊喜，那么 &amp;hellip; &amp;hellip; 惊喜！）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def my-special-multiplier (fn [x] (* x 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(my-special-multiplier 12)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 36
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Clojure 还提供了另一种更紧凑的方式来创建匿名函数。下面是一个匿名函数的样子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#(* % 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哇，这看起来很奇怪。来吧，应用这个看起来很奇怪的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(#(* % 3) 8)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 24
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是一个将匿名函数作为参数传递给 map 的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(map #(str &amp;#34;Hi, &amp;#34; %)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Darth Vader&amp;#34; &amp;#34;Mr. Magoo&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Hi, Darth Vader&amp;#34; &amp;#34;Hi, Mr. Magoo&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种看起来很奇怪的匿名函数的编写方式是由一个叫做&lt;em>reader**macros&lt;/em>的函数实现的。你会在第 7 章中了解到这些。现在，只学习如何使用这些匿名函数就可以了。&lt;/p>
&lt;p>你可以看到，这种语法肯定更紧凑，但也有点奇怪。让我们把它分解一下。这种匿名函数看起来很像函数调用，只是它前面有一个哈希标记，&lt;code>#&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">;; Function call
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(* 8 3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">;; Anonymous function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#(* % 3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种相似性使你能更快地看到应用这个匿名函数时将发生什么。&amp;ldquo;哦，&amp;ldquo;你可以对自己说，&amp;ldquo;这是要把它的参数乘以 3&amp;rdquo;。&lt;/p>
&lt;p>现在你可能已经猜到了，百分号&lt;code>%&lt;/code>，表示传递给函数的参数。如果你的匿名函数需要多个参数，你可以像这样区分它们。&lt;code>%1&lt;/code>, &lt;code>%2&lt;/code>, &lt;code>%3&lt;/code>, 以此类推。&lt;code>%&lt;/code>相当于&lt;code>%1&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(#(str %1 &amp;#34; and &amp;#34; %2) &amp;#34;cornbread&amp;#34; &amp;#34;butter beans&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; &amp;#34;cornbread and butter beans&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你也可以用&lt;code>%&amp;amp;&lt;/code>传递其余参数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(#(identity %&amp;amp;) 1 &amp;#34;blarg&amp;#34; :yip)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (1 &amp;#34;blarg&amp;#34; :yip)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，你将身份函数应用于其余参数。Identity 返回它所给的参数而不改变它。可变参数是以列表 Form 存储的，所以函数应用返回所有参数的列表。&lt;/p>
&lt;p>如果你需要写一个简单的匿名函数，使用这种风格是最好的，因为它在视觉上很紧凑。另一方面，如果你要写一个更长、更复杂的函数，它很容易变得不可读。如果是这种情况，请使用&lt;code>fn&lt;/code>。&lt;/p>
&lt;h3 id="返回函数">返回函数&lt;/h3>
&lt;p>现在你已经看到，函数可以返回其他函数。返回的函数是&lt;em>closures&lt;/em>，这意味着它们可以访问函数创建时的作用域内的所有变量。下面是一个标准的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn inc-maker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Create a custom incrementor&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [inc-by]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> #(+ % inc-by))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def inc3 (inc-maker 3))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(inc3 7)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，&lt;code>inc-by&lt;/code>在作用域内，所以即使返回的函数在&lt;code>inc-maker&lt;/code>之外使用，也可以访问它。&lt;/p>
&lt;h2 id="把这一切放到一起">把这一切放到一起&lt;/h2>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/model-hobbit.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>好了! 是时候把你新发现的知识用于一个崇高的目的了：打倒霍比特人! 要打一个霍比特人，你首先要建立它的身体部位模型。每个身体部位都将包括其相对大小，以表明该部位被击中的可能性有多大。为了避免重复，霍比特人的模型将只包括&lt;em>左脚&lt;/em>，&lt;em>左耳&lt;/em>的条目，以此类推。因此，你需要一个函数来完全对称该模型，创建&lt;em>右脚&lt;/em>，&lt;em>右耳&lt;/em>，等等。最后，你将创建一个函数，迭代身体各部分，并随机选择击中的部分。在这一过程中，你将了解到一些新的 Clojure 工具。&lt;code>let&lt;/code>表达式，循环，和正则表达式。有趣!&lt;/p>
&lt;h3 id="夏尔的下一个顶级模型">夏尔的下一个顶级模型&lt;/h3>
&lt;p>对于我们的霍比特人模型，我们将避开霍比特人的特征，如活泼和调皮，只关注霍比特人的小身板。下面是霍比特人的模型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def asym-hobbit-body-parts [{:name &amp;#34;head&amp;#34; :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-eye&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-ear&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;mouth&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;nose&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;neck&amp;#34; :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-shoulder&amp;#34; :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-upper-arm&amp;#34; :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;chest&amp;#34; :size 10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;back&amp;#34; :size 10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-forearm&amp;#34; :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;abdomen&amp;#34; :size 6}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-kidney&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-hand&amp;#34; :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-knee&amp;#34; :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-thigh&amp;#34; :size 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-lower-leg&amp;#34; :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-achilles&amp;#34; :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-foot&amp;#34; :size 2}])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是一个 Map 的 Vector。每个 Map 都有身体部位的名称和身体部位的相对大小。(我知道只有动漫人物的眼睛是头部的三分之一大小，但就这样吧，好吗？)&lt;/p>
&lt;p>明显缺少的是霍比特人的右侧。让我们来解决这个问题。清单 3-1 是到目前为止你看到的最复杂的代码，它引入了一些新的想法。但是不要担心，因为我们将详细地研究它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(defn matching-part
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [part]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name (clojure.string/replace (:name part) #&amp;#34;^left-&amp;#34; &amp;#34;right-&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> :size (:size part)})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(defn symmetrize-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;Expects a seq of maps that have a :name and :size&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [asym-body-parts]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (loop [remaining-asym-parts asym-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final-body-parts []]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (if (empty? remaining-asym-parts)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> final-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (let [[part &amp;amp; remaining] remaining-asym-parts]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (recur remaining
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (into final-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (set [part (matching-part part)])))))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>3-1. 匹配-部分和对称-身体-部分的函数&lt;/li>
&lt;/ol>
&lt;p>当我们对&lt;code>asym-hobbit-body-parts&lt;/code>调用函数&lt;code>symmetriz-body-parts&lt;/code>时，我们得到一个完全对称的霍比特人。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(symmetrize-body-parts asym-hobbit-body-parts)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [{:name &amp;#34;head&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-eye&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-eye&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-ear&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-ear&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;mouth&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;nose&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;neck&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-shoulder&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-shoulder&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-upper-arm&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-upper-arm&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;chest&amp;#34;, :size 10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;back&amp;#34;, :size 10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-forearm&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-forearm&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;abdomen&amp;#34;, :size 6}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-kidney&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-kidney&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-hand&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-hand&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-knee&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-knee&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-thigh&amp;#34;, :size 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-thigh&amp;#34;, :size 4}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-lower-leg&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-lower-leg&amp;#34;, :size 3}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-achilles&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-achilles&amp;#34;, :size 1}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;left-foot&amp;#34;, :size 2}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {:name &amp;#34;right-foot&amp;#34;, :size 2}]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让我们来分析一下这段代码!&lt;/p>
&lt;h3 id="let">let&lt;/h3>
&lt;p>在清单 3-1 的大量疯狂中，你可以看到结构&lt;code>(let ...)&lt;/code>的 Form。让我们通过一个例子来建立对&lt;code>let&lt;/code>的理解，当我们熟悉了所有的部分后，再来检查程序中的完整例子。&lt;/p>
&lt;p>&lt;code>let&lt;/code>将名字与值绑定。你可以认为&lt;code>let&lt;/code>是&lt;em>let&lt;/em> &lt;em>it&lt;/em> &lt;em>be&lt;/em>的缩写，这也是披头士乐队关于编程的一首优美的歌曲。这里有一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [x 3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(def dalmatian-list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [&amp;#34;Pongo&amp;#34; &amp;#34;Perdita&amp;#34; &amp;#34;Puppy 1&amp;#34; &amp;#34;Puppy 2&amp;#34;])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let [dalmatians (take 2 dalmatian-list)]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dalmatians)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; (&amp;#34;Pongo&amp;#34; &amp;#34;Perdita&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在第一个例子中，你将名字&lt;code>x&lt;/code>与值&lt;code>3&lt;/code>绑定。在第二个例子中，你把名字&lt;code>dalmatians&lt;/code>绑定到表达式&lt;code>(取2&lt;/code>dalmatian&lt;code>-list)&lt;/code>的结果，也就是列表&lt;code>(&amp;quot;Pongo&amp;quot; &amp;quot;Perdita&amp;quot;)&lt;/code>。&lt;code>let&lt;/code>还引入了一个新的作用域。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def x 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let [x 1] x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里，你首先使用&lt;code>def&lt;/code>将名字&lt;code>x&lt;/code>绑定到值&lt;code>0&lt;/code>上。然后，&lt;code>let&lt;/code>创建了一个新的作用域，在这个作用域中，名字&lt;code>x&lt;/code>被绑定到值&lt;code>1&lt;/code>上。我认为作用域取决于上下文。例如，在 &amp;ldquo;请清理这些烟头 &amp;ldquo;这句话中，&lt;em>烟头&lt;/em>的含义是不同的，这取决于你是在产科病房工作还是在香烟制造商大会的监管人员工作。在这个代码片段中，你在说：&amp;ldquo;我希望&lt;code>x&lt;/code>在全局上下文中是&lt;code>0&lt;/code>，但在这个&lt;code>let&lt;/code>表达式的上下文中，它应该是&lt;code>1&lt;/code>。&amp;rdquo;&lt;/p>
&lt;p>你可以在你的&lt;code>let&lt;/code>绑定中引用现有的绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(def x 0)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(let [x (inc x)] x)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，&lt;code>(inc x)&lt;/code>中的&lt;code>x&lt;/code>是指由&lt;code>(def x 0)&lt;/code>创建的绑定。结果是&lt;code>1&lt;/code>，然后在&lt;code>let&lt;/code>创建的新作用域中与名称&lt;code>x&lt;/code>绑定。在&lt;code>let&lt;/code>Form 的作用域内，&lt;code>x&lt;/code>指的是&lt;code>1&lt;/code>，而不是&lt;code>0&lt;/code>。&lt;/p>
&lt;p>你也可以在&lt;code>let&lt;/code>中使用可变参数，就像你在函数中一样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [[Pongo &amp;amp; dalmatians] dalmatian-list] [Pongo dalmatians])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [Pongo dalmatians])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [&amp;#34;Pongo&amp;#34; (&amp;#34;Perdita&amp;#34; &amp;#34;Puppy 1&amp;#34; &amp;#34;Puppy 2&amp;#34;) ]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意，&lt;code>let&lt;/code>Form 的值是其主体中最后被求值的 Form。&lt;code>let&lt;/code>Form 遵循所有在&lt;a class="link" href="https://www.braveclojure.com/do-things/#Anchor" target="_blank" rel="noopener"
>&amp;ldquo;调用函数&amp;quot;第 48 页&lt;/a>中介绍的析构规则。在这个例子中，&lt;code>[pongo &amp;amp; dalmatians]&lt;/code>解构了&lt;code>dalmatian-list&lt;/code>，将字符串&lt;code>&amp;quot;Pongo &amp;quot;绑定到名称&lt;/code>pongo&lt;code>上，将其余的dalmatians列表绑定到&lt;/code>dalmatians&lt;code>上。Vector&lt;/code>[pongo dalmatians]&lt;code>是&lt;/code>let&lt;code>的最后一个表达式，所以它是&lt;/code>let`Form 的值。&lt;/p>
&lt;p>&lt;code>let&lt;/code>Form 有两个主要用途。首先，它们通过允许你对事物进行命名。其次，它们允许你只求值一个表达式，并重复使用其结果。当你需要重复使用一个昂贵的函数调用的结果时，这一点特别重要，比如网络 API 调用。当表达式有副作用时，这也很重要。&lt;/p>
&lt;p>让我们再看一下我们的对称函数中的&lt;code>let&lt;/code>Form，这样我们就能明白到底发生了什么。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(let [[part &amp;amp; remaining] remaining-asym-parts])
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (recur remaining
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (in into final-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (set [part (matching-part part part)]))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码告诉 Clojure，&amp;ldquo;创建一个新的作用域。在它里面，将&lt;code>part&lt;/code>与&lt;code>remaining-asym-parts&lt;/code>的第一个元素相关联。将&lt;code>remaining&lt;/code>与&lt;code>remaining-asym-parts&lt;/code>中的其他元素联系起来&amp;rdquo;。&lt;/p>
&lt;p>至于&lt;code>let&lt;/code>表达式的主体，你将在下一节中了解到&lt;code>recur&lt;/code>的含义。函数调用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(in into final-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (set [part (matching-part part part)] ))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先告诉 Clojure, &amp;ldquo;使用&lt;code>set&lt;/code>函数创建一个由&lt;code>part&lt;/code>和它的匹配部分组成的集合。然后使用函数&lt;code>into&lt;/code>将该集合的元素添加到 Vector&lt;code>final-body-parts&lt;/code>中&amp;rdquo;。你在这里创建一个集合，以确保你向&lt;code>final-body-parts&lt;/code>添加唯一的元素，因为&lt;code>part&lt;/code>和&lt;code>(matching-part part)&lt;/code>有时是同一个东西，正如你将在接下来的正则表达式部分看到的。下面是一个简化的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(into [] (set [:a :a]))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">; =&amp;gt; [:a]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先，&lt;code>(set [:a :a])&lt;/code>返回集合&lt;code>#{:a}&lt;/code>，因为集合不包含重复的元素。然后&lt;code>(into [] #{:a})&lt;/code>返回 Vector&lt;code>[:a]&lt;/code>。&lt;/p>
&lt;p>回到&lt;code>let&lt;/code>：注意&lt;code>part&lt;/code>在&lt;code>let&lt;/code>的主体中被多次使用。如果我们使用原来的表达式，而不是使用&lt;code>part&lt;/code>和&lt;code>remaining&lt;/code>的名字，那将是一个混乱的局面! 下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(recur (rest remaining-asym-parts)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (in into final-body-parts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> (set [(first remaining-asym-parts) (matching-part (first remaining-asym-parts)) ]))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以，&lt;code>let&lt;/code>是一种方便的方法，可以为值引入本地名称，这有助于简化代码。&lt;/p>
&lt;h3 id="循环">循环&lt;/h3>
&lt;p>在我们的&lt;code>symmetrize-body-parts&lt;/code>函数中，我们使用了&lt;code>loop&lt;/code>，它提供了另一种在 Clojure 中进行递归的方法。让我们看看一个简单的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">loop &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">iteration&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="s">&amp;#34;Iteration &amp;#34;&lt;/span> &lt;span class="nv">iteration&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">iteration&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Goodbye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recur&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">iteration&lt;/span>&lt;span class="p">))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Goodbye!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第一行，&lt;code>loop [iteration 0]&lt;/code>，开始了循环并引入了一个初始值的绑定。在循环的第一次传递中，&lt;code>iteration&lt;/code>的值为 0.接下来，它打印一个短消息。然后，它检查&lt;code>iteration&lt;/code>的值。如果该值大于 3，那么是时候说再见了。否则，我们就 &amp;ldquo;重来&amp;rdquo;。这就好比&lt;code>loop&lt;/code>创建了一个匿名函数，其参数名为&lt;code>iteration&lt;/code>，而&lt;code>recur&lt;/code>允许你从其内部调用该函数，传递参数&lt;code>(inc iteration)&lt;/code>。&lt;/p>
&lt;p>事实上，你可以通过使用一个普通的函数定义来完成同样的事情。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">recursive-printer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recursive-printer&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">iteration&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="nv">iteration&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">iteration&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Goodbye!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recursive-printer&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">inc &lt;/span>&lt;span class="nv">iteration&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">recursive-printer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Iteration 4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; Goodbye!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但正如你所看到的，这是个比较啰嗦的方法。而且，&lt;code>loop&lt;/code>有更好的性能。在我们的对称化函数中，我们将使用&lt;code>loop&lt;/code>遍历不对称的身体部位列表中的每个元素。&lt;/p>
&lt;h3 id="正则表达式">正则表达式&lt;/h3>
&lt;p>&lt;em>正则表达式&lt;/em>是对文本进行模式匹配的工具。正则表达式的文字符号是将表达式放在哈希标记后的引号中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#&amp;#34;regular-expression&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在清单 3-1 中的函数&lt;code>matching-part&lt;/code>中，&lt;code>clojure.string/replace&lt;/code>使用正则表达式&lt;code>#&amp;quot;^left-&amp;quot;&lt;/code>来匹配以&lt;code>&amp;quot;left-&amp;quot;&lt;/code>开头的字符串，以便用&lt;code>&amp;quot;right-&amp;quot;&lt;/code>替换&lt;code>&amp;quot;left-&amp;quot;&lt;/code>。卡特，&lt;code>^&lt;/code>，是正则表达式发出的信号，即只有当文本&lt;code>&amp;quot;left-&amp;quot;&lt;/code>位于字符串的开头时，它才会匹配，这就确保了像&lt;code>&amp;quot;cleft-chin&amp;quot;&lt;/code>这样的字符串不会匹配。你可以用&lt;code>re-find&lt;/code>来测试，它检查一个字符串是否与正则表达式描述的模式相匹配，如果不匹配，则返回匹配的文本或&lt;code>nil&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">re-find &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;^left-&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;left-eye&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; &amp;#34;left-&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">re-find &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;^left-&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;cleft-chin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">re-find &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;^left-&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;wongleblart&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; nil&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是几个&lt;code>matching-part&lt;/code>的例子，使用一个重词将&lt;code>&amp;quot;left-&amp;quot;&lt;/code>替换为&lt;code>&amp;quot;right-&amp;quot;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">matching-part&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">part&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">clojure.string/replace&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;^left-&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;right-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">matching-part&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-eye&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:name &amp;#34;right-eye&amp;#34; :size 1}]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">matching-part&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;head&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:name &amp;#34;head&amp;#34; :size 3}]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请注意，名称 &amp;ldquo;head&amp;rdquo; 是原样返回的。&lt;/p>
&lt;h3 id="对称器">对称器&lt;/h3>
&lt;p>现在让我们回到完整的对称器，对其进行更详细的分析。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">asym-hobbit-body-parts&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;head&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-eye&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-ear&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;mouth&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;nose&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;neck&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-shoulder&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-upper-arm&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;chest&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;back&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-forearm&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;abdomen&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-kidney&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-hand&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-knee&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-thigh&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-lower-leg&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-achilles&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;left-foot&amp;#34;&lt;/span> &lt;span class="ss">:size&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">}])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">matching-part&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">part&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">clojure.string/replace&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:name&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">#&lt;/span>&lt;span class="s">&amp;#34;^left-&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;right-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➊&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">symmetrize-body-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Expects a seq of maps that have a :name and :size&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">asym-body-parts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➋&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">loop &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">remaining-asym-parts&lt;/span> &lt;span class="nv">asym-body-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">final-body-parts&lt;/span> &lt;span class="p">[]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➌&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty?&lt;/span> &lt;span class="nv">remaining-asym-parts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">final-body-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➍&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="nv">part&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">remaining&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">remaining-asym-parts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➎&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">recur&lt;/span> &lt;span class="nv">remaining&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">into &lt;/span>&lt;span class="nv">final-body-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">set &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">part&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">matching-part&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)])))))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>symmetriz-body-parts&lt;/code>函数（从➊开始）采用了函数式编程中常见的一般策略。给定一个序列（在本例中，是一个身体部位及其尺寸的 Vector），该函数连续地将该序列分割成&lt;em>head&lt;/em>和&lt;em>tail&lt;/em>。然后，它处理头部，将其添加到某个结果中，并使用递归来继续处理尾部的过程。&lt;/p>
&lt;p>我们在➋处开始循环处理主体部分。序列的尾部将被绑定到&lt;code>remaining-asym-parts&lt;/code>。最初，它被绑定到传递给函数的完整序列：&lt;code>asym-body-parts&lt;/code>。我们还创建了一个结果序列，&lt;code>final-body-parts&lt;/code>；它的初始值是一个空 Vector。&lt;/p>
&lt;p>如果&lt;code>remaining-asym-parts&lt;/code>在➌处是空的，这意味着我们已经处理了整个序列，可以返回结果，&lt;code>final-body-parts&lt;/code>。否则，在➍，我们将列表分成&lt;code>head&lt;/code>，&lt;code>part&lt;/code>，和&lt;code>tail&lt;/code>，&lt;code>remaining&lt;/code>。&lt;/p>
&lt;p>在➎处，我们用&lt;code>remaining&lt;/code>进行循环，这个列表在循环的每一次迭代中都会缩短一个元素，还有&lt;code>(in)&lt;/code>表达式，它建立了对称的身体部分的 Vector。&lt;/p>
&lt;p>如果你是这种编程的新手，这段代码可能需要一些时间来解决。请坚持下去! 一旦你理解了正在发生的事情，你会觉得自己像个百万富翁!&lt;/p>
&lt;h3 id="用-reduce-来编写更好的对称器">用 reduce 来编写更好的对称器&lt;/h3>
&lt;p>处理序列的每个元素并返回一个结果的模式非常普遍，以至于有一个内置的函数叫做&lt;code>reduce&lt;/code>。下面是一个简单的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">;; sum with reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">reduce + &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这就像告诉 Clojure 这样做。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>reduce&lt;/code>函数按照以下步骤工作。&lt;/p>
&lt;ol>
&lt;li>将给定的函数应用于一个序列的前两个元素。这就是&lt;code>(+ 1 2)&lt;/code>的由来。&lt;/li>
&lt;li>将给定的函数应用于结果和序列的下一个元素。在本例中，步骤 1 的结果是&lt;code>3&lt;/code>，序列的下一个元素也是&lt;code>3&lt;/code>。所以最后的结果是&lt;code>(+3 3)&lt;/code>。&lt;/li>
&lt;li>对序列中剩下的每个元素重复第 2 步。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>reduce&lt;/code>也需要一个可选的初始值。这里的初始值是&lt;code>15&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">reduce + &lt;/span>&lt;span class="mi">15&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你提供了一个初始值，&lt;code>reduce&lt;/code>就会开始对初始值和序列的第一个元素应用给定的函数，而不是序列的前两个元素。&lt;/p>
&lt;p>需要注意的一个细节是，在这些例子中，&lt;code>reduce&lt;/code>接收一个元素的集合，&lt;code>[1 2 3 4]&lt;/code>，并返回一个单一的数字。虽然程序员经常这样使用&lt;code>reduce&lt;/code>，但你也可以使用&lt;code>reduce&lt;/code>来返回一个比你开始时更大的集合，就像我们在&lt;code>symmetrize&lt;/code>-body-parts&lt;code>中尝试做的那样。&lt;/code>reduce&lt;code>抽象了 &amp;quot;处理一个集合并建立一个结果 &amp;quot;的任务，它对返回的结果类型是不确定的。为了进一步了解&lt;/code>reduce`的工作原理，这里有一种方法可以实现它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">my-reduce&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">f&lt;/span> &lt;span class="nv">initial&lt;/span> &lt;span class="nv">coll&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">loop &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">result&lt;/span> &lt;span class="nv">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">remaining&lt;/span> &lt;span class="nv">coll&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">empty?&lt;/span> &lt;span class="nv">remaining&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recur&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">f&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">remaining&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">rest &lt;/span>&lt;span class="nv">remaining&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">([&lt;/span>&lt;span class="nv">f&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">head&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">tail&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">my-reduce&lt;/span> &lt;span class="nv">f&lt;/span> &lt;span class="nv">head&lt;/span> &lt;span class="nv">tail&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以重新实现我们的对称器，如下所示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">better-symmetrize-body-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;Expects a seq of maps that have a :name and :size&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">asym-body-parts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">final-body-parts&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">into &lt;/span>&lt;span class="nv">final-body-parts&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">set &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">part&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">matching-part&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)])))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">asym-body-parts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>真棒! 使用&lt;code>reduce&lt;/code>的一个显而易见的好处是，你写的代码总体上更少。你传递给&lt;code>reduce&lt;/code>的匿名函数只专注于处理一个元素和建立一个结果。原因是&lt;code>reduce&lt;/code>处理了底层的机制，即跟踪哪些元素已经被处理，并决定是否返回一个最终结果或递归。&lt;/p>
&lt;p>使用&lt;code>reduce&lt;/code>也更有表现力。如果你的代码的读者遇到 &amp;ldquo;loop&amp;rdquo;，如果不阅读所有的代码，他们将不能确定这个循环到底在做什么。但是如果他们看到&lt;code>reduce&lt;/code>，他们会立即知道代码的目的是处理一个集合的元素以建立一个结果。&lt;/p>
&lt;p>最后，通过将 &amp;ldquo;reduce &amp;ldquo;过程抽象为一个以另一个函数为参数的函数，你的程序变得更有可塑性。例如，你可以将&lt;code>reduce&lt;/code>函数作为一个参数传递给其他函数。你还可以创建一个更通用的 &amp;ldquo;对称体-部件 &amp;ldquo;版本，例如 &amp;ldquo;扩展体-部件&amp;rdquo;。除了身体部位的列表外，它还可以接受一个&lt;em>扩展器&lt;/em>函数，并让你的模型不仅仅是霍比特人。例如，你可以有一个蜘蛛扩展器，可以增加眼睛和腿的数量。我会让你自己来写，因为我是邪恶的。&lt;/p>
&lt;h3 id="霍比特人的暴力">霍比特人的暴力&lt;/h3>
&lt;p>我的话，这真是为勇敢和真实的人准备的 Clojure! 为了给你的工作画上句号，这里有一个函数可以确定霍比特人的哪个部分被击中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">hit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nv">asym-body-parts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">sym-parts&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">➊&lt;/span>&lt;span class="nv">better-symmetrize-body-parts&lt;/span> &lt;span class="nv">asym-body-parts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">➋&lt;/span>&lt;span class="nv">body-part-size-sum&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">reduce + &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="nv">sym-parts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">target&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">rand &lt;/span>&lt;span class="nv">body-part-size-sum&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">➌&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">loop &lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="nv">part&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">remaining&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">sym-parts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">accumulated-size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="nv">part&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">&amp;gt; &lt;/span>&lt;span class="nv">accumulated-size&lt;/span> &lt;span class="nv">target&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">part&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">recur&lt;/span> &lt;span class="nv">remaining&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">accumulated-size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="nv">remaining&lt;/span>&lt;span class="p">))))))))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>hit&lt;/code>的工作原理是取一个不对称的身体部位的 Vector，在➊处对称，然后在➋处将各部位的大小相加。一旦我们将这些尺寸相加，就好像从 1 到&lt;code>身体部位尺寸之和&lt;/code>的每个数字都对应于一个身体部位；1 可能对应于左眼，而 2、3、4 可能对应于头部。这使得当你击中一个身体部位时（通过在这个范围内选择一个随机数字），特定身体部位被击中的可能性将取决于身体部位的大小。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/do-things/hobbit-hit-line.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>图 3-1：身体部位与数字的范围相对应，如果目标在这个范围内，就会被击中。&lt;/p>
&lt;p>最后，这些数字中的一个被随机选择，然后我们在➌处使用&lt;code>loop&lt;/code>来寻找并返回与该数字对应的身体部位。循环是通过跟踪我们已经检查过的部分的累计大小，并检查累计大小是否大于目标值来实现的。我把这个过程想象成用一排编号的槽来排列身体部位。在我排完一个身体部位后，我问自己：&amp;ldquo;我已经达到目标了吗？&amp;rdquo; 如果我达到了，这意味着我刚刚排好的身体部位就是被击中的那个部位。否则，我就继续排查这些部位。&lt;/p>
&lt;p>例如，假设你的零件清单是&lt;em>头&lt;/em>、&lt;em>左眼&lt;/em>和&lt;em>左手&lt;/em>，如图 3-1。在取完第一个部分，即头部后，累计大小为 3。当累计大小超过目标时，身体部分就被击中，所以如果目标小于 3，那么头部就被击中了。否则，你取下下一个部分，即左眼，并将累积大小增加到 4，如果目标大于或等于 3 且小于 4，则产生一个命中。&lt;/p>
&lt;p>下面是一些&lt;code>hit&lt;/code>函数的运行样本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">hit&lt;/span> &lt;span class="nv">asym-hobbit-body-parts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:name &amp;#34;right-upper-arm&amp;#34;, :size 3}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">hit&lt;/span> &lt;span class="nv">asym-hobbit-body-parts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:name &amp;#34;chest&amp;#34;, :size 10}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">hit&lt;/span> &lt;span class="nv">asym-hobbit-body-parts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; {:name &amp;#34;left-eye&amp;#34;, :size 1}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哦，我的上帝，那个可怜的霍比特人！你这个怪物！&amp;quot;。你这个怪物!&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>本章让你对如何在 Clojure 中&lt;em>做事&lt;/em>有了一个旋风式的了解。你现在知道了如何用字符串、数字、Map、关键字、Vector、列表和 Set 来表示信息，以及如何用&lt;code>def&lt;/code>和&lt;code>let&lt;/code>来命名这些表达式。你已经了解了函数的灵活性以及如何创建你自己的函数。此外，你还了解了 Clojure 的简单哲学，包括其统一的语法和强调在原始数据类型上使用大型函数库。&lt;/p>
&lt;p>第 4 章将带你详细探究 Clojure 的核心函数，第 5 章解释了函数式编程的思维模式。本章向你展示了如何编写 Clojure 代码&amp;ndash;接下来的两章将向你展示如何更好的编写 Clojure。&lt;/p>
&lt;p>在这一点上，我建议你开始写代码，我的每一根纤维都是这样。没有比这更好的方法来巩固你的 Clojure 知识了。Clojure Cheat Sheet（&lt;em>&lt;a class="link" href="http://clojure.org/api/cheatsheet" target="_blank" rel="noopener"
>http://clojure.org/api/cheatsheet&lt;/a>&lt;/em>）是一个很好的参考资料，它列出了所有在本章中涉及的数据结构上操作的内置函数。&lt;/p>
&lt;p>下面的练习会让你的大脑非常兴奋。如果你想更多地测试你的新技能，可以在*&lt;a class="link" href="http://www.projecteuler.net/" target="_blank" rel="noopener"
>http://www.projecteuler.net/&lt;/a>&lt;em>尝试一些 Project Euler 挑战。你还可以看看 4Clojure（&lt;/em>&lt;a class="link" href="http://www.4clojure.com/problems/" target="_blank" rel="noopener"
>http://www.4clojure.com/problems/&lt;/a>*），这是一套在线的 Clojure 问题，旨在测试你的知识。写点什么吧!&lt;/p>
&lt;h2 id="练习">练习&lt;/h2>
&lt;p>这些练习是为了测试你的 Clojure 知识和学习更多的 Clojure 函数，是一种有趣的方式。前三个可以只用本章介绍的信息来完成，但后三个需要你使用到目前为止还没有涉及的函数。如果你真的很想写更多的代码并探索 Clojure 的标准库，那么就去解决后三个问题。如果你觉得这些练习太难了，可以在读完第 4 章和第 5 章后再来看看，你会发现它们要容易得多。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用&lt;code>str&lt;/code>, &lt;code>vector&lt;/code>, &lt;code>list&lt;/code>, &lt;code>hash-map&lt;/code>, 和&lt;code>hash-set&lt;/code>函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编写一个函数，接收一个数字，并向其添加 100。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写一个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">dec-maker&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>，其工作原理与函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">inc-maker&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了用减法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">dec9&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">dec-maker&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">dec9&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>写一个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">mapset&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>，它的工作原理是&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">map
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了返回值是一个集合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">mapset&lt;/span> &lt;span class="nb">inc &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; #{2 3}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>创建一个类似于&lt;code>symmetriz-body-parts&lt;/code>的函数，只是它必须与具有径向对称性的奇怪的太空外星人一起工作。他们没有两只眼睛、胳膊、腿等等，而是有五只。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个函数，将&lt;code>symmetriz-body-parts&lt;/code>和你在练习 5 中创建的函数通用化。这个新的函数应该接受一个身体部位的集合，以及要增加的匹配身体部位的数量。如果你对 Lisp 语言和函数式编程是完全陌生的，那么如何做到这一点可能并不明显。如果你被卡住了，只需转到下一章，以后再重温这个问题。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Chapter2 如何使用 Emacs</title><link>https://example.com/p/chapter2-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-emacs/</link><pubDate>Thu, 13 Jan 2022 10:43:56 +0800</pubDate><guid>https://example.com/p/chapter2-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-emacs/</guid><description>&lt;h1 id="如何使用-emacs一个优秀的-clojure-编辑器">如何使用 Emacs，一个优秀的 Clojure 编辑器&lt;/h1>
&lt;p>在你掌握 Clojure 的过程中，你的编辑器将是你最亲密的盟友。我强烈建议使用 Emacs，但你当然也可以使用任何你想要的编辑器。如果你不遵循本章中关于 Emacs 的详尽说明，或者你选择使用一个不同的编辑器，那么至少值得投入一些时间来设置你的编辑器，以便与 REPL 一起工作。我推荐的两个在社区中受到好评的替代品是&lt;a class="link" href="https://cursive-ide.com/" target="_blank" rel="noopener"
>Cursive&lt;/a>和&lt;a class="link" href="https://sekao.net/nightcode/" target="_blank" rel="noopener"
>Nightcode&lt;/a>。&lt;/p>
&lt;p>我推荐 Emacs 的原因是，它提供了与 Clojure REPL 的紧密集成，这使你可以在写作时立即尝试你的代码。这种紧密的反馈回路在学习 Clojure 和以后编写真正的 Clojure 程序时都很有用。Emacs 也很适合与任何 Lisp 方言一起工作；事实上，Emacs 是用一种叫做 Emacs Lisp（elisp）的 Lisp 方言编写的。&lt;/p>
&lt;p>在本章结束时，你的 Emacs 设置将看起来像图 2-1。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-final.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-1: 使用 Clojure 的典型 Emacs 设置：一边是代码，另一边是 REPL。&lt;/p>
&lt;p>为了达到这个目的，你将从安装 Emacs 开始，设置一个适合新人的 Emacs 配置。然后你将学习基础知识：如何打开、编辑和保存文件，以及如何使用基本的键绑定与 Emacs 进行交互。最后，你将学习如何实际编辑 Clojure 代码并与 REPL 进行交互。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>你应该使用 Emacs 的最新主要版本，即 Emacs 24，用于你工作的平台。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>OS X&lt;/strong>从*&lt;a class="link" href="http://emacsformacosx.com/" target="_blank" rel="noopener"
>http://emacsformacosx.com&lt;/a>*安装 vanilla Emacs 作为一个 Mac 应用程序。其他选项，如 Aquamacs，应该是为了使 Emacs 更 &amp;ldquo;像 Mac&amp;rdquo;，但从长远来看是有问题的，因为它们的设置与标准 Emacs 有很大的不同，以至于很难使用 Emacs 手册或跟随教程。&lt;/li>
&lt;li>&lt;strong>Ubuntu&lt;/strong>按照*&lt;a class="link" href="https://launchpad.net/~cassou/&amp;#43;archive/emacs" target="_blank" rel="noopener"
>https://launchpad.net/~cassou/+archive/emacs&lt;/a>*上的说明。&lt;/li>
&lt;li>&lt;strong>Windows&lt;/strong>你可以在*&lt;a class="link" href="http://ftp.gnu.org/gnu/emacs/windows/" target="_blank" rel="noopener"
>Index of /gnu/emacs/windows&lt;/a>&lt;em>找到一个二进制文件。在你下载并解压最新版本后，你可以在&lt;/em>bin\runemacs.exe*下运行 Emacs 可执行文件。&lt;/li>
&lt;/ul>
&lt;p>安装完 Emacs 后，打开它。你应该看到类似图 2-2 的东西。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-fresh.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-2：当你第一次打开 Emacs 时显示的屏幕&lt;/p>
&lt;p>欢迎来到 Emacs 的崇拜！你已经使 Richard Stallman 成为了 Emacs 的一员。你让 Richard Stallman 感到骄傲!&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;p>我创建了一个库，里面有为 Clojure 配置 Emacs 所需的所有文件，可在&lt;a class="link" href="https://github.com/flyingmachine/emacs-for-clojure/archive/book1.zip" target="_blank" rel="noopener"
>https://github.com/flyingmachine/emacs-for-clojure/archive/book1.zip&lt;/a>。&lt;/p>
&lt;p>注意：这些工具一直在更新，所以如果下面的说明对你不起作用，或者你想使用最新的配置，请阅读&lt;a class="link" href="https://github.com/flyingmachine/emacs-for-clojure/" target="_blank" rel="noopener"
>GitHub - flyingmachine/emacs-for-clojure&lt;/a>上的说明。&lt;/p>
&lt;p>按以下步骤删除你现有的 Emacs 配置并安装对 Clojure 友好的配置。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>关闭 Emacs。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除*~/.emacs&lt;em>或&lt;/em>~/.emacs.d*，如果它们存在的话。(Windows 用户，你的 Emacs 文件可能在&lt;em>C:\Users\your_user_name\AppData\Roaming*。因此，举例来说，你可以删除&lt;/em>C:\Users\jason\AppData\Roaming.emacs.d*）。这是 Emacs 寻找配置文件的地方，删除这些文件和目录将确保你从一个干净的地方开始。&lt;/p>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>下载上面列出的 Emacs 配置压缩文件并解压。其内容应该是一个文件夹，&lt;em>emacs-for-clojure-book1&lt;/em>。运行 mv path/to/emacs-for-clojure-book1 ~/.emacs.d。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>打开 Emacs。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>当你打开 Emacs 时，你可能会看到大量的活动，因为 Emacs 正在下载一堆有用的软件包。一旦这些活动停止，继续前进，退出 Emacs，然后再打开它。(如果你没有看到任何活动，那也没关系！退出并重新启动 Emacs。退出并重新启动 Emacs 只是为了好玩）。在你这样做之后，你应该看到一个像图 2-3 那样的窗口。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-configged.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-3：Emacs 在安装了你可爱的新配置后的样子&lt;/p>
&lt;p>现在我们已经设置好了一切，让我们来学习如何使用 Emacs!&lt;/p>
&lt;h2 id="emacs-逃逸舱口">Emacs 逃逸舱口&lt;/h2>
&lt;p>在我们进入有趣的东西之前，你需要知道一个重要的 Emacs 键绑定：ctrl-G。这个键绑定可以退出你试图运行的任何 Emacs 命令。所以，如果事情进展不顺利，按住 ctrl，按 G，然后再试一次。它不会关闭 Emacs，也不会使你失去任何工作；它只是取消你当前的行动。&lt;/p>
&lt;h2 id="emacs-缓冲区">Emacs 缓冲区&lt;/h2>
&lt;p>所有的编辑都发生在 Emacs 的*缓冲区中。当你第一次启动 Emacs 时，一个名为 &amp;ldquo;&lt;em>scratch&lt;/em>&amp;ldquo;的缓冲区被打开。Emacs 总是在窗口的底部显示当前缓冲区的名称，如图 2-4 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-buffer-name.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-4：Emacs 会一直显示当前缓冲区的名称。&lt;/p>
&lt;p>默认情况下，&lt;code>*scratch*&lt;/code>缓冲区处理括号和缩进的方式对 Lisp 开发来说是最理想的，但对编写纯文本却很不方便。让我们创建一个新的缓冲区，这样我们就可以在不发生意外的情况下进行游戏。要创建一个缓冲区，请这样做。&lt;/p>
&lt;ol>
&lt;li>按住 ctrl 键并按下 X 键。&lt;/li>
&lt;li>2.松开 ctrl 键。&lt;/li>
&lt;li>按 B 键。&lt;/li>
&lt;/ol>
&lt;p>我们可以用一个更紧凑的格式来表达同样的序列。 &lt;strong>C-x b&lt;/strong>。&lt;/p>
&lt;p>执行这个按键序列后，你会在应用程序的底部看到一个提示，如图 2-5 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-buffer-prompt.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-5: 迷你缓冲区是 Emacs 提示你输入的地方。&lt;/p>
&lt;p>这个区域被称为&lt;em>minibuffer&lt;/em>，它是 Emacs 提示你输入的地方。现在它正在提示我们输入一个缓冲区的名称。你可以输入一个已经打开的缓冲区的名称，也可以输入一个新的缓冲区名称。输入 emacs-fun-times，然后按回车键。现在你应该看到一个完全空白的缓冲区，可以直接开始输入。你会发现，按键的工作方式与你所期望的差不多。字符在你输入时出现。上、下、左、右方向键会像你所期望的那样移动你，而回车键会创建一个新行。&lt;/p>
&lt;p>你还会注意到，你不会突然长出浓密的 Unix 胡须或穿上 Birkenstocks（除非你一开始就有）。这应该有助于缓解你对使用 Emacs 的任何恐惧感。当你玩够了之后，继续前进，通过输入&lt;strong>C-x k enter&lt;/strong>来杀死**的缓冲区。(这可能会让人吃惊，但 Emacs 实际上是很暴力的，它充分使用了&lt;em>杀&lt;/em>这个词）。&lt;/p>
&lt;p>现在你已经杀死了&lt;code>emacs-fun-times&lt;/code>缓冲区，你应该回到&lt;code>*scratch*&lt;/code>缓冲区。一般来说，你可以用&lt;strong>C-x b&lt;/strong>创建任意多的新缓冲区。你也可以用同样的命令在缓冲区之间快速切换。当你以这种方式创建一个新的缓冲区时，它只存在于内存中，直到你把它保存为一个文件；缓冲区不一定有文件支持，创建一个缓冲区也不一定会创建一个文件。让我们来学习一下关于文件的工作。&lt;/p>
&lt;h2 id="与文件一起工作">与文件一起工作&lt;/h2>
&lt;p>在 Emacs 中打开文件的键位是&lt;strong>C-x C-f&lt;/strong>。注意，当你按下 X 和 F 时，你需要按住 ctrl。导航到*~/.emacs.d/customizations/ui.el*，它可以自定义 Emacs 的外观和你与它的互动方式。Emacs 在一个与文件名相同的新缓冲区中打开文件。让我们转到第 37 行，去掉前面的分号，取消注释。它将看起来像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">setq&lt;/span> &lt;span class="nv">initial-frame-alist&lt;/span> &lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nf">top&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">left &lt;/span>&lt;span class="k">. &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">width&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">120&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">height&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后改变 &amp;ldquo;width &amp;ldquo;和 &amp;ldquo;height &amp;ldquo;的值，它们为活动窗口设置&lt;em>字符&lt;/em>的尺寸。通过改变这些值，你可以设置 Emacs 窗口在每次启动时以某种尺寸打开。一开始可以试试小一点的，比如 80 和 20。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nf">setq&lt;/span> &lt;span class="nv">initial-frame-alist&lt;/span> &lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nf">top&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">left &lt;/span>&lt;span class="k">. &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">width&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">80&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">height&lt;/span> &lt;span class="k">. &lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在用下面的键绑定来保存你的文件。 &lt;strong>C-x C-s&lt;/strong>。你应该在 Emacs 的底部得到一个信息，如&lt;code>写了/Users/snuffleupagus/&lt;/code>.emacs.d/customizations/ui.el`。你也可以尝试使用你在其他应用程序中使用的键绑定来保存你的缓冲区（例如，ctrl-S 或 cmd-S）。你下载的 Emacs 配置应该允许这样做，但如果不允许，也没什么大不了的。&lt;/p>
&lt;p>保存文件后，退出 Emacs 并再次启动它。我敢打赌，它非常小! 请看我在图 2-6 中的例子。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/tinemacs.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-6：你可以配置 Emacs，使其在每次打开时都设置高度和宽度。&lt;/p>
&lt;p>同样的过程要进行几次，直到 Emacs 以你喜欢的尺寸开始。或者再把这几行注释掉就可以了（在这种情况下，Emacs 将以其默认的宽度和高度打开）。如果你完成了对&lt;em>ui.el&lt;/em>的编辑，你可以用&lt;strong>C-x k&lt;/strong>关闭其缓冲区。无论如何，你已经完成了在 Emacs 中保存第一个文件的工作 如果发生了一些疯狂的事情，你可以按照&lt;a class="link" href="https://www.braveclojure.com/basic-emacs/#Anchor" target="_blank" rel="noopener"
>第 13 页的 &amp;ldquo;配置&amp;rdquo;&lt;/a>中的指示来使 Emacs 重新工作。&lt;/p>
&lt;p>如果你想创建一个新的文件，只需使用&lt;strong>C-x C-f&lt;/strong>并在迷你缓冲区中输入新文件的路径。一旦你保存了缓冲区，Emacs 就会按照你输入的路径用缓冲区的内容创建一个文件。&lt;/p>
&lt;p>让我们来回顾一下。&lt;/p>
&lt;ol>
&lt;li>在 Emacs 中，编辑是在缓冲区*.*中进行的。&lt;/li>
&lt;li>要切换到一个缓冲区，使用&lt;strong>C-x b&lt;/strong>并在 minibuffer*.*中输入缓冲区的名称。&lt;/li>
&lt;li>要创建一个新的缓冲区，使用&lt;strong>C-x b&lt;/strong>并输入一个新的缓冲区名称。&lt;/li>
&lt;li>要打开一个文件，使用&lt;strong>C-x C-f&lt;/strong>并导航到该文件。&lt;/li>
&lt;li>
&lt;ol start="5">
&lt;li>要将缓冲区保存到文件中，使用&lt;strong>C-x C-s&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>要创建一个新的文件，使用&lt;strong>C-x C-f&lt;/strong>并输入新文件的路径。当你保存缓冲区时，Emacs 将在文件系统中创建文件。&lt;/li>
&lt;/ol>
&lt;h2 id="键绑定和模式">键绑定和模式&lt;/h2>
&lt;p>你已经走了很长一段路了! 你现在可以像一个非常基本的编辑器一样使用 Emacs。如果你需要在服务器上使用 Emacs，或者被迫与 Emacs 书呆子配对，这应该能帮助你度过难关。&lt;/p>
&lt;p>然而，要想真正有成效，了解一些关于键绑定的*关键细节对你来说是很有用的（哈哈！）。然后我将介绍 Emacs 模式。之后，我将介绍一些核心术语，并介绍一些超级有用的键绑定。&lt;/p>
&lt;h3 id="emacs-是一个-lisp-解释器">Emacs 是一个 Lisp 解释器&lt;/h3>
&lt;p>术语&lt;em>键绑定&lt;/em>源于这样一个事实：Emacs 将&lt;em>键击打&lt;/em>绑定到&lt;em>命令&lt;/em>上，而这些命令只是 elisp 函数（我将交替使用&lt;em>命令&lt;/em>和&lt;em>函数&lt;/em>）。例如，&lt;strong>C-x b&lt;/strong>被绑定到函数&lt;code>switch-to-buffer&lt;/code>。同样地，&lt;strong>C-x C-s&lt;/strong>与&lt;code>save-file&lt;/code>绑定。&lt;/p>
&lt;p>但 Emacs 甚至比这更进一步。甚至像&lt;strong>f&lt;/strong>和&lt;strong>a&lt;/strong>这样简单的按键也被绑定到一个函数上，在这个例子中是 &amp;ldquo;self-insert-command&amp;rdquo;，是向你正在编辑的缓冲区添加字符的命令。&lt;/p>
&lt;p>从 Emacs 的角度来看，所有的函数都是平等的，你可以重新定义所有的函数，甚至像&lt;code>save-file&lt;/code>这样的核心函数。你可能不会&lt;em>想要&lt;/em>重新定义核心函数，但你可以。&lt;/p>
&lt;p>你可以重新定义函数，因为就其核心而言，Emacs 只是一个 Lisp 解释器，恰好加载了代码编辑功能。Emacs 的大部分内容都是用 elisp 编写的，所以从 Emacs 的角度来看，&lt;code>save-file&lt;/code>只是一个函数，就像&lt;code>switch-to-buffer&lt;/code>和你能运行的几乎所有其他命令一样。不仅如此，你创建的任何函数都被当作内置函数来对待。你甚至可以用 Emacs 来执行 elisp，在它运行时修改 Emacs。&lt;/p>
&lt;p>使用强大的编程语言修改 Emacs 的自由是 Emacs 如此灵活的原因，也是为什么像我这样的人对它如此疯狂。是的，它有很多表面上的复杂性，可能需要花时间去学习。但 Emacs 的底层是 Lisp 的优雅简洁，以及随之而来的无限的可修补性。这种可修补性并不局限于创建和重新定义函数。你还可以创建、重新定义和删除键绑定。从概念上讲，按键绑定只是一个查询表中的条目，它将按键与函数联系起来，而这个查询表是完全可修改的。&lt;/p>
&lt;p>你也可以使用&lt;strong>M-x&lt;/strong>函数名称来运行命令，而不需要特定的键绑定（例如，&lt;strong>M-x&lt;/strong> save-buffer）。 &lt;em>M&lt;/em>代表&lt;em>meta&lt;/em>，这是一个现代键盘不具备的键，但在 Windows 和 Linux 上被 Map 到 alt，在 Mac 上则是 option。 &lt;strong>M-x&lt;/strong>运行&lt;code>smex&lt;/code>命令，它提示你要运行的另一个命令的名称。&lt;/p>
&lt;p>现在你已经了解了键的绑定和功能，你将能够理解什么是模式以及它们是如何工作的。&lt;/p>
&lt;h3 id="模式">模式&lt;/h3>
&lt;p>Emacs 的&lt;em>模式&lt;/em>是一个键绑定和功能的集合，它被打包在一起，帮助你在编辑不同类型的文件时提高工作效率。(模式也可以做一些事情，比如告诉 Emacs 如何做语法高亮，但这是次要的，我不会在这里介绍。)&lt;/p>
&lt;p>例如，当你在编辑一个 Clojure 文件时，你会想加载 Clojure 模式。现在我正在写一个 Markdown 文件并使用 Markdown 模式，它有很多专门用于 Markdown 工作的有用的键绑定。在编辑 Clojure 时，最好有一套 Clojure 专用的键绑定，比如&lt;strong>C-c C-k&lt;/strong>将当前的缓冲区加载到 REPL 中并进行编译。&lt;/p>
&lt;p>模式有两种类型。 &lt;em>主要&lt;/em>模式和&lt;em>次要&lt;/em>模式。Markdown 模式和 Clojure 模式是主要模式。主要模式通常在你打开文件时由 Emacs 设置，但你也可以通过运行相关的 Emacs 命令明确地设置模式，例如用&lt;strong>M-x&lt;/strong> clojure-mode 或&lt;strong>M-x&lt;/strong> major-mode。每次只有一种主要模式是激活的。&lt;/p>
&lt;p>主要模式是针对某种文件类型或语言的 Emacs，而次要模式通常提供对各种文件类型都有用的功能。例如，abbrev 模式 &amp;ldquo;根据预先定义的缩写定义自动展开文本&amp;rdquo;（根据 Emacs 手册&lt;a class="link" href="https://www.braveclojure.com/basic-emacs/#footnote-5680-1" target="_blank" rel="noopener"
>1.&lt;/a>）。你可以同时激活多个次要模式。&lt;/p>
&lt;p>你可以在*模式行中看到哪些模式处于活动状态，如图 2-7 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-mode-line.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-7：模式行显示哪些模式是活动的。&lt;/p>
&lt;p>如果你打开一个文件，而 Emacs 没有为它加载一个主要模式，那么这个模式很有可能存在。你只需要下载它的软件包。说到这个 &amp;hellip; .&lt;/p>
&lt;h3 id="安装软件包">安装软件包&lt;/h3>
&lt;p>许多模式都是以&lt;em>包&lt;/em>的形式发布的，这只是存储在包仓库中的 elisp 文件的捆绑。你在本章开始时安装的 Emacs 24，使浏览和安装软件包变得非常容易。 &lt;strong>M-x&lt;/strong> package-list-packages 会显示几乎所有可用的软件包；只要确保你先运行&lt;strong>M-x&lt;/strong> package-refresh-contents 就能得到最新的列表。你可以用&lt;strong>M-x&lt;/strong> package-install 来安装软件包。&lt;/p>
&lt;p>你也可以通过加载你自己的 elisp 文件或你在网上找到的文件来定制 Emacs。Emacs 初学者指南》（见*&lt;a class="link" href="http://www.masteringemacs.org/articles/2010/10/04/beginners-guide-to-emacs/" target="_blank" rel="noopener"
>http://www.masteringemacs.org/articles/2010/10/04/beginners-guide-to-emacs/&lt;/a>*）在文章底部的 &amp;ldquo;加载新包 &amp;ldquo;一节中对如何加载自定义文件有很好的描述。&lt;/p>
&lt;h2 id="核心编辑术语和键绑定">核心编辑术语和键绑定&lt;/h2>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/pirate.png"
loading="lazy"
>&lt;/p>
&lt;p>如果你只想把 Emacs 当做一个文本编辑器来使用，你可以完全跳过这一节！但你将会错过很多东西。但你将会错过一些好东西。在这一节中，我们将介绍 Emacs 的关键术语；如何选择、剪切、复制和粘贴文本；如何选择、剪切、复制和粘贴文本（看到我做了什么吗？ 哈哈哈！）；以及如何有效地在缓冲区内移动。&lt;/p>
&lt;p>要想开始，请在 Emacs 中打开一个新的缓冲区，并将其命名为&lt;em>jack-handy&lt;/em>。然后输入以下杰克-汉迪的语录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">If&lt;/span> &lt;span class="nv">you&lt;/span> &lt;span class="nv">were&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">pirate&lt;/span>, &lt;span class="nv">you&lt;/span> &lt;span class="nv">know&lt;/span> &lt;span class="nv">what&lt;/span> &lt;span class="nv">would&lt;/span> &lt;span class="nv">be&lt;/span> &lt;span class="nv">the&lt;/span> &lt;span class="nv">one&lt;/span> &lt;span class="nv">thing&lt;/span> &lt;span class="nv">that&lt;/span> &lt;span class="nv">would&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">really&lt;/span> &lt;span class="nv">make&lt;/span> &lt;span class="nv">you&lt;/span> &lt;span class="nv">mad?&lt;/span> &lt;span class="nv">Treasure&lt;/span> &lt;span class="nv">chests&lt;/span> &lt;span class="nv">with&lt;/span> &lt;span class="nv">no&lt;/span> &lt;span class="nv">handles.&lt;/span> &lt;span class="nv">How&lt;/span> &lt;span class="nv">the&lt;/span> &lt;span class="nv">hell&lt;/span> &lt;span class="nv">are&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">you&lt;/span> &lt;span class="nv">supposed&lt;/span> &lt;span class="nv">to&lt;/span> &lt;span class="nv">carry&lt;/span> &lt;span class="nv">it?!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">The&lt;/span> &lt;span class="nv">face&lt;/span> &lt;span class="nv">of&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">child&lt;/span> &lt;span class="nv">can&lt;/span> &lt;span class="nv">say&lt;/span> &lt;span class="nv">it&lt;/span> &lt;span class="nv">all&lt;/span>, &lt;span class="nv">especially&lt;/span> &lt;span class="nv">the&lt;/span> &lt;span class="nv">mouth&lt;/span> &lt;span class="nv">part&lt;/span> &lt;span class="nv">of&lt;/span> &lt;span class="nv">the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">face.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">To&lt;/span> &lt;span class="nv">me&lt;/span>, &lt;span class="nv">boxing&lt;/span> &lt;span class="nv">is&lt;/span> &lt;span class="nv">like&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">ballet&lt;/span>, &lt;span class="nv">except&lt;/span> &lt;span class="nv">there&lt;/span>&lt;span class="ss">&amp;#39;s&lt;/span> &lt;span class="nv">no&lt;/span> &lt;span class="nv">music&lt;/span>, &lt;span class="nv">no&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">choreography&lt;/span>, &lt;span class="nb">and &lt;/span>&lt;span class="nv">the&lt;/span> &lt;span class="nv">dancers&lt;/span> &lt;span class="nv">hit&lt;/span> &lt;span class="nv">each&lt;/span> &lt;span class="nv">other.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用这个例子来试验本节中的导航和编辑。&lt;/p>
&lt;h3 id="点">点&lt;/h3>
&lt;p>如果你一直在关注，你应该在你的 Emacs 缓冲区看到一个橘红色的矩形。这就是&lt;em>游标&lt;/em>，它是&lt;em>点&lt;/em>的图形表示。点是所有魔法发生的地方：你在点上插入文本，大多数编辑命令都是与点有关的。即使你的光标看起来是在一个字符的上面，但点实际上是位于该字符和前一个字符之间。&lt;/p>
&lt;p>例如，把你的光标放在&lt;em>If you were a pirate&lt;/em>中的&lt;em>f&lt;/em>上。点就位于&lt;em>I&lt;/em>和&lt;em>f&lt;/em>之间。现在，如果你使用&lt;strong>C-k&lt;/strong>，从字母&lt;em>f&lt;/em>开始的所有文字将消失。 &lt;strong>C-k&lt;/strong>运行命令&lt;code>kill-line&lt;/code>，它*杀了当前行中从点开始的所有文字（我将在后面讲到更多的杀戮）。用**C-/**撤销这一改变。另外，尝试用正常的操作系统的键绑定来撤消；这也应该是有效的。&lt;/p>
&lt;h2 id="移动">移动&lt;/h2>
&lt;p>你可以像其他编辑器一样用方向键来移动点，但许多键的绑定可以让你更有效地进行导航，如表 2-1 所示。&lt;/p>
&lt;ol>
&lt;li>表 2-1: 文本导航的键位绑定&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>C-a&lt;/strong>&lt;/td>
&lt;td>移动到行首。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-m&lt;/strong>&lt;/td>
&lt;td>移动到该行的第一个非空格字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-e&lt;/strong>&lt;/td>
&lt;td>移动到行尾。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-f&lt;/strong>&lt;/td>
&lt;td>向前移动一个字符。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;em>C-b&lt;/em> *向后移动一个字符。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-f&lt;/strong>&lt;/td>
&lt;td>向前移动一个字（我经常用这个）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-b&lt;/strong>&lt;/td>
&lt;td>向后移动一个字（我也经常用这个）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-s&lt;/strong>&lt;/td>
&lt;td>Regex 搜索当前缓冲区内的文本，并移动到它。再按一次&lt;strong>C-s&lt;/strong>，移到下一个匹配。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-r&lt;/strong>&lt;/td>
&lt;td>与&lt;strong>C-s&lt;/strong>相同，但以反向方式搜索。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-&amp;lt;&lt;/strong>&lt;/td>
&lt;td>移到缓冲区的开头。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-&amp;gt;&lt;/strong>&lt;/td>
&lt;td>移动到缓冲区的末端。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-g g&lt;/strong>&lt;/td>
&lt;td>转到该行。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>来吧，在你的***缓冲区里试试这些键的绑定!&lt;/p>
&lt;h3 id="带区域的选择">带区域的选择&lt;/h3>
&lt;p>在 Emacs 中，我们并不&lt;em>选择&lt;/em>文本。我们创建&lt;em>区域&lt;/em>，并通过用&lt;strong>C-spc&lt;/strong>（ctrl-spacebar）设置*标记来实现。然后，当你移动点时，标记和点之间的所有东西都是区域。这与 shift 选择文本的基本目的非常相似。&lt;/p>
&lt;p>例如，在你的****缓冲区里做以下事情。&lt;/p>
&lt;ol>
&lt;li>转到文件的开头。&lt;/li>
&lt;li>使用&lt;strong>C-spc&lt;/strong>。&lt;/li>
&lt;li>使用&lt;strong>M-f&lt;/strong>两次。你应该看到一个高亮的区域，包括&lt;em>If you&lt;/em>。&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>按退格键。这将会删除&lt;em>如果你&lt;/em>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>使用标记而不是 Shift 选择文本的一个很酷的事情是，你可以在设置标记后自由使用 Emacs 的所有移动命令。例如，你可以设置一个标记，然后用&lt;strong>C-s&lt;/strong>来搜索缓冲区内几百行的一些文本。这样做将创建一个非常大的区域，而你就不必紧张地按住 Shift 键了。&lt;/p>
&lt;p>区域还可以让你把一个操作限制在缓冲区的有限区域内。试试这个。&lt;/p>
&lt;ol>
&lt;li>创建一个区域，包括&lt;em>孩子的脸可以说明一切&lt;/em>。&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>使用&lt;strong>M-x&lt;/strong>替换字符串，用&lt;em>head&lt;/em>替换&lt;em>face&lt;/em>。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>这将在当前区域内进行替换，而不是在点之后的整个缓冲区内进行替换，这是默认行为。&lt;/p>
&lt;h3 id="杀戮和杀戮环">杀戮和杀戮环&lt;/h3>
&lt;p>在大多数应用程序中，我们可以&lt;em>切割&lt;/em>文本，这只是轻微的暴力。我们还可以&lt;em>复制&lt;/em>和&lt;em>粘贴&lt;/em>。剪切和复制将选择的内容添加到剪贴板上，而粘贴则将剪贴板上的内容复制到当前的应用程序中。在 Emacs 中，我们采取杀人的方法，&lt;em>杀&lt;/em>区域，把它们加入到&lt;em>杀圈&lt;/em>。当你知道你正在浪费数千字节的文本时，你不觉得&lt;em>勇敢&lt;/em>和&lt;em>坚强&lt;/em>吗？然后我们可以&lt;em>yank&lt;/em>，在点上插入最近杀死的文本。我们还可以&lt;em>复制&lt;/em>文本到杀戮环，而不需要真正杀死它。&lt;/p>
&lt;p>为什么要用这些病态的术语呢？嗯，首先，当你听到有人在 Emacs 中谈论杀死东西时，你不会感到害怕。但更重要的是，Emacs 允许你做一些典型的剪切/复制/粘贴剪贴板功能集所不能做的工作。&lt;/p>
&lt;p>Emacs 在杀戮环上存储了多个文本块，你可以循环使用它们。这很酷，因为你可以通过循环来找回你很久之前杀死的文本。让我们来看看这个功能的实际应用。&lt;/p>
&lt;ol>
&lt;li>在第一行的&lt;em>Treasure&lt;/em>这个词上创建一个区域。&lt;/li>
&lt;li>2.使用&lt;strong>M-w&lt;/strong>，它与 &amp;ldquo;杀死-循环-保存 &amp;ldquo;命令绑定。一般来说，&lt;strong>M-w&lt;/strong>就像复制一样。它将该区域添加到杀戮环中，而不从你的缓冲区中删除它。&lt;/li>
&lt;li>将指针移到最后一行的&lt;em>choreography&lt;/em>字样上。&lt;/li>
&lt;li>使用&lt;strong>M-d&lt;/strong>，它与&lt;code>kill-word&lt;/code>命令绑定。这将把&lt;em>choreogra**phy&lt;/em>添加到杀戮环中，并将其从你的缓冲区中删除。&lt;/li>
&lt;li>使用&lt;strong>C-y&lt;/strong>。这将把你刚刚杀死的文字&lt;em>choreogra&lt;/em>phy*，插入到点的位置。&lt;/li>
&lt;li>使用&lt;strong>M-y&lt;/strong>。这将删除&lt;em>choreography&lt;/em>，并拉出杀戮环上的下一个项目，&lt;em>Treasure&lt;/em>。&lt;/li>
&lt;/ol>
&lt;p>你可以在表 2-2 中看到一些有用的杀戮/拉扯键的绑定。&lt;/p>
&lt;ol>
&lt;li>表 2-2：杀戮和拉扯的键位绑定 文本&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>C-w&lt;/strong>&lt;/td>
&lt;td>杀戮区域。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-w&lt;/strong>&lt;/td>
&lt;td>复制区域到杀戮环。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-y&lt;/strong>&lt;/td>
&lt;td>绞刑。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-y&lt;/strong>&lt;/td>
&lt;td>在拉动后循环使用杀伤环。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-d&lt;/strong>&lt;/td>
&lt;td>杀字。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-k&lt;/strong>&lt;/td>
&lt;td>杀行。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="编辑和帮助">编辑和帮助&lt;/h3>
&lt;p>表 2-3 显示了一些额外的、有用的编辑键绑定，你应该知道如何处理间距和扩展文本。&lt;/p>
&lt;ol>
&lt;li>表 2-3：其他有用的编辑键绑定方式&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>*&lt;em>Tab&lt;/em>&lt;/td>
&lt;td>缩进行。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-j&lt;/strong>&lt;/td>
&lt;td>新行和缩进，相当于回车后的 tab。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-/&lt;/strong>&lt;/td>
&lt;td>嬉皮士扩展；循环浏览点之前的文本可能的扩展方式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;em>M-*&lt;/em>&lt;/td>
&lt;td>删除点周围的所有空格和制表符。(我经常使用这个。)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Emacs 也有很好的内置帮助。表 2-4 中显示的两个键绑定将为你提供良好的服务。&lt;/p>
&lt;ol>
&lt;li>表 2-4：内置帮助的键位绑定&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>C-h k&lt;/strong> &lt;strong>键绑定&lt;/strong> 说明与该键绑定的功能。为了使其发挥作用，你在输入&lt;strong>C-h k&lt;/strong>后实际执行按键序列。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-h f&lt;/strong> *描述功能。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>帮助文本出现在一个新的*窗口中，这个概念我将在本章后面介绍。现在，你可以通过按&lt;strong>C-x o q&lt;/strong>关闭帮助窗口。&lt;/p>
&lt;h2 id="使用-emacs-与-clojure">使用 Emacs 与 Clojure&lt;/h2>
&lt;p>接下来，我将解释如何使用 Emacs 来有效地开发一个 Clojure 应用程序。你将学习如何启动一个与 Emacs 相连的 REPL 进程，以及如何与 Emacs 窗口一起工作。然后，我将介绍大量有用的键绑定，用于求值表达式、编译文件和执行其他方便的任务。最后，我将向你展示如何处理 Clojure 的错误，并介绍 Paredit 的一些功能，这是一种可选的次要模式，对编写和编辑 Lisp 风格语言的代码很有用。&lt;/p>
&lt;p>如果你想开始钻研 Clojure 代码，请务必跳过前面的内容！你可以在以后再回来。你可以稍后再回来。&lt;/p>
&lt;h3 id="开启你的-repl">开启你的 REPL&lt;/h3>
&lt;p>正如你在第 1 章中所学到的，REPL 允许你交互地编写和运行 Clojure 代码。REPL 是一个正在运行的 Clojure 程序，它给你一个提示，然后读取你的输入，求值它，打印结果，并循环返回到提示。在第 1 章中，你在终端窗口用&lt;code>lein repl&lt;/code>启动了 REPL。在本节中，你将直接在 Clojure 中启动一个 REPL。&lt;/p>
&lt;p>为了将 Emacs 连接到 REPL，你将使用 Emacs 软件包 CIDER，可在*[GitHub - clojure-emacs/cider: The Clojure Interactive Development Environment that Rocks for Emacs]（&lt;a class="link" href="https://github.com/clojure-emacs/cider/" target="_blank" rel="noopener"
>https://github.com/clojure-emacs/cider/&lt;/a>）*。如果你按照本章前面的配置说明，你应该已经安装了它，但你也可以通过运行&lt;strong>M-x&lt;/strong>包-安装，输入 cider，然后按回车键来安装它。&lt;/p>
&lt;p>CIDER 允许你在 Emacs 中启动一个 REPL，并为你提供键绑定，使你能更有效地与 REPL 进行交互。现在就去启动一个 REPL 会话吧。使用 Emacs，打开&lt;em>clojure-noob/**src/clojure_noob/core.clj&lt;/em>文件，该文件是你在第一章中创建的。接下来，使用&lt;strong>M-x&lt;/strong> cider-jack-in。这将启动 REPL 并创建一个新的缓冲区，在那里你可以与它进行交互。经过短暂的等待（应该不到一分钟），你应该看到类似图 2-8 的东西。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/cider-jack-in.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-8：运行 M-x cider-jack-in 后你的 Emacs 应该是这样的&lt;/p>
&lt;p>现在我们有两个窗口：我们的&lt;em>core.clj&lt;/em>文件在左边打开，REPL 在右边运行。如果你从来没有见过 Emacs 像这样分成两半，不要担心！我将讲述 Emacs 是如何做到的。我一会儿会讲到 Emacs 是如何分割窗口的。同时，在 REPL 中尝试求值一些代码。键入以下加粗的行。当你按下回车键时，你应该看到打印在 REPL 中的结果，显示在每一行代码的后面。这时不要担心代码，我将在下一章中介绍所有这些功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">map inc &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; (2 3 4 5)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">reduce + &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 111&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>相当漂亮! 你可以像在第一章中使用&lt;code>lein repl&lt;/code>那样使用这个 REPL。你还可以做更多的事情，但在这之前，我将解释如何在分屏 Emacs 中工作。&lt;/p>
&lt;p>###插曲。Emacs 的窗口和框架&lt;/p>
&lt;p>让我们绕道来谈谈 Emacs 是如何处理框架和窗口的，并讨论一些与窗口有关的有用的键绑定方法。如果你已经熟悉了 Emacs 的窗口，请随意跳过这一部分。&lt;/p>
&lt;p>Emacs 是在 1802 年左右发明的，所以它使用的术语与你习惯的略有不同。你通常所说的&lt;em>窗口&lt;/em>，Emacs 称之为&lt;em>框架&lt;/em>，而框架可以分割成多个&lt;em>窗口&lt;/em>。分割成多个窗口允许你一次查看多个缓冲区。你在运行&lt;code>cider-jack-in&lt;/code>时已经看到了这种情况（见图 2-9）。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/emacs-windows.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-9：在 Emacs 中，一个框架包含有窗口。&lt;/p>
&lt;p>表 2-5 显示了用于处理框架和窗口的几个键的绑定情况。&lt;/p>
&lt;ol>
&lt;li>表 2-5: Emacs 窗口的键位绑定&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>C-x o&lt;/strong>&lt;/td>
&lt;td>将光标切换到另一个窗口。现在试试这个，在你的 Clojure 文件和 REPL 之间切换。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-x 1&lt;/strong>&lt;/td>
&lt;td>删除所有其他窗口，框架中只留下当前窗口。这不会关闭你的缓冲区，也不会导致你失去任何工作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-x 2&lt;/strong>&lt;/td>
&lt;td>分割框架的上方和下方。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-x 3&lt;/strong>&lt;/td>
&lt;td>并排分割框架。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-x 0&lt;/strong>&lt;/td>
&lt;td>删除当前窗口。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>我鼓励你试试 Emacs 的窗口键绑定。例如，把你的光标放在左边的窗口，也就是有 Clojure 文件的那个，然后使用&lt;strong>C-x 1&lt;/strong>。另一个窗口应该消失，而你应该只看到 Clojure 代码。然后做以下工作。&lt;/p>
&lt;ul>
&lt;li>使用&lt;strong>C-x 3&lt;/strong>将窗口再次并排分开。&lt;/li>
&lt;li>使用&lt;strong>C-x o&lt;/strong>来切换到右边的窗口。&lt;/li>
&lt;li>使用&lt;strong>C-x b&lt;/strong> &lt;em>cider-repl&lt;/em>来切换到右边窗口的 CIDER 缓冲区。&lt;/li>
&lt;/ul>
&lt;p>一旦你做了一些实验，设置 Emacs，使它包含两个并排的窗口，左边是 Clojure 代码，右边是 CIDER 缓冲区，就像前面的图片一样。如果你有兴趣了解更多关于窗口和框架的知识，Emacs 手册中有大量的信息：见*&lt;a class="link" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Windows.html#Windows" target="_blank" rel="noopener"
>http://www.gnu.org/software/emacs/manual/html_node/elisp/Windows.html#Windows&lt;/a>*。&lt;/p>
&lt;p>现在你可以浏览 Emacs 窗口了，是时候学习一些 Clojure 开发的键绑定了&lt;/p>
&lt;p>###有用的键绑定的丰富内容&lt;/p>
&lt;p>现在你已经准备好学习一些按键绑定，它们将揭示在 Clojure 项目中使用 Emacs 的真正力量。这些命令将使你只需按下几个简单的键就能求值、调整、编译和运行代码。让我们先来看看如何快速求值一个表达式。&lt;/p>
&lt;p>在&lt;em>core.clj&lt;/em>的底部，添加以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Cleanliness is next to godliness&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在使用&lt;strong>C-e&lt;/strong>导航到行尾，然后使用&lt;strong>C-x C-e&lt;/strong>.文本&lt;code>Cleanliness is next to godliness&lt;/code>应该出现在 CIDER 缓冲区，如图 2-10 所示。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/cider-eval-last-expression.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-10：在 REPL 中从另一个缓冲区即时求值代码&lt;/p>
&lt;p>绑定键&lt;strong>C-x C-e&lt;/strong>运行&lt;code>cider-eval-last-expression&lt;/code>命令。顾名思义，该命令将紧接在点之前的表达式发送到 REPL，然后由 REPL 求值该表达式。你也可以试试&lt;strong>C-u C-x C-e&lt;/strong>，它打印出点之后的求值结果。&lt;/p>
&lt;p>现在让我们试着运行我们在第一章中写的&lt;code>-main&lt;/code>函数，这样我们就可以让全世界都知道我们是小茶壶。&lt;/p>
&lt;p>在&lt;em>core.clj&lt;/em>的缓冲区中，使用&lt;strong>C-c M-n M-n&lt;/strong>。这个键绑定将命名空间设置为你当前文件顶部列出的命名空间，所以右边窗口的提示现在应该是&lt;code>clojure-noob.core&amp;gt;&lt;/code>。我还没有详细介绍命名空间，但现在只要知道命名空间是一种组织机制，使我们能够避免命名冲突就足够了。接下来，在提示符下输入（-main）。REPL 应该打印出 &amp;ldquo;I&amp;rsquo;m a little teapot!&amp;ldquo;多么令人激动啊&lt;/p>
&lt;p>现在让我们创建一个新函数并运行它。在&lt;em>core.clj&lt;/em>的底部，添加以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">train&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Choo choo!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完成后，保存你的文件并使用&lt;strong>C-c C-k&lt;/strong>在 REPL 会话中编译你的当前文件。(现在，如果你在 REPL 中运行 &lt;code>(train)&lt;/code>，它将回显 &lt;code>Choo choo!&lt;/code>。&lt;/p>
&lt;p>当你还在 REPL 中时，试试&lt;strong>C-↑&lt;/strong>（ctrl 加向上箭头键）。 &lt;strong>C-↑&lt;/strong>和&lt;strong>C-↓&lt;/strong>循环浏览你的 REPL 历史，其中包括你要求 REPL 求值的所有 Clojure 表达式。&lt;/p>
&lt;p>Mac 用户注意：默认情况下，OS X 将&lt;strong>C-↑&lt;/strong>、&lt;strong>C-↓&lt;/strong>、&lt;strong>C-←&lt;/strong>和&lt;strong>C-→&lt;/strong>Map 为任务控制命令。你可以通过打开系统偏好设置，然后进入 Keyboard4Shortcuts4Mission Control 来改变你的 Mac 键绑定。&lt;/p>
&lt;p>最后，试试这个。&lt;/p>
&lt;ol>
&lt;li>在 REPL 提示符下输入（-main）。注意没有结尾的括号。&lt;/li>
&lt;li>按&lt;strong>C-enter&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;p>CIDER 应该关闭小括号并求值表达式。这只是 CIDER 为处理这么多小括号而提供的一个很好的小便利。&lt;/p>
&lt;p>CIDER 还有一些键的绑定，在你学习 Clojure 的时候非常好。按&lt;strong>C-c C-d C-d&lt;/strong>将显示该符号下的文档，这可以大大节省时间。当你看完文档后，按&lt;strong>q&lt;/strong>来关闭文档缓冲区。绑定的键**M-.&lt;strong>将导航到点下符号的源代码，而&lt;/strong>M-,**将使你回到原来的缓冲区和位置。最后，&lt;strong>C-c C-d C-a&lt;/strong>可以让你在函数名和文档中搜索任意的文本。当你不能完全记住一个函数的名字时，这是一个很好的方法来寻找它。&lt;/p>
&lt;p>CIDER README（&lt;em>&lt;a class="link" href="https://github.com/clojure-emacs/cider/" target="_blank" rel="noopener"
>GitHub - clojure-emacs/cider: The Clojure Interactive Development Environment that Rocks for Emacs&lt;/a>&lt;/em>)有一个全面的键绑定列表，你可以慢慢学习，但现在，表 2-6 和 2-7 包含了我们刚刚经历的键绑定的总结。&lt;/p>
&lt;ol>
&lt;li>表 2-6：Clojure 缓冲区的键绑定情况&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>键值&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>C-c M-n M-n&lt;/strong>&lt;/td>
&lt;td>切换到当前缓冲区的命名空间。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-x C-e&lt;/strong>&lt;/td>
&lt;td>求值紧邻点的表达式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-c C-k&lt;/strong>&lt;/td>
&lt;td>编译当前缓冲区。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-c C-d C-d&lt;/strong>&lt;/td>
&lt;td>显示点下符号的文档。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-. 和 M-,&lt;/strong>&lt;/td>
&lt;td>浏览到该点下的符号的源代码，并返回到原来的缓冲区。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-c C-d C-a&lt;/strong>&lt;/td>
&lt;td>Apropros 搜索；在函数名和文档中查找任意文本。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol>
&lt;li>表 2-7: CIDER 缓冲区的键绑定方式&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>**C-&lt;strong>&lt;strong>↑&lt;/strong>&lt;/strong>, C-**&lt;strong>↓&lt;/strong>&lt;/td>
&lt;td>循环浏览 REPL 历史。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>C-enter&lt;/strong>&lt;/td>
&lt;td>关闭圆括号并求值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="如何处理错误">如何处理错误&lt;/h3>
&lt;p>在这一节中，你将写一些有错误的代码，这样你就可以看到 Emacs 是如何反应的，以及你如何从错误中恢复并继续你的快乐之路。你将在 REPL 缓冲区和 &lt;em>core.clj&lt;/em> 缓冲区中进行这项工作。让我们从 REPL 开始。在提示符下，输入(map)并按回车。你应该看到类似图 2-11 的东西。&lt;/p>
&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/basic-emacs/cider-error.png"
loading="lazy"
>&lt;/p>
&lt;p>图 2-11：这就是在 REPL 中运行坏代码时发生的情况。&lt;/p>
&lt;p>正如你所看到的，在没有参数的情况下调用&lt;code>map&lt;/code>会使 Clojure 失去理智&amp;ndash;它在你的 REPL 缓冲区中显示一个`ArityException&amp;rsquo;错误信息，并在你的左边窗口中填满文本，看起来像一个疯子的呓语。这些呓语就是&lt;em>堆栈跟踪&lt;/em>，它显示了实际抛出异常的函数，以及哪个函数调用了&lt;em>那个&lt;/em>函数，沿着函数调用的堆栈。&lt;/p>
&lt;p>Clojure 的堆栈跟踪在你刚开始的时候可能很难解读，但经过一段时间后，你会学会从其中获得有用的信息。CIDER 通过允许你过滤堆栈痕迹来帮你一把，这可以减少噪音，这样你就可以将异常的原因锁定。&lt;code>*cider-error*&lt;/code>缓冲区的第 2 行有 Clojure、Java、REPL、Tooling、Duplicates 和 All 等过滤器。你可以点击每个选项来激活该过滤器。你也可以点击每个堆栈跟踪行来跳到相应的源代码。&lt;/p>
&lt;p>下面是如何关闭左边窗口中的堆栈跟踪。&lt;/p>
&lt;ol>
&lt;li>使用&lt;strong>C-x o&lt;/strong>来切换到窗口。&lt;/li>
&lt;li>按&lt;strong>q&lt;/strong>关闭堆栈跟踪，回到 CIDER。&lt;/li>
&lt;/ol>
&lt;p>如果你想再次查看错误，你可以切换到&lt;code>*cider-error*&lt;/code>缓冲区。你也可以在尝试编译文件时得到错误信息。要看这个，请到&lt;em>core.clj&lt;/em>缓冲区，写一些有错误的代码，然后进行编译。&lt;/p>
&lt;ol>
&lt;li>在结尾处添加&lt;code>(map)&lt;/code>。&lt;/li>
&lt;li>使用&lt;strong>C-c C-k&lt;/strong>进行编译。&lt;/li>
&lt;/ol>
&lt;p>你应该看到一个&lt;code>*cider-error*&lt;/code>缓冲区，类似于你之前看到的那个。同样，按&lt;strong>q&lt;/strong>关闭堆栈跟踪。&lt;/p>
&lt;h3 id="paredit">Paredit&lt;/h3>
&lt;p>在 Clojure 缓冲区中写代码时，你可能已经注意到了一些意外的事情发生。例如，每当你输入一个左括号，一个右括号就会立即被插入。&lt;/p>
&lt;p>这要归功于&lt;em>paredit-mode&lt;/em>，这是一种次要的模式，它将 Lisp 的大量小括号从一种责任变成了一种资产。Paredit 确保所有的小括号、双引号和大括号都是封闭的，从而减轻了你那可恶的负担。&lt;/p>
&lt;p>Paredit 还提供了键绑定功能，以轻松浏览和改变所有这些括号所创建的结构。在下一节中，我将介绍最有用的键绑定，但你也可以在*&lt;a class="link" href="https://github.com/georgek/paredit-cheatsheet/blob/master/paredit-cheatsheet.pdf" target="_blank" rel="noopener"
>https://github.com/georgek/paredit-cheatsheet/blob/master/paredit-cheatsheet.pdf&lt;/a>*（在骗局中，红色管子代表点）查看全面的骗局表。&lt;/p>
&lt;p>然而，如果你不习惯，paredit 有时会很烦人。我认为花点时间来学习它是非常值得的，但你可以随时用&lt;strong>M-x&lt;/strong> paredit-mode 来禁用它，它可以切换该模式的开启和关闭。&lt;/p>
&lt;p>下面的部分向你展示了最有用的键绑定。&lt;/p>
&lt;h4 id="wrapping-和-slurping">Wrapping 和 Slurping&lt;/h4>
&lt;p>&lt;em>Wrapping&lt;/em>用小括号包围点之后的表达式。 &lt;em>Slurping&lt;/em>将结束的小括号移到右边包括下一个表达式。例如，假设我们用这个开始。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而我们想得到这个结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以把&lt;code>2&lt;/code>包起来，加一个星号，然后再把&lt;code>3&lt;/code>溜走。首先，放置点，这里表示为一个垂直的管道，&lt;code>|&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="err">|&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后输入&lt;strong>M-(&lt;/strong>，与&lt;em>paredit-wrap-round&lt;/em>绑定，得到这个结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">|&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>加上星号和空格。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="err">|&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要在 &amp;ldquo;3 &amp;ldquo;上啧啧称奇，请按&lt;strong>C-→&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="err">|&lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以很容易地增加和扩展括号，而不必浪费宝贵的时间按住方向键来移动点。&lt;/p>
&lt;h4 id="barfing">Barfing&lt;/h4>
&lt;p>假设在前面的例子中，你不小心吐了四条。要解开它（也被称为&lt;em>barfing&lt;/em>），将你的光标（&lt;code>|&lt;/code>）放在括号内的任何地方。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">|&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用&lt;strong>C-←&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="err">|&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ta-da! 现在你知道如何随意扩展和收缩括号了。&lt;/p>
&lt;h4 id="导航">导航&lt;/h4>
&lt;p>在用 Lisp 方言写作时，你经常会遇到这样的表达式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">comp &lt;/span>&lt;span class="nv">record&lt;/span> &lt;span class="nv">first&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">d/q&lt;/span> &lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="ss">:find&lt;/span> &lt;span class="nv">?post&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:in&lt;/span> &lt;span class="nv">$&lt;/span> &lt;span class="nv">?search&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">:where&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[(&lt;/span>&lt;span class="nf">fulltext&lt;/span> &lt;span class="nv">$&lt;/span> &lt;span class="ss">:post/content&lt;/span> &lt;span class="nv">?search&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[[&lt;/span>&lt;span class="nv">?post&lt;/span> &lt;span class="nv">?content&lt;/span>&lt;span class="p">]]]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">db/db&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="ss">:q&lt;/span> &lt;span class="nv">params&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于这种表达式，快速从一个子表达式跳到下一个子表达式是很有用的。如果你把 point 放在开头的小括号之前，&lt;strong>C-M-f&lt;/strong>会把你带到结束的小括号。同样，如果 point 紧跟在闭合小括号之后，&lt;strong>C-M-b&lt;/strong>将带你到开头小括号。&lt;/p>
&lt;p>表 2-8 总结了你刚刚学到的 Paredit 键的绑定。&lt;/p>
&lt;ol>
&lt;li>表 2-8：Paredit 键的绑定方式&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>关键字&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>M-x&lt;/strong> paredit-mode&lt;/td>
&lt;td>切换 paredit 模式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>M-(&lt;/strong>&lt;/td>
&lt;td>括号内点后的表达式(paredit-wrap-round)。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>**C-**→&lt;/td>
&lt;td>Slurp;将结束的小括号向右移动，以包括下一个表达式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>**C-**←&lt;/td>
&lt;td>Barf；将括号向左移动，排除最后一个表达式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;em>C-M-f&lt;/em>,*&lt;em>C-M-b&lt;/em>&lt;/td>
&lt;td>移动到开头/结尾小括号。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="继续学习">继续学习&lt;/h2>
&lt;p>Emacs 是历史最悠久的编辑器之一，它的追随者对它的热情往往接近狂热。一开始使用它可能会很别扭，但坚持下去，你会在一生中得到充分的回报。&lt;/p>
&lt;p>每当我打开 Emacs 时，我都会感到受到鼓舞。就像一个工匠进入他的工作室一样，我感到一个可能性的领域在我面前打开。我感到这个环境的舒适，它随着时间的推移已经发展到完全适合我&amp;ndash;各种各样的包和键绑定，帮助我日复一日地把想法变成现实。&lt;/p>
&lt;p>在你继续你的 Emacs 之旅时，这些资源将帮助你。&lt;/p>
&lt;ul>
&lt;li>Emacs 手册&lt;em>提供了优秀、全面的指导。每天早上花点时间看看它吧! 下载 PDF，在旅途中阅读。&lt;/em>&lt;a class="link" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html#Top" target="_blank" rel="noopener"
>http://www.gnu.org/software/emacs/manual/html_node/emacs/index.html#Top&lt;/a>*。&lt;/li>
&lt;li>*《Emacs 参考卡》*是一个方便的小抄。 &lt;em>&lt;a class="link" href="http://www.ic.unicamp.br/~helio/disciplinas/MC102/Emacs_Reference_Card.pdf" target="_blank" rel="noopener"
>http://www.ic.unicamp.br/~helio/disciplinas/MC102/Emacs_Reference_Card.pdf&lt;/a>&lt;/em>。&lt;/li>
&lt;li>Mickey Petersen 的&lt;em>Mastering Emacs&lt;/em>是最好的 Emacs 资源之一。从阅读指南开始。 &lt;em>&lt;a class="link" href="http://www.masteringemacs.org/reading-guide/" target="_blank" rel="noopener"
>阅读指南-掌握 Emacs&lt;/a>&lt;/em> 。&lt;/li>
&lt;li>对于更注重视觉效果的人，我推荐手绘的《如何学习 Emacs》。Emacs 24 或更高版本的初学者指南&amp;rdquo;，作者 Sacha Chua。 &lt;em>&lt;a class="link" href="http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs8.png" target="_blank" rel="noopener"
>http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs8.png&lt;/a>&lt;/em>。&lt;/li>
&lt;li>只要按&lt;strong>C-h t&lt;/strong>就可以看到内置的教程。&lt;/li>
&lt;/ul>
&lt;h2 id="摘要">摘要&lt;/h2>
&lt;p>呜呼! 你已经覆盖了很多地方。你现在知道了 Emacs 作为一个 Lisp 解释器的真正性质。绑定键是执行 elisp 函数的快捷方式，而模式是绑定键和函数的集合。你学会了如何以自己的方式与 Emacs 互动，并掌握了缓冲区、窗口、区域、杀戮和拉动。最后，你学会了如何使用 CIDER 和 paredit 轻松地与 Clojure 工作。&lt;/p>
&lt;p>有了这些来之不易的 Emacs 知识，现在是时候开始认真学习 Clojure 了&lt;/p>
&lt;p>&lt;a class="link" href="https://www.braveclojure.com/basic-emacs/#footnote-5680-1-backlink" target="_blank" rel="noopener"
>1&lt;/a> &lt;em>&lt;a class="link" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html" target="_blank" rel="noopener"
>http://www.gnu.org/software/emacs/manual/html_node/emacs/Minor-Modes.html&lt;/a>&lt;/em>。&lt;/p></description></item><item><title>Chapter1 构建、运行和 REPL</title><link>https://example.com/p/chapter1-%E6%9E%84%E5%BB%BA%E8%BF%90%E8%A1%8C%E5%92%8C-repl/</link><pubDate>Thu, 13 Jan 2022 10:26:48 +0800</pubDate><guid>https://example.com/p/chapter1-%E6%9E%84%E5%BB%BA%E8%BF%90%E8%A1%8C%E5%92%8C-repl/</guid><description>&lt;h1 id="构建运行和-repl">构建、运行和 REPL&lt;/h1>
&lt;p>在本章中，你将预先投入少量时间来熟悉建立和运行 Clojure 程序的快速、傻瓜式方法。让一个真正的程序运行起来感觉很好。达到了这个里程碑，你就可以自由地进行实验，分享你的工作，并向那些仍在使用上个世纪的语言的同事幸灾乐祸。这将有助于保持你的积极性!&lt;/p>
&lt;p>你还将学习如何使用*Read-Eval-Print Loop（REPL）*在一个正在运行的 Clojure 进程中即时运行代码，这使你能够快速测试你对语言的理解并更有效地学习。&lt;/p>
&lt;p>但首先，我将简要地介绍 Clojure。接下来，我将介绍 Leiningen，这是 Clojure 事实上的标准构建工具。在本章结束时，你将知道如何做以下事情。&lt;/p>
&lt;ul>
&lt;li>用 Leiningen 创建一个新的 Clojure 项目&lt;/li>
&lt;li>构建该项目以创建一个可执行的 JAR 文件&lt;/li>
&lt;li>执行 JAR 文件&lt;/li>
&lt;li>在 Clojure REPL 中执行代码&lt;/li>
&lt;/ul>
&lt;h2 id="第一重要的事-什么是-clojure">第一重要的事: 什么是 Clojure&lt;/h2>
&lt;p>Clojure 是由 Rich Hickey 在一座神话般的火山中铸造的。他使用 Lisp、函数式编程和他自己的一绺史诗般的头发的合金，创造了一种令人愉快而强大的语言。它的 Lisp 遗产使你有能力写出比大多数非 Lisp 语言更有表现力的代码，而它对函数式编程的独特理解将使你作为一个程序员的思维更敏锐。此外，Clojure 为你提供了更好的工具来处理复杂的领域（如并发编程），这些领域在传统上被认为会使开发人员陷入多年的治疗中。&lt;/p>
&lt;p>不过，在谈论 Clojure 时，重要的是要牢记 Clojure 语言和 Clojure 编译器之间的区别。Clojure 语言是一种强调函数的 Lisp 方言，其语法和语义与任何实现都无关。编译器是一个可执行的 JAR 文件，&lt;em>clojure.jar&lt;/em>，它接收用 Clojure 语言编写的代码并将其编译为 Java 虚拟机（JVM）字节码。你会看到&lt;em>Clojure&lt;/em>被用来指代语言和编译器，如果你不知道它们是独立的东西，就会感到困惑。但现在你意识到了，你就会好起来。&lt;/p>
&lt;p>这种区分是必要的，因为与大多数编程语言如 Ruby、Python、C 和其他许多语言不同，Clojure 是一种&lt;em>托管语言&lt;/em>。Clojure 程序在 JVM 中执行，并依赖 JVM 的核心功能，如线程和垃圾收集。Clojure 还针对 JavaScript 和微软的通用语言运行时（CLR），但本书只关注 JVM 的实现。&lt;/p>
&lt;p>稍后我们将更多地探讨 Clojure 和 JVM 之间的关系，但现在你需要了解的主要概念是这些。&lt;/p>
&lt;ul>
&lt;li>JVM 进程执行 Java 字节码。&lt;/li>
&lt;li>通常情况下，Java 编译器从 Java 源代码中产生 Java 字节码。&lt;/li>
&lt;li>JAR 文件是 Java 字节码的集合。&lt;/li>
&lt;li>Java 程序通常以 JAR 文件分发。&lt;/li>
&lt;li>Java 程序&lt;em>clojure.jar&lt;/em> 读取 Clojure 源代码并产生 Java 字节码。&lt;/li>
&lt;li>然后，该 Java 字节码由已经运行&lt;em>clojure.jar&lt;/em>的 JVM 进程执行。&lt;/li>
&lt;/ul>
&lt;p>Clojure 持续在发展。截至目前，Clojure 的版本为 1.9.0，开发工作仍在进行中。如果你在遥远的未来读到这本书，并且 Clojure 有更高的版本号，不要担心！这本书涵盖了 Clojure 的所有内容。本书涵盖了 Clojure 的基础知识，这些知识在不同的版本中应该不会改变。没有必要让你的机器人管家把这本书退回给书店。&lt;/p>
&lt;p>现在你知道什么是 Clojure 了，让我们来实际构建一个该死的 Clojure 程序吧!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">lein&lt;/span> &lt;span class="k">new &lt;/span>&lt;span class="nv">app&lt;/span> &lt;span class="nv">clojure-noob&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令应该创建一个与此相似的目录结构（如果有一些差异也没关系）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="nv">.gitignore&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="nv">doc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">intro.md&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➊&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">project.clj&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="nv">README.md&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➋&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">resources&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="nv">src&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">clojure_noob&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➌&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">core.clj&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➍&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">clojure_noob&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="err">|&lt;/span> &lt;span class="nv">core_test.clj&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个项目骨架本身并不特别，也不像 Clojure 那样。它只是 Leiningen 使用的一种惯例。你将使用 Leiningen 来构建和运行 Clojure 应用程序，Leiningen 希望你的应用程序有这种结构。第一个需要注意的文件是位于➊的&lt;em>project.clj&lt;/em>，它是 Leiningen 的一个配置文件。它可以帮助 Leiningen 回答这样的问题：&amp;ldquo;这个项目有什么依赖？&amp;ldquo;和 &amp;ldquo;当这个 Clojure 程序运行时，什么函数应该先运行？&amp;rdquo; 一般来说，你会把你的源代码保存在&lt;em>src/&amp;lt;project_name&amp;gt;&lt;/em>。在这种情况下，位于➌的&lt;em>src/clojure_noob/core.clj&lt;/em>文件就是你要写一段时间的 Clojure 代码的地方。位于➍的&lt;em>test&lt;/em>目录显然包含了测试，而位于➋的&lt;em>resources&lt;/em>是你存储图片等资产的地方。&lt;/p>
&lt;h3 id="运行-clojure-项目">运行 Clojure 项目&lt;/h3>
&lt;p>现在让我们来实际运行这个项目。在你喜欢的编辑器中打开&lt;em>src/clojure_noob/core.clj&lt;/em>。你应该看到这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="err">➊&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">clojure-noob.core&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="ss">:gen-class&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➋&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;I don&amp;#39;t do a whole lot...yet.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">➌&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>➊处的行声明了一个命名空间，你现在不需要担心这个问题。➋处的&lt;code>-main'函数是你的程序的*入口，这个话题将在附录A中介绍。现在，将➌处的&lt;/code>&amp;ldquo;Hello, World!&amp;quot;&lt;code>改为&lt;/code>&amp;ldquo;I&amp;rsquo;m a little teapot!&amp;quot;&lt;code>。全行应该是&lt;/code>(println &amp;ldquo;I&amp;rsquo;m a little teapot!&amp;rdquo;))`。&lt;/p>
&lt;p>接下来，在你的终端导航到&lt;em>clojure_noob&lt;/em>目录，然后输入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">lein&lt;/span> &lt;span class="nv">run&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.braveclojure.com/assets/images/cftbat/getting-started/teapot.png"
loading="lazy"
>&lt;/p>
&lt;p>你应该看到输出&lt;code>&amp;quot;I'm a little teapot!&amp;quot;&lt;/code>恭喜你，小茶壶，你编写并执行了一个程序！&amp;quot;。&lt;/p>
&lt;p>当你阅读本书时，你会了解到更多关于程序中实际发生的事情，但现在你需要知道的是，你创建了一个函数，&lt;code>-main&lt;/code>，当你在命令行执行&lt;code>lein run&lt;/code>时，这个函数就会运行。&lt;/p>
&lt;h3 id="构建-clojure-项目">构建 Clojure 项目&lt;/h3>
&lt;p>使用&lt;code>lein run&lt;/code>对于尝试你的代码是很好的，但是如果你想与没有安装 Leiningen 的人分享你的工作，该怎么办？要做到这一点，你可以创建一个独立的文件，任何安装了 Java 的人（基本上就是所有人）都可以执行。要创建这个文件，请运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">lein&lt;/span> &lt;span class="nv">uberjar&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令创建了&lt;em>target/uberjar/clojure-noob-0.1.0**-SNAPSHOT-standalone.jar&lt;/em>文件。你可以通过运行这个命令使 Java 执行它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">java&lt;/span> &lt;span class="nv">-jar&lt;/span> &lt;span class="nv">target/uberjar/clojure-noob-0.1.0-SNAPSHOT-standalone.jar&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看看这个! 文件&lt;em>target/uberjar/clojure-noob-0.1.0-SNAPSHOT**-standalone.jar&lt;/em>是你的 Clojure 程序，你可以在几乎任何平台上发布和运行。&lt;/p>
&lt;p>现在你已经掌握了构建、运行和分发（非常）基本的 Clojure 程序所需的所有基本细节。在后面的章节中，你会了解到更多的细节，当你运行前面的命令时，Leiningen 在做什么，对 Clojure 与 JVM 的关系以及你如何运行生产代码有了完整的了解。&lt;/p>
&lt;p>在我们进入第二章，讨论 Emacs 的神奇和荣耀之前，让我们来看看另一个重要的工具：REPL。&lt;/p>
&lt;h3 id="使用-repl">使用 REPL&lt;/h3>
&lt;p>REPL 是一个用于试验代码的工具。它允许你与正在运行的程序进行交互，并快速尝试各种想法。它通过向你提供一个提示，让你输入代码来实现这一目的。然后，它&lt;em>读取&lt;/em>你的输入，&lt;em>求值&lt;/em>它，&lt;em>打印&lt;/em>结果，并&lt;em>循环&lt;/em>，再次向你提供提示。&lt;/p>
&lt;p>这个过程实现了一个快速的反馈循环，这在大多数其他语言中是不可能的。我强烈建议你经常使用它，因为你能够在学习过程中快速检查你对 Clojure 的理解。除此之外，REPL 开发是 Lisp 体验的一个重要部分，如果你不使用它，你就真的错过了。&lt;/p>
&lt;p>要启动一个 REPL，请运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">lein&lt;/span> &lt;span class="nv">repl&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出应该是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">nREPL&lt;/span> &lt;span class="nv">server&lt;/span> &lt;span class="nv">started&lt;/span> &lt;span class="nv">on&lt;/span> &lt;span class="nv">port&lt;/span> &lt;span class="mi">28925&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REPL-y&lt;/span> &lt;span class="mf">0.1&lt;/span>&lt;span class="nv">.10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Clojure&lt;/span> &lt;span class="mf">1.9&lt;/span>&lt;span class="nv">.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">Exit&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="nv">Control+D&lt;/span> &lt;span class="nb">or &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">exit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nb">or &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">quit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Commands&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">user/help&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">Docs&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">doc &lt;/span>&lt;span class="nv">function-name-here&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">find-doc &lt;/span>&lt;span class="s">&amp;#34;part-of-name-here&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">Source&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">source&lt;/span> &lt;span class="nv">function-name-here&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">user/sourcery&lt;/span> &lt;span class="nv">function-name-here&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">Javadoc&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">javadoc&lt;/span> &lt;span class="nv">java-object-or-class-here&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Examples&lt;/span> &lt;span class="nv">from&lt;/span> &lt;span class="nv">clojuredocs.org&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">clojuredocs&lt;/span> &lt;span class="nb">or &lt;/span>&lt;span class="nv">cdoc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">user/clojuredocs&lt;/span> &lt;span class="nv">name-here&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nf">user/clojuredocs&lt;/span> &lt;span class="s">&amp;#34;ns-here&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;name-here&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">clojure-noob.core=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后一行，&lt;code>clojure-noob.core=&amp;gt;&lt;/code>，告诉你，你在&lt;code>clojure -noob.core&lt;/code>命名空间中。你将在后面学习命名空间，但现在注意到命名空间基本上与你的&lt;em>src/&lt;strong>clojure_noob&lt;/strong>/core.clj&lt;/em>文件的名称一致。另外，注意到 REPL 显示的版本是&lt;em>Clojure 1.9.0&lt;/em>，但如前所述，无论你使用哪个版本，一切都可以正常工作。&lt;/p>
&lt;p>该提示还表明你的代码在 REPL 中被加载，你可以执行被定义的函数。现在只有一个函数，&lt;code>-main&lt;/code>，被定义了。现在就去执行它吧。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">clojure-noob.core=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">-main&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">I&lt;/span>&lt;span class="ss">&amp;#39;m&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">little&lt;/span> &lt;span class="nv">teapot!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">nil&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>干得好! 你刚刚使用 REPL 求值了一个函数调用。试试几个更基本的 Clojure 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">clojure-noob.core=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">clojure-noob.core=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">24&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">clojure-noob.core=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">first &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>真棒! 你加了一些数字，乘了一些数字，并从一个 Vector 中取出了第一个元素。你还第一次接触到了奇怪的 Lisp 语法! 所有的 Lisp，包括 Clojure，都采用&lt;em>前缀符号&lt;/em>，这意味着运算符在表达式中总是排在第一位。如果你不确定这意味着什么，不要担心。你很快就会了解到 Clojure 的所有语法。&lt;/p>
&lt;p>从概念上讲，REPL 类似于 SSH。就像你可以使用 SSH 与远程服务器交互一样，Clojure REPL 允许你与正在运行的 Clojure 进程交互。这项功能可以非常强大，因为你甚至可以将 REPL 附加到一个实时生产的应用程序，并在它运行时修改你的程序。不过现在，你将使用 REPL 来建立你对 Clojure 语法和语义的了解。&lt;/p>
&lt;p>还有一点要注意：今后，本书将介绍没有 REPL 提示的代码，但请尝试一下这些代码! 下面是一个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="k">do &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;no prompt here!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; no prompt here!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">; =&amp;gt; 4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当你看到这样的代码片段时，以&lt;code>；=&amp;gt;&lt;/code>开头的行表示正在运行的代码的输出。在这种情况下，应该打印出&lt;code>这里没有提示'的文字，代码的返回值是&lt;/code>4&amp;rsquo;。&lt;/p>
&lt;h2 id="clojure-编辑器">Clojure 编辑器&lt;/h2>
&lt;p>到此为止，你应该已经具备了开始学习 Clojure 语言所需的基本知识，而不需要对编辑器或集成开发环境（IDE）大费周章。但如果你确实想要一个关于强大编辑器的好教程，第 2 章涉及 Emacs，这是 Clojurists 中最受欢迎的编辑器。你绝对不需要在 Clojure 开发中使用 Emacs，但 Emacs 提供了与 Clojure REPL 的紧密集成，非常适合编写 Lisp 代码。然而，最重要的是，你要使用适合你的东西。&lt;/p>
&lt;p>如果 Emacs 不是你的那杯茶，这里有一些为 Clojure 开发设置其他文本编辑器和 IDE 的资源。&lt;/p>
&lt;ul>
&lt;li>这个 YouTube 视频将告诉你如何为 Clojure 开发设置 Sublime Text 2。  &lt;em>&lt;a class="link" href="http://www.youtube.com/watch?v=wBl0rYXQdGg/" target="_blank" rel="noopener"
>- YouTube&lt;/a>&lt;/em>。&lt;/li>
&lt;li>Vim 有很好的工具用于 Clojure 开发。这篇文章是一个很好的起点。 &lt;em>&lt;a class="link" href="http://mybuddymichael.com/writings/writing-clojure-with-vim-in-2013.html" target="_blank" rel="noopener"
>Writing Clojure With Vim In 2013 - mybuddymichael.com&lt;/a>&lt;/em>。&lt;/li>
&lt;li>Counterclockwise 是一个强烈推荐的 Eclipse 插件。&lt;em>&lt;a class="link" href="https://github.com/laurentpetit/ccw/wiki/GoogleCodeHome" target="_blank" rel="noopener"
>GoogleCodeHome - ccw-ide/ccw Wiki - GitHub&lt;/a>&lt;/em>。&lt;/li>
&lt;li>Cursive Clojure 是推荐给那些使用 IntelliJ 的 IDE： &lt;em>&lt;a class="link" href="https://cursiveclojure.com/" target="_blank" rel="noopener"
>https://cursiveclojure.com/&lt;/a>&lt;/em>。&lt;/li>
&lt;li>Nightcode 是一个用 Clojure 编写的简单、免费的 IDE。 &lt;em>&lt;a class="link" href="https://github.com/oakes/Nightcode/" target="_blank" rel="noopener"
>GitHub - oakes/Nightcode: An IDE for Clojure&lt;/a>&lt;/em>。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我真为你感到骄傲，小茶壶。你已经运行了你的第一个 Clojure 程序! 不仅如此，你还熟悉了 REPL，这是开发 Clojure 软件的最重要工具之一。太神奇了! 这让我想起了我个人英雄之一的《Long Live》中的不朽名句。&lt;/p>
&lt;blockquote>
&lt;p>You held your head like a hero&lt;br>
On a history book page&lt;br>
It was the end of a decade&lt;br>
But the start of an age&lt;br>
—Taylor Swift&lt;/p>
&lt;/blockquote>
&lt;p>好样的!&lt;/p></description></item><item><title>Introduction 简介</title><link>https://example.com/p/introduction-%E7%AE%80%E4%BB%8B/</link><pubDate>Thu, 13 Jan 2022 10:11:25 +0800</pubDate><guid>https://example.com/p/introduction-%E7%AE%80%E4%BB%8B/</guid><description>&lt;h1 id="简介">简介&lt;/h1>
&lt;p>在你的内心深处，你一直都知道你注定要学习 Clojure。 每当你高举着键盘，为一个难以理解的类层次结构而痛苦地哭泣时；每当你晚上躺在床上，为一个突变引起的海森堡虫而哭泣扰乱你的亲人时；每当一个竞赛条件使你拔掉更多你不断减少的头发时，你的某个秘密部分已经知道&lt;em>一定有一个更好的办法&lt;/em>。&lt;/p>
&lt;p>现在，终于，你面前的教学材料将使你与你渴望已久的编程语言结合起来。&lt;/p>
&lt;h2 id="学习一种新的编程语言穿越四个迷宫的旅程">学习一种新的编程语言：穿越四个迷宫的旅程&lt;/h2>
&lt;p>为了最大限度地发挥 Clojure 的作用，你需要在每个学习新语言的程序员面临的四个迷宫中找到自己的路。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>工具之林&lt;/strong> 友好而高效的编程环境使你能够轻松地尝试你的想法。你将学习如何设置你的环境。&lt;/li>
&lt;li>&lt;strong>语言之山&lt;/strong> 随着你的攀登，你将获得 Clojure 的语法、语义和数据结构方面的知识。你将学习如何使用最强大的编程工具之一&amp;ndash;宏，并学习如何利用 Clojure 的并发结构来简化你的生活。&lt;/li>
&lt;li>&lt;strong>神器之洞&lt;/strong> 在它的深处，你将学会构建、运行和发布你自己的程序，以及如何使用代码库。你还将学习 Clojure 与 Java 虚拟机（JVM）的关系。&lt;/li>
&lt;li>&lt;strong>心态云堡&lt;/strong> 在其稀薄的空气中，你将了解 Lisp 和函数式编程的原因和方法。你将了解渗透在 Clojure 中的简单哲学，以及如何像 Clojurist 一样解决问题。&lt;/li>
&lt;/ul>
&lt;p>别搞错了，你要工作。但这本书会让你感觉到工作是令人振奋的，而不是疲惫的。这是因为本书遵循三个准则。&lt;/p>
&lt;ul>
&lt;li>它采取了甜点优先的方法，给你提供了你需要的开发工具和语言细节，以便立即开始玩真正的程序。&lt;/li>
&lt;li>它假定你对 JVM、函数式编程或 Lisp 没有经验。它详细地涵盖了这些主题，所以当你构建和运行 Clojure 程序时，你会对你正在做的事情感到自信。&lt;/li>
&lt;li>它避开了 &lt;em>真实世界&lt;/em> 的例子，而选择了更有趣的练习，如 &lt;em>攻击霍比特人&lt;/em> 和 &lt;em>追踪闪亮的吸血鬼&lt;/em> 。&lt;/li>
&lt;/ul>
&lt;p>到最后，你将能够使用 Clojure&amp;ndash;现存的最令人兴奋和最有趣的编程语言之一!&lt;/p>
&lt;h2 id="本书是如何组织的">本书是如何组织的&lt;/h2>
&lt;p>本书分为三个部分，以便更好地指导你完成你的勇敢探索，勇敢的初出茅庐的 Clojurist。&lt;/p>
&lt;h3 id="第一部分环境设置">第一部分：环境设置&lt;/h3>
&lt;p>为了保持动力和高效学习，你需要实际写代码和构建可执行文件。这些章节将带领你快速浏览你所需要的工具，以便轻松地编写程序。这样，你就可以专注于学习 Clojure，而不是摆弄你的环境。&lt;/p>
&lt;p>第 1 章：构建、运行和 REPL&lt;/p>
&lt;p>让一个真正的程序运行起来，有一种强大的激励作用。一旦你能做到这一点，你就可以自由地进行实验，而且你可以真正地分享你的工作&lt;/p>
&lt;p>在这短短的一章中，你将投入少量时间来熟悉建立和运行 Clojure 程序的快速方法。你将学习如何在一个正在运行的 Clojure 进程中使用 read-eval-print 循环（REPL）来实验代码。这将收紧你的反馈回路，帮助你更有效地学习。&lt;/p>
&lt;p>第二章：如何使用 Emacs，一个优秀的 Clojure 编辑器&lt;/p>
&lt;p>快速的反馈回路对学习至关重要。在这一章中，我从头开始介绍 Emacs，以保证你有一个高效的 Emacs/Clojure 工作流程。&lt;/p>
&lt;h3 id="第二部分语言基础">第二部分：语言基础&lt;/h3>
&lt;p>这些章节为你继续学习 Clojure 奠定了坚实的基础。你将从学习 Clojure 的基础知识（语法、语义和数据结构）开始，这样你就可以&lt;em>做事情。然后，你将退一步详细研究 Clojure 最常用的函数，并学习如何使用&lt;/em>函数式编程*的思维方式来解决这些问题。&lt;/p>
&lt;p>第三章：做事情：Clojure 速成班&lt;/p>
&lt;p>在这里，你将开始真正深入了解 Clojure。这也是你需要关闭窗户的地方，因为你会开始大喊：&amp;quot;&lt;em>HOLY MOLEY THAT&amp;rsquo;S SPIFFY!&lt;/em>&amp;quot;，而且直到你读完本书的索引才会停止。&lt;/p>
&lt;p>毫无疑问，你已经听说过 Clojure 令人敬畏的并发支持和其他了不起的功能，但 Clojure 最突出的特点是它是一种 Lisp。你将探索这个 Lisp 核心，它由两部分组成：函数和数据。&lt;/p>
&lt;p>第 4 章：深入探讨核心函数&lt;/p>
&lt;p>在这一章中，你将了解 Clojure 的几个基本概念。这将为你提供所需的基础，使你能够阅读你以前没有使用过的函数的文档，并理解当你尝试它们时发生了什么。&lt;/p>
&lt;p>你还会看到你最需要的函数的使用例子。这将为你编写自己的代码以及阅读和学习其他人的项目打下坚实的基础。还记得我是如何提到追踪闪闪发光的吸血鬼的吗？你会在这一章中做到这一点（除非你已经在业余时间做到了）。&lt;/p>
&lt;p>第五章：函数式编程&lt;/p>
&lt;p>在这一章中，你将把你在函数和数据结构方面的具体经验与一种新的思维方式结合起来：函数式编程思维方式。你将通过构建席卷全国的最热门的新游戏来炫耀你的知识。Peg Thing!&lt;/p>
&lt;p>第 6 章：组织你的项目：一个图书管理员的故事&lt;/p>
&lt;p>本章解释了什么是命名空间，以及如何使用它们来组织你的代码。我不想透露太多，但它也涉及到一个国际奶酪大盗。&lt;/p>
&lt;p>第 7 章：Clojure 炼金术：读取、求值和宏&lt;/p>
&lt;p>在这一章中，我们将退一步描述 Clojure 如何运行你的代码。这将给你一个概念性的结构，你需要真正理解 Clojure 是如何工作的，以及它与其他非 Lisp 语言有什么不同。有了这个结构，我将介绍宏，这是现有的最强大的工具之一。&lt;/p>
&lt;p>第 8 章：编写宏&lt;/p>
&lt;p>这一章彻底研究了如何编写宏，从基本的例子开始，并在复杂程度上有所提高。最后，你将戴上你的假想帽，假装你经营一家网上药水店，并使用宏来验证客户的订单。&lt;/p>
&lt;h3 id="第三部分高级主题">第三部分：高级主题&lt;/h3>
&lt;p>这些章节涵盖了 Clojure 的额外有趣的主题：并发、Java 互操作和抽象。尽管你可以在不了解这些工具和概念的情况下编写程序，但它们在智力上是有价值的，并能给你作为一个程序员带来巨大的力量。人们说学习 Clojure 会让你成为一个更好的程序员，原因之一就是它让这些章节中涉及的概念变得易于理解和实际使用。&lt;/p>
&lt;p>第 9 章：并发和并行编程的神圣艺术&lt;/p>
&lt;p>在这一章中，你将了解什么是并发和并行，以及它们为什么重要。你将了解在编写并行程序时面临的挑战，以及 Clojure 的设计如何帮助缓解这些挑战。你将使用期货、延迟和承诺来安全地编写并行程序。&lt;/p>
&lt;p>第 10 章：Clojure 形而上学：原子、Refs、Vars 和拥抱僵尸&lt;/p>
&lt;p>本章详细介绍了 Clojure 管理状态的方法以及如何简化并发编程。你将学习如何使用原子、参考数和变量这三种管理状态的结构，并学习如何用&lt;code>pmap&lt;/code>进行无状态的并行计算。还会有抱抱的僵尸。&lt;/p>
&lt;p>第 11 章：用 core.async 掌握并发&lt;/p>
&lt;p>在这一章中，你将思考宇宙中的一切是一台热狗售卖机的想法。我的意思是，你将学习如何为独立运行的进程系统建模，这些进程通过使用 core.async 库的通道相互通信。&lt;/p>
&lt;p>第 12 章：与 JVM 一起工作&lt;/p>
&lt;p>这一章就像一本短语书和 Java 大陆的文化介绍之间的交叉。它向你概述了什么是 JVM，它如何运行程序，以及如何为它编译程序。它还向你简要介绍了常用的 Java 类和方法，并解释了如何在 Clojure 中与它们进行交互。不仅如此，它还向你展示了如何思考和理解 Java，以便你能将任何 Java 库纳入你的 Clojure 程序中。&lt;/p>
&lt;p>第 13 章：用多重方法、协议和记录创建和扩展抽象概念&lt;/p>
&lt;p>在第 4 章中，你了解到 Clojure 是以抽象的方式编写的。本章是对创建和实现你自己的抽象的世界的介绍。你将学习多重方法、协议和记录的基础知识。&lt;/p>
&lt;p>附录 A：用 Leiningen 构建和开发&lt;/p>
&lt;p>本附录阐明了使用 Leiningen 的一些细微之处，比如什么是 Maven，如何计算出 Java 库的版本号，以便你能使用它们。&lt;/p>
&lt;p>附录 B：Boot，花哨的 Clojure 构建框架&lt;/p>
&lt;p>Boot 是 Leiningen 的一个替代品，它提供了相同的功能，但有一个额外的好处，即它更容易扩展和编写可组合的任务。本附录解释了 Boot 的基本概念，并指导你编写你的第一个任务。&lt;/p>
&lt;h2 id="代码">代码&lt;/h2>
&lt;p>你可以在*&lt;a class="link" href="http://www.nostarch.com/clojure/" target="_blank" rel="noopener"
>http://www.nostarch.com/clojure/&lt;/a>*下载该书的所有源代码。这些代码是按章节组织的。&lt;/p>
&lt;p>第 1 章描述了运行 Clojure 代码的不同方式，包括如何使用 REPL。我建议当你遇到大多数例子时，在 REPL 中运行它们，特别是第 3 章到第 8 章。这将有助于你习惯于编写和理解 Lisp 代码，并能帮助你保留你所学的一切。但是对于那些很长的例子，最好把你的代码写到一个文件中，然后在 REPL 中运行你写的代码。&lt;/p>
&lt;h2 id="旅程开始了">旅程开始了&lt;/h2>
&lt;p>你准备好了吗，勇敢的读者？你准备好迎接你真正的命运了吗？带上你最好的一对小括号：你即将踏上一生的旅程!&lt;/p></description></item><item><title>Acknowledgments 致谢</title><link>https://example.com/p/acknowledgments-%E8%87%B4%E8%B0%A2/</link><pubDate>Thu, 13 Jan 2022 10:06:10 +0800</pubDate><guid>https://example.com/p/acknowledgments-%E8%87%B4%E8%B0%A2/</guid><description>&lt;h1 id="致谢">致谢&lt;/h1>
&lt;p>有很多人帮助我诞生了这个奇怪的婴儿，我对他们的支持感到感激。&lt;/p>
&lt;p>首先，感谢我的妻子杰西，她为这本书绘制了插图，使它具有我所希望的视觉特性。也感谢你的支持，感谢你在我处于疯狂的作家模式时容忍我。(附注：通过一本编程书的封面感谢我的妻子，感觉很奇怪。）&lt;/p>
&lt;p>感谢我在麦肯锡的朋友和同事，他们阅读了早期的修订稿并鼓励我继续写作。其中最重要的是 Pat Shaughnessy、Alex Rothenberg、Thomas Newton、Jalil Fanaian、Chris Parker、Mark Daggett、Christian Lilley，以及 Mike Morreale。你们都太伟大了；请搬到 Durham。&lt;/p>
&lt;p>感谢我的朋友布里奇特-希勒（Bridget Hillyer）一直以来的支持。我总是觉得你是我的后盾，这对我来说意义重大。也感谢我的朋友乔-杰克逊，感谢他阅读、听我喋喋不休、并为我提供反馈，并感谢他在我面前对其他人大谈这本书，让我感觉很酷。Alan Dipert，朋友，技术评论员，现在的同事，我向你表示万分感谢，感谢你出色的技术编辑，感谢你首先将我引入 Clojure。&lt;/p>
&lt;p>我不知道是否每个作家都会不断地问自己：&amp;ldquo;我到底为什么要这样做？是否有人会读它？&amp;ldquo;但我肯定会这样做。因此，我想感谢所有在这本书的最初网络版本编写过程中写信给我并建议进行编辑的友好人士。这些积极的反馈使我感到有信心，我正在做一件有意义的事情。同样地，感谢所有购买 Leanpub 版本的人&lt;/p>
&lt;p>非常感谢 Clojure 社区领导人 Eric Normand、David Nolen 和 Alex Miller 对本书的积极宣传。在下一届 Conj 大会上见!&lt;/p>
&lt;p>最后，要感谢 No Starch 出版社的各位同仁，感谢你们对本书的帮助，使之成为我无比自豪的作品。感谢你们的高标准。感谢你们不断地促使本书更加清晰，甚至提出笑话。(Seph 的 &amp;ldquo;蜡球 &amp;ldquo;编辑仍然让我开怀大笑。) Seph Kramer, Riley Hoffman, Hayley Baker, Alison Law, Tyler Ortman, Anne Marie Walker: 谢谢你们!&lt;/p></description></item><item><title>Foreword 前言</title><link>https://example.com/p/foreword-%E5%89%8D%E8%A8%80/</link><pubDate>Thu, 13 Jan 2022 10:04:46 +0800</pubDate><guid>https://example.com/p/foreword-%E5%89%8D%E8%A8%80/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>当你阅读这本搞笑的书时，你会在某个时刻经历一个非常严肃的时刻。在了解了一些 Clojure 之后，编程变得更加有趣。这也是你在这本书上的投资，包括金钱和时间，得到回报的时刻&amp;ndash;有趣。&lt;/p>
&lt;p>幽默与严肃性有一定的关系。对严肃的事情开玩笑是合适的，但只有在适当的时间过去之后。例如，当我想起我最喜欢的叔叔的最后一句话时，我花了很多年才能够破涕为笑。&amp;ldquo;拿着我的啤酒&amp;rdquo;。&lt;/p>
&lt;p>这本书的工作方式正好相反。它在严肃事件发生之前，甚至在严肃事件发生期间，适时地指出了真正有趣的事情&amp;ndash;那一刻你意识到你因为 Clojure 而更喜欢编程。它在做到这一点的同时，并没有掩盖你将要学习的 Clojure 编程的深层技术层面。&lt;/p>
&lt;p>这种方法令人耳目一新，因为我读过的大多数编程书籍都比骆驼的屁还干。我们很幸运，丹尼尔是一位出色的程序员和作家，他的妻子杰斯是一位同样出色的插图画家。我们特别幸运的是，他们两个都疯了，决定在完全相同的时间写一本书。&lt;/p>
&lt;p>Clojure 是本书的主题，但在某种程度上它&amp;ndash;或者说它的创造者 Rich Hickey&amp;ndash;也是作者之一，因为 Clojure 是有史以来最优雅的编程语言。就像早午餐的概念一样，Clojure 是如此的优雅，以至于如果不以某种方式提高他们的水平，就很难告诉别人关于它的任何事情。&lt;/p>
&lt;p>优雅是编程语言家族中许多 Lisp 方言经常被赋予的品质，Clojure 就是其中之一。所有的 Lisp 都是由数学家 John McCarthy 在 1958 年做出的一系列简单而美丽的发现演变而来。&lt;/p>
&lt;p>自 1958 年以来，出现了许多 Lisp 方言 和 Lisp 书籍。还有更多的 Lisp 方言 和书籍即将问世。作为过去和未来的神器，每一种都适合它们的作者在各自的时代所面临的独特的约束和欲望的组合。&lt;/p>
&lt;p>我发现 Clojure，以及这本关于它的特殊书籍，特别适合现在。我希望你也会这样。&lt;/p>
&lt;p>Alan Dipert&lt;/p></description></item><item><title>Thrfit 入门</title><link>https://example.com/p/thrfit-%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 06 Jan 2022 10:41:45 +0800</pubDate><guid>https://example.com/p/thrfit-%E5%85%A5%E9%97%A8/</guid><description>&lt;blockquote>
&lt;p>本文主要介绍 Thrift 的 IDL 基本语法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="idl">IDL&lt;/h2>
&lt;p>Thrift 采用 IDL（Interface Definition Language）来定义通用的服务接口，然后通过 Thrift 提供的编译器，可以将服务接口编译成不同语言编写的代码，通过这个方式来实现跨语言的功能。&lt;/p>
&lt;h2 id="基本类型">基本类型&lt;/h2>
&lt;p>&lt;code>thrift&lt;/code>基本支持所有的 Java 基本类型以及引用类型。&lt;/p>
&lt;ul>
&lt;li>bool
&lt;ul>
&lt;li>布尔值，对应 java 中的 boolean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>byte
&lt;ul>
&lt;li>有符号字节，对应 java 中的 byte&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>i16
&lt;ul>
&lt;li>16 位有符号整型，对应 java 中的 short&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>i32
&lt;ul>
&lt;li>32 位有符号整型，对应 java 中的 int&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>i64
&lt;ul>
&lt;li>64 位有符号整型，对应 java 中的 long&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>double
&lt;ul>
&lt;li>64 位浮点型，对应 java 中的 double&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>string
&lt;ul>
&lt;li>字符串，对应 java 中的 String&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>binary
&lt;ul>
&lt;li>对应 java 中的 byte[]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="struct-结构体">struct 结构体&lt;/h2>
&lt;p>struct 有以下的一些约束：&lt;/p>
&lt;ol>
&lt;li>struct 不能继承，但是可以嵌套，不能嵌套自己。&lt;/li>
&lt;li>其成员都是有明确的类型&lt;/li>
&lt;li>成员都是被正整数编号过的，其中的编号不能重复，为了在传输过程中编码使用。&lt;/li>
&lt;li>成员分隔符可以是逗号（,）或者分号（;），而且可以混用。&lt;/li>
&lt;li>字段会有有 optional 和 required 之分。但是如果不指定则为无类型–可以不填充该值，但是在序列化传输的时候也会序列化进去，optional 是不填充则不序列化，required 是必须填充也必须序列化。&lt;/li>
&lt;li>每个字段可以设置默认值。&lt;/li>
&lt;li>同一个文件可以定义多个 struct，也可以定义在不同的文件，进行 include 引入。&lt;/li>
&lt;/ol>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-thrift" data-lang="thrift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nc">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">required&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">// 该字段值必须填写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">optional&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">// 默认值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">bool&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gender&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">// 默认为optional
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果 required 标识的域没有赋值，Thrift 将给予提示；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>如果 optional 标识的域没有赋值，该域将不会被序列化传输；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果某个 optional 标识域有缺省值而用户没有重新赋值，则该域的值一直为缺省值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果某个 optional 标识域有缺省值或者用户已经重新赋值，而不设置它的__isset 为 true，也不会被序列化传输。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="container-容器">container 容器&lt;/h2>
&lt;p>有三种可用的容器类型：&lt;/p>
&lt;ul>
&lt;li>&lt;code>list&amp;lt;t&amp;gt;&lt;/code>
&lt;ul>
&lt;li>元素类型为 t 的有序列表，允许重复。类似于 java 中的 ArrayList。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>set&amp;lt;t&amp;gt;&lt;/code>
&lt;ul>
&lt;li>元素类型为 t 的无序表，不允许重复。类似于 java 中的 HashSet。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>map&amp;lt;t, t&amp;gt;&lt;/code>
&lt;ul>
&lt;li>键类型为 t，值类型为 t 的键值对，键不允许重复。类似于 java 中的 HashMap。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">struct Test {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1: map&amp;lt;string, User&amp;gt; usermap,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2: set&amp;lt;i32&amp;gt; intset,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3: list&amp;lt;double&amp;gt; doublelist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="enum-枚举">enum 枚举&lt;/h2>
&lt;p>enum 类型有如下约束：&lt;/p>
&lt;ol>
&lt;li>编译器默认从 0 开始赋值。&lt;/li>
&lt;li>可以赋予某个常量为某个整数。&lt;/li>
&lt;li>允许常量是 16 进制整数。&lt;/li>
&lt;li>末尾没有分号。&lt;/li>
&lt;li>给常量赋缺省值的时候，使用常量全程。&lt;/li>
&lt;/ol>
&lt;p>Thrift 不支持枚举类嵌套，枚举常量必须是 32 位正整数。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">enum HTTPStatus {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> OK = 200,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NOT_FOUND = 404
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="const-常量">const 常量&lt;/h2>
&lt;p>在变量前加 const。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const i32 age = 28;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="typedef-类型定义">typedef 类型定义&lt;/h2>
&lt;p>Thrift 支持类似 C/C++的类型定义。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">typedef i32 myInt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">typedef i64 myNumber
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类型定义的末尾没有逗号。&lt;/p>
&lt;h2 id="exception-异常">exception 异常&lt;/h2>
&lt;p>异常在语法和功能上类似于结构体，差别是异常使用关键字 exception，而且异常是继承每种语言的基础异常类。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">exception MyException {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1: i32 errCode,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2: string errMsg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="service-服务">service 服务&lt;/h2>
&lt;p>服务的定义方法在语义上等同于面向对象语言中的接口。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">service HelloService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> i32 sayInt(1:i32 param)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string sayString(1:string param)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bool sayBoolean(1:bool param)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void sayVoid()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="namespace-命名空间">namespace 命名空间&lt;/h2>
&lt;p>Thrift 中的命名空间类似于 C++中的 namespace 和 java 中的 package，它们提供了一种组织（隔离）代码的简便方式。&lt;/p>
&lt;p>名字空间也可以用于解决类型定义中的名字冲突。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">namespace java com.example.test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace py example
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">namespace go example
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="include-引用">include 引用&lt;/h2>
&lt;p>为了便于管理、重用和提高模块性/组织性，我们常常分割 Thrift 定义在不同的文件中。&lt;/p>
&lt;p>Thrift 允许文件包含其它 thrift 文件，用户需要使用 thrift 文件名作为前缀访问被包含的对象。&lt;/p>
&lt;p>Thrift 文件名要用双引号包含，末尾没有逗号或者分号。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">include &amp;#34;test.thrift&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">include &amp;#34;../test.thrift&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="注释">注释&lt;/h2>
&lt;p>支持多行和单行风格。&lt;/p>
&lt;p>例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">/**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * This is a multi-line comment.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * Just like in C.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // C++/Java style single-line comments work just as well.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考资料&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="http://thrift.apache.org/docs/types" target="_blank" rel="noopener"
>Thrift Types&lt;/a>&lt;/li>
&lt;li>[Thrift IDL 基本语法](&lt;a class="link" href="http://1csh1.github.io/2017/02/21/Thrift" target="_blank" rel="noopener"
>http://1csh1.github.io/2017/02/21/Thrift&lt;/a> IDL 基本语法/)&lt;/li>
&lt;li>&lt;a class="link" href="https://juejin.im/post/5baf11e35188255c8c0ca80e" target="_blank" rel="noopener"
>Thrift IDL 快速入门&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>修复 Vscode Git Cannot Use Api Proposal ScmValidation</title><link>https://example.com/p/%E4%BF%AE%E5%A4%8D-vscode-git-cannot-use-api-proposal-scmvalidation/</link><pubDate>Thu, 06 Jan 2022 10:29:52 +0800</pubDate><guid>https://example.com/p/%E4%BF%AE%E5%A4%8D-vscode-git-cannot-use-api-proposal-scmvalidation/</guid><description>&lt;h1 id="问题表现">问题表现&lt;/h1>
&lt;p>某天，我的 vscode 的 git 管理出现了问题。&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/32930147/147309938-88f840c8-c1f3-4a03-91b2-7115c63506c4.png"
loading="lazy"
alt="CleanShot 2021-12-24 at 10 44 48@2x"
>&lt;/p>
&lt;p>类似这个样子。&lt;/p>
&lt;h1 id="解决方式">解决方式&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@builtin @id:vscode.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/6726799/147344845-edb99b92-8e53-48ad-8df6-0ece3d9a3da9.png"
loading="lazy"
alt="image"
>&lt;/p>
&lt;p>直接卸载了。&lt;/p>
&lt;h1 id="出现原因">出现原因&lt;/h1>
&lt;p>应该是某个公司的插件给我自动装上导致的&lt;/p></description></item><item><title>Gavin Wood: Web3 去中心化技术是维护自由民主的唯一希望</title><link>https://example.com/p/gavin-wood-web3-%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%8A%80%E6%9C%AF%E6%98%AF%E7%BB%B4%E6%8A%A4%E8%87%AA%E7%94%B1%E6%B0%91%E4%B8%BB%E7%9A%84%E5%94%AF%E4%B8%80%E5%B8%8C%E6%9C%9B/</link><pubDate>Wed, 05 Jan 2022 10:20:39 +0800</pubDate><guid>https://example.com/p/gavin-wood-web3-%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E6%8A%80%E6%9C%AF%E6%98%AF%E7%BB%B4%E6%8A%A4%E8%87%AA%E7%94%B1%E6%B0%91%E4%B8%BB%E7%9A%84%E5%94%AF%E4%B8%80%E5%B8%8C%E6%9C%9B/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Gavin Wood&lt;/strong> 在 2014 年创造了 Web3（最初是 Web 3.0）这个词。当时，他刚开始帮助开发以太坊，这是一种在知名度和市场规模上仅次于比特币的加密货币。如今，他经营着支持去中心化技术项目的 Web3 基金会，以及专注于为 Web3 构建区块链基础设施的公司 Parity Technologies。居住在瑞士的 Gavin 上周通过视频与我讨论了 Web 2.0 出错的地方、他对未来的展望，以及为什么我们都需要更少的信任。以下采访是我们谈话的记录的整理版。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>&lt;strong>WIRED&lt;/strong>：据我所知，Web3 最基本的想法是当前的 Web2.0 不好。因此，在我们讨论 Web3 会带来什么之前，你会怎么描述现在的问题？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我认为 Web 2.0 的模型与互联网出现之前的社会模型非常相似。如果你回到 500 年前，人们基本上只在他们的小村庄和乡镇，并与他们认识的人进行交易。从广义上讲，他们依靠社会结构来确保他们的期望是可信的，并且很可能会真正发生，比如，这些苹果没有腐烂，或者这个马蹄铁在三周后不会破裂。&lt;/p>
&lt;p>这种机制运行很好，因为在城镇之间移动既困难又耗时且成本高昂。所以你有相当高的可信度，就会有人留下来，他们并不想被流放。&lt;/p>
&lt;p>但是随着社会变得更大规模，我们有了城市、国家和国际组织，我们开始关注这种奇怪的品牌声誉问题。我们创建了这些强大但受监管的机构，监管机构原则上确保满足我们的期望。想要在特定行业开展业务，你必须满足某些法定要求。&lt;/p>
&lt;p>这不是一个很好的解决方案，原因有几个。其中之一是，去监管新兴产业非常困难。政府的行动是比较缓慢的，需要一段时间才能赶上。另一个是监管机构不完善。尤其是当他们与行业密切合作时，行业和监管机构之间通常会存在一些旋转门关系。&lt;/p>
&lt;p>另一个是监管机构的支持力度非常有限，也就是政府投入多少资金。因此，监管将是不完整的。他们能够监管最大的罪犯，但他们无法在任何地方都保持真正强大的影响力。当然，监管机构和法律因司法管辖区而异。如果你去欧盟的某个地方，那么 xx 活动就可以了；如果你去别的地方，那就不行了。随着我们成为一个非常国际化的社会，这实际上意味着你的期望仍未得到满足。&lt;/p>
&lt;p>所以我们需要超越这一点。但不幸的是，Web 2.0 仍然存在于这种非常中心化的模型中。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：我们真的在谈论技术的失败吗？还是我们在谈论治理、监管和竞争政策的失败？因为听起来你是在说：这是监管的失败，但答案却不是更好的监管，而是需要有一个新的技术层，因为监管失败是不可避免的。我是否正确描述了您的观点？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：是的，这个模型坏了。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：那么让我们来谈谈应该用什么来代替它。我们一直在讨论为什么 Web 2.0 不起作用。你对 Web3 的定义是什么？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：Less trust, more truth。更少的信任，更多的事实。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：“less trust”是什么意思？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我对信任有一个特殊的含义，它本质上是信仰。这是一种信念（faith），即某些事情会发生的信仰，世界会以某种方式运转，而没有任何真实的证据或理性的论据来说明为什么会发生这种情况。所以我们想要的更少的信任，我们想要更多的事实真相。我真正想表达的意思是在 Web3 下更加可以相信我们的期望会得到满足。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：这听起来像是在说“减少盲目信仰，增加信誉的可信度”。&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：可以说是，也可以说不是。我认为信任本身实际上围绕着坏事。信任意味着你将某种权力授予其他人或某个组织，他们将能够以某种任意方式使用该权力。一旦它成为可信的信任，它就不再是真正的信任。它会有一个机制，一个基本原理，一个论点，一个逻辑机制。无论如何，但在我看来，这不是信任。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：已经写到 Web3 将打破像 Google 和 Facebook 这样的垄断企业平台。你能解释一下它将如何做到这一点吗？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：是的，我认为这是一个合乎逻辑的改进。而且我认为在更大的计划中，这是不可避免的。要么这是不可避免的，要么社会正在走向衰落。但就具体而言，这是一个很难回答的问题。&lt;/p>
&lt;p>在技术方面，我们有什么？我们有密码学。在基本层面上，密码学允许我与我的朋友隐私的交谈，即使在公开的沟通渠道或通过第三方，我仍然有良好的期望，可信的期望。这将是私密的，就好像我们在田野里互相聊天，可以看到周围没有人。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：仅以加密通信为例，目前看来与企业垄断非常相似。就像，WhatsApp 提供加密通信。关于这在多大程度上真正满足了你对隐私的渴望存在一些争议，但我仍然认为这是加密通信的一个例子，它由世界上最强大的公司之一控制，拥有数十亿用户。&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：这是一个有趣的事情，从表面上看，是这样的。但是有一些重要的区别。其中之一是，如果 WhatsApp 在他们的服务中引入了一个允许他们解密所有对话的密钥怎么办？我们怎么知道它不存在？你必须信任。我们看不到代码，我们看不到他们的服务是如何运行的，我们看不到他们的密钥结构。所以我们能做的只有盲目相信他们说的是真的。现在他们说实话也许是因为他们害怕如果不这样做，他们的声誉会受到很大的打击。但是，正如我们从斯诺登的一些启示中看到的那样，有时公司没有机会说实话。有时，安全服务可以在他们的后台安装一个盒子，然后他们被告知，“你不需要看这个盒子，你不能对这个盒子说或做任何事情，你只能安静的坐着。”&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：听起来开源软件可以实现你所说的，但你并不是在描述开源软件。当我们谈论 Web3 时，我们谈论的是区块链，这是一种完全不同的互联网架构方式。那么，从技术上讲，你如何实现这种对信任的依赖呢？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我认为一定程度的 truth 是必要的。我的意思是开放、透明。区块链技术同时使用密码学和某些博弈论经济学来提供服务。我们需要了解网络的节点基础设施，它真的是点对点的？还是实际上由制造和销售硬件的公司从一个数据中心运行？新节点上线之前需要进行咨询吗？细节决定了它是否是伪装的 Web 2.0，还是否真正合法地开放、透明、去中心化、点对点。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：让我们深入探讨下“去中心化”的概念。互联网已经去中心化了，对吧？Internet 协议不归公司所有。虽然在实际层面上，人们倾向于通过中心化的平台来引导他们的行为，但他们不一定必须这样做。你不必在 Facebook 上发消息，它只是很方便。那么当我们谈论中心化和去中心化时，这意味着什么？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：从本质上讲，这意味着我个人可以像世界上任何其他人一样轻松地成为这项整体服务的提供者或共同提供者。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：这有多现实？在我看来，只有一小部分具有高技术素养的人可以做到。在这种语境下，这听起来会出现一种不同的中心化。&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：如果你不厌其烦地教育自己，那么拥有可以执行的权利或自由与由于缺乏排他性团体的包容性而无法在非常基本和基础的层面上做某事之间存在很大差异。如果我对免费提供的材料进行了充分的教育，并且这就是成为该服务的共同提供者所需的全部内容，那么这就是免费服务。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：我上过法学院，我可以说，看，任何人都可以学习法律，任何人都可以进入法学院，然后为律师学习。但实际上，至少在美国，它是一个进入门槛非常高的公会，最显着的是成本。即使进入法律行业的门槛高于编程，这并不一定意味着你的行业的进入门槛不高。我理解你所描绘的区别，但我想知道这是否有点天真，认为每个人都可以选择成为一名专业的 Web3 程序员？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：原则上，这与成为一名 Web3 程序员无关。您应该能够享受评估某些事物的大部分能力，而无需成为深入的核心开发人员。但是世界上的程序员比律师多得多。这是有充分理由的。为机器编程实际上只需要了解一种相当容易学习的语言。你可以在印度的一个小村庄里，碰巧有互联网，你可以在一周内学习 JavaScript。但你不能用美国法律做到这一点。&lt;/p>
&lt;p>我不会试图说服你相信世界上每个人都可以做到这一点。但关键是，能做到这一点的人越多，门槛就越低。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：这感觉还是有点抽象。阅读本文的人可能会想，“我会在 Web3 世界中做什么？” 你能勾勒出它的样子吗？某一种活动或应用程序界面或交易？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我认为最初的 Web3 应用程序可能是对 Web 2.0 应用程序的小迭代。但是 Web3 带来的 Web 2.0 无法轻松服务的一件事是财务义务或经济上强大的应用程序。这是点对点方式的个人可以在他们之间获得经济服务的地方。&lt;/p>
&lt;p>这不是关于汇款本身，而是关于发送非常稀有、非常困难或在某些方面非常昂贵的东西。因此，我们可以想象，例如，约会应用程序可以发送虚拟鲜花，但无论你支付多少钱，我们每天只能发送一束虚拟鲜花。因此，如果你每天向同一个人送一束鲜花是一个非常强烈的信号，表明他们喜欢你。这就是重点，你不能付钱送更多的花。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：我觉得 Tinder 可以添加该功能。&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：对，他们可以，你每天只能做一次。但他们是一家以利润为动机的公司。因此，如果你想要支付足够的 Tinder 费用，你就可以发送任意数量的星星。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：但是，建立在 Web3 上的公司是否仍然拥有与 Web 2.0 公司相同的市场激励？我很难想象历史上的技术发展不允许政治或经济权力更加中心。那么我们为什么要期望这个基于区块链的去中心化 Web3 打破常规呢？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我从小就喜欢技术。我在八岁的时候学会了编码。我从来没有见过一种技术可以限制一个人的权力。正如你所说，我能想到的每一项技术都有助于让用户变得更强大。他们可以做更多的事情。他们可以更富有，他们可以更快、更好地或向更多人提供他们提供的服务。区块链不会那样做，这是根本的不同。它实际上是一种社会结构，这是一套规则。而这些规则唯一的作用就是在系统内没有人拥有任意权力。你可以相当确定，特别是如果你是一名程序员，那么你可以查看代码并知道它在做正确的事情。但是，你也可以合理地确定，因为有这么多人在这种期望的支持下加入了网络。如果这个期望没有得到满足，他们就会离开网络。&lt;/p>
&lt;p>&lt;strong>WIRED&lt;/strong>：很多人都被加密行业所吸引，因为他们将其视为推翻现有政治秩序或中央银行权力的一种方式。但是你已经建议 Web3 支持自由的战后秩序。你怎么看它这样做？&lt;/p>
&lt;p>&lt;strong>Gavin Wood&lt;/strong>：我认为由于技术允许的权力集中，我们所拥有的服务和期望正受到威胁。这只是一个事实。在 Facebook 和谷歌之前，几乎没有什么东西能让这么少的人拥有这种级别的权力。并不是说我不认为 Facebook 和 Google 以及所有其他公司都应该被取代，这并不是 Web3 的症结所在。对我来说，Web3 实际上更像是一场更大的社会政治运动，它正在从任意权威转向一个更加理性的自由模型。这是我能看到的保护自由世界的唯一方式，这是我们过去 70 年来享受的生活。这是我们能够让它在未来 70 年继续运行的唯一方法。但目前，我认为我们正在朝着一个完全不同的方向。&lt;/p></description></item><item><title>Openfaas Workshop Lab11</title><link>https://example.com/p/openfaas-workshop-lab11/</link><pubDate>Tue, 04 Jan 2022 13:44:15 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab11/</guid><description>&lt;h1 id="lab-11---高级函数---使用-hmac-的信任">Lab 11 - 高级函数 - 使用 HMAC 的信任&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>用于微服务的传统认证策略与函数的工作原理完全相同。在这个实验室中，我们将讨论使用共享秘密和基于哈希的消息验证码（HMAC）的几种可用方法之一。有关其他认证策略和想法，请参见。&lt;a class="link" href="https://github.com/openfaas-incubator/openfaas-function-auth/blob/master/README.md" target="_blank" rel="noopener"
>openfaas-function-auth&lt;/a>&lt;/p>
&lt;p>这绝不是一个广泛的清单，安全和认证是一个复杂的领域，最好留给专家使用经过试验的方法。&lt;/p>
&lt;h2 id="准备好你的环境">准备好你的环境&lt;/h2>
&lt;p>在开始这个实验之前，创建一个新的文件夹&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">mkdir -p lab11&lt;span class="se">\`&lt;/span>bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> lab11
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也要确保你的&lt;code>faas-cli'版本是&lt;/code>0.7.4&amp;rsquo;或以上，使用以下命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="什么是-hmac">什么是 HMAC&lt;/h2>
&lt;p>如果没有任何形式的认证或信任，我们的函数可能会暴露给任何能猜到其 URL 的人。如果我们的函数可以在互联网或本地网络上访问，那么它们就可能被坏的行为者调用。默认情况下，函数会对任何请求做出响应。然而，如果我们想控制对函数的访问，我们可以使用基于哈希的消息验证码（HMAC）来验证信息的来源。&lt;/p>
&lt;p>来自[alexellis/hmac]（&lt;a class="link" href="https://github.com/alexellis/hmac" target="_blank" rel="noopener"
>https://github.com/alexellis/hmac&lt;/a>）。&lt;/p>
&lt;blockquote>
&lt;p>HMAC 使用发送方/接收方提前共享的对称密钥。发送方在想要传输信息时将产生一个哈希值&amp;ndash;该数据与有效载荷一起发送。然后，收件人将用共享密钥签署有效载荷，如果哈希值匹配，则假定有效载荷来自发件人。&lt;/p>
&lt;/blockquote>
&lt;p>这样我们就可以避免我们的函数被无效的甚至是危险的信息所调用。&lt;/p>
&lt;h2 id="使用-hmac">使用 HMAC&lt;/h2>
&lt;p>我们将使用 faas-cli 提供的&lt;code>--sign&lt;/code>标志来包含一个头，其中包含使用我们用&lt;code>--key&lt;/code>标志提供的共享密钥创建的散列信息。&lt;/p>
&lt;blockquote>
&lt;p>注意: &lt;code>--sign&lt;/code>和&lt;code>--key&lt;/code>必须同时存在。&lt;/p>
&lt;/blockquote>
&lt;p>让我们首先通过部署&lt;code>-env&lt;/code>函数来检查该标志的作用，该函数将打印函数中可访问的所有环境变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">faas-cli deploy --name env --fprocess&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;env&amp;#34;&lt;/span> --image&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;function/alpine:new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>调用不带&lt;code>--sign&lt;/code>标志的函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ echo &amp;#34;The message&amp;#34; | faas-cli invoke env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOSTNAME=d2c1a2cb20c2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fprocess=env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOME=/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_X_Call_Id=b84947c6-2970-4fcf-ba3b-66dde6943999
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_X_Forwarded_For=10.255.0.2:34974
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_X_Forwarded_Host=127.0.0.1:8080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Content_Length=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Accept_Encoding=gzip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Content_Type=text/plain
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_User_Agent=Go-http-client/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_X_Start_Time=1538725657952768349
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>再次调用该函数，但这次有&lt;code>--sign&lt;/code>标志。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ echo -n &amp;#34;The message&amp;#34; | faas-cli invoke env --sign=HMAC --key=cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOSTNAME=d2c1a2cb20c2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fprocess=env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HOME=/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_User_Agent=Go-http-client/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Content_Length=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Accept_Encoding=gzip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Hmac=sha1=9239edfe20185eafd7a5513c303b03d207d22f64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们看到&lt;code>HMAC&lt;/code>被作为环境变量&lt;code>Http_Hmac&lt;/code>提供。生成的值是用钥匙&lt;code>cookie&lt;/code>签名后的&lt;code>消息&lt;/code>的哈希值，然后用散列方法&lt;code>sha1&lt;/code>进行预处理。&lt;/p>
&lt;h2 id="hmac-在行动">HMAC 在行动&lt;/h2>
&lt;p>为了我们的目的，我们将创建一个新的 Python 3 函数。让我们把它叫做&lt;code>hmac-protected&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 hmac-protected --prefix&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your-docker-username&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>添加&lt;code>payload-secret&lt;/code>，它将作为哈希有效载荷的密钥。&lt;/p>
&lt;p>像我们在&lt;a class="link" href="https://github.com/openfaas/workshop/blob/master/lab10.md" target="_blank" rel="noopener"
>lab10&lt;/a>中那样创建&lt;code>payload-secret&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;&amp;lt;your-secret&amp;gt;&amp;#34;&lt;/span> ! &lt;span class="p">|&lt;/span> faas-cli secret create payload-secret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：记住你放在&amp;quot;&lt;!-- raw HTML omitted -->&amp;ldquo;位置的字符串。&lt;/p>
&lt;/blockquote>
&lt;p>我们的 &lt;code>hmac-protected.yml&lt;/code>应该看起来像。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hmac-protected&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./hmac-protected&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;your-docker-username&amp;gt;/hmac-protected:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">secrets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">payload-secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用以下代码替换&lt;code>handler.py&lt;/code>的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">hmac&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">hashlib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">validateHMAC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">secret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># GitHub and the sign flag prefix the hash with &amp;#34;sha1=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">receivedHash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getHash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Hash message with secret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">expectedMAC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">hmac&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">secret&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">hashlib&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sha1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">createdHash&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">expectedMAC&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">hexdigest&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">receivedHash&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">createdHash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">getHash&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="s2">&amp;#34;sha1=&amp;#34;&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">hash&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">hash&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">hash&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">hash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># We receive the hashed message in form of a header&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">messageMAC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Http_Hmac&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Read secret from inside the container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/var/openfaas/secrets/payload-secret&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">secretContent&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payloadSecret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">secretContent&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Function to validate the HMAC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">validateHMAC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payloadSecret&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">messageMAC&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Successfully validated: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">req&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;HMAC validation failed.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>源代码也可在&lt;a class="link" href="./hmac-protected/hmac-protected/handler.py" >hmac-protected/hmac-protected/handler.py&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>通过使用&lt;code>faas-cli up&lt;/code>在一个命令中构建、推送和部署该函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f ./hmac-protected.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="调用函数">调用函数&lt;/h3>
&lt;p>我们将通过发送两个值来调用该函数。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>正常的请求信息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个包含同一消息的哈希值的头，当用&lt;code>--key&lt;/code>标志的值签名时&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在收到请求后，该函数将使用&lt;code>payload-secret&lt;/code>以与发送者相同的方式签署请求信息。这将创建第二个 HMAC，并与传输的头信息 &lt;code>Http-Hmac&lt;/code>进行比较。&lt;/p>
&lt;p>这里我们比较生成和接收的哈希值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Function to validate the HMAC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">validateHMAC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">payloadKey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">receivedHMAC&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Successfully validated: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">req&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;HMAC validation failed.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用标志来调用该函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;This is a message&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke hmac-protected --sign hmac --key&lt;span class="o">=&lt;/span>&amp;lt;your-secret&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查响应并确认它与所传达的信息相符。在我们的例子中，我们应该得到。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">Successfully validated: This is a message
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用错误的&lt;code>--key&lt;/code>调用函数，检查失败信息。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;This is a message&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke hmac-protected --sign hmac --key&lt;span class="o">=&lt;/span>wrongkey
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HMAC validation failed.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>作为后续任务，你可以应用 HMAC 来保护你在&lt;a class="link" href="https://github.com/openfaas/workshop/blob/master/lab5.md" target="_blank" rel="noopener"
>实验室 5&lt;/a>的&lt;code>issue-bot&lt;/code>上的端点。&lt;/p>
&lt;p>你已经完成了实验，可以返回到&lt;a class="link" href="./README.md" >主页&lt;/a>。&lt;/p></description></item><item><title>Openfaas Workshop Lab10</title><link>https://example.com/p/openfaas-workshop-lab10/</link><pubDate>Tue, 04 Jan 2022 13:44:12 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab10/</guid><description>&lt;h1 id="lab-10---高级函数---秘密">Lab 10 - 高级函数 - 秘密&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始本实验室之前，为你的文件创建一个新的文件夹。由于本实验室是建立在先前的实验室基础上的，因此请复制 lab5。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ cp -r lab5 lab10\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; cd lab10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用秘密">使用秘密&lt;/h2>
&lt;p>&lt;a class="link" href="./lab5.md" >实验室 5&lt;/a>研究了&lt;code>issue-bot&lt;/code>如何从环境变量（&lt;code>auth_token&lt;/code>）获得 GitHub 的*个人访问令牌。 另一种方法是使用&lt;strong>机密&lt;/strong>来存储敏感信息。&lt;/p>
&lt;p>来自 Docker 文档。&lt;/p>
&lt;blockquote>
&lt;p>&amp;hellip; 秘密是一团数据，如密码、SSH 私钥、SSL 证书或其他数据，不应通过网络传输或未经加密存储在 Docker 文件或应用程序的源代码中。&lt;/p>
&lt;/blockquote>
&lt;p>这是一个比环境变量更安全的选择。环境变量更容易使用，但最适合于非保密的配置项目。 似乎很适合用于存储&lt;code>auth_token&lt;/code>值。&lt;/p>
&lt;p>请参阅&lt;a class="link" href="https://docs.openfaas.com/reference/secrets/" target="_blank" rel="noopener"
>docs&lt;/a>中关于秘密的更多信息和它的设计。&lt;/p>
&lt;h3 id="创建一个秘密">创建一个秘密&lt;/h3>
&lt;blockquote>
&lt;p>秘密名称必须遵循 DNS-1123 惯例，由小写字母数字字符或&amp;rsquo;-&amp;lsquo;组成，并且必须以一个字母数字字符开始和结束&lt;/p>
&lt;/blockquote>
&lt;p>从一个终端运行以下命令。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo -n &amp;lt;auth_token&amp;gt; | faas-cli secret create auth-token
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试秘密是否被创建。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli secret ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：请记住，&lt;code>-g&lt;/code>标志可以在网关之间轻松切换。 这也适用于秘密。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl get secret auth-token -n openfaas-fn -o json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：如果你在远程网关上部署你的函数，确保你在你用于网关的虚拟机上创建你的秘密。&lt;/p>
&lt;/blockquote>
&lt;p>当秘密被函数挂载时，它将以文件形式出现在&lt;code>/var/openfaas/secrets/auth-token&lt;/code>下。这可以由&lt;code>handler.py&lt;/code>读取，以获得 GitHub 的&lt;em>个人访问令牌&lt;/em>。&lt;/p>
&lt;h3 id="更新-issue-botyml">更新 issue-bot.yml&lt;/h3>
&lt;p>用一个指令取代对&lt;code>env.yml&lt;/code>的引用，使&lt;code>auth-token&lt;/code>的秘密对函数可用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issue-bot&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;your-username&amp;gt;/issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway_hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">positive_threshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">secrets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">auth-token&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="更新issue-bot函数">更新&lt;code>issue-bot&lt;/code>函数&lt;/h3>
&lt;p>函数处理程序需要改变，以使其读取&lt;code>auth-token&lt;/code>秘密，而不是环境变量。 这只是一个单行的改动，在这里。&lt;/p>
&lt;p>python
g = Github(os.getenv(&amp;ldquo;auth_token&amp;rdquo;))&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">被替换为
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">```python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">with open(&amp;#34;/var/openfaas/secrets/auth-token&amp;#34;, &amp;#34;r&amp;#34;) as authToken:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> g = Github(authToken.read())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>完整的源代码可在&lt;a class="link" href="./issue-bot-secrets/bot-handler/handler.py" >issue-bot-secrets/bot-handler/handler.py&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>构建和部署&lt;/li>
&lt;/ul>
&lt;p>使用 CLI 来构建和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f issue-bot.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在转到&lt;a class="link" href="lab11.md" >Lab 11&lt;/a>。&lt;/p></description></item><item><title>Openfaas Workshop Lab9</title><link>https://example.com/p/openfaas-workshop-lab9/</link><pubDate>Tue, 04 Jan 2022 13:44:09 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab9/</guid><description>&lt;h1 id="lab-9---高级函数---自动缩放">Lab 9 - 高级函数 - 自动缩放&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="自动缩放函数的应用">自动缩放函数的应用&lt;/h2>
&lt;p>正如&lt;a class="link" href="http://docs.openfaas.com/architecture/autoscaling/" target="_blank" rel="noopener"
>文档&lt;/a>中描述的那样，OpenFaaS 带有自动扩展函数。在这个实验室中，我们将看看自动扩展是如何运作的。&lt;/p>
&lt;h3 id="前提条件">前提条件&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在完成了&lt;a class="link" href="./lab1.md" >Lab 1&lt;/a>中对 OpenFaaS 的设置后，你将拥有触发自动扩展所需的一切。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多个工具可以用来创建足够的流量来触发自动扩展 - 在这个例子中，`curl&amp;rsquo;将被使用，因为它很容易在 Mac 和 Linux 上使用，并在 Windows 上与 Git Bash 打包。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="自动扩展的背景">自动扩展的背景&lt;/h3>
&lt;p>开箱即用的 OpenFaaS 是这样配置的，它将根据 Prometheus 测量的 &lt;code>每秒请求&lt;/code>指标进行自动扩展。 这个指标是在流量通过 API 网关的时候捕获的。如果超过了定义的 &lt;code>每秒请求&lt;/code>的阈值，AlertManager 就会启动。这个阈值应该被重新配置为适合生产使用的水平，因为在这个例子中，为了演示，它被设置为一个低值。&lt;/p>
&lt;blockquote>
&lt;p>在&lt;a class="link" href="http://docs.openfaas.com/architecture/autoscaling/" target="_blank" rel="noopener"
>文档网站&lt;/a>中找到更多关于自动缩放的信息。&lt;/p>
&lt;/blockquote>
&lt;p>每次警报被 AlertManager 触发时，API 网关将把你的函数的一定数量的副本添加到集群中。OpenFaaS 有两个配置选项，允许指定复制的起始/最低数量，也允许停止复制的最大数量。&lt;/p>
&lt;p>你可以通过设置&lt;code>com.openfaas.scale.min&lt;/code>来控制函数的最小复制量，目前默认值为&lt;code>1&lt;/code>。&lt;/p>
&lt;p>你可以通过设置&lt;code>com.openfaas.scale.max&lt;/code>来控制一个函数可以产生的最大复制量，目前默认值是&lt;code>20&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>注意: 如果你把&lt;code>com.openfaas.scale.min&lt;/code>和&lt;code>com.openfaas.scale.max&lt;/code>设置成相同的值，你就会禁用自动缩放函数。&lt;/p>
&lt;/blockquote>
&lt;h3 id="查看-prometheus">查看 Prometheus&lt;/h3>
&lt;p>你需要运行这个端口转发命令，以便能够在&lt;code>http://127.0.0.1:9090&lt;/code>访问 Prometheus。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl port-forward deployment/prometheus 9090:9090 -n openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在添加一个所有成功调用部署的函数的图。我们可以通过执行&lt;code>rate( gateway_function_invocation_total{code=&amp;quot;200&amp;quot;} [20s])&lt;/code>作为查询来实现。导致一个看起来像这样的页面。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/prometheus_graph.png"
loading="lazy"
>&lt;/p>
&lt;p>继续打开一个新的标签，在其中使用&lt;code>http://127.0.0.1:9090/alerts&lt;/code>导航到警报部分。在这个页面上，你以后可以看到什么时候超过了 &lt;code>每秒请求&lt;/code> 的阈值。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/prometheus_alerts.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="触发缩放的-go-函数">触发缩放的 Go 函数&lt;/h3>
&lt;p>首先是 Alex Ellis 的 &lt;code>echo-fn&lt;/code>函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/alexellis/echo-fn &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> echo-fn &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> faas-cli template store pull golang-http &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> faas-cli deploy &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --label com.openfaas.scale.max&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --label com.openfaas.scale.min&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在检查用户界面，看什么时候 &lt;code>go-echo&lt;/code>函数从 &lt;code>不准备&lt;/code>变成 &lt;code>准备&lt;/code>。你也可以用&lt;code>faas-cli describe go-echo&lt;/code>来检查。&lt;/p>
&lt;p>使用这个脚本反复调用 &lt;code>go-echo&lt;/code> 函数，直到你看到复制数从 1 变成 5，以此类推。你可以在 Prometheus 中通过添加`gateway_service_count&amp;rsquo;的图表或在选择该函数的情况下查看 API 网关来监控这个值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="k">for&lt;/span> i in &lt;span class="o">{&lt;/span>0..10000&lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;Post &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke go-echo &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> echo&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：如果你在 Kubernetes 上运行，使用&lt;code>$OPENFAAS_URL&lt;/code>而不是&lt;code>http://127.0.0.1:8080&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="监控警报">监控警报&lt;/h3>
&lt;p>现在你应该可以看到，在之前创建的图表中，&lt;code>go-echo&lt;/code>函数的调用量有所增加。移动到你打开警报页面的标签。一段时间后，你应该开始看到 &lt;code>APIHighInvocationRate&lt;/code>的状态（和颜色）变为 &amp;ldquo;待定&amp;rdquo;，然后再次变为 &amp;ldquo;发射&amp;rdquo;。你也可以使用&lt;code>$ faas-cli list&lt;/code>或通过&lt;a class="link" href="http://127.0.0.1:8080" target="_blank" rel="noopener"
>ui&lt;/a>看到自动缩放的情况。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/prometheus_firing.png"
loading="lazy"
>&lt;/p>
&lt;p>现在你可以使用&lt;code>$ docker service ps go-echo&lt;/code>来验证&lt;code>go-echo&lt;/code>的新副本是否已经启动。&lt;/p>
&lt;p>现在停止 bash 脚本，你会看到复制的数量在几秒钟后回到 1 个复制。&lt;/p>
&lt;h3 id="疑难解答">疑难解答&lt;/h3>
&lt;p>如果你认为你的自动扩展没有被触发，那么请检查以下内容。&lt;/p>
&lt;ul>
&lt;li>普罗米修斯中的警报页面 - 这应该是红色/粉色的，并显示 &lt;code>FIRING&lt;/code> - 即在&lt;a class="link" href="http://127.0.0.1:9090/alerts" target="_blank" rel="noopener"
>http://127.0.0.1:9090/alerts&lt;/a>。&lt;/li>
&lt;li>检查核心服务的日志，即网关、Prometheus / AlertManager。&lt;/li>
&lt;/ul>
&lt;p>为了获得核心服务的日志，运行&lt;code>docker service ls&lt;/code>，然后&lt;code>docker service logs &amp;lt;service-name&amp;gt;&lt;/code>。&lt;/p>
&lt;h3 id="负载测试可选">负载测试(可选)&lt;/h3>
&lt;p>需要注意的是，在受控环境中应用科学方法和工具与在你自己的笔记本电脑上运行拒绝服务攻击是有区别的。你的笔记本电脑不适合做负载测试，因为一般来说，你是在 Windows 或 Mac 主机上的 Linux 虚拟机中运行 OpenFaaS，而这也是一个单节点。这并不代表生产部署。&lt;/p>
&lt;p>请看&lt;a class="link" href="https://docs.openfaas.com/architecture/performance/" target="_blank" rel="noopener"
>构建一个合适的性能测试&lt;/a>的文档。&lt;/p>
&lt;p>如果&lt;code>curl&lt;/code>没有为你的测试产生足够的流量，或者你想获得一些关于事情如何分解的统计数据，那么你可以试试&lt;code>hey&lt;/code>工具。&lt;code>hey&lt;/code>可以通过每秒的请求或给定的持续时间产生结构化的负载。&lt;/p>
&lt;p>这里有一个在 1GHz 的 2016 年 12 英寸 MacBook 上运行的例子，带有 Docker Desktop。这是一台非常低功率的计算机，正如所描述的，不代表生产性能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ hey -z&lt;span class="o">=&lt;/span>30s -q &lt;span class="m">5&lt;/span> -c &lt;span class="m">2&lt;/span> -m POST -d&lt;span class="o">=&lt;/span>Test http://127.0.0.1:8080/function/go-echo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Summary:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Total: 30.0203 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Slowest: 0.0967 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Fastest: 0.0057 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Average: 0.0135 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Requests/sec: 9.9932
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Total data: &lt;span class="m">1200&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Size/request: &lt;span class="m">4&lt;/span> bytes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Response &lt;span class="nb">time&lt;/span> histogram:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.006 &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.015 &lt;span class="o">[&lt;/span>244&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.024 &lt;span class="o">[&lt;/span>38&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>■■■■■■
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.033 &lt;span class="o">[&lt;/span>10&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>■■
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.042 &lt;span class="o">[&lt;/span>4&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>■
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.051 &lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.060 &lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.069 &lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.078 &lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.088 &lt;span class="o">[&lt;/span>0&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0.097 &lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Latency distribution:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 10% in 0.0089 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 25% in 0.0101 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 50% in 0.0118 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 75% in 0.0139 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 90% in 0.0173 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 95% in 0.0265 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 99% in 0.0428 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Details &lt;span class="o">(&lt;/span>average, fastest, slowest&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DNS+dialup: 0.0000 secs, 0.0057 secs, 0.0967 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0000 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> req write: 0.0001 secs, 0.0000 secs, 0.0016 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resp wait: 0.0131 secs, 0.0056 secs, 0.0936 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resp read: 0.0001 secs, 0.0000 secs, 0.0013 secs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Status code distribution:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[&lt;/span>200&lt;span class="o">]&lt;/span> &lt;span class="m">300&lt;/span> responses
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上模拟了两个活跃的用户&lt;code>-c&lt;/code>，每秒 5 个请求&lt;code>-q&lt;/code>，持续时间&lt;code>-z&lt;/code>为 30 秒。&lt;/p>
&lt;p>要使用&lt;code>hey&lt;/code>，你必须在本地计算机上安装 Golang。&lt;/p>
&lt;p>也请参见。&lt;a class="link" href="https://github.com/rakyll/hey" target="_blank" rel="noopener"
>hey on GitHub&lt;/a>&lt;/p>
&lt;h3 id="尝试从零开始扩展">尝试从零开始扩展&lt;/h3>
&lt;p>如果你把你的函数规模缩小到 0 个副本，你仍然可以调用它。该调用将触发网关将函数缩放到一个非零值。&lt;/p>
&lt;p>用下面的命令试试吧。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl scale deployment --replicas=0 nodeinfo -n openfaas-fn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>打开 OpenFaaS 用户界面，检查 nodeinfo 是否有 0 个副本，或者通过`kubectl get deployment nodeinfo -n openfaas-fn&amp;rsquo;。&lt;/p>
&lt;p>现在调用该函数并检查它是否扩展到 1 个副本。&lt;/p>
&lt;p>现在转到&lt;a class="link" href="lab10.md" >Lab 10&lt;/a>。&lt;/p></description></item><item><title>Openfaas Workshop Lab8</title><link>https://example.com/p/openfaas-workshop-lab8/</link><pubDate>Tue, 04 Jan 2022 13:44:05 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab8/</guid><description>&lt;h1 id="lab-8---高级函数---超时">Lab 8 - 高级函数 - 超时&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，为你的文件创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab8 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; cd lab8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="用read_timeout扩展超时时间">用&lt;code>read_timeout&lt;/code>扩展超时时间&lt;/h2>
&lt;p>&lt;em>timeout&lt;/em>对应于一个函数可以运行多长时间，直到被执行。它对防止分布式系统中的误操作很重要。&lt;/p>
&lt;p>有几个地方可以为你的函数配置超时，在每个地方都可以通过使用环境变量来完成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>函数超时&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>read_timeout&lt;/code> - 允许函数通过 HTTP 读取一个请求的时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>write_timeout&lt;/code> - 允许函数在 HTTP 上写一个响应的时间&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>exec_timeout&lt;/code> - 一个函数在被终止前可以运行的最大时间。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>API 网关的默认时间是 20 秒，所以我们来测试一下在一个函数上设置一个更短的超时时间。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 sleep-for --prefix=&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;code>handler.py&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep_duration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sleep_duration&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">preSleep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Starting to sleep for &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">sleep_duration&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sleep_duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># Sleep for a number of seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">postSleep&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Finished the sleep&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">preSleep&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">postSleep&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在编辑&lt;code>sleep-for.yml&lt;/code>文件，添加这些环境变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sleep-for&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./sleep-for&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;your-docker-username-here&amp;gt;/sleep-for:0.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sleep_duration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">read_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;5s&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;5s&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">exec_timeout&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;5s&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 CLI 来构建、推送、部署和调用该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke sleep-for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server returned unexpected status code: &lt;span class="m">502&lt;/span> -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你应该看到它没有打印消息就终止了，因为&lt;code>sleep_duration&lt;/code>比超时值高。&lt;/p>
&lt;p>现在把&lt;code>sleep_duration&lt;/code>设置为一个较低的数字，如&lt;code>2&lt;/code>，然后再次运行&lt;code>faas-cli deploy&lt;/code>。在编辑函数的 YAML 文件时，你不需要重建这个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke sleep-for
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Starting to sleep &lt;span class="k">for&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Finished the sleep
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>API 网关&lt;/li>
&lt;/ul>
&lt;p>要为你的函数设置超出默认限制的扩展超时，请遵循以下教程。&lt;a class="link" href="https://docs.openfaas.com/tutorials/expanded-timeouts/" target="_blank" rel="noopener"
>扩展的超时&lt;/a>&lt;/p>
&lt;p>现在转到&lt;a class="link" href="lab9.md" >实验室 9&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab7</title><link>https://example.com/p/openfaas-workshop-lab7/</link><pubDate>Tue, 04 Jan 2022 13:44:02 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab7/</guid><description>&lt;h1 id="实验-7--异步函数">实验 7&amp;ndash;异步函数&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，为你的文件创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab7 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; cd lab7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="同步与异步地调用一个函数">同步与异步地调用一个函数&lt;/h2>
&lt;p>当你同步调用一个函数时，一个连接会通过网关连接到你的函数，并且在整个执行过程中保持开放。同步调用是*阻塞的，所以你应该看到你的客户端暂停，变得不活跃，直到该函数完成其任务。&lt;/p>
&lt;ul>
&lt;li>网关使用的路由是。&lt;code>/function/&amp;lt;function_name&amp;gt;&lt;/code>。&lt;/li>
&lt;li>你必须等待，直到它完成&lt;/li>
&lt;li>你在调用后得到结果&lt;/li>
&lt;li>你知道它是通过还是失败&lt;/li>
&lt;/ul>
&lt;p>异步任务以类似的方式运行，但有一些区别。&lt;/p>
&lt;ul>
&lt;li>网关使用不同的路由：&lt;code>/async-function/&amp;lt;function_name&amp;gt;&lt;/code>。&lt;/li>
&lt;li>客户端从网关得到一个立即的&lt;em>202 接受&lt;/em>的响应。&lt;/li>
&lt;li>该函数稍后使用一个队列工作器来调用&lt;/li>
&lt;li>默认情况下，结果被丢弃&lt;/li>
&lt;/ul>
&lt;p>让我们试一试快速演示。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli new --lang dockerfile long-task --prefix=&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;code>long-task/Dockerfile&lt;/code>并将 fprocess 改为&lt;code>sleep 1&lt;/code>。&lt;/p>
&lt;p>现在构建、部署并同步调用你的函数 10 次，像这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在异步调用该函数 10 次。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;&amp;#34; | faas-cli invoke long-task --async
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你观察到了什么？第一个例子应该花了 10 秒，而第二个例子会在一秒或更短的时间内返回到你的提示。这项工作仍然需要 10x1 秒来完成，但现在要放在队列中延迟执行。&lt;/p>
&lt;p>异步函数调用非常适用于那些可以推迟到以后执行的任务，或者你不需要客户端上的结果。&lt;/p>
&lt;blockquote>
&lt;p>一个很好的例子是在接收 GitHub 的 webhooks 时&amp;ndash;可能有一个最大的处理时间，GitHub 会允许你的连接保持开放，一个异步调用接受工作并立即返回。&lt;/p>
&lt;/blockquote>
&lt;h2 id="查看队列工作者的日志">查看队列工作者的日志&lt;/h2>
&lt;p>OpenFaaS 的默认栈使用 NATS 流来排队和延迟执行。你可以用以下命令查看日志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl logs deployment/queue-worker -n openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用一个x-callback-url与-requirebin">使用一个`X-Callback-Url&amp;rsquo;与 requirebin&lt;/h2>
&lt;p>如果你需要一个异步调用的函数的结果，你有两个选择。&lt;/p>
&lt;ul>
&lt;li>改变它的代码，用它的结果通知一个端点或消息系统&lt;/li>
&lt;/ul>
&lt;p>这个选项可能不是在所有情况下都适用，并且需要编写额外的代码。&lt;/p>
&lt;ul>
&lt;li>利用回调的内置行为&lt;/li>
&lt;/ul>
&lt;p>内置的回调允许对一个函数的调用提供一个 URL，队列工作器将自动报告函数的成功或失败，以及结果。
一些额外的请求头被发送到回调，完整的列表见&lt;a class="link" href="https://docs.openfaas.com/reference/async/#callback-request-headers" target="_blank" rel="noopener"
>回调请求头&lt;/a>&lt;/p>
&lt;p>前往 requestbin 并创建一个新的 &lt;code>bin&lt;/code> &amp;ndash;这将是公共互联网上的一个 URL，可以接收你的函数的结果。&lt;/p>
&lt;blockquote>
&lt;p>为了这个实验室的目的，一定要取消勾选 &lt;code>私有&lt;/code> 复选框，这将使你不需要登录。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://requestbin.com/" target="_blank" rel="noopener"
>https://requestbin.com/&lt;/a>&lt;/p>
&lt;p>现在复制 &amp;ldquo;Bin URL &amp;ldquo;并将其粘贴在下面。&lt;/p>
&lt;p>例如(&lt;code>http://requestbin.com/r/1i7i1we1&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo -n &amp;#34;LaterIsBetter&amp;#34; | faas-cli invoke figlet --async --header &amp;#34;X-Callback-Url http://requestbin.com/r/1i7i1we1&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在刷新 requestbin 站点上的页面，你将看到来自 &lt;code>figlet&lt;/code> 的结果。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> _ _ ___ ____ _ _
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | __ _| |_ ___ _ _|_ _|___| __ ) ___| |_| |_ ___ _ __
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | / _` | __/ _ \ &amp;#39;__| |/ __| _ \ / _ \ __| __/ _ \ &amp;#39;__|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |__| (_| | || __/ | | |\__ \ |_) | __/ |_| || __/ |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|_____\__,_|\__\___|_| |___|___/____/ \___|\__|\__\___|_|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>建议：也可以使用另一个函数作为 &lt;code>X-Callback-Url&lt;/code> &amp;ndash;这对于在异步工作负载被处理时通过 Slack 或 Email 通知自己是非常好的。要用结果调用另一个函数，将&lt;code>X-Callback-Url&lt;/code>设置为&lt;code>http://gateway:8080/function/&amp;lt;function_name&amp;gt;&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;p>现在进入&lt;a class="link" href="lab8.md" >实验室 8&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab6</title><link>https://example.com/p/openfaas-workshop-lab6/</link><pubDate>Tue, 04 Jan 2022 13:43:59 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab6/</guid><description>&lt;h1 id="实验-6--你的函数的-html">实验 6&amp;ndash;你的函数的 HTML&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，为你的文件创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab6\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; cd lab6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="从一个函数中生成并返回基本的-html">从一个函数中生成并返回基本的 HTML&lt;/h2>
&lt;p>函数可以返回 HTML，并将&lt;code>Content-Type&lt;/code>设置为&lt;code>text/html&lt;/code>。因此，函数返回的 HTML 可以通过浏览器进行渲染。让我们创建一个简单的函数，生成并返回一个基本的 HTML。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 show-html --prefix=&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;code>handler.py&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;html&amp;gt;&amp;lt;h2&amp;gt;Hi, from your function!&amp;lt;/h2&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将返回 HTML 给调用者。 还有一件事我们应该做的是设置响应的&lt;code>Content-Type'。我们100%确定这个函数将返回一个HTML，所以&lt;/code>Content-Type&lt;code>应该总是&lt;/code>text/html&lt;code>。我们可以利用&lt;/code>show-html.yml&lt;code>文件中的&lt;/code>environment`部分来设置。&lt;/p>
&lt;p>编辑&lt;code>show-html.yml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">show-html&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./show-html&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;your-docker-username-here&amp;gt;/show-html&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">content_type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text/html&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>environment&lt;/code>中的&lt;code>content_type&lt;/code>键将设置响应的&lt;code>Content-Type&lt;/code>。&lt;/p>
&lt;p>现在构建、推送和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行以下程序以获得函数的 URL。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli describe -f show-html.yml show-html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">URL: http://127.0.0.1:8080/function/show-html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>HTML 应该被正确渲染。&lt;/p>
&lt;h2 id="从磁盘上读取并返回一个静态的-html-文件">从磁盘上读取并返回一个静态的 HTML 文件&lt;/h2>
&lt;p>一般来说，当你提供 HTML 服务时，你有一个静态的 HTML 文件在前面。让我们看看我们如何在函数中打包 HTML 文件，并从 HTML 文件中提供内容。&lt;/p>
&lt;p>首先，让我们创建一个 HTML 文件。&lt;/p>
&lt;p>创建一个名为&lt;code>html&lt;/code>的目录，并放置一个名为&lt;code>new.html&lt;/code>的文件，使其结构看起来像下面这样。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">├── show-html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── handler.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── new.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Edit &lt;code>new.html&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;en&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;UTF-8&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>OpenFaaS&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Here&amp;#39;s a new page!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在把你的&lt;code>handler.py&lt;/code>改为以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dirname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;html&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;new.html&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在构建、推送和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>打开你的浏览器，访问&lt;a class="link" href="http://127.0.0.1:8080/function/show-html" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html&lt;/a>。你应该看到一个 &lt;code>这里有一个新的页面！&lt;/code> 在浏览器中呈现的 HTML 页面。&lt;/p>
&lt;p>现在我们要为这个函数的 URL 添加一个路径。&lt;/p>
&lt;p>在&lt;code>html&lt;/code>文件夹中添加新的&lt;code>list.html&lt;/code>文件，内容如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;en&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;UTF-8&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>OpenFaaS&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is a list!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>One&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Two&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Three&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将你的&lt;code>handler.py&lt;/code>编辑成以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Http_Path&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pathArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pageName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pathArr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dirname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">page&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;html&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pageName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;.html&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>构建、推送和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在在&lt;a class="link" href="http://127.0.0.1:8080/function/show-html/new" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html/new&lt;/a> 或 &lt;a class="link" href="http://127.0.0.1:8080/function/show-html/list" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html/list&lt;/a> 上打开你的网页。
这将输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Here&amp;#39;s a new page!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is a list!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>One&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Two&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Three&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="读取查询字符串并返回不同的-html">读取查询字符串并返回不同的 HTML&lt;/h2>
&lt;p>现在我们已经了解了如何通过函数来提供 HTML，让我们动态地改变通过查询字符串提供的 HTML。正如我们在&lt;a class="link" href="./lab4.md" >实验室 4&lt;/a>中学到的，查询字符串可以通过一个叫做&lt;code>Http_Query&lt;/code>的环境变量来检索。假设我们做了一个看起来像这样的查询。&lt;/p>
&lt;p>&lt;a class="link" href="http://127.0.0.1:8080/function/show-html?action=new" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html?action=new&lt;/a>&lt;/p>
&lt;p>查询字符串是&lt;code>action=new&lt;/code>，因此&lt;code>Http_Query&lt;/code>的值将是&lt;code>action=new&lt;/code>。我们也可以使用&lt;code>urllib.parse&lt;/code>包中的&lt;code>parse_qs&lt;/code>函数，轻松解析这个查询字符串。&lt;/p>
&lt;p>我们的函数的目录结构看起来是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">├── show-html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── handler.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── list.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── new.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>改变你的&lt;code>handler.py&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">urllib.parse&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">parse_qs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">query&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Http_Query&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">params&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parse_qs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">query&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">action&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">params&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;action&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dirname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="vm">__file__&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;html&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">action&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;.html&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">html&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">html&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在构建、推送和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>打开你的浏览器，首先访问。&lt;/p>
&lt;p>&lt;a class="link" href="http://127.0.0.1:8080/function/show-html?action=new" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html?action=new&lt;/a>&lt;/p>
&lt;p>你应该看到 &lt;code>这里有一个新的页面！&lt;/code>就像你在上一节看到的那样。现在访问。&lt;/p>
&lt;p>&lt;a class="link" href="http://127.0.0.1:8080/function/show-html?action=list" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html?action=list&lt;/a>&lt;/p>
&lt;p>你应该看到一个显示列表的 HTML。&lt;/p>
&lt;h2 id="与其他函数协作">与其他函数协作&lt;/h2>
&lt;p>最后，让我们看看如何利用 JavaScript 和 Ajax 的优势，从 HTML 函数中与另一个函数（例如&lt;em>figlet&lt;/em>函数）协作。&lt;/p>
&lt;p>首先，让我们再创建一个名为&lt;code>figlet.html&lt;/code>的 HTML 文件。所以现在的结构应该是这样的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">├── show-html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── __init__.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── handler.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── figlet.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ ├── list.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └── new.html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑&lt;code>figlet.html&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;en&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;UTF-8&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>OpenFaaS&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://code.jquery.com/jquery-3.3.1.min.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">result&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-family&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Roboto Mono&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">monospace&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Figlet&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text: &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;generate&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Generate&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">textarea&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;result&amp;#34;&lt;/span> &lt;span class="na">cols&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;80&amp;#34;&lt;/span> &lt;span class="na">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">textarea&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/javascript&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Generate button click
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#generate&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Execute ajax request
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ajax&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">url&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s1">&amp;#39;./figlet&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="s1">&amp;#39;POST&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#text&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ajax success
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.result&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">fail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ajax failure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.result&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你不太了解 JavaScript，请不要担心。这个页面所做的就是。&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>input&lt;/code>中输入文字
*按下 &lt;code>生成&lt;/code>按钮&lt;/li>
&lt;li>创建一个 Ajax 请求到&lt;em>figlet&lt;/em>函数端点（&lt;code>/function/figlet&lt;/code>）。&lt;/li>
&lt;li>将结果应用到 &lt;code>textarea&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;p>没有必要改变&lt;code>handler.py&lt;/code>，因为它可以动态地提供上一节中的 HTML。尽管没有改变&lt;code>handler.py&lt;/code>，我们还是需要构建和推送函数镜像，因为我们需要在函数容器中打包新的&lt;code>figlet.html&lt;/code>。&lt;/p>
&lt;p>现在构建、推送和部署这个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f show-html.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本节假设你已经部署了&lt;a class="link" href="./lab2.md" >实验室 2&lt;/a>中的&lt;em>figlet&lt;/em>函数。&lt;/p>
&lt;p>打开你的浏览器，首先访问。&lt;/p>
&lt;p>&lt;a class="link" href="http://127.0.0.1:8080/function/show-html?action=figlet" target="_blank" rel="noopener"
>http://127.0.0.1:8080/function/show-html?action=figlet&lt;/a>&lt;/p>
&lt;p>你应该看到 &lt;code>Figlet&lt;/code> 页面，并且应该看到一个输入。输入任何你想输入的文本，然后点击 &lt;code>生成&lt;/code> 按钮。如果请求成功，&lt;code>textarea&lt;/code> 应该包含你在 &lt;code>input&lt;/code> 中输入的 figlet。这是一个微不足道的例子，但通过使用这种技术，你甚至可以用函数创建强大的 SPA（单页应用程序）。&lt;/p>
&lt;p>在这个实验室中，你学到了如何从你的函数中提供 HTML，并设置响应的&lt;code>Content-Type&lt;/code>。此外，你还学会了如何用 HTML+JavaScript 调用其他函数，以及用函数创建动态页面。&lt;/p>
&lt;p>现在进入&lt;a class="link" href="lab7.md" >实验室 7&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab5</title><link>https://example.com/p/openfaas-workshop-lab5/</link><pubDate>Tue, 04 Jan 2022 13:43:56 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab5/</guid><description>&lt;h1 id="lab-5---创建一个-github-机器人">Lab 5 - 创建一个 GitHub 机器人&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，为你的文件创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab5&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> lab5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们将使用 OpenFaaS 的函数来创建一个名为 &lt;code>issue-bot&lt;/code>的 GitHub 机器人。&lt;/p>
&lt;p>问题机器人的工作是通过分析 &lt;code>描述&lt;/code> 字段的情绪来分流新的问题，然后它将应用一个&lt;em>积极&lt;/em>或&lt;em>审查&lt;/em>的标签。这将有助于维护者在繁忙的工作中，可以优先考虑哪些问题需要首先处理。&lt;/p>
&lt;p>问题机器人的图示](./diagram/issue-bot.png)&lt;/p>
&lt;h2 id="获取一个-github-账户">获取一个 GitHub 账户&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>注册一个&lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub 账户&lt;/a>，如果你还没有一个账户。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个新的仓库，并将其称为&lt;em>bot-test&lt;/em>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注意：我们将只使用这个仓库作为创建问题的测试场所。你不需要在那里提交任何代码。&lt;/p>
&lt;h2 id="建立一个带有入口的隧道">建立一个带有入口的隧道&lt;/h2>
&lt;p>你需要接收来自 GitHub 的 webhooks。幸运的是，inlets 让这一切变得非常快速和简单。它可以按月或按年订阅，所以如果你不确定是否全年都需要它，你可以只付一个月的钱。&lt;/p>
&lt;p>inlets 有一个叫做 inlets-operator 的 Kubernetes 集成。你可以用它来设置 LoadBalancers 或带有 TLS 的 Ingress。它的工作原理是为你创建一个云虚拟机，并在那里运行一个隧道服务器，然后为你运行一个隧道客户端作为一个 Pod，你就可以获得传入流量。&lt;/p>
&lt;p>在你喜欢的云提供商（如 DigitalOcean）的 API 页面下创建一个写入访问令牌，然后将内容保存到&lt;code>digital-ocean-api-token.txt&lt;/code>。&lt;/p>
&lt;p>设置完订阅后，将你的密钥保存到&lt;code>$HOME/.inlets/LICENSE&lt;/code>，然后运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">arkade install inlets-operator &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --provider digitalocean &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --region lon1 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --token-file &lt;span class="nv">$HOME&lt;/span>/digital-ocean-api-token.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将部署 inlets-operator，并指示它在 DigitalOcean 上为你的隧道服务器配置新的主机到伦敦地区。其他供应商和地区也可以使用，&lt;a class="link" href="https://docs.inlets.dev/reference/inlets-operator/" target="_blank" rel="noopener"
>更多信息请见文档&lt;/a>。&lt;/p>
&lt;h2 id="用网关的公共-ip-登录你的网关">用网关的公共 IP 登录你的网关&lt;/h2>
&lt;p>用信息检索你的网关密码，从。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">arkade info openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>LoadBalancer 的公共 IP 大约需要 10-30 秒才能出现。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl get svc -n openfaas gateway-external
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gateway-external LoadBalancer 10.96.29.46 &amp;lt;pending&amp;gt; 8080:32278/TCP 5h56m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gateway-external LoadBalancer 10.96.29.46 165.227.233.227 8080:32278/TCP 5h56m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后把它保存到环境变量中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENFAAS_URL&lt;/span>&lt;span class="o">=&lt;/span>http://165.227.233.227:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用给你的密码登录到公共 IP。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PASSWORD&lt;/span> &lt;span class="p">|&lt;/span> faas-cli login --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后测试远程 URL，如&lt;a class="link" href="http://165.227.233.227:8080" target="_blank" rel="noopener"
>http://165.227.233.227:8080&lt;/a>&lt;/p>
&lt;p>你可以通过设置&lt;code>OPENFAAS_URL&lt;/code>环境变量或使用&lt;code>--gateway&lt;/code>标志来对远程网关运行命令。&lt;/p>
&lt;p>如果你想用 TLS 证书和自定义域名来暴露 OpenFaaS，你可以按照这些说明来代替。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">arkade install ingress-nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">arkade install cert-manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">arkade install openfaas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">arkade install openfaas-ingress &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --email web@example.com &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --domain openfaas.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后创建一个 DNS A 记录，指向 ingress-nginx 的 IP 地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl get svc ingress-nginx-controller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME TYPE CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ingress-nginx-controller LoadBalancer 10.96.179.20 &amp;lt;pending&amp;gt; 80:30319/TCP,443:31591/TCP 20s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ingress-nginx-controller LoadBalancer 10.96.179.20 209.97.135.63 80:30319/TCP,443:31591/TCP 52s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以为&lt;code>https://openfaas.example.com&lt;/code>提供一个自定义的 TLS 记录。&lt;/p>
&lt;h2 id="创建一个-webhook-接收器issue-bot">创建一个 webhook 接收器&lt;code>issue-bot&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENFAAS_PREFIX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;docker.io/your-username&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ faas-cli new --lang python3 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> issue-bot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在编辑该函数的 YAML 文件&lt;code>issue-bot.yml&lt;/code>并添加一个环境变量&lt;code>write_debug: true&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issue-bot&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">docker.io/your-username/issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构建、推送和部署该函数，使用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">faas-cli up -f ./issue-bot.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="从-github-接收-webhooks">从 GitHub 接收 webhooks&lt;/h2>
&lt;p>重新登录 GitHub 并导航到你的仓库&lt;em>bot-tester&lt;/em>。&lt;/p>
&lt;p>点击 &lt;em>设置&lt;/em> -&amp;gt; &lt;em>Webhooks&lt;/em> -&amp;gt; &lt;em>添加 Webhook&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/add_github_webhook.png"
loading="lazy"
alt="添加网络钩子"
>&lt;/p>
&lt;p>现在输入你从 inlets 或你的自定义域中得到的 URL，在最后加上&lt;code>/function/issue-bot&lt;/code>，例如。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">https://openfaas.example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://example.com/../../screenshot/issue-bot-webhook.png"
loading="lazy"
alt="添加webhook"
>&lt;/p>
&lt;p>对于&lt;em>Content-type&lt;/em>选择。&lt;em>application/json&lt;/em>&lt;/p>
&lt;p>暂时将&lt;em>Secret&lt;/em>留空。&lt;/p>
&lt;p>并选择 &lt;code>让我选择个别事件&lt;/code>&lt;/p>
&lt;p>对于事件选择&lt;strong>事件&lt;/strong>和&lt;strong>事件评论&lt;/strong>。&lt;/p>
&lt;p>！&lt;a class="link" href="../../screenshot/WebhookEventsSettings.png" >设置事件&lt;/a>&lt;/p>
&lt;h2 id="检查它是否有效">检查它是否有效&lt;/h2>
&lt;p>现在去 GitHub，创建一个新问题。在标题和描述中输入 &lt;code>test&lt;/code>。&lt;/p>
&lt;p>检查该函数被调用了多少次&amp;ndash;这个数字至少应该是&lt;code>1&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Function Invocations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">issue-bot &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每次你创建一个问题，由于 GitHub 的 API 调用了该函数，计数会增加。&lt;/p>
&lt;p>你可以通过输入&lt;code>docker service logs -f issue-bot&lt;/code>（或&lt;code>kubectl logs deployment/issue-bot -n openfaas-fn&lt;/code>）看到通过 GitHub 发送的有效载荷。&lt;/p>
&lt;p>GitHub 的 Webhooks 页面也会在 &lt;code>Recent Deliveries&lt;/code>下显示每条发送的消息，你可以在这里重放一条消息，看看你的函数返回的响应。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/github_replay.png"
loading="lazy"
alt="Replaying an event"
>&lt;/p>
&lt;h3 id="部署-sentimentanalysis-函数">部署 SentimentAnalysis 函数&lt;/h3>
&lt;p>为了使用这个 issue-bot 函数，你将需要首先部署 SentimentAnalysis 函数。
这是一个 python 函数，为通过 TextBlob 项目输入的每个句子提供正/负（极性-1.0-1.0）和主观性的评级。&lt;/p>
&lt;p>如果你在&lt;a class="link" href="./lab4.md" >Lab 4&lt;/a>中没有这样做，你可以从&lt;strong>函数商店&lt;/strong>部署 &lt;code>SentimentAnalysis&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;I am really excited to participate in the OpenFaaS workshop.&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke sentimentanalysis
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Polarity: 0.375 Subjectivity: 0.75
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;The hotel was clean, but the area was terrible&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke sentimentanalysis
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Polarity: -0.316666666667 Subjectivity: 0.85
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="更新issue-bot函数">更新&lt;code>issue-bot&lt;/code>函数&lt;/h3>
&lt;p>打开&lt;code>issue-bot/handler.py&lt;/code>，用这段代码替换模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">json&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">os&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">event_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Http_X_Github_Event&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">event_header&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;issues&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unable to handle X-GitHub-Event: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">event_header&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gateway_hostname&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;opened&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">#sentimentanalysis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;:8080/function/sentimentanalysis&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error with sentimentanalysis, expected: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">, got: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用 HTTP/HTTPs 的请求模块更新你的&lt;code>requirements.txt&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">requests
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>issue-bot.yml&lt;/code>文件中添加&lt;code>gateway_hostname&lt;/code>环境变量，并将其值设置为&lt;code>gateway.openfaas&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gateway_hostname: &amp;#34;gateway.openfaas&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面代码中的下面一行将 GitHub 问题的标题和正文作为文本发布给&lt;code>sentimentanalysis&lt;/code>函数。响应将是 JSON 格式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;:8080/function/sentimentanalysis&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构建和部署&lt;/li>
&lt;/ul>
&lt;p>使用 CLI 来构建和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f issue-bot.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在在&lt;code>bot-test&lt;/code>仓库中创建一个新问题。GitHub 将通过我们之前配置的 Inlets 隧道向你的函数发送一个 JSON 有效载荷。&lt;/p>
&lt;p>你可以在 GitHub 上直接查看请求/响应&amp;ndash;导航到&lt;em>Settings&lt;/em> -&amp;gt; &lt;em>Webhook&lt;/em>，如下所示。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/WebhookResponse.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="回复到-github">回复到 GitHub&lt;/h2>
&lt;p>下一步是让我们贴上 &lt;code>正面&lt;/code> 或 &lt;code>评论&lt;/code> 的标签，但由于这个动作涉及到向仓库写入内容，我们需要从 GitHub 获得一个&lt;em>个人访问令牌&lt;/em>。&lt;/p>
&lt;h3 id="为-github-创建一个个人访问令牌">为 GitHub 创建一个个人访问令牌&lt;/h3>
&lt;p>进入你的&lt;em>GitHub 配置文件&lt;/em> -&amp;gt; &lt;em>设置/开发者设置&lt;/em> -&amp;gt; &lt;em>个人访问令牌&lt;/em>，然后点击&lt;em>生成新令牌&lt;/em>。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/PersonalAccessTokens.png"
loading="lazy"
>&lt;/p>
&lt;p>勾选 &lt;code>repo&lt;/code>的方框，允许访问你的存储库&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/NewPAT.png"
loading="lazy"
>&lt;/p>
&lt;p>点击页面底部的 &lt;code>Generate Token&lt;/code>按钮&lt;/p>
&lt;p>在你的&lt;code>issue-bot.yml&lt;/code>文件所在的目录中创建一个名为&lt;code>env.yml&lt;/code>的文件，内容如下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">auth_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;auth_token_value&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用 GitHub 上的令牌更新&lt;code>auth_token&lt;/code>变量。&lt;/p>
&lt;p>现在更新你的 issue-bot.yml 文件，告诉它使用&lt;code>env.yml&lt;/code>文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">issue-bot&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;your-username&amp;gt;/issue-bot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway_hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">positive_threshold&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0.25&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment_file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">env.yml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>positive_threshold&lt;/code>环境变量用于微调一个问题是否获得&lt;code>positive&lt;/code>或&lt;code>review&lt;/code>标签。&lt;/p>
&lt;/blockquote>
&lt;p>任何敏感信息都会被放在一个外部文件中（即&lt;code>env.yml&lt;/code>），这样它就可以被包含在&lt;code>.gitignore&lt;/code>文件中，这将有助于防止这些信息被存储在公共的 Git 仓库中。&lt;/p>
&lt;p>OpenFaaS 也支持使用原生的 Docker 和 Kubernetes 的秘密，详情请见&lt;a class="link" href="lab10.md" >Lab 10&lt;/a>&lt;/p>
&lt;h3 id="通过-github-的-api-应用标签">通过 GitHub 的 API 应用标签&lt;/h3>
&lt;p>你可以使用 API 来执行许多不同的任务，&lt;a class="link" href="https://github.com/PyGithub/PyGithub" target="_blank" rel="noopener"
>文档在这里可以找到&lt;/a>。&lt;/p>
&lt;p>下面是一个 Python 代码的例子，我们可以用它来应用标签，但你先不要把它添加到你的函数中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">issue_number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">repo_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;alexellis/issue_bot&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">auth_token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;xyz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Github&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">auth_token&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_repo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo_name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">issue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_issue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">issue_number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个用于 GitHub 的库是由社区提供的，不是官方的，但似乎很受欢迎。它可以通过我们的&lt;code>requirements.txt&lt;/code>文件从&lt;code>pip&lt;/code>调入。&lt;/p>
&lt;h2 id="完成函数">完成函数&lt;/h2>
&lt;ul>
&lt;li>更新你的&lt;code>issue-bot/requirements.txt&lt;/code>文件，为&lt;code>PyGithub&lt;/code>添加一行内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PyGithub
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>打开&lt;code>issue-bot/handler.py&lt;/code>，将代码替换为以下内容。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">json&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">os&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">github&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">Github&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">event_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Http_X_Github_Event&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">event_header&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;issues&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Unable to handle X-GitHub-Event: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">event_header&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gateway_hostname&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loads&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;opened&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Action not supported: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;action&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Call sentimentanalysis&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http://&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;:8080/function/sentimentanalysis&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;body&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error with sentimentanalysis, expected: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">, got: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Read the positive_threshold from configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">positive_threshold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;positive_threshold&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;0.2&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">polarity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="s1">&amp;#39;polarity&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Call back to GitHub to apply a label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">apply_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">polarity&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;repository&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;full_name&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">positive_threshold&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Repo: &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">, issue: &lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2">, polarity: &lt;/span>&lt;span class="si">%f&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;repository&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;full_name&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">payload&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;issue&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">polarity&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">apply_label&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">polarity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">issue_number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">positive_threshold&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">g&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Github&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;auth_token&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_repo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">issue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get_issue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">issue_number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">has_label_positive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">has_label_review&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">issue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">labels&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;positive&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">has_label_positive&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">label&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;review&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">has_label_review&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">polarity&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">positive_threshold&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">has_label_positive&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">issue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_labels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;positive&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">has_label_review&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">issue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">set_labels&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;review&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>源代码也可在&lt;a class="link" href="./issue-bot/bot-handler/handler.py" >issue-bot/bot-handler/handler.py&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>构建和部署&lt;/li>
&lt;/ul>
&lt;p>使用 CLI 来构建和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli up -f issue-bot.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在通过在&lt;code>bot-test&lt;/code>仓库中创建一些新的问题来试试。检查 &lt;code>正面&lt;/code>和 &lt;code>评论&lt;/code>标签是否被正确应用，如果你不确定信息是否被传递或怀疑有错误被抛出，请查阅 GitHub Webhooks 页面。&lt;/p>
&lt;p>&lt;img src="https://example.com/../../screenshot/bot_label_applied.png"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>注意：如果标签没有立即出现，请先尝试刷新页面。&lt;/p>
&lt;/blockquote>
&lt;h2 id="用-hmac-验证有效载荷">用 HMAC 验证有效载荷&lt;/h2>
&lt;p>在&lt;a class="link" href="lab11.md" >Lab 11&lt;/a>中，我们将学习如何通过使用 HMAC 保护无服务器函数不被篡改。&lt;/p>
&lt;p>现在转到&lt;a class="link" href="lab6.md" >Lab 6&lt;/a>。&lt;/p></description></item><item><title>Blockchain 数据结构分析</title><link>https://example.com/p/blockchain-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</link><pubDate>Tue, 04 Jan 2022 10:04:05 +0800</pubDate><guid>https://example.com/p/blockchain-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="区块">区块&lt;/h1>
&lt;p>想要了解区块到底是什么，最简单快捷的方法就是分析它的数据结构，以 bitcoin 种的区块为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;00000000000000000018b0a6ae560fa33c469b6528bc9e0fb0c669319a186c33&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;confirmations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1009&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;strippedsize&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">956228&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1112639&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;weight&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3981323&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;height&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">514095&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;version&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">536870912&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;versionHex&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;20000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;merkleroot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;5f8f8e053fd4c0c3175c10ac5189c15e6ba218909319850936fe54934dcbfeac&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;tx&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　 &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>　　&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;time&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1521380124&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;mediantime&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1521377506&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">3001236454&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;bits&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;17514a49&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;difficulty&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">3462542391191.563&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;chainwork&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0000000000000000000000000000000000000000014d2b41a340e60b72292430&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;previousblockhash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;000000000000000000481ab128418847dc25db4dafec464baa5a33e66490990b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">　　&lt;span class="nt">&amp;#34;nextblockhash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0000000000000000000c74966205813839ad1c6d55d75f95c9c5f821db9c3510&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个 Block 的结构体中，previousblockhash 和 merkleroot 是两个最重要的字段；前者是一个哈希指针，它其实是前一个 Block 的哈希，通过 previousblockhash 我们能递归地找到全部的 Block，也就是整条主链，后者是一个 Merkle 树的根，Merkle 树中包含整个 Block 中的全部交易，通过保存 merkleroot，我们可以保证当前 Block 中任意交易都不会被修改。
Ethereum 的区块链模型虽然与 Bitcoin 有非常大的不同，但是它的 Block 结构中也有着类似的信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;result&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;difficulty&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x785042b0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;extraData&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x414952412f7630&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gasLimit&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x47b784&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gasUsed&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x44218a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;hash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x4de91e4af8d135e061d50ddd6d0d6f4119cd0f7062ebe8ff2d79c5af0e8344b9&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;logsBloom&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;miner&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x00d8ae40d9a06d0e7a2877b62e32eb959afbe16d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mixHash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0xb8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0xad14fb6803147c7c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x2000f1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;parentHash&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x31919e2bf29306778f50bbc376bd490a7d056ddfd5b1f615752e79f32c7f1a38&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;receiptsRoot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0xa2a7af5e3b9e1bbb6252ba82a09302321b8f0eea7ec8e3bb977401e4f473e672&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sealFields&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;0xa0b8155224974967443d8b83e484402fb6e1e18ff69a8fc5acdda32f2bcc6dd443&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;0x88ad14fb6803147c7c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sha3Uncles&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;size&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x276&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;stateRoot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x87e7e54cf229003014f453d64f0344e2ba4fc7ee3b95c7dd2642cca389fa1efe&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timestamp&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x5a10968a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;totalDifficulty&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0x1804de0c47ffe1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;transactions&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="err">...&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;transactionsRoot&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;0xc2091b032961ca23cf8323ea827e8956fe6dda9e68d75bcfaa8b910035397e35&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;uncles&amp;#34;&lt;/span>&lt;span class="p">:[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>parentHash 和 transactionsRoot 分别对应着 Bitcoin 中 previousblockhash 和 merkleroot，这两者在整个区块链网络中是非常重要的。&lt;/p>
&lt;h1 id="哈希指针">哈希指针&lt;/h1>
&lt;p>Block 结构体中的哈希指针在区块链中有两个作用，它不仅能够连接不同的区块，还能够对 Block 进行验证，保证 Block 中的数据不会被其他恶意节点篡改。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201041009607.png"
loading="lazy"
>&lt;/p>
&lt;p>除了第一个 Block，每一个 Block 中的 prev_hash 都是前一个 Block 的哈希，如果某一个节点想要修改主链上 Block 的交易，就会改变当前 Block 的哈希，后面的 Block 就没有办法通过 prev_hash 找到前面的链，所以当前节点篡改交易的行为就会被其他节点发现。&lt;/p>
&lt;h1 id="merkle-tree">Merkle Tree&lt;/h1>
&lt;p>另一个字段 merkleroot 其实就是一个 Merkle 树 的根节点，它其实是一种使用哈希指针连接的数据结构；虽然 Merkle 树有叶节点和非叶节点，但是它只有叶节点会存储数据，所有的非叶结点都是用于验证数据完整性的哈希。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202201041010801.png"
loading="lazy"
>&lt;/p>
&lt;p>每一个 Block 中的全部交易都是存储在这个 Merkle 树中并将 merkleroot 保存在 Block 的结构体中，保证当前 Block 中任意交易的篡改都能被立刻发现。&lt;/p>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>prev_hash 和 merkleroot 分别通过『指针』的方式保证所有的 Block 和交易都是连接起来的，最终保证 Block 和交易不会被恶意节点或攻击者篡改，几乎全部的区块链项目都会使用类似方式连接不同的 Block 和交易，这可以说是区块链项目的基础设施和标配了。&lt;/p></description></item><item><title>轻服务 nodejs 助力爬虫 web3</title><link>https://example.com/p/%E8%BD%BB%E6%9C%8D%E5%8A%A1-nodejs-%E5%8A%A9%E5%8A%9B%E7%88%AC%E8%99%AB-web3/</link><pubDate>Mon, 20 Dec 2021 09:58:58 +0800</pubDate><guid>https://example.com/p/%E8%BD%BB%E6%9C%8D%E5%8A%A1-nodejs-%E5%8A%A9%E5%8A%9B%E7%88%AC%E8%99%AB-web3/</guid><description>&lt;p>周末的时候，写了一个简单的小项目，用来抓取 web3 的文章，然后存到本地。最后选取了公司对外的轻服务：&lt;a class="link" href="https://qingfuwu.cn/docs/nodejs/" target="_blank" rel="noopener"
>https://qingfuwu.cn/docs/nodejs/&lt;/a>&lt;/p>
&lt;p>整项目用到了两个库&lt;/p>
&lt;ul>
&lt;li>axios：用来做 http 请求&lt;/li>
&lt;li>cheerio：用来解析 html&lt;/li>
&lt;/ul>
&lt;h1 id="观察目标网页的格式">观察目标网页的格式&lt;/h1>
&lt;p>我们以巴比特为例：&lt;a class="link" href="https://www.8btc.com/web3.0" target="_blank" rel="noopener"
>https://www.8btc.com/web3.0&lt;/a>，打开控制台，定位到正文的 div，可以发现是 article-list。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202112201024700.png"
loading="lazy"
>&lt;/p>
&lt;p>右键复制一下 selector，然后在代码中这样实现就可以了。&lt;/p>
&lt;h1 id="抓取网页信息">抓取网页信息&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">cheerio&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cheerio&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">default&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">default&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://www.8btc.com/web3.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s1">&amp;#39;User-Agent&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})).&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">cheerio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#news &amp;gt; div.articles-list&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.article-info&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">each&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">elem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">href&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; a&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;href&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">title&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; a &amp;gt; h3&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">desc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; div &amp;gt; p&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">href&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`https://www.8btc.com&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">desc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="保存数据到轻服务的数据管理中">保存数据到轻服务的数据管理中&lt;/h1>
&lt;p>在轻服务中创建一个表，然后新增几列。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202112201027520.png"
loading="lazy"
>&lt;/p>
&lt;p>然后调用内置的 inspirecloud.db 进行操作数据库，比如我的就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">inspirecloud&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;web3&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">where&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span> &lt;span class="p">}).&lt;/span>&lt;span class="nx">findOne&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">one&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">one&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 已经存在`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="设置定时任务">设置定时任务&lt;/h1>
&lt;p>最后我们把代码补充完整：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param params 调用参数，HTTP 请求下为请求体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @param context 调用上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @return 函数的返回数据，HTTP 场景下会作为 Response Body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 完整信息可参考：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * https://qingfuwu.cn/docs/cloud-function/basic.html
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">cheerio&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cheerio&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">default&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">axios&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;axios&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="k">default&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">axios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;https://www.8btc.com/web3.0&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">headers&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s1">&amp;#39;User-Agent&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})).&lt;/span>&lt;span class="nx">data&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">$&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">cheerio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#news &amp;gt; div.articles-list&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.article-info&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">each&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">elem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">href&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; a&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">attr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;href&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">title&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; a &amp;gt; h3&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">desc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">elem&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;gt; div &amp;gt; p&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">href&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="sb">`https://www.8btc.com&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">href&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">desc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">list&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">table&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">inspirecloud&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">db&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;web3&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">item&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">list&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">one&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">where&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span> &lt;span class="p">}).&lt;/span>&lt;span class="nx">findOne&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">one&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">one&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> 已经存在`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">table&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">params&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">getData&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">await&lt;/span> &lt;span class="nx">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">test&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在左侧的定时任务中去创建一个定时任务，每天执行一次即可。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/zhenfeng-zhu/pic-go/main/202112201029440.png"
loading="lazy"
>&lt;/p></description></item><item><title>Crystal Roadmap</title><link>https://example.com/p/crystal-roadmap/</link><pubDate>Thu, 28 Oct 2021 10:11:41 +0800</pubDate><guid>https://example.com/p/crystal-roadmap/</guid><description>&lt;p>This roadmap defines the things that we want to have in the language and plan to do.&lt;/p>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>Stuff that has to do with the language syntax, semantic and runtime.&lt;/p>
&lt;h3 id="concurrency">Concurrency&lt;/h3>
&lt;p>Finalize multithreading support, so fibers can run on multiple threads.&lt;/p>
&lt;h3 id="windows-support">Windows support&lt;/h3>
&lt;p>Finalize support for Windows platform. The compiler already works, but some stdlib features like concurrency support are still missing.
Ongoing efforts on &lt;a class="link" href="https://github.com/crystal-lang/crystal/pull/5430" target="_blank" rel="noopener"
>#5430&lt;/a>.&lt;/p>
&lt;h3 id="type-system-review">Type system review&lt;/h3>
&lt;p>Make a review and possible formalisation of Crystal&amp;rsquo;s type system, with a strong emphasis on generics, type restrictions and the meta-model in general.&lt;/p>
&lt;h3 id="macros-review">Macros review&lt;/h3>
&lt;p>Review the macros intermediate language, to allow for more expressiveness and to provide the compilers with hints with regards to reusing previous runs for incremental compilation.&lt;/p>
&lt;h3 id="exceptions-review">Exceptions review&lt;/h3>
&lt;p>Review the exception layout and hierarchy to allow developers to catch more specific errors, and get more information on what exactly went wrong via variables inside the exception.&lt;/p>
&lt;h3 id="incremental-compilation">Incremental compilation&lt;/h3>
&lt;p>Allow the compiler to re-use information from previous compilations, by defining dependencies between files/modules and only reprocessing changed ones. This feature also opens the door for better IDE integration and tooling.&lt;/p>
&lt;h2 id="standard-library">Standard library&lt;/h2>
&lt;p>Implement the missing or review the existing following modules from the standard library:&lt;/p>
&lt;ul>
&lt;li>TLS library&lt;/li>
&lt;li>File, FileUtils&lt;/li>
&lt;li>HTTP/2 &lt;a class="link" href="https://github.com/crystal-lang/crystal/issues/2125" target="_blank" rel="noopener"
>#2125&lt;/a>&lt;/li>
&lt;li>XML&lt;/li>
&lt;li>Test mocks&lt;/li>
&lt;/ul>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;p>Improvements or developments on either built-in or external tools for the language.&lt;/p>
&lt;h3 id="documentation">Documentation&lt;/h3>
&lt;p>Improve not only the documentation itself, but the docs generator as well. Add support for links between documents from different packages, alternate READMEs for the docs, better searching options, and easier docs hosting options.&lt;/p>
&lt;h3 id="shards">Shards&lt;/h3>
&lt;p>Improve Crystal&amp;rsquo;s dependency manager for better dependencies version resolution, provide further metadata on the project, support registering executable tasks, better handling of transitive dependencies, and more. Implement centralised discovery of Crystal shards, sorted by category, and including support for the latest versions of the language, as reported by a CI.&lt;/p>
&lt;h3 id="playground">Playground&lt;/h3>
&lt;p>Improve Crystal&amp;rsquo;s playground by adding shards&amp;rsquo; workbooks to explore the usage of the project&amp;rsquo;s registered dependencies, and other features to discuss.&lt;/p>
&lt;h3 id="ide-support">IDE support&lt;/h3>
&lt;p>Make use of Crystal&amp;rsquo;s compile-time type information to develop better IDE tools, such as in-place documentation, autocomplete or refactoring tools.&lt;/p></description></item><item><title>Crystal 1.2 版本更新说明</title><link>https://example.com/p/crystal-1.2-%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/</link><pubDate>Sun, 17 Oct 2021 23:08:51 +0800</pubDate><guid>https://example.com/p/crystal-1.2-%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E/</guid><description>&lt;h1 id="crystal-120-发布">Crystal 1.2.0 发布&lt;/h1>
&lt;p>我们正在发布一个包含多个错误修复和改进的新版本。下面我们列出了最重要或最有趣的变化，但没有提到几个错误修正。有关详细信息，请访问发行说明。重大更改标有 ⚠️。&lt;/p>
&lt;h2 id="统计数据">统计数据&lt;/h2>
&lt;p>在此版本中，我们包含了自 1.1.1 版本以来 32 位贡献者的 181 个 PR。我们感谢为改进语言及其标准库所做的所有努力！❤️&lt;/p>
&lt;h2 id="平台支持">平台支持&lt;/h2>
&lt;p>正如在 1.2 的上一篇博客文章中提到的，我们决定降低对 32 位 x86 架构的支持。但是我们确实有一些好消息要分享！&lt;/p>
&lt;p>我们在原生 Windows 支持方面取得了进展，在此版本中包括套接字实现（#11205、#11137、#10605、#10605）。&lt;/p>
&lt;p>与 Windows 相关，也与 ARM64 架构相关，我们修复了一个重要的代码生成错误。我们现在处于将 aarch64 平台提升到 Tier 1 的条件，预计很快就会支持。这也与带有 M1 芯片组的 macOS 相关：从这个版本开始，我们包含一个适用于 x86 和 M1 mac 的通用 macOS 包。&lt;/p>
&lt;p>我们发现 Windows 和 M1 的 mac 上出现的两个错误来自 LLVM 11 和 12。我们预计该修复将随最近发布的 LLVM 13 一起提供。Crystal 1.2.0 与 LLVM 12 兼容，尽管我们建议不要使用 LLVM 11 和 12.&lt;/p>
&lt;h2 id="语言变化">语言变化&lt;/h2>
&lt;p>现在可以将泛型类的子类分配给父类的实例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-crystal" data-lang="crystal">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Foo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Bar&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也与泛型类有关，有些情况下编译器没有正确替换泛型参数（#11166、#11067。&lt;/p>
&lt;p>为支持 ThinLTO 汇编被丢弃，因为它并没有在 crystal 0.25 下可用。&lt;/p>
&lt;h2 id="宏">宏&lt;/h2>
&lt;p>可以在 for 循环中添加下划线来忽略值。例如，在以下代码中，map 的 key 被忽略：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-crystal" data-lang="crystal">&lt;span class="line">&lt;span class="cl">&lt;span class="si">{%&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="si">%}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">p&lt;/span> &lt;span class="si">{{&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="si">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="si">{%&lt;/span> &lt;span class="k">end&lt;/span> &lt;span class="si">%}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，还有一个新的 file_exists?宏方法来检查文件的存在（#10540），#is_a?现在可以识别 AST 节点层次结构（#11062）。&lt;/p>
&lt;h2 id="标准库">标准库&lt;/h2>
&lt;p>⚠️ 我们正在延续 1.1.0 版本开始的趋势，帮助获得更好的错误信息和文档：对一些方法使用预期类型进行了注释。添加注释可能会在特定情况下破坏现有代码，因此，如果您遇到这种情况，请立即告诉我们。&lt;/p>
&lt;h3 id="数值类型">数值类型&lt;/h3>
&lt;p>数值类型的主要改进是支持 128 位整数（#11206 和#11245）所采取的步骤。&lt;/p>
&lt;p>作为微小的改进，现在可以调整 Int#to_s 输出的精度；通过新方法#next_float 和#prev_float 迭代可表示的浮点数集；对 BigDecimal 使用负指数；并计算一个数的整数平方根。&lt;/p>
&lt;h3 id="集合">集合&lt;/h3>
&lt;p>可变集合现在包含一个 Indexable::Mutable(T)模块，它极大地扩展了对某些集合（例如 BitArray 和 ）的操作集 Deque。以下现在有效：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-crystal" data-lang="crystal">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ba&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">BitArray&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># ba is BitArray[0000000000]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ba&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="c1"># ba is BitArray[1000000000]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ba&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">rotate!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># ba is BitArray[0100000000]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，Indexable::Mutable(T)扩展为包括稳定和不稳定的排序方法（#11254、#11029、#10163）。默认 sort 操作现在调用稳定算法。&lt;/p>
&lt;p>⚠️ 作为一项重大更改，Array#product 已弃用，取而代之的是新的泛型和更好命名的 Indexable#cartesian_product.&lt;/p>
&lt;p>另外两个值得一提的贡献：可枚举对象配备了将它们与给定谓词（Enumerable#tally_by）相匹配的方法；和方法 Array#transpose, Enumerable#reject, 和 Enumerable#to_h 现在使用元组。&lt;/p>
&lt;h3 id="文件">文件&lt;/h3>
&lt;p>⚠️ 该方法 IO#write_utf8 已被弃用，取而代之的是更具描述性的 name IO#write_string，因为您可以使用它来编写各种编码的字符串，具体取决于 IO 的配置。我们还修复了一些与使用 IO#write 而不是 IO#write_string 将文本附加到 IO 相关的错误。&lt;/p>
&lt;h3 id="网络">网络&lt;/h3>
&lt;p>⚠️ 为了提高 STDLIB 的安全性，URI.encode 被弃用 URI.encode_path 和 URI.encode_path_segment 。&lt;/p>
&lt;p>现在支持从 websockets ( #10854 ) 中的 URI 获取基本身份验证，并正确处理 cookie ( #10564 )的 max-age 和 expires 。&lt;/p>
&lt;h3 id="文本">文本&lt;/h3>
&lt;p>⚠️String#unsafe_byte_at 已被弃用，因为 String 已经有一个#to_unsafe 方法。&lt;/p>
&lt;p>Crystal 现在支持 Unicode 14.0.0。&lt;/p>
&lt;h3 id="序列化">序列化&lt;/h3>
&lt;p>有一种新方法 XML::Node#namespace_definition 可以获取节点的明确定义的 XML 命名空间，URI 现在可以将 URI 序列化为 JSON 和 YAML。&lt;/p>
&lt;h2 id="工具新的文档生成器">工具：新的文档生成器&lt;/h2>
&lt;p>API 文档现在使用 markd 来呈现 Markdown ( #11040 )。这就解决了内部渲染器实现带来的缺点。&lt;/p>
&lt;h2 id="基础设施">基础设施&lt;/h2>
&lt;p>现在可以 make install 了。&lt;/p></description></item><item><title>如何理解可观测性</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link><pubDate>Fri, 15 Oct 2021 09:45:38 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</guid><description>&lt;h1 id="可观测性">可观测性&lt;/h1>
&lt;h2 id="可观测性--监控">可观测性 ≠ 监控&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>核心不同&lt;/p>
&lt;ul>
&lt;li>监控以运维为核心，通过各项指标来定义整体的运行状态、失败情况。&lt;/li>
&lt;li>观测则以开发为核心，除了监控，它还会对系统进行分析。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>维度不同&lt;/p>
&lt;ul>
&lt;li>监控是从外围的角度，通过各种指标（机器 CPU、负载、网络等维度）来判断整个系统的执行情况。&lt;/li>
&lt;li>可观测性则在上述外部指标基础上，以应用内的各个维度来展开推测，通过二者的数据结合来真实的反应应用的运行情况。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>展现的信息不同&lt;/p>
&lt;ul>
&lt;li>有些系统在正常运行时十分稳定，但是一到高并发就会出现问题，此时监控只能汇报问题出现的状况，而可观测性可以很好的通过图形化的方式告知我们问题的原因，不用我们通过经验来猜测。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>可观测性打破了开发和运维的原有问题解决方式，不再是运维发现问题开发解决，而是以开发为中心。&lt;/p>
&lt;h2 id="监控数据来源">监控数据来源&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>端上访问&lt;/p>
&lt;ol>
&lt;li>用户体验监控
&lt;ol>
&lt;li>web 页面的白屏时间&lt;/li>
&lt;li>dom 元素/资源加载耗时&lt;/li>
&lt;li>文档网络耗时&lt;/li>
&lt;li>app 卡顿率&lt;/li>
&lt;li>崩溃率&lt;/li>
&lt;li>热启动加载时长&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>日志&lt;/li>
&lt;li>端到端
&lt;ol>
&lt;li>用户端到后端的请求状况，访问量、成功率、响应时间等。&lt;/li>
&lt;li>还需要端上所处的地区、网络环境、响应状态码&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>可用率
&lt;ol>
&lt;li>访问是否可用、响应耗时长短的一些指标和 cdn、dns 等公共资源有关系。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>应用程序&lt;/p>
&lt;ol>
&lt;li>执行情况&lt;/li>
&lt;li>资源消耗&lt;/li>
&lt;li>vm 指标监控&lt;/li>
&lt;li>容量&lt;/li>
&lt;li>服务关系&lt;/li>
&lt;li>应用日志&lt;/li>
&lt;li>健康情况&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>业务监控&lt;/p>
&lt;ol>
&lt;li>业务指标能很好的体现出系统是否稳定，任何系统如果出现了问题，最先受影响的肯定是业务指标。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>基础设施&lt;/p>
&lt;ol>
&lt;li>资源利用
&lt;ol>
&lt;li>这个很好理解，像 IO 使用率、cpu 利用率、内存使用率、磁盘使用率、网络使用率等。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>通信情况
&lt;ol>
&lt;li>主机之间的网络情况。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="可观测性的核心概念">可观测性的核心概念&lt;/h2>
&lt;h3 id="--日志logging">- 日志（Logging）&lt;/h3>
&lt;p>日志的一般描述是：在特定时间发生的事件，被以结构化的形式记录并产生的文本数据。&lt;/p>
&lt;ol>
&lt;li>日志的功能&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>便于调试&lt;/li>
&lt;li>快速定位问题&lt;/li>
&lt;li>高度定制化&lt;/li>
&lt;li>信息埋点&lt;/li>
&lt;li>追踪数据变化&lt;/li>
&lt;li>数据分析&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>日志级别&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>debug&lt;/li>
&lt;li>info&lt;/li>
&lt;li>warning&lt;/li>
&lt;li>error&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>日志常见来源&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>终端&lt;/li>
&lt;li>网关
&lt;ul>
&lt;li>访问日志：当服务到达网关之后，就会形成一条日志。&lt;/li>
&lt;li>错误日志：网关执行时出了问题&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>应用层
&lt;ul>
&lt;li>容器启动日志&lt;/li>
&lt;li>请求访问日志&lt;/li>
&lt;li>普通日志&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>组件层
&lt;ul>
&lt;li>mysql 和 redis 等&lt;/li>
&lt;li>应用运行时的日志&lt;/li>
&lt;li>慢查询&lt;/li>
&lt;li>审计&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基础层
&lt;ul>
&lt;li>偏向运维的日志&lt;/li>
&lt;li>系统日志和 linux 操作日志等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>如何写好日志&lt;/li>
&lt;/ol>
&lt;p>寻找编写位置 =&amp;gt; 编写日志 =&amp;gt; 上线 =&amp;gt; 日志 review =&amp;gt; 定期修改&lt;/p>
&lt;ul>
&lt;li>
&lt;p>选择一个常用的日志框架&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编写方式从如下几个方面考虑&lt;/p>
&lt;ul>
&lt;li>日志开发时
&lt;ul>
&lt;li>日志编写位置&lt;/li>
&lt;li>写入性能&lt;/li>
&lt;li>占位符&lt;/li>
&lt;li>可读性&lt;/li>
&lt;li>关键信息隐蔽&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>开发完成后
&lt;ul>
&lt;li>减少代码位置信息的输出&lt;/li>
&lt;li>文件分类&lt;/li>
&lt;li>日志 review&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>编写位置&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>几个比较重要的编写日志的位置：&lt;/p>
&lt;ol>
&lt;li>系统/应用启动和参数变更：当系统启动时，将相关的参数信息进行打印&lt;/li>
&lt;li>关键操作节点&lt;/li>
&lt;li>大型任务进度上报：防止因为长时间没有处理而无法得知程序的执行状态&lt;/li>
&lt;li>异常&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>写入性能&lt;/li>
&lt;/ul>
&lt;p>日志的写入性能受如下几个因素影响：&lt;/p>
&lt;ol>
&lt;li>日志编写位置，如果是在 for 循环中打印，需要考虑一下是否有必要&lt;/li>
&lt;li>日志数量：大量的写日志质量会降低，而且过多日志也会影响程序的执行效率&lt;/li>
&lt;li>日志编写等级：不正确的等级，会让我们查问题时间增加&lt;/li>
&lt;li>日志的输出级别：线上不建议 debug 模式。&lt;/li>
&lt;li>无用输出参数：大字段、无用字段可以不用输出&lt;/li>
&lt;/ol>
&lt;p>好的日志一定是便于你去排查问题的，在编写日志的时候一定要思考这个日志可以帮你做什么。&lt;/p>
&lt;ul>
&lt;li>占位符&lt;/li>
&lt;/ul>
&lt;p>日志的编写尽可能的选择基于占位符的编写方式：&lt;/p>
&lt;ol>
&lt;li>节约性能，在生成高级别的日志时，低级别的日志会不停的叠加字符串而占用过多的内存和 CPU。&lt;/li>
&lt;li>便于编写。先确定日志所要表达的内容，再确认所需要编写的参数，这样写日志的时候目的会更加明确。&lt;/li>
&lt;li>便于查看。更方便的查看日志想表达的意思，而不被参数打乱。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>可读性&lt;/li>
&lt;/ul>
&lt;p>一些容易遗漏的信息，之后要加上：&lt;/p>
&lt;ol>
&lt;li>会话标识：当前操作的用户和当前请求相关的信息&lt;/li>
&lt;li>请求标识：每个请求都有一个唯一标识，一般会配合链路追踪系统使用，这样可以跨服务追踪&lt;/li>
&lt;li>参数信息&lt;/li>
&lt;li>发生数据的结果&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>关键信息隐蔽&lt;/li>
&lt;/ul>
&lt;p>把一些关键的信息模糊掉&lt;/p>
&lt;ul>
&lt;li>减少代码位置信息的输出&lt;/li>
&lt;/ul>
&lt;p>提升效率&lt;/p>
&lt;ul>
&lt;li>文件分类&lt;/li>
&lt;/ul>
&lt;p>把不同业务逻辑按不同的文件来分类，不会被干扰&lt;/p>
&lt;ul>
&lt;li>日志 review&lt;/li>
&lt;/ul>
&lt;p>每一次功能上线时，出了对功能进行回扫，也要确认日志的内容输出情况是不是符合预期&lt;/p>
&lt;ul>
&lt;li>
&lt;p>日志管理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志格式&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>系统之间的格式应该保持一致&lt;/li>
&lt;li>不编写多行日志内容&lt;/li>
&lt;li>不适用日志中的常见内容来分割，比如空格等。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>日志归档&lt;/li>
&lt;/ul>
&lt;p>一般情况下都是按小时或者日期来归档，每天生成一个日志文件，方便管理和查看&lt;/p>
&lt;h3 id="--度量metrics">- 度量（Metrics）&lt;/h3>
&lt;p>统计指标也是我们经常使用的。它是一种可累加的聚合的数值结果，具有原子性。因此，我们可以通过各种数学计算方式来获取一段时间内的数值。&lt;/p>
&lt;h3 id="--追踪tracing">- 追踪（Tracing）&lt;/h3>
&lt;p>链路追踪是将链路的完整行为信息进行记录，然后通过可视化的形式展现出来&lt;/p>
&lt;p>我们一般将数据的来源分为 2 个级别：&lt;/p>
&lt;ol>
&lt;li>请求级别：数据来源于真实的请求，比如一次 http 调用、rpc 调用等&lt;/li>
&lt;li>聚合级别：真实的请求指标，或是系统的一些参数数据聚合，比如 qps、cpu 使用率&lt;/li>
&lt;/ol></description></item><item><title>如何从零开始写一个静态网站生成器</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8/</link><pubDate>Fri, 23 Jul 2021 09:33:18 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%E5%99%A8/</guid><description>&lt;p>我们常见的静态网站生成器有 Hugo、Hexo 等，程序员们经常会使用类似的工具去将自己的播客托管到 github pages。前段时间研究了一下实现的方式，用 Elixir 简单实现了一个版本。&lt;/p>
&lt;p>一个静态网站生成器的工作流程通常有如下几个步骤：&lt;/p>
&lt;ol>
&lt;li>读取源文件，一般是 markdown 格式的。&lt;/li>
&lt;li>模板引擎的渲染&lt;/li>
&lt;li>生成目标文件&lt;/li>
&lt;/ol>
&lt;p>接下来会从每个步骤来进行简单介绍。&lt;/p>
&lt;p>最终版本的请参考：&lt;a class="link" href="https://github.com/zhenfeng-zhu/ego" target="_blank" rel="noopener"
>https://github.com/zhenfeng-zhu/ego&lt;/a>， 欢迎 pr 和 issue。&lt;/p>
&lt;h1 id="极简-mvp-版本介绍">极简 MVP 版本介绍&lt;/h1>
&lt;h2 id="初始化">初始化&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mix&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">ego&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 mix.exs 中添加依赖&lt;/p>
&lt;ul>
&lt;li>earmark 是将 markdown 转换为 html。&lt;/li>
&lt;li>plug_cowboy 是提供本地预览 html 文件的 server。&lt;/li>
&lt;li>json 是一个 json 解析库&lt;/li>
&lt;li>指定以 escript 的方式启动&lt;/li>
&lt;/ul>
&lt;h2 id="解析-markdown-文件">解析 markdown 文件&lt;/h2>
&lt;p>将一个 markdown 文件转为 html 也是比较简单的，首先读取，然后调用 Earmark.as_html!函数，就能将 markdown 转换为 html 了。&lt;/p>
&lt;p>eg.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">gen_blogs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read!&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Earmark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">as_html!&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更进一步的我们认为 markdown 的博客源文件都在当前项目目录下面，即&lt;code>{current_dir()}/contents/&lt;/code>。如果要获取到所有的文件，可以使用 wildcard 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">blog_files&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">wildcard&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">current_dir&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/contents/*.md&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此就可以批量对目录下的所有 markdown 文件进行转换。&lt;/p>
&lt;p>eg.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="n">blog_files&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">gen_blogs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="模板引擎渲染">模板引擎渲染&lt;/h2>
&lt;p>既然用了 elixir，那就得使用 eex 来进行渲染了。&lt;/p>
&lt;p>我们写一个最简单的 eex 模板文件，eg&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;markdown-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="err">&amp;lt;&lt;/span>%= @content %&amp;gt;&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述的模板文件中，content 是 markdown 生成的 html。&lt;/p>
&lt;p>渲染 eex 也是很简单，eg&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">blog_layout&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">current_dir&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/layouts/blog.eex&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">eval_blog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">title&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">EEx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blog_layout&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">assigns&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="生成目标文件">生成目标文件&lt;/h2>
&lt;p>需要将上述的文件生成到文件系统中，我们先生成到 public 目录下面。&lt;/p>
&lt;p>Elixir 的写入函数也是特别好用，只需要把 string 写入到目标文件即可，eg&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">def&lt;/span> &lt;span class="n">write_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">title&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">get_title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">static_dir&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.html&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="一些优化">一些优化&lt;/h1>
&lt;h2 id="生成目录文件">生成目录文件&lt;/h2>
&lt;p>生成 index 目录文件和生成 blog 的流程类似，我们需要解析每个 markdown 的文件名，然后填充到 index 的 layout 中即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">article&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;markdown-body&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;lt;&lt;/span>%= for item &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">-&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">list&lt;/span> &lt;span class="na">do&lt;/span> &lt;span class="err">%&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;&amp;lt;%= item[:href] %&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="err">&amp;lt;&lt;/span>%= item[:title] %&amp;gt; &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">&amp;lt;&lt;/span>% end %&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">article&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意在生成目录的时候，一定要指定目标博客的地址，因此要对目录加一个&lt;code>&amp;lt;a href&amp;gt; &amp;lt;/a&amp;gt;&lt;/code>的标签。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">gen_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">blogs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blogs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">get_title&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">build_title_with_href&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">eval_index&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">write_to&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;index&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">build_title_with_href&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">%{&lt;/span>&lt;span class="ss">:title&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">title&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">:href&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">get_href&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">get_href&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="nc">EgoConfig&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">domain&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">title&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">def&lt;/span> &lt;span class="n">eval_index&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">titles&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">EEx&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eval_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index_layout&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">assigns&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="ss">t&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;zzf-blog&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="ss">list&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">titles&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="加速构建">加速构建&lt;/h2>
&lt;p>上面的构建流程有一点小小的问题，就是每个文件的生成都是串行的，我们可以加速一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">start_link&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">blog_files&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">gen_index&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blog_files&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Enum&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nc">Task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">async&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">gen_blogs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">end&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">Task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">await_many&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="nc">IO&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">inspect&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>让生成 index 的时候在后台执行，同时生成 blog 的时候，开启 async 模式，并 await 一下。&lt;/p>
&lt;h2 id="本地预览">本地预览&lt;/h2>
&lt;p>简单使用 plug 来做本地预览&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">defmodule&lt;/span> &lt;span class="nc">MyPlug&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">use&lt;/span> &lt;span class="nc">Plug.Router&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kn">import&lt;/span> &lt;span class="nc">Plug.Conn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:match&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">plug&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:dispatch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">get&lt;/span> &lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">conn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">put_resp_content_type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;text/html&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">send_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;public/index.html&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">get&lt;/span> &lt;span class="s2">&amp;#34;/:file&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">conn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">put_resp_content_type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;text/html&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&amp;gt;&lt;/span> &lt;span class="n">send_file&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;public/&lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">get&lt;/span> &lt;span class="s2">&amp;#34;favicon.ico&amp;#34;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">send_resp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;not found&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">match&lt;/span> &lt;span class="n">_&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">send_resp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;not found&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过访问域名，可以进到 index 文件，当点击目录的时候，就访问目标博客文件。&lt;/p>
&lt;h2 id="美化">美化&lt;/h2>
&lt;ol>
&lt;li>添加代码高亮，&lt;/li>
&lt;/ol>
&lt;p>在 head 中引入 highlight.js 即可。&lt;/p>
&lt;p>eg.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/styles/default.min.css&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.1.0/build/highlight.min.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">hljs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">highlightAll&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>居中展示&lt;/li>
&lt;/ol>
&lt;p>在 layout 文件中加上如下 css 样式即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span class="na">content&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">markdown-body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">box-sizing&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">border-box&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">min-width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">max-width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">980&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="kc">auto&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">max-width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">767px&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">markdown-body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="构建可执行文件">构建可执行文件&lt;/h2>
&lt;p>通过 escript 来生成可执行文件&lt;/p>
&lt;p>参考 &lt;a class="link" href="https://elixirschool.com/zh-hans/lessons/advanced/escripts/" target="_blank" rel="noopener"
>https://elixirschool.com/zh-hans/lessons/advanced/escripts/&lt;/a>&lt;/p>
&lt;h2 id="丰富命令行">丰富命令行&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-elixir" data-lang="elixir">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">defp&lt;/span> &lt;span class="n">parse_args&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">hd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;server&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">start_server&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;build&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Mark&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">convert&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gen_template&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ego server 启动本地预览模式&lt;/p>
&lt;p>ego build 就将本地的博客生成 html 文件&lt;/p>
&lt;p>ego new site xxx 生成静态站点&lt;/p>
&lt;h1 id="更多">更多&lt;/h1>
&lt;p>elixir 写起来很丝滑，一个最终版本的请参考：&lt;a class="link" href="https://github.com/zhenfeng-zhu/ego" target="_blank" rel="noopener"
>https://github.com/zhenfeng-zhu/ego&lt;/a>，欢迎 pr 和 issue。&lt;/p>
&lt;p>另外也给 elixir-ls 提了一个 pr，大家快去 conversation 呀，尽快让 merge 了：&lt;a class="link" href="https://github.com/elixir-lsp/elixir-ls/pull/574" target="_blank" rel="noopener"
>https://github.com/elixir-lsp/elixir-ls/pull/574&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab2</title><link>https://example.com/p/openfaas-workshop-lab2/</link><pubDate>Tue, 30 Mar 2021 09:57:01 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab2/</guid><description>&lt;h1 id="实验室-2--测试东西">实验室 2&amp;ndash;测试东西&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> lab2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用-ui-门户">使用 UI 门户&lt;/h2>
&lt;p>现在你可以测试一下 OpenFaaS 的用户界面了。&lt;/p>
&lt;p>如果你已经设置了一个&lt;code>$OPENFAAS_URL&lt;/code>，那么就可以得到这个 URL，然后点击它。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$OPENFAAS_URL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http://127.0.0.1:31112
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你没有设置&amp;quot;$OPENFAAS_URL&amp;quot;，那么默认情况下是这样的。&lt;a class="link" href="http://127.0.0.1:8080" target="_blank" rel="noopener"
>http://127.0.0.1:8080&lt;/a>.&lt;/p>
&lt;p>我们可以部署一些样本函数，然后用它们来测试一下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli deploy -f https://raw.githubusercontent.com/openfaas/faas/master/stack.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://example.com/../../screenshot/markdown_portal.png"
loading="lazy"
>&lt;/p>
&lt;p>你可以在用户界面中试用它们，比如将 Markdown 代码转换为 HTML 的 Markdown 函数。&lt;/p>
&lt;p>在&lt;em>Request&lt;/em>字段中键入以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## The **OpenFaaS** _workshop_&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在点击&lt;em>Invoke&lt;/em>，看到响应出现在屏幕的下半部分。&lt;/p>
&lt;p>即。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&amp;lt;h2&amp;gt;The &amp;lt;strong&amp;gt;OpenFaaS&amp;lt;/strong&amp;gt; &amp;lt;em&amp;gt;workshop&amp;lt;/em&amp;gt;&amp;lt;/h2&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你将看到以下字段显示。&lt;/p>
&lt;ul>
&lt;li>状态 - 该函数是否准备好运行。在状态显示准备好之前，你将不能从用户界面调用该函数。&lt;/li>
&lt;li>Replicas - 在集群中运行的函数的副本数量&lt;/li>
&lt;li>镜像 - 发布在 Docker Hub 或 Docker 资源库中的 Docker 图像名称和版本&lt;/li>
&lt;li>调用次数 - 这显示了该函数被调用的次数，每 5 秒更新一次&lt;/li>
&lt;/ul>
&lt;p>点击&lt;em>Invoke&lt;/em>若干次，看到&lt;em>Invocation count&lt;/em>的增加。&lt;/p>
&lt;h2 id="通过函数库进行部署">通过函数库进行部署&lt;/h2>
&lt;p>你可以从 OpenFaaS 商店中部署一个函数。该商店是一个由社区维护的免费函数集合。&lt;/p>
&lt;p>&lt;em>点击 部署新的函数&lt;/em>
&lt;em>点击 from store&lt;/em>&lt;/p>
&lt;ul>
&lt;li>点击 &lt;em>Figlet&lt;/em> 或在搜索栏中输入 &lt;em>figlet&lt;/em> ，然后点击 &lt;em>Deploy&lt;/em> 。&lt;/li>
&lt;/ul>
&lt;p>Figlet 函数现在将出现在你左边的函数列表中。给它一点时间从 Docker Hub 下载，然后输入一些文本，像我们对 Markdown 函数所做的那样，点击 Invoke。&lt;/p>
&lt;p>你会看到一个 ASCII 码的标志，像这样生成。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> _ ___ ___ _ __
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/ &lt;span class="p">|&lt;/span>/ _ &lt;span class="se">\ &lt;/span>/ _ &lt;span class="o">(&lt;/span>_&lt;span class="o">)&lt;/span>/ /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>/ /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span> / /_
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">|&lt;/span>_&lt;span class="p">|&lt;/span>&lt;span class="se">\_&lt;/span>__/ &lt;span class="se">\_&lt;/span>__/_/&lt;span class="o">(&lt;/span>_&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="了解-cli-的情况">了解 CLI 的情况&lt;/h2>
&lt;p>你现在可以测试一下 CLI 了，但首先要注意一下备用网关的 URL。&lt;/p>
&lt;p>如果你的&lt;em>网关没有&lt;/em>部署在&lt;a class="link" href="http://127.0.0.1:8080" target="_blank" rel="noopener"
>http://127.0.0.1:8080&lt;/a>，那么你将需要指定替代位置。有几种方法来实现这一点。&lt;/p>
&lt;ol>
&lt;li>设置环境变量&lt;code>OPENFAAS_URL&lt;/code>，&lt;code>faas-cli&lt;/code>将指向当前 shell 会话中的那个端点。例如：&lt;code>export OPENFAAS_URL http://openfaas.endpoint.com:8080&lt;/code>。如果你是按照 Kubernetes 的指示，这已经在&lt;a class="link" href="./lab1.md" >Lab 1&lt;/a>中设置好了。&lt;/li>
&lt;li>用 &lt;code>g&lt;/code>或&lt;code>--gateway&lt;/code>标志在线指定正确的端点： &lt;code>faas deploy --gateway http://openfaas.endpoint.com:8080&lt;/code>。&lt;/li>
&lt;li>在你的部署 YAML 文件中，改变&lt;code>gateway:&lt;/code>对象在&lt;code>provider:&lt;/code>下指定的值。&lt;/li>
&lt;/ol>
&lt;h3 id="列出已部署的函数">列出已部署的函数&lt;/h3>
&lt;p>这将显示这些函数，你有多少个副本和调用次数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你应该看到&lt;em>markdown&lt;/em>函数是 &lt;code>markdown&lt;/code>，&lt;em>figlet&lt;/em>函数也被列出来了，还有你调用了多少次。&lt;/p>
&lt;p>现在试试使用 verbose 标志&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli list --verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli list -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以看到 Docker 镜像以及函数的名称。&lt;/p>
&lt;h3 id="调用一个函数">调用一个函数&lt;/h3>
&lt;p>从你在&lt;code>faas-cli list&lt;/code>上看到的函数中挑选一个，比如&lt;code>markdown&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli invoke markdown
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你会被要求输入一些文本。完成后点击 Control + D。&lt;/p>
&lt;p>或者你可以使用一个命令，如&lt;code>echo&lt;/code>或&lt;code>curl&lt;/code>作为&lt;code>invoke&lt;/code>命令的输入，该命令通过使用管道工作。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;# Hi&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke markdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -sLS https://raw.githubusercontent.com/openfaas/faas/master/README.md&lt;span class="se">\。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">|&lt;/span> faas-cli invoke markdown
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="监测仪表板">监测仪表板&lt;/h2>
&lt;p>OpenFaaS 使用 Prometheus 自动跟踪你的函数的指标。这些指标可以通过免费的开源工具变成一个有用的仪表盘，比如&lt;a class="link" href="https://grafana.com" target="_blank" rel="noopener"
>Grafana&lt;/a>。&lt;/p>
&lt;p>在 OpenFaaS Kubernetes 命名空间运行 Grafana。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl -n openfaas run &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--image&lt;span class="o">=&lt;/span>stefanprodan/faas-grafana:4.6.3 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--port&lt;span class="o">=&lt;/span>&lt;span class="m">3000&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>grafana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用 NodePort 暴露 Grafana。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl -n openfaas expose pod grafana &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--type&lt;span class="o">=&lt;/span>NodePort &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--name&lt;span class="o">=&lt;/span>grafana
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到 Grafana 节点的端口地址。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GRAFANA_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl -n openfaas get svc grafana -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.spec.ports[0].nodePort}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GRAFANA_URL&lt;/span>&lt;span class="o">=&lt;/span>http://IP_ADDRESS:&lt;span class="nv">$GRAFANA_PORT&lt;/span>/dashboard/db/openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>IP_ADDRESS&lt;/code>是你在 Kubernetes 的对应 IP。&lt;/p>
&lt;p>或者你可以运行这个端口转发命令，以便能够在&lt;code>http://127.0.0.1:3000&lt;/code>上访问 Grafana。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl port-forward pod/grafana 3000:3000 -n openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你使用的是 Kubernetes 1.17 或更早的版本，请使用&lt;code>deploy/grafana&lt;/code>而不是上面命令中的&lt;code>pod/&lt;/code>。&lt;/p>
&lt;p>服务创建后，在浏览器中打开 Grafana，用用户名&lt;code>admin&lt;/code>密码&lt;code>admin&lt;/code>登录，并导航到预先制作的 OpenFaaS 仪表板&lt;code>$GRAFANA_URL&lt;/code>。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>&lt;em>图：使用 Grafana 的 OpenFaaS 仪表板的例子&lt;/em>。&lt;/p>
&lt;p>现在转到&lt;a class="link" href="./lab3.md" >实验室 3&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab1b</title><link>https://example.com/p/openfaas-workshop-lab1b/</link><pubDate>Tue, 30 Mar 2021 09:55:20 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab1b/</guid><description>&lt;h1 id="lab-1---用-kubernetes-设置-openfaas">Lab 1 - 用 Kubernetes 设置 OpenFaaS&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;/p>
&lt;h2 id="安装最新的-kubectl">安装最新的 &lt;code>kubectl&lt;/code>&lt;/h2>
&lt;p>使用下面的说明或&lt;a class="link" href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener"
>官方文档&lt;/a>为你的操作系统安装&lt;code>kubectl&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>Linux&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">VER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -LO https://storage.googleapis.com/kubernetes-release/release/&lt;span class="nv">$VER&lt;/span>/bin/linux/amd64/kubectl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x kubectl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv kubectl /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>MacOS&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">VER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -LO https://storage.googleapis.com/kubernetes-release/release/&lt;span class="nv">$VER&lt;/span>/bin/darwin/amd64/kubectl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x kubectl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv kubectl /usr/local/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Windows&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">VER&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -LO https://storage.googleapis.com/kubernetes-release/release/&lt;span class="nv">$VER&lt;/span>/bin/windows/amd64/kubectl.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x kubectl.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir -p &lt;span class="nv">$HOME&lt;/span>/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv kubectl &lt;span class="nv">$HOME&lt;/span>/bin/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="设置一个-kubernetes-集群">设置一个 Kubernetes 集群&lt;/h2>
&lt;p>你可以在使用 Kubernetes 的同时按照实验进行操作，但你可能需要沿途做一些小改动。网关的服务地址从&lt;code>http://gateway:8080&lt;/code>改为&lt;code>http://gateway.openfaas:8080&lt;/code>。这些差异已经尽可能地被记录下来，每个实验室都提供了替代方案。&lt;/p>
&lt;h3 id="在你的笔记本电脑上创建一个本地集群">在你的笔记本电脑上创建一个本地集群&lt;/h3>
&lt;h4 id="_k3s-使用-k3d_">&lt;em>k3s 使用 k3d&lt;/em>&lt;/h4>
&lt;p>如果你的电脑上有 Docker，那么你可以使用 Rancher 实验室托管的&lt;code>k3d&lt;/code>工具。它安装了一个轻量级的 Kubernetes 版本，叫做&lt;code>k3s&lt;/code>，并在 Docker 容器中运行，这意味着它可以在任何有 Docker 的电脑上运行。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/rancher/k3d" target="_blank" rel="noopener"
>安装 k3d&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动一个集群&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;code>k3d cluster create CLUSTER_NAME&lt;/code>创建一个新的单节点集群（=1 个运行 k3s 的容器+1 个负载均衡器容器）&lt;/li>
&lt;li>2.kubectl 的上下文会自动更新，你可以用&lt;code>kubectl config get-contexts&lt;/code>来检查。&lt;/li>
&lt;li>执行一些命令，如&lt;code>kubectl get pods --all-namespaces&lt;/code>。
如果你想删除默认集群&lt;code>k3d cluster delete CLUSTER_NAME&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h4 id="_docker-for-mac_">&lt;em>Docker for Mac&lt;/em>&lt;/h4>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.docker.com/v17.12/docker-for-mac/install/" target="_blank" rel="noopener"
>安装 Docker for Mac&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>请注意，Kubernetes 仅在 Docker for Mac 17.12 CE 及以上版本中可用。&lt;/p>
&lt;/blockquote>
&lt;h4 id="_使用-minikube_">&lt;em>使用 Minikube&lt;/em>&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>要安装 Minikube，请根据你的平台从&lt;a class="link" href="https://github.com/kubernetes/minikube/releases" target="_blank" rel="noopener"
>最新版本&lt;/a>下载适当的安装程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现在运行 Minikube&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">minikube start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>minikube 虚拟机通过一个仅限主机的 IP 地址暴露给主机系统。用&lt;code>minikube ip&lt;/code>检查这个 IP。
这是你以后将用于网关 URL 的 IP。&lt;/p>
&lt;blockquote>
&lt;p>注意：Minikube 还需要一个 Hypervisor，如 VirtualBox 或 Hyperkit（在 MacOS 上）。按照 minikube 的说明和文件&lt;/p>
&lt;/blockquote>
&lt;h3 id="在云上创建一个远程集群">在云上创建一个远程集群&lt;/h3>
&lt;p>你可以在云端创建一个远程集群，享受与本地开发一样的体验，同时节省 RAM/CPU 和电池。运行一个集群 1-2 天的费用是最低的。&lt;/p>
&lt;h4 id="_在-digitalocean-的-kubernetes-服务上运行_">&lt;em>在 DigitalOcean 的 Kubernetes 服务上运行&lt;/em>&lt;/h4>
&lt;p>你可以使用免费点数通过 DigitalOcean 的用户界面创建一个集群。&lt;/p>
&lt;p>然后 DigitalOcean 的仪表板将指导你如何配置你的&lt;code>kubectl&lt;/code>和&lt;code>KUBECONFIG&lt;/code>文件，以便在实验室中使用。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://m.do.co/c/8d4e75e9886f" target="_blank" rel="noopener"
>申请你的免费点数&amp;ndash;30 天内有 50 美元的点数。&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>即使你已经申请了免费学分，一个 2-3 个节点的集群 24-48 小时的运行费用也是可以忽略不计的。&lt;/p>
&lt;p>&lt;em>点击仪表板左侧面板上的 Kubernetes&lt;/em>，然后点击 &lt;code>启用有限访问&lt;/code>&lt;/p>
&lt;p>_一旦登录，点击 Kubernetes_菜单项并创建一个集群。&lt;/p>
&lt;p>建议使用最新的 Kubernetes 版本，并选择离你最近的数据中心区域，以尽量减少延时。&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>添加节点池&lt;/code>下&lt;/li>
&lt;/ul>
&lt;p>使用 2 个 4GB / 2vCPU&lt;/p>
&lt;blockquote>
&lt;p>注意：如果需要，你可以在以后添加更多的容量&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>下载&lt;a class="link" href="https://github.com/digitalocean/doctl#installing-doctl" target="_blank" rel="noopener"
>doctl&lt;/a>CLI 并把它放在你的路径中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在您的 DigitalOcean 仪表板上创建一个&lt;a class="link" href="https://cloud.digitalocean.com/account/api/tokens/new" target="_blank" rel="noopener"
>API 密钥&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>追踪您的 API 密钥（将其复制到剪贴板）。&lt;/p>
&lt;ul>
&lt;li>认证 CLI&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">doctl auth init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>粘贴你的 API 密钥&lt;/p>
&lt;ul>
&lt;li>现在获得集群的名称。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ doctl k8s cluster list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GUID workshop-lon1 nyc1 1.13.5-do.1 provisioning workshop-lon1-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>保存一个配置文件，使&lt;code>kubectl&lt;/code>指向新集群。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">doctl k8s cluster kubeconfig save workshop-lon1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你需要切换你的 Kubernetes 上下文以指向新的集群。&lt;/p>
&lt;p>用&lt;code>kubectl config get-contexts&lt;/code>找到集群名称，如果它没有突出显示，则输入&lt;code>kubectl config set-context &amp;lt;context-name&amp;gt;&lt;/code>。&lt;/p>
&lt;h4 id="_在-gke谷歌-kubernetes-引擎上运行_">&lt;em>在 GKE（谷歌 Kubernetes 引擎）上运行&lt;/em>&lt;/h4>
&lt;p>登录到谷歌云，创建一个项目，并为其启用计费。如果你没有账户，你可以&lt;a class="link" href="https://cloud.google.com/free/" target="_blank" rel="noopener"
>在这里&lt;/a>注册，获得免费点数。&lt;/p>
&lt;p>安装&lt;a class="link" href="https://cloud.google.com/sdk/docs" target="_blank" rel="noopener"
>Google Cloud SDK&lt;/a> - 这将使&lt;code>gcloud&lt;/code>和&lt;code>kubectl&lt;/code>命令可用。
对于 Windows，请按照&lt;a class="link" href="https://cloud.google.com/sdk/docs/#windows" target="_blank" rel="noopener"
>文档&lt;/a>中的说明。&lt;/p>
&lt;p>安装 gcloud 命令行工具后，用&lt;code>gcloud init&lt;/code>配置你的项目，并设置默认项目、计算区域和区域（用你自己的项目替换&lt;code>PROJECT_ID&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcloud config &lt;span class="nb">set&lt;/span> project PROJECT_ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gcloud config &lt;span class="nb">set&lt;/span> compute/region us-central1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gcloud config &lt;span class="nb">set&lt;/span> compute/zone us-central1-a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启用 Kubernetes 服务。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcloud services &lt;span class="nb">enable&lt;/span> container.googleapis.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装 kubectl。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcloud components install kubectl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个 Kubernetes 集群。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ gcloud container clusters create openfaas &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--zone&lt;span class="o">=&lt;/span>us-central1-a &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--num-nodes&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--machine-type&lt;span class="o">=&lt;/span>n1-standard-2 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--disk-size&lt;span class="o">=&lt;/span>&lt;span class="m">30&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--no-enable-cloud-logging
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为 &lt;code>kubectl&lt;/code>设置凭证。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcloud container clusters get-credentials openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个集群管理员角色绑定:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl create clusterrolebinding &lt;span class="s2">&amp;#34;cluster-admin-&lt;/span>&lt;span class="k">$(&lt;/span>whoami&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--clusterrole&lt;span class="o">=&lt;/span>cluster-admin &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>--user&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>gcloud config get-value core/account&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在验证&lt;code>kubectl&lt;/code>已经配置到 GKE 集群。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ kubectl get nodes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS ROLES AGE VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gke-name-default-pool-eceef152-qjmt Ready &amp;lt;none&amp;gt; 1h v1.10.7-gke.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="部署-openfaas">部署 OpenFaaS&lt;/h2>
&lt;p>部署 OpenFaaS 的说明会时常改变，因为我们努力使其更加简单。&lt;/p>
&lt;h3 id="安装-openfaas">安装 OpenFaaS&lt;/h3>
&lt;p>有三种方式来安装 OpenFaaS，你可以选择对你和你的团队有意义的方式。在这个研讨会上，我们将使用官方的安装程序&lt;code>arkade&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>arkade应用安装&lt;/code> - arkade 使用其官方舵手图安装 OpenFaaS。它还可以通过用户友好的 CLI 提供其他软件，如&lt;code>cert-manager&lt;/code>和&lt;code>nginx-ingress&lt;/code>。这是最简单和最快速的方式来启动和运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>舵手图 - 理智的默认值，易于通过 YAML 或 CLI 标志进行配置。安全选项，如 &lt;code>Helm 模板&lt;/code>或 &lt;code>Helm 3&lt;/code>，也适用于那些在限制性环境中工作的人。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>普通 YAML 文件 - 硬编码的设置/值。像 Kustomize 这样的工具可以提供自定义设置&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="用arkade安装">用&lt;code>arkade&lt;/code>安装&lt;/h4>
&lt;ul>
&lt;li>获取 arkade&lt;/li>
&lt;/ul>
&lt;p>对于 MacOS / Linux:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># MacOS users may need to run &amp;#34;bash&amp;#34; first if this command fails&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -SLsf https://dl.get-arkade.dev/ &lt;span class="p">|&lt;/span> sudo sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 Windows。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -SLsf https://dl.get-arkade.dev/ &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>安装 OpenFaaS 应用程序&lt;/li>
&lt;/ul>
&lt;p>如果你使用的是提供 LoadBalancers 的管理云 Kubernetes 服务，那么运行以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">arkade install openfaas --load-balancer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：&lt;code>--load-balancer&lt;/code>标志的默认值是&lt;code>false&lt;/code>，所以通过该标志，安装将向你的云提供商请求一个。&lt;/p>
&lt;/blockquote>
&lt;p>如果你使用的是本地 Kubernetes 集群或虚拟机，那么请运行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">arkade install openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在后面的实验室中，我们将向你展示如何使用 Kubernetes Ingress 设置一个带有 TLS 的自定义域。&lt;/p>
&lt;h4 id="或者用-helm-安装高级">或者用 helm 安装（高级）&lt;/h4>
&lt;p>如果你愿意，你可以使用&lt;a class="link" href="https://github.com/openfaas/faas-netes/blob/master/chart/openfaas/README.md" target="_blank" rel="noopener"
>helm chart&lt;/a>的说明来安装 OpenFaaS。&lt;/p>
&lt;h3 id="登录你的-openfaas-网关">登录你的 OpenFaaS 网关&lt;/h3>
&lt;ul>
&lt;li>检查网关是否准备好了&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl rollout status -n openfaas deploy/gateway
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你使用你的笔记本电脑，虚拟机，或任何其他类型的 Kubernetes 分布，请运行以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl port-forward svc/gateway -n openfaas 8080:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令将打开一个从 Kubernetes 集群到本地计算机的隧道，这样你就可以访问 OpenFaaS 网关。还有其他方法可以访问 OpenFaaS，但这已经超出了本次研讨会的范围。&lt;/p>
&lt;p>你的网关 URL 是。&lt;code>http://127.0.0.1:8080&lt;/code>&lt;/p>
&lt;p>如果你使用的是管理云 Kubernetes 服务，那么从下面的命令中的&lt;code>EXTERNAL-IP&lt;/code>字段中获取 LoadBalancer 的 IP 地址或 DNS 条目。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl get svc -o wide gateway-external -n openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你的 URL 将是上面的 IP 或 DNS 条目，端口为&lt;code>8080&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>登录。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENFAAS_URL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># Populate as above&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This command retrieves your password&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get secret -n openfaas basic-auth -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.data.basic-auth-password}&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64 --decode&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This command logs in and saves a file to ~/.openfaas/config.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -n &lt;span class="nv">$PASSWORD&lt;/span> &lt;span class="p">|&lt;/span> faas-cli login --username admin --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>检查&lt;code>faas-cli list&lt;/code>是否工作。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="永久保存你的-openfaas-url">永久保存你的 OpenFaaS URL&lt;/h3>
&lt;p>编辑&lt;code>~/.bashrc&lt;/code>或&lt;code>~/.bash_profile&lt;/code>&amp;ndash;如果该文件不存在，则创建它。&lt;/p>
&lt;p>现在添加以下内容&amp;ndash;按照你上面看到的 URL 进行修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENFAAS_URL&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># populate as above&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在转到&lt;a class="link" href="lab2.md" >实验室 2&lt;/a>&lt;/p></description></item><item><title>Openfaas Workshop Lab1</title><link>https://example.com/p/openfaas-workshop-lab1/</link><pubDate>Tue, 30 Mar 2021 09:54:25 +0800</pubDate><guid>https://example.com/p/openfaas-workshop-lab1/</guid><description>&lt;h1 id="lab-1---为-openfaas-做准备">Lab 1 - 为 OpenFaaS 做准备&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>OpenFaaS 需要一个&lt;a class="link" href="https://kubernetes.io" target="_blank" rel="noopener"
>Kubernetes&lt;/a>集群来运行。你可以使用一个单节点集群或多节点集群，不管是在你的笔记本电脑上还是在云端。&lt;/p>
&lt;p>任何 OpenFaaS 函数的基本原件都是一个 Docker 镜像，它是使用&lt;code>faas-cli&lt;/code>工具链构建的。&lt;/p>
&lt;h2 id="前提条件">前提条件&lt;/h2>
&lt;p>让我们来安装 Docker、OpenFaaS CLI 以及设置 Kubernetes。&lt;/p>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>适用于 Mac&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener"
>Docker CE for Mac Edge Edition&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>适用于 Windows&lt;/p>
&lt;ul>
&lt;li>仅使用 Windows 10 Pro 或企业版&lt;/li>
&lt;li>安装&lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener"
>Docker CE for Windows&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>请确保通过使用 Windows 任务栏通知区的 Docker 菜单来使用&lt;strong>Linux&lt;/strong>容器的 Docker 守护程序。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>安装&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>Git Bash&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>当你安装 git bash 时，选择以下选项。&lt;code>install UNIX commands&lt;/code>和&lt;code>use true-type font&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>注意：请在所有步骤中使用&lt;em>Git Bash&lt;/em>：不要试图使用&lt;em>PowerShell&lt;/em>、&lt;em>WSL&lt;/em>或&lt;em>Bash for Windows&lt;/em>。&lt;/p>
&lt;/blockquote>
&lt;p>Linux - Ubuntu 或 Debian&lt;/p>
&lt;ul>
&lt;li>Docker CE for Linux&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>你可以从[Docker Store]（&lt;a class="link" href="https://store.docker.com" target="_blank" rel="noopener"
>https://store.docker.com&lt;/a>）安装 Docker CE。&lt;/p>
&lt;/blockquote>
&lt;p>注意：作为最后的手段，如果你有一台不兼容的 PC，你可以在&lt;a class="link" href="https://labs.play-with-docker.com/" target="_blank" rel="noopener"
>https://labs.play-with-docker.com/&lt;/a>上面体验。&lt;/p>
&lt;h3 id="openfaas-cli">OpenFaaS CLI&lt;/h3>
&lt;p>你可以使用官方的 bash 脚本来安装 OpenFaaS CLI，&lt;code>brew&lt;/code>也可以使用，但可能会落后一到两个版本。&lt;/p>
&lt;p>在 MacOS 或 Linux 下，在终端运行以下程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># MacOS users may need to run &amp;#34;bash&amp;#34; first if this command fails&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -sLSf https://cli.openfaas.com &lt;span class="p">|&lt;/span> sudo sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 Windows，在&lt;em>Git Bash&lt;/em>中运行这个。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -sLSf https://cli.openfaas.com &lt;span class="p">|&lt;/span> sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果你遇到任何问题，你可以从&lt;a class="link" href="https://github.com/openfaas/faas-cli/releases" target="_blank" rel="noopener"
>releases page&lt;/a>手动下载最新的&lt;code>faas-cli.exe&lt;/code>。你可以把它放在本地目录或&lt;code>C:\Windows\&lt;/code>路径中，这样它就可以从命令提示符中获得。&lt;/p>
&lt;/blockquote>
&lt;p>我们将使用&lt;code>faas-cli&lt;/code>来搭建新的函数，构建、部署和调用函数。你可以通过&lt;code>faas-cli --help&lt;/code>找到 cli 的可用命令。&lt;/p>
&lt;p>测试 &lt;code>faas-cli&lt;/code>。打开一个终端或 Git Bash 窗口，键入&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli &lt;span class="nb">help&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faas-cli version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="配置-docker-hub">配置 Docker Hub&lt;/h2>
&lt;p>注册一个 Docker Hub 账户。&lt;a class="link" href="https://hub.docker.com" target="_blank" rel="noopener"
>Docker Hub&lt;/a>允许你在互联网上发布你的 Docker 镜像，以便在多节点集群上使用或与更广泛的社区分享。我们将在研讨会期间使用 Docker Hub 来发布我们的函数。&lt;/p>
&lt;p>你可以在这里注册。&lt;a class="link" href="https://hub.docker.com" target="_blank" rel="noopener"
>Docker Hub&lt;/a>&lt;/p>
&lt;p>打开一个终端或 Git Bash 窗口，用你上面注册的用户名登录 Docker Hub。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：来自社区的提示&amp;ndash;如果你在 Windows 机器上试图运行这个命令时遇到错误，那么点击任务栏中的 Docker for Windows 图标，在那里登录 Docker，而不是 &lt;code>登录/创建 Docker ID&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>为新镜像设置你的 OpenFaaS 前缀&lt;/li>
&lt;/ul>
&lt;p>OpenFaaS 镜像存储在 Docker 注册表或 Docker Hub 中，我们可以设置一个环境变量，使你的用户名自动添加到你创建的新函数中。这将在研讨会过程中为你节省一些时间。&lt;/p>
&lt;p>编辑&lt;code>~/.bashrc&lt;/code>或&lt;code>~/.bash_profile&lt;/code>&amp;ndash;如果该文件不存在，则创建它。&lt;/p>
&lt;p>现在添加以下内容&amp;ndash;按照你上面看到的 URL 进行修改。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">OPENFAAS_PREFIX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c1"># Populate with your Docker Hub username&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="设置一个单节点集群">设置一个单节点集群&lt;/h3>
&lt;p>实验室使用 Kubernetes，Swarm 已经不再被 OpenFaaS 社区支持。有些实验室可以用于 faasd，但你可能需要改变命令，而且当使用 faasd 的时候，我们不提供对该实验室的支持。&lt;/p>
&lt;ul>
&lt;li>Kubernetes。&lt;a class="link" href="./lab1b.md" >Lab 1b&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Openfaas Workshop</title><link>https://example.com/p/openfaas-workshop/</link><pubDate>Tue, 30 Mar 2021 09:53:12 +0800</pubDate><guid>https://example.com/p/openfaas-workshop/</guid><description>&lt;h1 id="openfaas-workshop">openfaas-workshop&lt;/h1>
&lt;p>这是一个自定进度的研讨会，学习如何使用 OpenFaaS 构建、部署和运行无服务器函数。&lt;/p>
&lt;p>&lt;img src="https://github.com/openfaas/media/raw/master/OpenFaaS_Magnet_3_1_png.png"
loading="lazy"
>&lt;/p>
&lt;p>在这个工作坊中，你将首先把 OpenFaaS 部署到你的笔记本电脑或使用 Docker for Mac 或 Windows 的远程集群。然后你将对 OpenFaaS 的用户界面、CLI 和函数商店进行测试。在用 Python 构建、部署和调用你自己的无服务器函数之后，你将继续学习以下内容：用 pip 管理依赖关系，通过安全秘密处理 API 令牌，用 Prometheus 监控函数，异步调用函数以及将函数连接起来创建应用程序。实验的高潮是让你创建自己的 GitHub 机器人，可以自动响应问题。同样的方法可以通过 IFTTT.com 连接到在线事件流&amp;ndash;这将使你能够建立机器人、自动回复器以及与社交媒体和物联网设备的集成。&lt;/p>
&lt;p>最后，实验室涵盖了更多的高级主题，并给出了进一步学习的建议。&lt;/p>
&lt;p>&lt;strong>译文&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="./translations/ja" >日本語&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="./translations/cn" >简体中文&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="免费学习作为-github-赞助商表示感谢">免费学习，作为 GitHub 赞助商表示感谢&lt;/h2>
&lt;p>OpenFaaS 连同这些材料都是免费提供的，需要时间和精力来维护。&lt;/p>
&lt;ul>
&lt;li>成为&lt;a class="link" href="https://github.com/sponsor/openfaas" target="_blank" rel="noopener"
>OpenFaaS on GitHub&lt;/a>的赞助商。&lt;/li>
&lt;/ul>
&lt;h2 id="要求">要求&lt;/h2>
&lt;p>我们在&lt;a class="link" href="./lab1.md" >Lab 1&lt;/a>中讲解了如何安装这些需求。请在参加讲师指导的研讨会之前做&lt;a class="link" href="./lab1.md" >Lab 1&lt;/a>。&lt;/p>
&lt;ul>
&lt;li>函数将用 Python 语言编写，所以有编程或脚本经验者优先。&lt;/li>
&lt;li>安装推荐的代码编辑器/IDE &lt;a class="link" href="https://code.visualstudio.com/download" target="_blank" rel="noopener"
>VSCode&lt;/a>&lt;/li>
&lt;li>对于 Windows，安装&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>Git Bash&lt;/a>&lt;/li>
&lt;li>首选的操作系统。MacOS, Windows 10 Pro/Enterprise, Ubuntu Linux&lt;/li>
&lt;/ul>
&lt;p>Docker。&lt;/p>
&lt;ul>
&lt;li>Docker CE for &lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener"
>Mac&lt;/a>/&lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener"
>Windows&lt;/a> &lt;strong>边缘版&lt;/strong>。&lt;/li>
&lt;li>Docker CE for Linux&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：作为最后的手段，如果你有一台不兼容的 PC，你可以在&lt;a class="link" href="https://labs.play-with-docker.com/" target="_blank" rel="noopener"
>https://labs.play-with-docker.com/&lt;/a> 上运行该研讨会。&lt;/p>
&lt;/blockquote>
&lt;h2 id="教员指导的研讨会">教员指导的研讨会&lt;/h2>
&lt;p>如果你正在参加一个由教师指导的研讨会，那么我们将分享一个链接，以加入 OpenFaaS Slack 社区。使用研讨会的指定频道来讨论评论、问题和建议。&lt;/p>
&lt;h2 id="挑选你的轨道">挑选你的轨道&lt;/h2>
&lt;p>在实验室 1 中，你将选择你的轨道，然后在整个实验室中注意你的轨道的容器协调器所需的任何特殊命令。&lt;/p>
&lt;h3 id="kubernetes">Kubernetes&lt;/h3>
&lt;p>你也可以使用 OpenFaaS 学习 Kubernetes 上的 Serverless。&lt;/p>
&lt;p>OpenFaaS 社区的建议是，你在生产中运行 Kubernetes，但你能的所有知识都是可以转移的，函数也不必重新构建。&lt;/p>
&lt;h2 id="lab-1---prepare-for-openfaaslab1md">&lt;a class="link" href="./lab1.md" >Lab 1 - Prepare for OpenFaaS&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>安装前提条件&lt;/li>
&lt;li>用 Kubernetes 建立一个单节点集群&lt;/li>
&lt;li>Docker Hub 账户&lt;/li>
&lt;li>OpenFaaS CLI&lt;/li>
&lt;li>部署 OpenFaaS&lt;/li>
&lt;/ul>
&lt;h2 id="lab-2---test-things-outlab2md">&lt;a class="link" href="./lab2.md" >Lab 2 - Test things out&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>使用 UI 门户&lt;/li>
&lt;li>通过函数商店进行部署&lt;/li>
&lt;li>了解 CLI 的情况&lt;/li>
&lt;li>用 Prometheus 查找指标&lt;/li>
&lt;/ul>
&lt;h2 id="lab-3---introduction-to-functionslab3md">&lt;a class="link" href="./lab3.md" >Lab 3 - Introduction to Functions&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>架构或生成一个新的函数&lt;/li>
&lt;li>建立 astronaut-finder 函数&lt;/li>
&lt;li>用&lt;code>pip&lt;/code>添加依赖&lt;/li>
&lt;li>故障排除：找到容器的日志&lt;/li>
&lt;li>故障排除：用&lt;code>write_debug&lt;/code>进行粗略输出&lt;/li>
&lt;li>使用自定义和第三方语言模板&lt;/li>
&lt;li>使用模板商店发现社区模板&lt;/li>
&lt;/ul>
&lt;h2 id="lab-4---go-deeper-with-functionslab4md">&lt;a class="link" href="./lab4.md" >Lab 4 - Go deeper with functions&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="lab4.md#inject-configuration-through-environmental-variables" >通过环境变量注入配置&lt;/a>
*在部署时使用 yaml
&lt;ul>
&lt;li>动态地使用 HTTP 上下文&amp;ndash;查询字符串/头信息等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安全性：只读的文件系统&lt;/li>
&lt;li>&lt;a class="link" href="lab4.md#making-use-of-logging" >利用日志&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="lab4.md#creat-workflows" >创建工作流&lt;/a>
&lt;ul>
&lt;li>在客户端串联函数
*从另一个函数中调用一个函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-5---create-a-github-botlab5md">&lt;a class="link" href="./lab5.md" >Lab 5 - Create a GitHub bot&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>建立 &lt;code>issue-bot&lt;/code>&amp;ndash;GitHub 问题的自动回复者&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>获得一个 GitHub 账户&lt;/li>
&lt;li>用 ngrok 建立一个隧道&lt;/li>
&lt;li>创建一个 webhook 接收器&lt;code>issue-bot&lt;/code>。&lt;/li>
&lt;li>接收来自 GitHub 的 webhooks&lt;/li>
&lt;li>部署 SentimentAnalysis 函数&lt;/li>
&lt;li>通过 GitHub 的 API 应用标签&lt;/li>
&lt;li>完成函数&lt;/li>
&lt;/ul>
&lt;h2 id="lab-6---html-for-your-functionslab6md">&lt;a class="link" href="./lab6.md" >Lab 6 - HTML for your functions&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>从一个函数生成并返回基本的 HTML&lt;/li>
&lt;li>从磁盘读取并返回一个静态 HTML 文件&lt;/li>
&lt;li>与其他函数协作&lt;/li>
&lt;/ul>
&lt;h2 id="lab-7---asynchronous-functionslab7md">&lt;a class="link" href="./lab7.md" >Lab 7 - Asynchronous Functions&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>同步地与异步地调用一个函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看队列工作者的日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 requestbin 和 ngrok 中使用&lt;code>X-Callback-Url&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-8---advanced-feature---timeoutslab8md">&lt;a class="link" href="./lab8.md" >Lab 8 - Advanced Feature - Timeouts&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>用&lt;code>read_timeout&lt;/code>调整超时时间&lt;/li>
&lt;li>适应更长的运行函数&lt;/li>
&lt;/ul>
&lt;h2 id="lab-9---advanced-feature---auto-scalinglab9md">&lt;a class="link" href="./lab9.md" >Lab 9 - Advanced Feature - Auto-scaling&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>查看自动缩放的操作
&lt;ul>
&lt;li>关于最小和最大复制的一些见解&lt;/li>
&lt;li>发现并访问本地 Prometheus&lt;/li>
&lt;li>执行和普罗米修斯查询&lt;/li>
&lt;li>使用 curl 调用一个函数&lt;/li>
&lt;li>观察自动缩放的启动&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-10---advanced-feature---secretslab10md">&lt;a class="link" href="./lab10.md" >Lab 10 - Advanced Feature - Secrets&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>调整 issue-bot 以使用一个秘密
&lt;ul>
&lt;li>用 faas-cli 创建一个 Kubernetes 秘密&lt;/li>
&lt;li>在函数中访问秘密&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-11---advanced-feature---trust-with-hmaclab11md">&lt;a class="link" href="./lab11.md" >Lab 11 - Advanced feature - Trust with HMAC&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>使用 HMAC 对函数应用信任&lt;/li>
&lt;/ul>
&lt;p>你可以从第一个实验室&lt;a class="link" href="lab1.md" >Lab 1&lt;/a>开始。&lt;/p>
&lt;h2 id="拆解清理">拆解/清理&lt;/h2>
&lt;p>你可以找到如何停止和删除 OpenFaaS&lt;a class="link" href="https://docs.openfaas.com/deployment/troubleshooting/#uninstall-openfaas" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/p>
&lt;h2 id="接下来的步骤">接下来的步骤&lt;/h2>
&lt;p>如果你在一个教师指导的研讨会上，并且已经完成了实验，你可能想回到实验室，编辑/修改代码和值，或者进行一些你自己的实验。&lt;/p>
&lt;p>以下是一些后续任务/主题的想法。&lt;/p>
&lt;h3 id="openfaas-云">OpenFaaS 云&lt;/h3>
&lt;p>试试 OpenFaaS 的多用户管理体验&amp;ndash;在社区集群上，或者通过托管你自己的 OpenFaaS 云。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.openfaas.com/openfaas-cloud/intro/" target="_blank" rel="noopener"
>Docs: OpenFaaS Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="tls">TLS&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.openfaas.com/reference/ssl/kubernetes-with-cert-manager/" target="_blank" rel="noopener"
>用 Kubernetes Ingress 在你的网关上启用 HTTPS&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="cicd">CI/CD&lt;/h3>
&lt;p>设置 Jenkins、Google Cloud Build 或 GitLab，使用 OpenFaaS CLI 构建和部署你自己的函数。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.openfaas.com/reference/cicd/intro/" target="_blank" rel="noopener"
>CI/CD 介绍&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="存储数据库">存储/数据库&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.alexellis.io/openfaas-storage-for-your-functions/" target="_blank" rel="noopener"
>用 Minio 尝试开源对象存储&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://blog.alexellis.io/serverless-databases-with-openfaas-and-mongo/" target="_blank" rel="noopener"
>尝试用 Mongo 存储数据的 OpenFaaS&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="仪器仪表监控">仪器仪表/监控&lt;/h3>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.openfaas.com/architecture/metrics/#monitoring-functions" target="_blank" rel="noopener"
>探索 Prometheus 中可用的指标&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="其他博文和教程">其他博文和教程&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.openfaas.com/blog/" target="_blank" rel="noopener"
>OpenFaaS 博客上的教程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://github.com/openfaas/faas/blob/master/community.md" target="_blank" rel="noopener"
>社区博客文章&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="附录">附录&lt;/h3>
&lt;p>&lt;a class="link" href="./appendix.md" >附录&lt;/a>包含一些额外的内容。&lt;/p>
&lt;h2 id="acknowledgements">Acknowledgements&lt;/h2>
&lt;p>感谢@iyovcheva, @BurtonR, @johnmccabe, @laurentgrangeau, @stefanprodan, @kenfdev, @templum &amp;amp; @rgee0 对实验室的贡献、测试和翻译。&lt;/p></description></item><item><title>Streaming 101</title><link>https://example.com/p/streaming-101/</link><pubDate>Fri, 26 Mar 2021 14:11:29 +0800</pubDate><guid>https://example.com/p/streaming-101/</guid><description>&lt;blockquote>
&lt;p>有效的复杂系统总是从简单&lt;/p>
&lt;/blockquote></description></item><item><title>K3d With Openfaas</title><link>https://example.com/p/k3d-with-openfaas/</link><pubDate>Wed, 10 Mar 2021 20:09:11 +0800</pubDate><guid>https://example.com/p/k3d-with-openfaas/</guid><description>&lt;h1 id="openfaas">openfaas&lt;/h1>
&lt;p>&lt;a class="link" href="https://github.com/openfaas/workshop/blob/master/lab1b.md" target="_blank" rel="noopener"
>https://github.com/openfaas/workshop/blob/master/lab1b.md&lt;/a>&lt;/p>
&lt;h2 id="安装-docker">安装 docker&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install homebrew/cask/docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装单节点-k8s">安装单节点 K8S&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install k3d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置单节点 K8S 集群&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">k3d cluster create CLUSTER_NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k3d kubeconfig merge CLUSTER_NAME --kubeconfig-switch-context
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pods --all-namespaces
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-arkade">安装 arkade&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl -SLsf https://dl.get-arkade.dev/ | sudo sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-openfaas-客户端-faas-cli">安装 openfaas 客户端 faas-cli&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install faas-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-openfaas-server-端">安装 openfaas server 端&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">arkade install openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置 openfaas 的 ui 界面&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl rollout status -n openfaas deploy/gateway
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl port-forward svc/gateway -n openfaas 8080:8080
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就可以在浏览器里输入 127.0.0.1:8080 进入到 openfaas 的 ui 界面了。&lt;/p>
&lt;p>但是当你打开页面的时候，要输入密码，那就需要下面的操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"># This command retrieves your password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PASSWORD=$(kubectl get secret -n openfaas basic-auth -o jsonpath=&amp;#34;{.data.basic-auth-password}&amp;#34; | base64 --decode; echo)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># This command logs in and saves a file to ~/.openfaas/config.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">echo -n $PASSWORD | faas-cli login --username admin --password-stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者直接在命令行输入，拿到密码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo $(kubectl get secret -n openfaas basic-auth -o jsonpath=&amp;#34;{.data.basic-auth-password}&amp;#34; | base64 --decode; echo)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用户名是 admin，密码输入到浏览器里即可。&lt;/p></description></item><item><title>换一种方式思考</title><link>https://example.com/p/%E6%8D%A2%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%80%9D%E8%80%83/</link><pubDate>Sat, 27 Feb 2021 12:16:48 +0800</pubDate><guid>https://example.com/p/%E6%8D%A2%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%80%9D%E8%80%83/</guid><description>&lt;ul>
&lt;li>面向对象不是设计代码的唯一方法&lt;/li>
&lt;li>函数式编程不一定是复杂和纯数学的&lt;/li>
&lt;li>编程的基础不是赋值、if 语句和循环&lt;/li>
&lt;li>并发不一定需要锁、信号量、监视器等类似的东西&lt;/li>
&lt;li>进程不必消耗大量的资源&lt;/li>
&lt;li>元编程不只是语言的附属品&lt;/li>
&lt;li>即使编程是你的工作，也应该是充满乐趣的&lt;/li>
&lt;/ul></description></item><item><title>小白都能快速上手的 Vim 配置</title><link>https://example.com/p/%E5%B0%8F%E7%99%BD%E9%83%BD%E8%83%BD%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%9A%84-vim-%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 20 Feb 2021 09:56:31 +0800</pubDate><guid>https://example.com/p/%E5%B0%8F%E7%99%BD%E9%83%BD%E8%83%BD%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E7%9A%84-vim-%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="首先把所有的-vim-相关的都删除">首先把所有的 vim 相关的都删除&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">cd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -rf .vim*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="创建自己的vimrc">创建自己的.vimrc&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">vim .vimrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="一些基本的设置">一些基本的设置&lt;/h1>
&lt;p>在.vimrc 中添加下面的代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#34; basic set
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set number
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set noswapfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set encoding=utf-8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set fileencodings=utf-8,gb18030
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set backspace=eol,start,indent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set laststatus=2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set colorcolumn=80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set cursorline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set linebreak
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set autoindent
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set ignorecase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set smartcase
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set ruler
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set diffopt+=internal,indent-heuristic,algorithm:patience
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set showcmd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set clipboard^=unnamed,unnamedplus
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set showmode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set mouse=a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set tabstop=2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set shiftwidth=4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set expandtab
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set softtabstop=2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set showmatch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set incsearch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set nobackup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set autoread
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set wildmenu
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set wildmode=longest:list,full
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">set nofoldenable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">filetype plugin indent on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">syntax on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有了上面的设置，会让你的 vim 更好用一些。&lt;/p>
&lt;p>每个参数的含义，可以看下阮一峰写的&lt;a class="link" href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html" target="_blank" rel="noopener"
>vim 配置入门&lt;/a>&lt;/p>
&lt;h1 id="安装-vim-plug">安装 vim-plug&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我是用 vim-plug 来管理 vim 的插件配置的，用起来比较简单。&lt;/p>
&lt;p>它的思路是这样的，把 github 的 vim 配置 clone 下来，然后加载。&lt;/p>
&lt;h1 id="安装一些插件">安装一些插件&lt;/h1>
&lt;p>在.vimrc 中继续添加下面的代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#34; Plugs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#begin()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;luochen1990/rainbow&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;jiangmiao/auto-pairs&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;mechatroner/rainbow_csv&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;liuchengxu/space-vim-theme&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;lvht/mru&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;preservim/tagbar&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;preservim/nerdtree&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;ryanoasis/vim-devicons&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;liuchengxu/nerdtree-dash&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;fatih/vim-go&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;:GoUpdateBinaries&amp;#39; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;godlygeek/tabular&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;plasticboy/vim-markdown&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;liuchengxu/eleline.vim&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Plug &amp;#39;tpope/vim-fugitive&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">call plug#end()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些是我比较常用的插件&lt;/p>
&lt;ul>
&lt;li>rainbow 是一个每个括号都用不同颜色区分，增加代码的可读性&lt;/li>
&lt;li>auto-pairs 是自动补全括号&lt;/li>
&lt;li>rainbow_csv 是打开 csv 文件更好看一些的插件&lt;/li>
&lt;li>space-vim-theme 是 vim 的一个主题&lt;/li>
&lt;li>mru 是最近最常使用的文件&lt;/li>
&lt;li>tagbar 显示代码结构的&lt;/li>
&lt;li>nerdtree + nerdtree-git-plugin + vim-devicons + nerdtree-dash 这几个搭配起来，展示一个更好看的文件目录&lt;/li>
&lt;li>vim-go 写 go 必备&lt;/li>
&lt;li>tabular + vim-markdown 写 markdown 必备的&lt;/li>
&lt;li>eleline 状态栏更好看一些&lt;/li>
&lt;li>vim-fugitive vim 的 git 插件&lt;/li>
&lt;/ul>
&lt;h1 id="插件的自定义设置">插件的自定义设置&lt;/h1>
&lt;p>安装了这么多插件，一般可能会自定义一下，有些插件都提供了一些变量，我们可以通过 let g:xxx 的方式去自定义&lt;/p>
&lt;p>这些设置也是在 vimrc 中，要在插件安装的下面&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#34; plug settings
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">let g:rainbow_active=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="keymap-的设置">keymap 的设置&lt;/h1>
&lt;p>我们可以设置一些快捷键加快操作。&lt;/p>
&lt;p>vim 有一个 leader 键，这个键的作用是按下之后，再按别的键，触发一些命令。 之所以有这个 leader 键，就是为了防止用户自己的快捷键，覆盖了默认的。 vim 默认的 leader 键是|,也就是 enter 上面那个中竖线。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#34; key map
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-m&amp;gt; :Mru&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;c-p&amp;gt; :call fzf#Open()&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;t :TagbarToggle&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;e :NERDTreeToggle&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;f :NERDTreeFind&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;c :call lv#Term()&amp;lt;cr&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="如果你想和我的一样">如果你想和我的一样&lt;/h1>
&lt;p>参考这个 github 项目：&lt;a class="link" href="https://github.com/zhenfeng-zhu/vim" target="_blank" rel="noopener"
>https://github.com/zhenfeng-zhu/vim&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git clone --recursive https://github.com/zhenfeng-zhu/vim.git ~/.vim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ln -s ~/.vim/init.vim ~/.vimrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后就可以愉快的自己定制了。&lt;/p></description></item><item><title>Github Action 自动部署 blog</title><link>https://example.com/p/github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-blog/</link><pubDate>Thu, 18 Feb 2021 13:20:11 +0800</pubDate><guid>https://example.com/p/github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-blog/</guid><description>&lt;p>之前我采用的方式是两个 github repo 的方式：&lt;/p>
&lt;p>一个叫 hugo-blog，用于存放 blog 的源文件&lt;/p>
&lt;p>一个叫 zhenfeng-zhu.github.io，用于存放生成之后的文件&lt;/p>
&lt;p>然后通过写一个 shell 脚本，将生成之后的文件推向 zhenfeng-zhu.github.io 仓库中，同时将 blog 的源文件也做了一个 backup。后来使用了一个 github action 的方式，
就不用在两个仓库中进行折腾，一切都由 github action 来做了。&lt;/p>
&lt;h1 id="方案">方案&lt;/h1>
&lt;h2 id="设置-workflow">设置 workflow&lt;/h2>
&lt;p>首先创建一个.github/workflows/gh-pages.yml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">github pages&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">main &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Set a branch to deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-18.04&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch Hugo themes (true OR recursive)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fetch-depth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Fetch all history for .GitInfo and .Lastmod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup Hugo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-hugo@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hugo-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;latest&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># extended: true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hugo --minify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">peaceiris/actions-gh-pages@v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">github_token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.GITHUB_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">publish_dir&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./public&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们看下这个 workflow 的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>name 就是 github pages&lt;/p>
&lt;/li>
&lt;li>
&lt;p>on 的意思代表，是什么行为会触发这个 action 的构建。
这里我们设置的是当 push 到 main 分支的时候进行构建。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jobs 就是具体的工作，这里指定了几个步骤：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>首先是在 Ubuntu 18.04 下进行构建&lt;/li>
&lt;li>这些步骤都是用的 actions/checkout@v2 模板进行，拉取 submodules。&lt;/li>
&lt;li>setup hugo：采用的是 peaceiris/actions-hugo@v2 模板&lt;/li>
&lt;li>build：简单的 hugo 命令&lt;/li>
&lt;li>deploy：采用 peaceiris/actions-gh-pages@v3 方式，把自己的 github token 也配置上。具体可以点进去看下这个步骤做了什么操作。&lt;/li>
&lt;/ul>
&lt;p>然后把博客的源文件，放在 main 分支里，当我们 push 之后，就会发现出现了一个 gh-pages 分支。&lt;/p>
&lt;h2 id="设置-github-pages">设置 github pages&lt;/h2>
&lt;p>打开该 repo 的 settings，选到 GitHub Pages。&lt;/p>
&lt;p>我们选择分支是 gh-pages 即可。&lt;/p></description></item><item><title>编程语言的世界观</title><link>https://example.com/p/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%96%E7%95%8C%E8%A7%82/</link><pubDate>Thu, 18 Feb 2021 13:05:31 +0800</pubDate><guid>https://example.com/p/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%96%E7%95%8C%E8%A7%82/</guid><description>&lt;h1 id="elixir">Elixir&lt;/h1>
&lt;ul>
&lt;li>everything is a process.&lt;/li>
&lt;li>process are strongly isolated.&lt;/li>
&lt;li>process creation and destruction is a lightweight operation.&lt;/li>
&lt;li>message passing is the only way for processes to interact.&lt;/li>
&lt;li>processes have unique names.&lt;/li>
&lt;li>if you know the name of a process you can send it a message.&lt;/li>
&lt;li>processes share no resources.&lt;/li>
&lt;li>error handling is non-local.&lt;/li>
&lt;li>processes do what they are supposed to do or fail.&lt;/li>
&lt;/ul>
&lt;h1 id="go">Go&lt;/h1>
&lt;ul>
&lt;li>simple, poetic, pithy&lt;/li>
&lt;li>don&amp;rsquo;t communicate by sharing memory, share memory by communicating&lt;/li>
&lt;li>concurrency is not parallelism&lt;/li>
&lt;li>channels orchestrate; mutexes serialize&lt;/li>
&lt;li>the bigger the interface, the weaker the abstraction&lt;/li>
&lt;li>make the zero value useful&lt;/li>
&lt;li>interface{} says nothing&lt;/li>
&lt;li>gofmt&amp;rsquo;s style is no one&amp;rsquo;s favorite, yet gofmt is everyone&amp;rsquo;s favorite&lt;/li>
&lt;li>A little copying is better than a little dependency&lt;/li>
&lt;/ul></description></item><item><title>如何建立指标体系</title><link>https://example.com/p/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB/</link><pubDate>Thu, 18 Feb 2021 12:48:34 +0800</pubDate><guid>https://example.com/p/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E6%8C%87%E6%A0%87%E4%BD%93%E7%B3%BB/</guid><description>&lt;h1 id="什么是指标体系">什么是指标体系&lt;/h1>
&lt;p>指标体系是在业务的不同阶段，分析师牵头与业务方协助，制定一套能从各个维度反映业务状况的待实施框架。&lt;/p>
&lt;h1 id="关键点">关键点&lt;/h1>
&lt;ul>
&lt;li>在业务的前期、中期和后期，指标体系是不一样的&lt;/li>
&lt;li>一定是由分析师牵头与业务方协助，而不是闭门造车&lt;/li>
&lt;li>从各个维度去反应业务的核心状况，指标有很多维度&lt;/li>
&lt;li>最后就是一个大的实施框架，一定要实施，否则就是浪费大家的时间&lt;/li>
&lt;/ul>
&lt;h1 id="指标选取的几个原则">指标选取的几个原则&lt;/h1>
&lt;ul>
&lt;li>根本性：对于核心数据一定要理解到位和准确，如果这里错了，后面基本就不用看。&lt;/li>
&lt;li>可理解性：所有指标要配上业务解释&lt;/li>
&lt;li>结构性：能够充分从各维度对业务进行解读，方便归因。&lt;/li>
&lt;/ul>
&lt;h1 id="建立步骤">建立步骤&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>理清业务阶段和方向
我们需要知道当前产品或者业务处于什么阶段，具体的业务方向是什么。一般都是分为三个阶段：
第一阶段：业务前期。在业务的前期更多的是想要快速推出来，有更多人去使用我们的产品。所以此时我们的指标体系应该更多的围绕用户量提升做各种维度的拆解
第二阶段：业务中期（快速发展期）。在业务中期，除了关注盘子的大小，还要看产品的健康度。
第三阶段：业务后期（成熟期）。主要看变现能力以及市场份额。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确定核心指标
找核心指标不是一件容易的事儿。
只能多花时间去考虑这个事儿。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指标核心维度拆解
核心指标的波动必然是由某种维度的波动引起，所以监控核心指标指标，本质是监控核心维度。
通用的拆解方法是先对核心指标进行公式计算，再按照业务路径或者业务模块去拆解。
核心指标的拆解，需要多和业务方进行沟通，把能够考虑的模块都考虑进去，基本上就能比较全面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指标宣贯、存档和落地
宣贯：实际上搭建号指标体系之后，要当面触达所有相关的业务接口人。
存档：同时对指标的口径和业务逻辑进行详细的描述存档，也就是指标口径归档
落地：落地就是建立核心指标的相关报表，实际工作中，报表会在埋点前建好，这样一旦版本上线就能立刻看到数据，这样各方的配合度就会很高。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>业务代码的成长机会</title><link>https://example.com/p/%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E6%88%90%E9%95%BF%E6%9C%BA%E4%BC%9A/</link><pubDate>Wed, 17 Feb 2021 17:45:40 +0800</pubDate><guid>https://example.com/p/%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%E7%9A%84%E6%88%90%E9%95%BF%E6%9C%BA%E4%BC%9A/</guid><description>&lt;p>对于大部分公司而言，能够写底层代码或者中间件代码的人总是有限的，写业务代码会面临更高的复杂度。这里分三个层次来看其中的机会：&lt;/p>
&lt;ul>
&lt;li>第一个层次，让代码写的不一样。可从代码规范、可读性、可扩展性等角度着手，这也是程序员的基本功。&lt;/li>
&lt;li>第二个层次，考虑业务问题和技术问题的匹配。可从写业务代码中理解需求，并做好分析设计。被动接收需求和实现接口，确实成长空间不大。&lt;/li>
&lt;li>第三个层次，总结相关方法体系，成为业务及技术双料专家。&lt;/li>
&lt;/ul></description></item><item><title>unix 哲学</title><link>https://example.com/p/unix-%E5%93%B2%E5%AD%A6/</link><pubDate>Wed, 17 Feb 2021 16:46:52 +0800</pubDate><guid>https://example.com/p/unix-%E5%93%B2%E5%AD%A6/</guid><description>&lt;ol>
&lt;li>让每个程序都做好一件事。要做一件新的工作，写一个新程序，而不是通过添加“功能”让老程序复杂化。&lt;/li>
&lt;li>期待每个程序的输出成为另一个程序的输入。不要将无关信息混入输出。避免使用严格的列数据或二进制输入格式。不要坚持交互式输入。&lt;/li>
&lt;li>设计和构建软件，甚至是操作系统，要尽早尝试，最好在几周内完成。不要犹豫，扔掉笨拙的部分，重建它们。&lt;/li>
&lt;li>优先使用工具来减轻编程任务，即使必须曲线救国编写工具，且在用完后很可能要扔掉大部分。&lt;/li>
&lt;/ol></description></item><item><title>Web 前端性能优化</title><link>https://example.com/p/web-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 20 Nov 2020 16:01:49 +0800</pubDate><guid>https://example.com/p/web-%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>&lt;p>一般来说 web 前端是指网站业务逻辑之前的部分，比如：浏览器加载、网站视图模型、图片服务、CDN 服务等等。web 前端优化主要从如下三个方面入手：&lt;/p>
&lt;h2 id="浏览器访问优化">浏览器访问优化&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>减少 http 请求&lt;/strong>&lt;/p>
&lt;p>http 协议是一个无状态的，每次请求都需要建立通信链路进行传输，在服务器端，一般每个请求都会分配一个线程去处理。&lt;/p>
&lt;p>减少 http 请求的主要手段是&lt;strong>合并 CSS&lt;/strong>、&lt;strong>合并 js&lt;/strong>、&lt;strong>合并图片&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用浏览器缓存&lt;/strong>&lt;/p>
&lt;p>css、js、Logo、图标等静态资源文件更新频率较低，可以将这些文件缓存在浏览器中。&lt;/p>
&lt;p>在更新 js 等文件的时候，一般不是将文件内容更新，而是生成一个新的文件，然后更新 html 的引用。&lt;/p>
&lt;p>更新静态资源的时候，也是要逐量更新，以避免用户浏览器的大量缓存失效，造成服务器负载增加、网络堵塞。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>启用压缩&lt;/strong>&lt;/p>
&lt;p>在服务器对文件压缩，然后在浏览器端解压缩，可以减少通信传输的数据量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>CSS 放在页面最上面，js 放在页面最下面&lt;/strong>&lt;/p>
&lt;p>浏览器会在下载完全部 CSS 之后才对整个页面进行渲染，而浏览器是在加载 js 之后就立即执行，有可能会阻塞整个页面。因此最好的做法就是把 CSS 放在最上面，js 放在最下面。但是如果是页面解析的时候就用到 js，也是要相应的 js 放在上面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>减少 cookie 传输&lt;/strong>&lt;/p>
&lt;p>cookie 会包含在每次请求和响应中，太大的 cookie 会影响数据传输，需要慎重考虑哪些数据写入 cookie 中。&lt;/p>
&lt;p>对于某些静态资源的访问，如 css 和 js 等，发送 cookie 没意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送 cookie。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="cdn-加速">CDN 加速&lt;/h2>
&lt;p>CDN（content distribute network，内容分发网络）的本质仍然是一个缓存。将缓存放在离用户最近的地方，使得用户可以以最快的速度获取数据。&lt;/p>
&lt;p>CDN 缓存的一般是静态资源，如图片、文件、CSS、js、静态网页等。&lt;/p>
&lt;h2 id="反向代理">反向代理&lt;/h2>
&lt;p>反向代理服务器位于网站中心机房的一侧，代理网站 web 服务器接收 http 请求。&lt;/p>
&lt;p>反向代理可以在一定程度上保护网站安全，来自互联网的访问请求必须经过代理服务器，相当于在 web 服务器和攻击之间加了一个屏障。&lt;/p>
&lt;p>反向代理也可以通过配置缓存，静态资源被缓存在反向代理服务器，当用户访问时，可以从反向代理服务器上返回。有些网站也会将部分动态内容缓存在代理服务器上，通过内部通知机制，更新缓存。&lt;/p>
&lt;p>反向代理也可以实现负载均衡的功能。&lt;/p>
&lt;h2 id="写在最后">写在最后&lt;/h2>
&lt;p>可以发现，在 web 前端性能优化的时候，提到最多的就是缓存。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>网站性能优化第一定律：优先考虑使用缓存！&lt;/strong>&lt;/p>
&lt;/blockquote></description></item><item><title>大型网站发展历程</title><link>https://example.com/p/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</link><pubDate>Fri, 20 Nov 2020 16:00:59 +0800</pubDate><guid>https://example.com/p/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</guid><description>&lt;p>前几天跟一个朋友聊了一些关于网站缓存分布式的一些东西，发现自己的知识还是太过贫瘠。理论+协议，这是现在我亟待加强的。这个周末买了两本关于分布式网站的书，本着好记性不如烂笔头，便有了这样一系列的文章。希望一同分享，也请多指教。&lt;/p>
&lt;blockquote>
&lt;p>code less, play more!&lt;/p>
&lt;/blockquote>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>这个世界上没有哪个网站从诞生起就是大型网站；也没有哪个网站第一次发布的时候就拥有庞大的用户，高并发的访问，海量的数据；大型网站都是从小型网站发展而来。网站的价值在于它能给用户提供什么家宅，在于网站能做什么，而不在于它是怎么做的，所以网站在小的时候就去追求网站的架构是舍本逐末，得不偿失的。小型网站最需要做的就是为用户提供更好的服务来创造价值，得到用户认可，活下去，野蛮生长。&lt;/p>
&lt;h2 id="大型网站软件系统的特点">大型网站软件系统的特点&lt;/h2>
&lt;ul>
&lt;li>高并发，大流量&lt;/li>
&lt;li>高可用&lt;/li>
&lt;li>海量数据&lt;/li>
&lt;li>用户分布广泛，网络情况复杂&lt;/li>
&lt;li>安全环境恶劣&lt;/li>
&lt;li>需求快速变更，发布平频繁&lt;/li>
&lt;li>渐进式发展&lt;/li>
&lt;/ul>
&lt;h3 id="大型网站的发展历程">大型网站的发展历程&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>初始阶段的网站架构&lt;/strong>&lt;/p>
&lt;p>最开始没有多少人访问，所以应用程序，数据库，文件都在同一台机器上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>应用服务器和数据服务分离&lt;/strong>&lt;/p>
&lt;p>应用和数据分离之后，一般需要三台服务器。应用服务器，文件服务器和数据库服务器，这三种服务器对于硬件要求各不相同。&lt;/p>
&lt;ul>
&lt;li>应用服务器：更强大的 CPU&lt;/li>
&lt;li>数据库服务器：更快速的磁盘和更大的内存&lt;/li>
&lt;li>文件服务器：容量更大的硬盘&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用缓存改善性能&lt;/strong>&lt;/p>
&lt;p>网站的访问也遵循二八定律：80%的业务集中在 20%的数据上。因此可以把这一小部分数据缓存在内存中，减少数据库的访问压力。&lt;/p>
&lt;p>网站的缓存可以分为两种：&lt;/p>
&lt;ul>
&lt;li>本地缓存：缓存在应用服务器上。本地缓存访问速度快，但是受制于内存限制，缓存数量有限，而且也会出现和应用程序争抢内存的情况。&lt;/li>
&lt;li>远程分布式缓存：以集群的方式，缓存在大内存的专用缓存服务器。可以在理论上做到不受内存容量限制。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用应用服务器集群提高并发能力&lt;/strong>&lt;/p>
&lt;p>当一台服务器的处理能力和存储空间不足的时候，不要企图更换更强大的服务器。对于大型网站来说，不管多么强大的服务器，都满足不了网站持续增长的业务需求。此时就可以考虑集群的方式，通过负载均衡调度服务器，可以将来自用户的请求分发到应用服务器集群中的任何一台服务器上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数据库读写分离&lt;/strong>&lt;/p>
&lt;p>使用缓存后，大部分的数据读操作访问都可以不通过数据库完成，但是仍有部分读操作（如缓存过期，缓存不命中）和全部的写操作需要访问数据库。&lt;/p>
&lt;p>目前大部分数据库都提供主从热备的功能，在写数据的时候，访问主库，主库通过主从复制机制将数据更新同步至从数据库，在读的时候就可以通过从数据库获取数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用反向代理和 CDN 加速网站响应&lt;/strong>&lt;/p>
&lt;p>在《web 性能权威指南》中有讲到，网站性能的瓶颈，大部分时间都浪费在 TCP 的握手和传输上。因此可以通过 CDN 和反向代理的方式来加快响应。&lt;/p>
&lt;p>CDN 和反向代理的本质都是通过缓存，不同的主要是：&lt;/p>
&lt;ul>
&lt;li>CDN 部署在服务器器上的机房，用户在请求时，从距离自己最近的机房获取数据。&lt;/li>
&lt;li>反向代理是部署在中心机房，用户请求到达中心机房之后，首先访问的服务器是反向代理的拂去其，如果反向代理服务器中缓存着用户请求的额资源，就将其返回给用户。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用分布式文件系统和分布式数据库系统&lt;/strong>&lt;/p>
&lt;p>随着业务的发展，依旧不能满足的时候，就采用分布式的文件和分布式的数据库系统。&lt;/p>
&lt;p>分布式数据库是数据库拆分的最后手段，只用在单表数据规模特别庞大的时候才使用。更常用的拆分手段是业务分库，将不同的业务数据存储在不同的数据库中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>使用 NoSQL 和搜索引擎&lt;/strong>&lt;/p>
&lt;p>对数据检索和存储越来越复杂的时候，就可以采用一些非关系型数据库如 HBase 和非数据库查询技术如 ElasticSearch 等等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>业务拆分&lt;/strong>&lt;/p>
&lt;p>业务场景复杂的时候，一般讲整个网站业务分为不同的产品线，如首页，订单，买家，卖家等等。&lt;/p>
&lt;p>技术上也会根据产品线划分，将一个网站分为许多不同的应用，每个应用独立部署维护，应用之间可以通过一个超链接建立联系，也可以通过消息队列进行数据分发，当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分布式服务&lt;/strong>&lt;/p>
&lt;p>随着业务越拆越小，存储越来越大，维护越来越困难。此时就可以将相同业务操作的提取出来，独立部署。应用系统只需要管理用户界面，通过分布式服务调用共同的业务服务完成具体的业务操作。也就是最近概念越来越火的——微服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>云计算&lt;/strong>&lt;/p>
&lt;p>大型网站架构解决了海量数据库管理和高并发事务处理，可以将这些解决方案应用到网站自身以外的业务上。现在像阿里云，亚马逊等云计算平台，将计算作为一种基础资源出售，中小网站不需要关系技术架构等问题，只需要按需付费，就可以使网站随着业务的增长获得更大的存储和计算资源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>未来&lt;/strong>&lt;/p>
&lt;p>未来还能变成什么样子，我也不清楚，也许以后都不是开发人员来维护了，所有的这些都是 AI 来完成，程序员要做的就是如何完善 AI。也许 AI 发展到最后，人类都不需要存在了吧。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>网站的技术是为业务而存在的，除此以外毫无意义。在技术选型和架构设计中，脱离业务发展实际，一味的追求新技术，可能会把技术发展引入一个歪路。&lt;/p>
&lt;p>技术是用来解决业务的问题，而技术不可能将所有问题都解决掉，涉及业务自身的问题，还是要通过业务手段去解决。&lt;/p></description></item><item><title>Geth 私链</title><link>https://example.com/p/geth-%E7%A7%81%E9%93%BE/</link><pubDate>Fri, 20 Nov 2020 15:59:22 +0800</pubDate><guid>https://example.com/p/geth-%E7%A7%81%E9%93%BE/</guid><description>&lt;p>在上一篇文章&lt;a class="link" href="https://github.com/zhenfeng-zhu/articles/issues/1" target="_blank" rel="noopener"
>《Geth 入门》&lt;/a>中，主要讲了开发环境下以太坊 geth 客户端的使用。今天简单说下私链的配置。&lt;/p>
&lt;h2 id="genesisjson">genesis.json&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;config&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;chainId&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;homesteadBlock&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;eip155Block&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;eip158Block&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;coinbase&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x0000000000000000000000000000000000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;difficulty&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x40000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;extraData&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;gasLimit&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0xffffffff&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nonce&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x0000000000000042&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mixhash&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;parentHash&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timestamp&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0x00&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;alloc&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>nonce&lt;/td>
&lt;td>nonce 就是一个 64 位随机数，用于挖矿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mixhash&lt;/td>
&lt;td>与 nonce 配合用于挖矿，由上一个区块的一部分生成的 hash&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>difficulty&lt;/td>
&lt;td>设置当前区块的难度，如果难度过大，cpu 挖矿就很难，这里设置较小难度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>alloc&lt;/td>
&lt;td>用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>coinbase&lt;/td>
&lt;td>矿工的账号，随便填&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>timestamp&lt;/td>
&lt;td>设置创世块的时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parentHash&lt;/td>
&lt;td>上一个区块的 hash 值，因为是创世块，所以这个值是 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extraData&lt;/td>
&lt;td>附加信息，随便填，可以填你的个性信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gasLimit&lt;/td>
&lt;td>该值设置对 GAS 的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们是私有链，所以填最大。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>config&lt;/td>
&lt;td>Fatal: failed to write genesis block: genesis has no chain configuration ：这个错误信息，就是说，你的 json 文件中，缺少 config 部分。看到这个信息，我们不需要把 geth 退回到 v1.5 版本，而是需要加上 config 部分。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="创建创世区块">创建创世区块&lt;/h2>
&lt;p>打开终端，输入以下命令，在当前目录下创建创世区块。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">geth --datadir &amp;#34;./&amp;#34; init genesis.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现在当前目录新增了两个文件夹：&lt;/p>
&lt;ul>
&lt;li>geth 中保存的是区块链的相关数据&lt;/li>
&lt;li>keystore 中保存的是该链条中的用户信息&lt;/li>
&lt;/ul>
&lt;h2 id="启动私链">启动私链&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">geth --datadir &amp;#34;./&amp;#34; --nodiscover console 2&amp;gt;&amp;gt;geth.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>--datadir&lt;/code>：代表以太坊私链的创世区块的地址&lt;/li>
&lt;li>&lt;code>--nodiscover&lt;/code>：私链不要让公链上的节点发现&lt;/li>
&lt;/ul>
&lt;p>也可将此命令写入一个 shell 文件中，每次启动的时候执行脚本就可以了。&lt;/p>
&lt;p>输入此命令后，就可以进入到 geth 的控制台中了，在这里可以进行挖矿，智能合约的编写。&lt;/p></description></item><item><title>Geth</title><link>https://example.com/p/geth/</link><pubDate>Fri, 20 Nov 2020 10:07:39 +0800</pubDate><guid>https://example.com/p/geth/</guid><description>&lt;h2 id="geth-简介">Geth 简介&lt;/h2>
&lt;p>&lt;strong>go-ethereum&lt;/strong>&lt;/p>
&lt;p>go-ethereum 客户端通常被称为 geth，它是个命令行界面，执行在 Go 上实现的完整以太坊节点。通过安装和运行 geth，可以参与到以太坊前台实时网络并进行以下操作：&lt;/p>
&lt;ul>
&lt;li>挖掘真的以太币&lt;/li>
&lt;li>在不同地址间转移资金&lt;/li>
&lt;li>创建合约，发送交易&lt;/li>
&lt;li>探索区块历史&lt;/li>
&lt;li>及很多其他&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>网站: &lt;a class="link" href="http://ethereum.github.io/go-ethereum/" target="_blank" rel="noopener"
>http://ethereum.github.io/go-ethereum/&lt;/a>
Github: &lt;a class="link" href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener"
>https://github.com/ethereum/go-ethereum&lt;/a>
维基百科: &lt;a class="link" href="https://github.com/ethereum/go-ethereum/wiki/geth" target="_blank" rel="noopener"
>https://github.com/ethereum/go-ethereum/wiki/geth&lt;/a>
Gitter: &lt;a class="link" href="https://gitter.im/ethereum/go-ethereum" target="_blank" rel="noopener"
>https://gitter.im/ethereum/go-ethereum&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="mac-下安装-geth">mac 下安装 geth&lt;/h2>
&lt;ol>
&lt;li>首先安装 homebrew，&lt;/li>
&lt;li>使用 brew 安装即可。在安装 geth 的时候，会将 go 也安装上。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">brew tap ethereum/ethereum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install ethereum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>
&lt;p>在命令行输入 geth —help，如果出现&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">zhuzhenengdeMBP:blog zhuzhenfeng$ geth --help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> geth - the go-ethereum &lt;span class="nb">command&lt;/span> line interface
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Copyright 2013-2017 The go-ethereum Authors
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">USAGE:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> geth &lt;span class="o">[&lt;/span>options&lt;span class="o">]&lt;/span> &lt;span class="nb">command&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="nb">command&lt;/span> options&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>arguments...&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VERSION:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1.7.3-unstable-eea996e4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>证明安装成功。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="使用-geth">使用 Geth&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>打开终端，输入以下命令，以开发的方式启动 geth&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">geth --datadir “~/Documents/github/ethfans/ethdev” --dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ndash;datadir 是指定 geth 的开发目录，引号的路径可以随便设置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新开一个终端，执行以下命令，进入 geth 的控制台&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">geth --dev console 2&amp;gt;&amp;gt;file_to_log_output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该命令会将在 console 中执行的命令，生成一个文本保存在 file_to_log_output 文件中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再新开一个终端，查看打印出来的日志&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tail -f file_to_log_output
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>切换到 geth 控制台终端，geth 有如下常用的命令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>eth.accounts&lt;/code>&lt;/p>
&lt;p>查看有什么账户&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>personal.newAccount('密码')&lt;/code>&lt;/p>
&lt;p>创建一个账户&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>user1=eth.accounts[0]&lt;/code>&lt;/p>
&lt;p>可以把账户赋值给某一个变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>eth.getBalance(user1)&lt;/code>&lt;/p>
&lt;p>获取某一账户的余额&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>miner.start()&lt;/code>&lt;/p>
&lt;p>启动挖矿程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>miner.stop()&lt;/code>&lt;/p>
&lt;p>停止挖矿程序&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>eth.sendTransaction({from: user1,to: user2,value: web3.toWei(3,&amp;quot;ether&amp;quot;)})&lt;/code>&lt;/p>
&lt;p>从 user1 向 user2 转以太币&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>personal.unlockAccount(user1, '密码')&lt;/code>&lt;/p>
&lt;p>解锁账户&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>以太坊启动挖矿程序的时候，头结点会产生以太币，在进行转账操作之后，必须进行挖矿才会使交易成功。&lt;/p></description></item><item><title>hive 常用函数</title><link>https://example.com/p/hive-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link><pubDate>Thu, 16 Apr 2020 17:59:03 +0800</pubDate><guid>https://example.com/p/hive-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="json-字符串处理">json 字符串处理&lt;/h1>
&lt;ul>
&lt;li>get_json_object&lt;/li>
&lt;li>lateral_view&lt;/li>
&lt;li>explode&lt;/li>
&lt;li>substr&lt;/li>
&lt;li>json_tuple&lt;/li>
&lt;/ul>
&lt;h2 id="get_json_object">get_json_object&lt;/h2>
&lt;p>get_json_object(string json_string, string path)&lt;/p>
&lt;p>解析 json 字符串 json_string，返回 path 指定的内容。如果输入的 json 字符串是无效的，那么返回 null。&lt;/p>
&lt;p>path 就是 &amp;lsquo;$.字段名&amp;rsquo;。&lt;/p>
&lt;p>如果该字段的 value 也是 json，就可以一直点下去。&lt;/p>
&lt;p>如果该字段的 value 是数组，就可以用 &amp;lsquo;$.字段名[0]&amp;rsquo;，类似这样下标的形式去访问。&lt;/p>
&lt;h2 id="explode">explode&lt;/h2>
&lt;p>explode(array)&lt;/p>
&lt;p>经常和 lateral view 一起使用，将数组中的元素拆分成多行显示。&lt;/p>
&lt;h2 id="substr">substr&lt;/h2>
&lt;p>substr(string A, int start, int len)&lt;/p>
&lt;p>返回字符串 A 从 start 位置开始，长度为 len 的字符串&lt;/p>
&lt;h2 id="json_tuple">json_tuple&lt;/h2>
&lt;p>json_tuple(string json_string, col1, col2, &amp;hellip;)&lt;/p>
&lt;p>经常和 lateral view 一起使用，同时解析多个 json 字符串中的多个字段。&lt;/p>
&lt;h1 id="parse_url-regexp_replace-regexp_extract">parse_url, regexp_replace, regexp_extract&lt;/h1>
&lt;h2 id="parse_url">parse_url&lt;/h2>
&lt;p>parse_url(string urlString, string partToExtract, string keyToExtract)&lt;/p>
&lt;p>返回 url 中的指定部分，如 host，path，query 等等。&lt;/p>
&lt;p>partToExtract 是个枚举值：HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO。&lt;/p>
&lt;h2 id="regex_replace">regex_replace&lt;/h2>
&lt;p>regex_extract(string a, string b, string c)&lt;/p>
&lt;p>将字符串 a 中符合正在表达式 b 的部分替换为 c&lt;/p>
&lt;h1 id="json_to_struct">json_to_struct&lt;/h1>
&lt;p>json_to_struct(json, &amp;lsquo;array 或者 map 等&amp;rsquo;)&lt;/p>
&lt;h1 id="union_map">union_map&lt;/h1>
&lt;p>union_map(map(k, v))&lt;/p>
&lt;h1 id="lateral-view">lateral view&lt;/h1>
&lt;h1 id="from_unix_time">from_unix_time&lt;/h1>
&lt;p>from_unix_time(unix 时间戳, &amp;lsquo;yyyyMMddHH&amp;rsquo;)&lt;/p>
&lt;h1 id="row_number">row_number&lt;/h1>
&lt;p>row_number() over (partition by 字段 a order by 计算项 b desc ) rank&lt;/p>
&lt;p>hive 中的分组和组内排序&lt;/p>
&lt;ul>
&lt;li>rank 是排序的别名&lt;/li>
&lt;li>partition by： 类似于 hive 的建表，分区的意思&lt;/li>
&lt;li>order by： 排序，默认是升序，加 desc 降序&lt;/li>
&lt;/ul>
&lt;p>这个意思就是按字段 a 分区，对计算项 b 进行降序排列&lt;/p>
&lt;p>这个是经常用到计算分区中的排序问题。&lt;/p>
&lt;h1 id="coalesce">coalesce&lt;/h1>
&lt;p>非空查找函数&lt;/p>
&lt;p>coalesce(v1, v2, v3, &amp;hellip;)&lt;/p>
&lt;p>返回参数中的第一个非空值，如果所有值都是 NULL，返回 NULL&lt;/p></description></item><item><title>mysql 的学习</title><link>https://example.com/p/mysql-%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 16 Apr 2020 17:34:30 +0800</pubDate><guid>https://example.com/p/mysql-%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>&lt;h1 id="sql-条件语句">SQL 条件语句&lt;/h1>
&lt;h2 id="if">IF&lt;/h2>
&lt;p>if(exp1, exp2, exp3)&lt;/p>
&lt;p>exp1 是条件，条件为 true 的话，是 exp2，否则是 exp3&lt;/p>
&lt;h2 id="case-when">case when&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">when&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">条件&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">then&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">结果&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">其他结果&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">end&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">别名&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ifnull">IFNULL&lt;/h2>
&lt;p>IFNULL(exp1, exp2)&lt;/p>
&lt;p>在 exp1 的值不为 null 的情况下，返回 exp1，如果 exp1 位 null，返回 exp2 的值。&lt;/p></description></item><item><title>clickhouse</title><link>https://example.com/p/clickhouse/</link><pubDate>Sat, 12 Oct 2019 06:48:01 +0000</pubDate><guid>https://example.com/p/clickhouse/</guid><description>&lt;h1 id="clickhouse">ClickHouse&lt;/h1>
&lt;p>ClickHouse 是一个用于联机分析（Online Analytical Processing：OLAP）的列式数据库管理系统(DBMS)。通过使用 OLAP 工具，用户能够从多个角度交互地分析多维数据。&lt;/p>
&lt;p>OLAP 由三个基本的分析操作组成：上卷（roll-up）、钻取（drill-down）、切片（slicing）和切块（dicing）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>上卷（roll-up）：涉及可以在一个或多个维度中累积和计算的数据的聚合。例如，所有的销售办事处汇总到销售部门，以预测销售趋势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>钻取（drill-down）：是一种允许用户浏览详细信息的技术。例如，用户可以查看组成一个地区销售额的单个产品的销售额。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切片（slicing）和切块（dicing）：用户可以从 OLAP 多维数据集中取出（切片）一组特定的数据，并从不同的角度查看（切块）切片。这些角度有时被称为维度（例如按销售人员、按日期、按客户、按产品或按地区查看相同的销售情况等）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>传统行式数据库中，处于同一行中的数据总是被物理的存在一起。列式数据库总是将同一列的数据存储在一起，不同列的数据分开存储。&lt;/p>
&lt;p>行式数据库：mysql，pg&lt;/p>
&lt;p>列式数据库：vertica，druid&lt;/p>
&lt;h2 id="olap-的关键特征">OLAP 的关键特征&lt;/h2>
&lt;ul>
&lt;li>大多是读请求&lt;/li>
&lt;li>数据总是以相当大的批（&amp;gt;1000w）进行写入&lt;/li>
&lt;li>不修改已经添加的数据&lt;/li>
&lt;li>每次查询都从数据库中读取大量的行，但是同时又仅需要少量的列&lt;/li>
&lt;li>宽表，即每个表包含大量的列&lt;/li>
&lt;li>较少的查询（通常每台服务器每秒数百个查询或更少）&lt;/li>
&lt;li>对于简单的查询，允许延迟大约 50ms&lt;/li>
&lt;li>列中的数据相对较小：数字和短字符串&lt;/li>
&lt;li>处理单个查询时需要高吞吐量（每个服务器每秒高达数十亿行）&lt;/li>
&lt;li>事务不是必须的&lt;/li>
&lt;li>对数据一致性要求低&lt;/li>
&lt;li>每一个查询除了一个大表外都很小&lt;/li>
&lt;li>查询结果明显小于数据源，换句话说，数据被过滤或者聚合之后能够被放在单台服务器的内存中&lt;/li>
&lt;/ul>
&lt;h2 id="列式数据库更适合-olap-场景">列式数据库更适合 OLAP 场景&lt;/h2>
&lt;h3 id="inputoutput">Input/Output&lt;/h3>
&lt;ol>
&lt;li>分析类的查询，通常只需要读取表的一小部分列。&lt;/li>
&lt;li>数据总是打包成批量读取，列压缩更容易&lt;/li>
&lt;li>IO 降低了&lt;/li>
&lt;/ol>
&lt;h3 id="cpu">CPU&lt;/h3>
&lt;p>由于执行一个查询需要处理大量的行，因此在整个 Vector 上执行所有操作将比在每一行上执行所有操作更加高效。同时这将有助于实现一个几乎没有调用成本的查询引擎。&lt;/p>
&lt;ol>
&lt;li>Vector 引擎&lt;/li>
&lt;li>代码生成&lt;/li>
&lt;/ol>
&lt;p>为了提高 CPU 效率，查询语言必须是声明型的(SQL 或 MDX)， 或者至少一个 Vector(J，K)。 查询应该只包含隐式循环，允许进行优化。&lt;/p>
&lt;h1 id="clickhouse-的独特功能">clickhouse 的独特功能&lt;/h1>
&lt;h2 id="真正的列式数据库管理系统">真正的列式数据库管理系统&lt;/h2></description></item><item><title>每日学习 2</title><link>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0-2/</link><pubDate>Sun, 29 Sep 2019 02:19:03 +0000</pubDate><guid>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0-2/</guid><description>&lt;p>&lt;a class="link" href="https://mubu.com/doc/oHlgG0FSu0" target="_blank" rel="noopener"
>https://mubu.com/doc/oHlgG0FSu0&lt;/a>&lt;/p></description></item><item><title>每日学习-2019-09-24</title><link>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0-2019-09-24/</link><pubDate>Sun, 29 Sep 2019 02:17:46 +0000</pubDate><guid>https://example.com/p/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0-2019-09-24/</guid><description>&lt;h1 id="开言英语">开言英语&lt;/h1>
&lt;h1 id="极客时间">极客时间&lt;/h1>
&lt;h2 id="编译原理之美">编译原理之美&lt;/h2>
&lt;h3 id="语义分析下如何做上下文相关情况的处理">语义分析（下）：如何做上下文相关情况的处理&lt;/h3>
&lt;ul>
&lt;li>语义分析的本质，就是针对上下文相关的情况做处理。
&lt;ul>
&lt;li>引用消解：不同作用域里可能有相同名称的变量，必须找到正确的那个，这个过程就是引用消解。
&lt;ul>
&lt;li>函数引用消解&lt;/li>
&lt;li>命名空间引用消解&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>左值和右值
&lt;ul>
&lt;li>左值取的是变量的地址或者说是变量的引用，获得地址之后，我们就可以把新值写进去。&lt;/li>
&lt;li>右值就是我们常说的值。&lt;/li>
&lt;li>不是所有的表达式都能生成一个合格的左值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>属性计算
&lt;ul>
&lt;li>上下文分析或者说语义分析的一种算法。&lt;/li>
&lt;li>属性文法的主要思路是计算机科学的重要开拓者，是在上下文无关文法的基础上做了一些增强，使之可以计算属性值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>过程
&lt;ul>
&lt;li>类型和作用域解析&lt;/li>
&lt;li>类型的消解&lt;/li>
&lt;li>引用的消解和 S 属性的类型推导&lt;/li>
&lt;li>做类型检查&lt;/li>
&lt;li>做一些语义合法性检查&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="趣谈-linux-操作系统">趣谈 Linux 操作系统&lt;/h2>
&lt;h3 id="namespace-技术内部创业公司应该独立运营">Namespace 技术：内部创业公司应该独立运营&lt;/h3>
&lt;p>为了隔离不同类型的资源，Linux 内核里面有如下几种不同类型的 namespace：&lt;/p>
&lt;ul>
&lt;li>UTS，表示不同的 namespace 可以配置不同的 hostname&lt;/li>
&lt;li>User，可以配置不同的用户和组&lt;/li>
&lt;li>Mount，文件系统挂载点是隔离的&lt;/li>
&lt;li>PID，有完全独立的 pid&lt;/li>
&lt;li>Network，有独立的网络协议栈&lt;/li>
&lt;/ul></description></item><item><title>tmux</title><link>https://example.com/p/tmux/</link><pubDate>Wed, 28 Aug 2019 12:03:46 +0000</pubDate><guid>https://example.com/p/tmux/</guid><description>&lt;p>折腾一下 tmux&lt;/p>
&lt;h1 id="安装">安装&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install tmux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="概念">概念&lt;/h1>
&lt;ul>
&lt;li>session：理解为一个会话，持久保存工作状态。&lt;/li>
&lt;li>window：可以理解为我们常说的 tab 页。&lt;/li>
&lt;li>pane：一个 window 被分成若干个 pane，理解为 iterm 的分屏。&lt;/li>
&lt;/ul>
&lt;h1 id="session">session&lt;/h1>
&lt;p>新建&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tmux new -s your-session-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>断开&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tmux detach
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>恢复&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tmux attach-session -t your-session-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">或者
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmux a -t your-session-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关闭&lt;/p>
&lt;ul>
&lt;li>kill-server&lt;/li>
&lt;li>kill-session&lt;/li>
&lt;li>kill-window&lt;/li>
&lt;li>kill-pane&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tmux kill-session -t your-session-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmux kill-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tmux list-session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tmux ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="tmux-的基础配置">tmux 的基础配置&lt;/h1>
&lt;p>&lt;code>prefix&lt;/code> 是 tmux 的前缀键，默认是 ctrl+b 。只有按下前缀键，才会激活 tmux，然后再按其他的键进行 tmux 操作。这样可以避免与其他应用的快捷键进行冲突。&lt;/p>
&lt;h2 id="配置前缀">配置前缀&lt;/h2>
&lt;p>需要去 tmux.conf 中去配置&lt;/p>
&lt;h2 id="分屏">分屏&lt;/h2>
&lt;p>水平分屏：prefix+&amp;quot;，前缀键加引号
垂直分屏：prefix+%，前缀键加百分号&lt;/p></description></item><item><title>crystal 开发环境</title><link>https://example.com/p/crystal-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 27 Aug 2019 14:03:12 +0000</pubDate><guid>https://example.com/p/crystal-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>&lt;p>突然搞明白了 crystal 的 vscode 插件的正确使用姿势，记录一下。&lt;/p>
&lt;h1 id="安装-crystal">安装 crystal&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install crystal
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="安装-vscode-插件">安装 vscode 插件&lt;/h1>
&lt;p>&lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=faustinoaq.crystal-lang" target="_blank" rel="noopener"
>https://marketplace.visualstudio.com/items?itemName=faustinoaq.crystal-lang&lt;/a>&lt;/p>
&lt;h1 id="安装-scry">安装 scry&lt;/h1>
&lt;p>scry 是 crystal 的 language server 的 client 工具，在本地安装 scry 就可以做到代码跳转了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/crystal-lang-tools/scry.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd scry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ shards build -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Dependencies are satisfied
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Building: scry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">crystal build -o /Users/lucas/Documents/demos/crystal/scry/bin/scry src/scry.cr
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>/Users/lucas/Documents/demos/crystal/scry/bin/scry 就是编译出来的二进制的路径&lt;/p>
&lt;h1 id="配置插件">配置插件&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.compiler&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;crystal&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.server&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;/Users/lucas/Documents/demos/crystal/scry/bin/scry&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.maxNumberOfProblems&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.mainFile&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;${workspaceRoot}/src/main.cr&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.processesLimit&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.hover&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.problems&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;build&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.implementations&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.completion&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;crystal-lang.logLevel&amp;#34;&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="s2">&amp;#34;info&amp;#34;&lt;/span>&lt;span class="err">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把上面的配置加到 vscode 的 settings 文件中，就可以愉快的开发啦。&lt;/p></description></item><item><title>crystal 简介</title><link>https://example.com/p/crystal-%E7%AE%80%E4%BB%8B/</link><pubDate>Tue, 27 Aug 2019 02:14:18 +0000</pubDate><guid>https://example.com/p/crystal-%E7%AE%80%E4%BB%8B/</guid><description>&lt;p>关注 crystal 也有一段时间了，看到多线程的 pr 已经提了，今天简单写一下。&lt;/p>
&lt;blockquote>
&lt;p>Fast as C, Slick as Ruby&lt;/p>
&lt;/blockquote>
&lt;h1 id="语法">语法&lt;/h1>
&lt;p>crystal 的语法和 Ruby 比较类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A very basic HTTP server&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">require&lt;/span> &lt;span class="s2">&amp;#34;http/server&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">HTTP&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;text/plain&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">print&lt;/span> &lt;span class="s2">&amp;#34;Hello world, got &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">context&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">puts&lt;/span> &lt;span class="s2">&amp;#34;Listening on http://127.0.0.1:8080&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">server&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="类型系统">类型系统&lt;/h1>
&lt;p>crystal 的一大卖点就是静态类型系统，但是写起来又和脚本语言类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">shout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Notice that both Int32 and String respond_to `to_s`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upcase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">ENV&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;FOO&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># =&amp;gt; (Int32 | String)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">typeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">shout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1"># =&amp;gt; String&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="空引用检查">空引用检查&lt;/h1>
&lt;p>crystal 可以在编译的时候检查空引用，避免出现空指针异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">rand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">my_string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">puts&lt;/span> &lt;span class="n">my_string&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upcase&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果运行上述的代码，执行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ crystal hello_world.cr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Error in hello_world.cr:5: undefined method &lt;span class="s1">&amp;#39;upcase&amp;#39;&lt;/span> &lt;span class="k">for&lt;/span> Nil &lt;span class="o">(&lt;/span>compile-time &lt;span class="nb">type&lt;/span> is &lt;span class="o">(&lt;/span>String &lt;span class="p">|&lt;/span> Nil&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">puts my_string.upcase
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="宏">宏&lt;/h1>
&lt;p>另一个重要的特性是宏。通过宏，可以实现向 ruby 那么强大的元编程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">has_instance_var?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span> &lt;span class="vi">@type&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">instance_vars&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="o">&amp;amp;.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stringify&lt;/span> &lt;span class="p">}}&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">includes?&lt;/span> &lt;span class="nb">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">has_instance_var?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#=&amp;gt; true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">has_instance_var?&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;birthday&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">#=&amp;gt; false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="并发">并发&lt;/h1>
&lt;p>crystal 的并发是通过绿色线程实现的，即 fibers。和 Go 的并发模式很像，也是基于 channel 的 CSP 模型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="n">channel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Channel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="no">Int32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">total_lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">Dir&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">glob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;*.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">files&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">each&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="o">|&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">spawn&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lines&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">File&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lines&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">channel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">send&lt;/span> &lt;span class="n">lines&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">files&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total_lines&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">receive&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">puts&lt;/span> &lt;span class="n">total_lines&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="c-绑定">C 绑定&lt;/h1>
&lt;p>C 语言一般用来实现比较底层的系统，而且 C 的生态丰富，一般现代语言都会提供 C 绑定，来复用 C 的生态。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Fragment of the BigInt implementation that uses GMP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="no">Link&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gmp&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">lib&lt;/span> &lt;span class="no">LibGMP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">alias&lt;/span> &lt;span class="no">Int&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">LibC&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">alias&lt;/span> &lt;span class="no">ULong&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">LibC&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="no">ULong&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">struct&lt;/span> &lt;span class="no">MPZ&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_mp_alloc&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Int32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_mp_size&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Int32&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_mp_d&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">ULong&lt;/span>&lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fun&lt;/span> &lt;span class="n">init_set_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__gmpz_init_set_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rop&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">MPZ&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">UInt8&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">base&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fun&lt;/span> &lt;span class="n">cmp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">__gmpz_cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">op1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">MPZ&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">op2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">MPZ&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">struct&lt;/span> &lt;span class="no">BigInt&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="no">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">initialize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">base&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">err&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="no">LibGMP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">init_set_str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="vi">@mpz&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">base&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="no">ArgumentError&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;invalid BigInt: &lt;/span>&lt;span class="si">#{&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">&amp;lt;=&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">other&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="no">BigInt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="no">LibGMP&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mpz&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">other&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="依赖管理">依赖管理&lt;/h1>
&lt;p>任何一个偏工程性的语言，都会提供一个包管理系统。crystal 的包管理是 shards，其实和 go module 类似。这种项目级别的包管理其实更为实用一些。&lt;/p>
&lt;p>但是 go 的任何一个项目，其实都可以是一个包，crystal 还是会有一些限制的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ruby" data-lang="ruby">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">my&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">project&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">license&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="no">MIT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">crystal&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="ss">dependencies&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">mysql&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">github&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">crystal&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">crystal&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="ss">version&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">~&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>socket</title><link>https://example.com/p/socket/</link><pubDate>Mon, 26 Aug 2019 06:54:14 +0000</pubDate><guid>https://example.com/p/socket/</guid><description>&lt;h1 id="socket">Socket&lt;/h1>
&lt;h1 id="网络模型">网络模型&lt;/h1>
&lt;h2 id="osi-七层模型">osi 七层模型&lt;/h2>
&lt;ul>
&lt;li>应用层&lt;/li>
&lt;li>表示层&lt;/li>
&lt;li>会话层&lt;/li>
&lt;li>传输层&lt;/li>
&lt;li>网络层&lt;/li>
&lt;li>数据链路层&lt;/li>
&lt;li>物理层&lt;/li>
&lt;/ul>
&lt;h2 id="对应的-tcpip-就是">对应的 tcpip 就是&lt;/h2>
&lt;ul>
&lt;li>应用层
&lt;ul>
&lt;li>dns&lt;/li>
&lt;li>http&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>传输层
&lt;ul>
&lt;li>icmp&lt;/li>
&lt;li>tcp&lt;/li>
&lt;li>udp&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ip 层
&lt;ul>
&lt;li>ipv4&lt;/li>
&lt;li>ipv6&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mac 层
&lt;ul>
&lt;li>arp&lt;/li>
&lt;li>vlan&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>物理层
&lt;ul>
&lt;li>Ethernet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="为什么要分层">为什么要分层&lt;/h1>
&lt;p>因为网络环境过于复杂，不是一个能够集中控制的体系。全球的服务器和设备各有各的体系，但是可以通过同一套网络协议栈切分成多个层次和组合，来满足不同设备之间的通信需求。&lt;/p>
&lt;p>二层到四层，即 mac、ip 和传输等层都是 Linux 内核中处理。应用层的如浏览器、Nginx 和 Tomcat 等都是用户态的。&lt;/p>
&lt;p>传输层的 tcp 和 udp 里都有端口的概念，不同应用监听不同的段即可。&lt;/p>
&lt;p>应用层和内核的互通机制，就是通过 socket 系统调用。其实 socket 哪一层都不属于，它是属于操作系统的概念，而不是网络分层的概念。因为操作系统把二层到四层的处理代码在内核里，应用层的处理代码让应用自己做，两者需要跨内核态和用户态进行通信，这个就是 socket。&lt;/p>
&lt;h1 id="tcp-和-udp-的区别">TCP 和 UDP 的区别&lt;/h1>
&lt;ul>
&lt;li>tcp 是面向连接的，udp 是面向无连接的&lt;/li>
&lt;li>tcp 提供可靠交付，无差错、不丢失、不重复、并且按序到达。udp 不提供可靠交付，可能丢失，不按顺序。&lt;/li>
&lt;li>tcp 是面向字节流的，发送的是一个流，无头无尾。udp 是数据报文的，一个一个发送。&lt;/li>
&lt;li>tcp 可以提供流量控制和拥塞控制，可以防止对端被压垮，也防止网络被压垮。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>所谓的连接，指两端的数据结构状态的协同，两边状态对的上，符合 tcp 协议的规则，就认为连接是存在的，否则就是断掉的。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>所谓的建立连接，其实是为了在客户端和服务端维护连接，而建立一定的数据结构来维护双方交互的状态。并用这样的数据结构来保证面向连接的特性。tcp 无法左右中间的任何通路，也没有什么虚拟的连接。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>所谓的可靠，也是两端的数据结构做的事情。不丢失其实是数据结构在“点名”，顺序到达是数据结构在“排序”，面向数据流其实是数据结构将零散的包，按照顺序捏成一个流发给应用层。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>所谓的流量控制和拥塞控制，其实就是根据收到的对端的网络包，调整两端的数据结构状态。&lt;/strong>&lt;/p>
&lt;h1 id="socket-函数">socket 函数&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">domain&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">protocol&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>socket 函数用于创建一个 socket 文件描述符。&lt;/p>
&lt;ul>
&lt;li>domain
&lt;ul>
&lt;li>使用什么 ip 层的协议。AF_INET 标识 ipv4，AF_INET6 标识 ipv6。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>type
&lt;ul>
&lt;li>socket 的类型。&lt;/li>
&lt;li>SOCK_STREAM，tcp 流的&lt;/li>
&lt;li>SOCK_DGRAM，udp 报文的&lt;/li>
&lt;li>SOCK_RAW，可以直接操作 ip 层，或非 tcp 和 udp 类型的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>protocol
&lt;ul>
&lt;li>协议&lt;/li>
&lt;li>IPPROTO_TCP, IPPROTO_UDP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://example.com/Users/lucas/Documents/Nutstore/assets/997e39e5574252ada22220e4b3646dda.png"
loading="lazy"
alt="img"
>&lt;/p></description></item><item><title>go 进阶</title><link>https://example.com/p/go-%E8%BF%9B%E9%98%B6/</link><pubDate>Mon, 26 Aug 2019 06:53:32 +0000</pubDate><guid>https://example.com/p/go-%E8%BF%9B%E9%98%B6/</guid><description>&lt;h1 id="diagnostics">Diagnostics&lt;/h1>
&lt;p>go 提供了一系列诊断逻辑和性能问题的工具。&lt;/p>
&lt;ul>
&lt;li>profiling 分析&lt;/li>
&lt;li>tracing 跟踪&lt;/li>
&lt;li>debuging 调试&lt;/li>
&lt;li>运行时统计信息和事件&lt;/li>
&lt;/ul>
&lt;h2 id="profiling">Profiling&lt;/h2>
&lt;p>profiling 信息可以在 go test 或者 net/http/pprof 包的时候使用。&lt;/p>
&lt;p>runtime/pprof 包有：&lt;/p>
&lt;ul>
&lt;li>cpu
&lt;ul>
&lt;li>主动消费 cpu 周期所花费的时间，不包括睡眠或者 io 等待&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>heap
&lt;ul>
&lt;li>报告内存分配采样；&lt;/li>
&lt;li>当前或历史内存使用状况&lt;/li>
&lt;li>检测内存泄露&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>threadcreate
&lt;ul>
&lt;li>报告创建新的系统线程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>goroutine
&lt;ul>
&lt;li>当前所有协程的堆栈跟踪&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>block
&lt;ul>
&lt;li>显示 goroutine 阻塞等待同步原语的位置。&lt;/li>
&lt;li>默认不开启，使用 runtime.SetBlockProfileRate 启用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>mutex
&lt;ul>
&lt;li>报告锁竞争。&lt;/li>
&lt;li>如果认为自己的程序因为互斥锁导致 cpu 不能充分利用的时候，使用这个。&lt;/li>
&lt;li>默认也是不开启，使用 runtime.SetMutexProfileFraction 启用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>其他可用的的性能分析工具&lt;/p>
&lt;p>Linux 使用&lt;a class="link" href="https://perf.wiki.kernel.org/index.php/Tutorial%ef%bc%8cperf" target="_blank" rel="noopener"
>https://perf.wiki.kernel.org/index.php/Tutorial，perf&lt;/a> 可以分析 cgo/SWIG 代码和系统内核。&lt;/p>
&lt;p>mac 上使用 &lt;a class="link" href="https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/" target="_blank" rel="noopener"
>https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/&lt;/a> 就足够了。&lt;/p>
&lt;p>分析线上处于生产状态服务&lt;/p>
&lt;p>在生产上分析程序也是没问题的，但是开启某些指标会增加成本。&lt;/p>
&lt;p>可视化分析数据&lt;/p>
&lt;p>go 提供了很多可视化的工具，参考&lt;a class="link" href="https://blog.golang.org/profiling-go-programs" target="_blank" rel="noopener"
>https://blog.golang.org/profiling-go-programs&lt;/a>&lt;/p>
&lt;p>也可以创建自定义的 profil 文件：参考&lt;a class="link" href="https://golang.org/pkg/runtime/pprof/#Profile" target="_blank" rel="noopener"
>https://golang.org/pkg/runtime/pprof/#Profile&lt;/a>&lt;/p>
&lt;p>也可以自定义修改 pprof 程序监听的端口和路径，参考：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http/pprof&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewServeMux&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mux&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">HandleFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/custom_debug_path/profile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">pprof&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Profile&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Fatal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">ListenAndServe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:7777&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">mux&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>mysql</title><link>https://example.com/p/mysql/</link><pubDate>Sat, 01 Dec 2018 15:54:53 +0000</pubDate><guid>https://example.com/p/mysql/</guid><description>&lt;h2 id="mysql-基本架构">MySQL 基本架构&lt;/h2>
&lt;p>客户端&lt;/p>
&lt;p>server 层&lt;/p>
&lt;ul>
&lt;li>
&lt;p>连接器：管理连接，权限验证&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查询缓存：命中规则，直接返回结果 8.0 之后全部删除了这个模块&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析器：词法分析，语法分析&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优化器：执行计划生成，索引选择&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行器：操作引擎，返回结果&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>存储引擎：存储数据，提供读写接口&lt;/p>
&lt;p>数据库中的长连接指连接成功之后，如果客户端持续有请求，则一直使用同一个连接。短连接是指每次执行完很少的几次查询之后就断开连接，下次再重新建立。&lt;/p>
&lt;p>如果全部使用长连接，会导致 mysql 内存涨的很快，可能出现 OOM，因此要定期断开长连接，或者在执行一个比较大的操作之后，执行 mysql_reset_connection 重置一下。&lt;/p>
&lt;h2 id="日志系统">日志系统&lt;/h2>
&lt;h3 id="redo-log-重做日志">redo log 重做日志&lt;/h3>
&lt;p>redo log 是 innodb 引擎特有的。物理日志，记录的是某个数据页上做了什么修改。循环写入。&lt;/p>
&lt;p>WAL 技术：Write-Ahead Logging：关键点就是先写日志，再写磁盘。当一条记录更新时，先把记录写到 redolog 中，更新到内存，这时这个更新操作就成功了。然后 innodb 引擎就会在适当的时候，将这个操作记录更新到磁盘中。因此在数据库异常重启的时候，之前的提交的记录不会丢失。&lt;/p>
&lt;h3 id="binlog-归档日志">binlog 归档日志&lt;/h3>
&lt;p>binlog 是 server 层实现的，所有的引擎都可以使用。binlog 是逻辑日志，记录的是这个语句的原始逻辑。binlog 是写到一定大小后，切换下一个，不会覆盖以前的日志。&lt;/p>
&lt;p>因此一个 update 操作就是：&lt;/p>
&lt;p>找到该行&lt;/p>
&lt;p>判断数据页是否在内存中，如果是返回行数据，否则从磁盘读入到内存中。&lt;/p>
&lt;p>将值进行更新，写入新行&lt;/p>
&lt;p>新行更新到内存&lt;/p>
&lt;p>写入 redolog，处于 prepare 阶段&lt;/p>
&lt;p>写入 binlog&lt;/p>
&lt;p>提交事务，处于 commit 阶段。&lt;/p>
&lt;p>这个就是两阶段提交。&lt;/p>
&lt;h2 id="事务隔离">事务隔离&lt;/h2>
&lt;p>Isolation：隔离性&lt;/p>
&lt;p>脏读，幻读，不可重复读&lt;/p>
&lt;p>隔离的越严实，效率越低。&lt;/p>
&lt;p>SQL 的标准隔离级别：&lt;/p>
&lt;p>读未提交：一个事务没提交的时候，它做的变更就能被别的事务看到&lt;/p>
&lt;p>读提交：一个事务提交之后，做的变更才能被其他事务看到&lt;/p>
&lt;p>可重复读：一个事务执行时看到的数据，总是跟这个事务启动时看到的数据时一致的。&lt;/p>
&lt;p>串行化：顾名思义，对于同一行记录，写会加写锁，读也会加读锁。当读写锁冲突时，后访问的事务，必须等前一个事务完成。&lt;/p>
&lt;p>在实现的时候，数据库会创建一个视图，访问的时候以视图的逻辑结果为准。&lt;/p>
&lt;ul>
&lt;li>可重复读，这个视图是在事务启动时创建，整个事务存在期间都用这个视图。&lt;/li>
&lt;li>读提交，这个视图在每个 sql 语句开始执行的时候创建&lt;/li>
&lt;li>读未提交直接返回记录的最新值，没有视图的概念。&lt;/li>
&lt;li>串行化是用加锁的方式。&lt;/li>
&lt;/ul>
&lt;p>mysql 在每条记录更新的时候，都会记录一条回滚操作，记录上的最新值都可以通过回滚操作，得到前一个状态的值。当没有事务需要用到回滚日志时，就会被删除。所以不建议使用长事务，这样会占用存储空间和锁。&lt;/p>
&lt;p>mysql 启动事务的方式&lt;/p>
&lt;ul>
&lt;li>显式启动：begin 或者 start transaction。配套的提交语句是 commit，回滚语句是 rollback。&lt;/li>
&lt;li>set autocommit=0 这个命令会将这个线程的自动提交关闭。意味着如果只执行一个 select 语句，事务就启动了，而且不会自动关闭，除非主动执行 commit 或者 rollback，或者断开连接。&lt;/li>
&lt;/ul>
&lt;p>因此一般 set autocommit=1，打开显示启动的模式。&lt;/p></description></item><item><title>graphql</title><link>https://example.com/p/graphql/</link><pubDate>Thu, 08 Nov 2018 18:28:13 +0000</pubDate><guid>https://example.com/p/graphql/</guid><description>&lt;p>graphql 经常被认为是聚焦于前端的技术。&lt;/p>
&lt;h1 id="核心概念">核心概念&lt;/h1>
&lt;h2 id="sdlschema-definition-language模式定义语言">SDL：schema definition language（模式定义语言）&lt;/h2>
&lt;p>如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个类型有两个字段，name 和 age，他们的类型是 String 和 Int。！的意思代表他们是必需的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Post&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">author&lt;/span>: &lt;span class="kt">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来的 Post 也有两个字段，其中 Person 也是可以作为一个类型。&lt;/p>
&lt;p>也可以这样，在 Person 中添加一个 post：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">posts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Post&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过-query-获取数据">通过 Query 获取数据&lt;/h2>
&lt;h3 id="基本查询">基本查询&lt;/h3>
&lt;p>客户端发送下面的数据给服务器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">allPersons&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>allPersons 是根字段（root field），它下面的成为查询的 payload，这里仅包含了一个 name。&lt;/p>
&lt;p>服务器返回的结果会是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;allPersons&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Johnny&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Sarah&amp;#34;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到只返回了 name 字段，age 字段是不会返回的。&lt;/p>
&lt;p>如果使用如下的 payload 就会返回：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">allPersons&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>还可以查询 posts 中的 title：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> allPersons {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> age
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> posts {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="带参数查询">带参数查询&lt;/h3>
&lt;p>在 graphql 中每个字段都有 0 或者更多个参数。比如 allPerson 有一个 last 参数，只返回最后两个人的信息，这里就是查询的语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> allPersons(last: 2) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过-mutation-写数据">通过 Mutation 写数据&lt;/h2>
&lt;ul>
&lt;li>创建&lt;/li>
&lt;li>更新&lt;/li>
&lt;li>删除&lt;/li>
&lt;/ul>
&lt;p>mutation 和 query 类似，只是需要加上 mutation 关键字。如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mutation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createPerson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">36&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>mutation 也有一个根字段，叫 createPerson。我们知道这个字段有两个参数 name 和 age。返回值会像这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;data&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;createPerson&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">36&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>graphql 会给每个记录新增一个唯一的 ID 字段，我们也可以这样设置 Person 类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">ID&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后当一个新的 Person 对象创建时，就可以访问到 id。&lt;/p>
&lt;h2 id="通过订阅实时更新">通过订阅实时更新&lt;/h2>
&lt;p>graphql 提供了实时订阅更新。&lt;/p>
&lt;p>当客户端订阅一个事件的时候，将会保持一个和服务器的稳定连接，当有变化时会告诉客户端。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">subscription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newPerson&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此当有个用户创建或者修改时都会告诉客户端：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;newPerson&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;Jane&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;age&amp;#34;: 23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="定义一个模式">定义一个模式&lt;/h2>
&lt;p>有几个特殊的根类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Query&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Mutation&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Subscription&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>API 的根字段都是在上面这三个之下，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Query&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">allPersons&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Person&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>allPersons 也可以有参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Query&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">allPersons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">last&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Person&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>类似的 mutation 也是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Mutation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createPerson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>订阅也是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Subscription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newPerson&lt;/span>: &lt;span class="kt">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把他们放在一起就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Query&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">allPersons&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">last&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Person&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Mutation&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createPerson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Subscription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newPerson&lt;/span>: &lt;span class="kt">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">Int&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">posts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Post&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Post&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">String&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">author&lt;/span>: &lt;span class="kt">Person&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="架构图">架构图&lt;/h2>
&lt;p>graphql 直连数据库&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fx0v777rc9j30lr0573yq.jpg"
loading="lazy"
>&lt;/p>
&lt;p>graphql 连接层连接多个服务&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fx0v7pe3qkj30p60j2t9u.jpg"
loading="lazy"
>&lt;/p>
&lt;p>graphql 混连数据库和服务&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fx0v867hy3j30k30jrwff.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="解析函数">解析函数&lt;/h2>
&lt;p>每个字段其实都有一个解析器，叫 resolver。&lt;/p>
&lt;p>当服务器收到一个请求时，会调用字段的 resolver 函数，一旦 resolver 函数有返回，服务器就会把数据包装成要返回的字段。&lt;/p>
&lt;p>有这样一个类型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Query&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">author&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>: &lt;span class="kt">ID&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Author&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Author&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">posts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Post&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Post&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>: &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>: &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当执行一个 query 的时候：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">query&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">author&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;abc&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">posts&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>会以如下的方式执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Query&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">root&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;abc&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nx">author&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Author&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">posts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">author&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nx">posts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="nx">each&lt;/span> &lt;span class="nx">post&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">posts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">title&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nx">title&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">post&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="nx">content&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="实战">实战&lt;/h1></description></item><item><title>go-best-practice</title><link>https://example.com/p/go-best-practice/</link><pubDate>Wed, 07 Nov 2018 17:16:07 +0000</pubDate><guid>https://example.com/p/go-best-practice/</guid><description>&lt;ul>
&lt;li>短变量名称在声明和上次使用之间的距离很短时效果很好。&lt;/li>
&lt;li>长变量名称需要证明自己的合理性; 名称越长，需要提供的价值越高。冗长的名称与页面上的重量相比，信号量较小。&lt;/li>
&lt;li>请勿在变量名称中包含类型名称。&lt;/li>
&lt;li>常量应该描述它们持有的值，而不是该如何使用。&lt;/li>
&lt;li>对于循环和分支使用单字母变量，参数和返回值使用单个字，函数和包级别声明使用多个单词&lt;/li>
&lt;li>方法、接口和包使用单个词。&lt;/li>
&lt;li>请记住，包的名称是调用者用来引用名称的一部分，因此要好好利用这一点。&lt;/li>
&lt;/ul>
&lt;p>变量的名称应描述其内容，而不是内容的类型。&lt;/p>
&lt;p>典型错误：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var usersMap map[string]*User
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果&lt;code>users&lt;/code>的描述性都不够用，那么&lt;code>usersMap&lt;/code>也不会。&lt;/p>
&lt;p>&lt;strong>声明变量但没有初始化时，请使用 var。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>在声明和初始化时，使用:=。&lt;/strong>&lt;/p>
&lt;h4 id="关于变量和常量的注释应描述其内容而非其目的">关于变量和常量的注释应描述其内容而非其目的&lt;/h4>
&lt;ul>
&lt;li>任何既不明显也不简短的公共功能必须予以注释。&lt;/li>
&lt;li>无论长度或复杂程度如何，对库中的任何函数都必须进行注释&lt;/li>
&lt;/ul>
&lt;p>在编写函数之前，请编写描述函数的注释。 如果你发现很难写出注释，那么这就表明你将要编写的代码很难理解。&lt;/p>
&lt;p>以包所提供的内容来命名，而不是它包含的内容。&lt;/p>
&lt;h4 id="避免使用类似basecommon或util的包名称">避免使用类似&lt;code>base&lt;/code>，&lt;code>common&lt;/code>或&lt;code>util&lt;/code>的包名称&lt;/h4>
&lt;h4 id="尽早return而不是深度嵌套">尽早&lt;code>return&lt;/code>而不是深度嵌套&lt;/h4>
&lt;h4 id="使用internal包来减少公共-api">使用&lt;code>internal&lt;/code>包来减少公共 API&lt;/h4>
&lt;h4 id="不鼓励使用nil作为参数">不鼓励使用&lt;code>nil&lt;/code>作为参数&lt;/h4>
&lt;h4 id="首选可变参数函数而非t参数">首选可变参数函数而非&lt;code>[]T&lt;/code>参数&lt;/h4>
&lt;h4 id="通过消除错误来消除错误处理">通过消除错误来消除错误处理&lt;/h4>
&lt;h4 id="使用githubcompkgerrors包装errors">使用&lt;code>github.com/pkg/errors&lt;/code>包装&lt;code>errors&lt;/code>&lt;/h4>
&lt;h4 id="永远不要启动一个停止不了的-goroutine">永远不要启动一个停止不了的 goroutine&lt;/h4></description></item><item><title>kubernetes</title><link>https://example.com/p/kubernetes/</link><pubDate>Mon, 08 Oct 2018 15:29:21 +0000</pubDate><guid>https://example.com/p/kubernetes/</guid><description>&lt;h3 id="docker">docker&lt;/h3>
&lt;p>利用 Linux 的 cgroups 和 namespace，构建一个沙箱运行环境。&lt;/p>
&lt;h3 id="docker-镜像">docker 镜像&lt;/h3>
&lt;p>其实就是一个压缩包，这个压缩包是由一个完整的操作系统的所有文件目录构成，包含了这个应用运行所需要的所有依赖，所以本地开发环境和测试环境是一样的。&lt;/p>
&lt;p>解决了应用打包的根本性问题。&lt;/p>
&lt;h3 id="容器编排">容器编排&lt;/h3>
&lt;p>对 Docker 容器的一系列定义、配置和创建动作的管理&lt;/p>
&lt;blockquote>
&lt;p>容器本身没有价值，有价值的是“容器编排”。&lt;/p>
&lt;/blockquote>
&lt;h3 id="原理">原理&lt;/h3>
&lt;p>容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造一个“边界”。&lt;/p>
&lt;p>在创建一个容器进程的时候，指定了这个进程所需要启动的一组 Namespace 参数，这样容器就只能看到当前 Namespace 所限定的资源、文件、设备、状态或配置。&lt;/p>
&lt;p>Cgroups 主要作用是为一个进程组设置资源上限，如 CPU、内存、磁盘和带宽等。也可以设置进程优先级，审计，挂起，重启等。&lt;/p>
&lt;p>因此，一个正在运行的 Docker 容器，其实就是一个启用了多个 Namespace 的应用进程，而这个进程能够使用的资源是由 Cgroups 来限制。&lt;/p>
&lt;p>挂载在容器根目录上，用来为容器进程提供隔离后执行环境的文件系统，就是容器镜像，rootfs。&lt;/p>
&lt;ul>
&lt;li>启动 Namespace 配置&lt;/li>
&lt;li>设置 Cgroups 参数&lt;/li>
&lt;li>切换进程根目录 rootf&lt;/li>
&lt;/ul>
&lt;p>docker 镜像设计时，引入了层（layer），用户制作镜像的每一步操作都会生成一个层，也就是一个增量的 rootfs。AuFS，所以就有了共享层，镜像不用那么大。&lt;/p>
&lt;p>一个进程，可以选择加入到某个进程已有的 Namespace 当中，从而达到进入这个进程所在的容器的目的，这正是 docker exec 的实现原理。&lt;/p>
&lt;p>volume 机制，允许你将宿主机上指定的目录或文件，挂载到容器里面进行读取和修改操作。&lt;/p>
&lt;h3 id="主要依赖-linux-依赖三大技术">主要依赖 Linux 依赖三大技术&lt;/h3>
&lt;ul>
&lt;li>Namespace&lt;/li>
&lt;li>Cgroups&lt;/li>
&lt;li>rootfs&lt;/li>
&lt;/ul>
&lt;h3 id="和虚拟机比较">和虚拟机比较&lt;/h3>
&lt;p>虚拟机是通过硬件虚拟化功能，模拟一套操作系统所需要的各种硬件，如 CPU、内存、IO 设备等，然后安装一个新的操作系统。&lt;/p>
&lt;p>docker 是利用 Linux 的 Namespace 原理，帮助用户启动的还是系统的应用进程，只是加了一些参数，限制其能看到的资源。因此相对于虚拟机资源消耗更小，而且轻量级，敏捷高性能。&lt;/p>
&lt;p>不过缺点就是隔离不彻底，多个容器进程公用宿主机操作系统内核。有些资源和对象不可以被 Namespace 化的，如时间。&lt;/p>
&lt;p>kubernetes 要解决的问题&lt;/p>
&lt;p>编排？调度？容器云？集群管理？&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fw117whrc6j31hc0u0gq5.jpg"
loading="lazy"
>&lt;/p>
&lt;ul>
&lt;li>master
&lt;ul>
&lt;li>kube-apiserver：API 服务&lt;/li>
&lt;li>kube-scheduler：调度&lt;/li>
&lt;li>kube-controller-manager：编排&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>node
&lt;ul>
&lt;li>kubelet：同容器运行时打交道。依赖于 CRI（container runtime interface 容器运行接口）远程调用接口，这个接口定义了容器运行时的各项核心操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>etcd&lt;/li>
&lt;/ul>
&lt;p>运行在大规模集群中的各种任务之间，实际存在各种各样的关系。这些关系的处理，才是作业编排和管理系统最困难的地方。&lt;/p>
&lt;p>sudo&lt;/p>
&lt;ul>
&lt;li>首先，通过一个编排对象，如 pod，job 或 cronjob 等，来描述你试图管理的应用；&lt;/li>
&lt;li>然后，再为它定义一些服务对象，如 service，secret，autoscaler 等。这些对象，会负责具体的平台级功能。&lt;/li>
&lt;/ul>
&lt;p>这种使用方法，就是所谓的“声明式 API”。这种 API 对应的编排对象和服务对象，都是 k8s 项目中的 API 对象。&lt;/p>
&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl create -f 我的配置文件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pod 就是 k8s 世界中的应用，而一个应用可以由多个容器组成。&lt;/p>
&lt;p>使用一个 API 对象管理另一个 API 对象的方法，叫控制器模式。&lt;/p>
&lt;p>每个 API 对象都有一个 metadata 字段，这个字段是 API 对象的标识，即元数据。主要用到的是 labels，spec.selector.matchLabels 就是 k8s 过滤的规则。与 labels 同层级的是 annotations，这是由 k8s 所感兴趣的，而不是用户。&lt;/p>
&lt;p>一个 k8s 的 API 对象都有 metadata 和 spec 两个部分。前者放的是对象的元数据，对所有 API 对象来讲，这部分的字段和格式基本一样；而后者存放的是属于这个对象独有的定义，用来描述它所要表达的功能。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ kubectl create -f nginx-deployment.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -l app=nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-67594d6bf6-9gdvr 1/1 Running 0 10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-67594d6bf6-v6j7w 1/1 Running 0 10m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe pod nginx-deployment-67594d6bf6-9gdvr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment-67594d6bf6-9gdvr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Priority: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PriorityClassName: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Node: node-1/10.168.0.3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start Time: Thu, 16 Aug 2018 08:48:42 +0000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: app=nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pod-template-hash=2315082692
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Annotations: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Status: Running
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">IP: 10.32.0.23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Controlled By: ReplicaSet/nginx-deployment-67594d6bf6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Reason Age From Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ---- ------ ---- ---- -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Normal Scheduled 1m default-scheduler Successfully assigned default/nginx-deployment-67594d6bf6-9gdvr to node-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Normal Pulling 25s kubelet, node-1 pulling image &amp;#34;nginx:1.7.9&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Normal Pulled 17s kubelet, node-1 Successfully pulled image &amp;#34;nginx:1.7.9&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Normal Created 17s kubelet, node-1 Created container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Normal Started 17s kubelet, node-1 Started container
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f nginx-deployment.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 修改 nginx-deployment.yaml 的内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f nginx-deployment.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在命令行中，所有 key-value 格式的参数，都使用“=“而不是”：“表示。&lt;/p>
&lt;p>在 k8s 执行过程中，对 API 对象的所有重要操作，都会被记录在这个对象的 events 中。&lt;/p>
&lt;p>在线业务&lt;/p>
&lt;p>Deployment&lt;/p>
&lt;p>StatefunSet&lt;/p>
&lt;p>DaemonSet&lt;/p>
&lt;p>离线业务&lt;/p>
&lt;p>Job&lt;/p>
&lt;p>restartPolicy 在 job 对象里只被允许设置为 never 和 onFailure；而在 Deployment 对象中，只被允许设置为 always。&lt;/p>
&lt;h3 id="声明式-api-和-kubernetes-编程范式">声明式 API 和 Kubernetes 编程范式&lt;/h3>
&lt;p>创建一个两个 Nginx 容器的步骤：&lt;/p>
&lt;p>首先写一个 Deployment 的 yaml 文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx-deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用 kubectl create 命令在 Kubernetes 中创建一个 Deployment 对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">kubectl create -f nginx.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样两个 Nginx pod 就运行起来了。&lt;/p>
&lt;p>如果要更新的话，只需要修改 yaml 文件，然后使用 kubectl apply 命令更新，触发了滚动更新。&lt;/p>
&lt;p>这个 apply 命令就是声明式 API。&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwzjwny2o8j31hc0u0abg.jpg"
loading="lazy"
>&lt;/p>
&lt;p>istio 项目中，最根本的组件是运行在每个 pod 里的 envoy 容器。这个代理服务以 sidecar 容器的方式，把整个 pod 的进出流量接管下来。istio 的控制层的 pilot 组件，通过调用每个 envoy 的 API，实现微服务的治理。&lt;/p>
&lt;p>利用 Kubernetes 的 Admission Control，也叫：Initializer，先创建一个 Pod，然后 istio 就是在 pod 的 yaml 给 Kubernetes 之后，自动加上 envoy 的配置。&lt;/p>
&lt;ul>
&lt;li>所谓的声明式，指的就是我只需要提交一个定义好的 API 对象来声明我所期望的状态是什么样子。&lt;/li>
&lt;li>其次，声明式 API 允许有多个 API 写端，以 PATCH 的方式对 API 对象进行修改，而无需关心原始的 YAML 文件的内容。&lt;/li>
&lt;li>最后，Kubernetes 基于对 API 对象的增删改查，在无需外界干预的情况下，完成对实际状态和期望状态的调谐。&lt;/li>
&lt;/ul>
&lt;p>一个 API 对象在 etcd 中完整路径是由：group（API 组），version（API 版本）和 Resource（API 资源类型）三个部分组成的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CronJob&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>batch 是组，v2 是版本，CronJob 是类型。&lt;/p>
&lt;p>对于核心 API 对象：Pod，Node 等，不需要 group 的。非核心对象是需要组。&lt;/p>
&lt;p>匹配规则就是：&lt;/p>
&lt;p>/apis/batch/v2/CronJob&lt;/p>
&lt;ul>
&lt;li>
&lt;p>首先 yaml 文件被提交给了 APIServer&lt;/p>
&lt;p>过滤，授权，超时处理或审计等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入路由流程&lt;/p>
&lt;p>根据 yaml，按照匹配规则去找&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据定义，按照 yaml 中的字段，创建一个对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行 Amission 和 Validation。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>把验证过的对象，序列化存到 etcd 中&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="rbac">RBAC&lt;/h3>
&lt;p>基于角色的控制&lt;/p>
&lt;p>role：角色，一组规则，定义 Kubernetes API 对象的操作权限&lt;/p>
&lt;p>subject：被作用者，可以是人，也可以是机器，也可以是 Kubernetes 定义的用户&lt;/p>
&lt;p>rolebinding：定义被作用者和角色的绑定关系&lt;/p>
&lt;p>ServiceAccount，会被自动创建分配一个 secret 对象。&lt;/p>
&lt;p>所谓角色就是一组权限规则列表，而我们分配这些权限的方式，就是通过创建 rolebinding 对象，将被作用者和权限列表进行绑定。&lt;/p>
&lt;p>另外，与之对应的 ClusterRole 和 ClusterRoleBinding，则是 Kubernetes 集群级别的 Role 和 RoleBinding，它们的作用范围不受 Namespace 限制。&lt;/p>
&lt;p>尽管被作用者有很多种（如 User、Group），但在我们平常使用的时候，最普遍的还是 ServiceAccount。&lt;/p>
&lt;h3 id="网络模型">网络模型&lt;/h3>
&lt;p>Veth Pair 常常被用作连接不同 Network Namespace 的网线。veth pair 虚拟设备。总是以两张虚拟网卡形式成对出现。并且，从一个网卡中发出的数据包，可以直接出现在另一张网卡上，哪怕这两个网卡在不同的 network Namespace 里。&lt;/p>
&lt;p>一旦一张虚拟网卡被插在网桥上，他就会变成该网桥的从设备。从设备会降级成为网桥的一个端口，不能处理数据包，只能接收流入的数据包交给对应的网桥。&lt;/p>
&lt;p>两个容器的虚拟网卡都插在宿主机的一个网桥上，这个网桥就扮演一个交换机的角色。当两个容器进行网络交互时，从一个容器的发出请求到宿主机，由于 Veth Pair 的机制，另一个容器就看到有数据流入。&lt;/p>
&lt;p>因此默认情况下，被限制在 network Namespace 的容器进程，实际就是通过 veth pair 设备+宿主机网桥的方式，实现了跟其他容器的数据交换。&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fwzjwayfppj31bn0rngn5.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>跨主通信，需要有一个集群公用的网桥，所有容器都连接到该网桥上，就可以相互通信，这就是 overlay network（覆盖网络）&lt;/p></description></item><item><title>watchdog</title><link>https://example.com/p/watchdog/</link><pubDate>Thu, 06 Sep 2018 16:23:57 +0000</pubDate><guid>https://example.com/p/watchdog/</guid><description>&lt;p>&lt;strong>监视器&lt;/strong>&lt;/p>
&lt;p>监视器提供了一个外部世界和函数之间的非托管的通用接口。它的工作是收集从 API 网关来的 HTTP 请求，然后调用程序。监视器是一个小型的 Golang 服务——下图展示了它是如何工作的：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuzw3rkue0j30k00bamy2.jpg"
loading="lazy"
>&lt;/p>
&lt;blockquote>
&lt;p>上图：一个小型的 web 服务，可以为每个传入的 HTTP 请求分配所需要的进程。&lt;/p>
&lt;/blockquote>
&lt;p>每个函数都需要嵌入这个二进制文件并将其作为&lt;code>ENTRYPOINT&lt;/code> 或 &lt;code>CMD&lt;/code>，实际上是把它作为容器的初始化进程。一旦你的进程被创建分支，监视器就会通过&lt;code>stdin&lt;/code> 传递 HTTP 请求并从&lt;code>stdout&lt;/code>中读取 HTTP 响应。这意味着你的程序无需知道 web 和 HTTP 的任何信息。&lt;/p>
&lt;h2 id="轻松创建新函数">&lt;strong>轻松创建新函数&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>从 CLI 创建一个函数&lt;/strong>&lt;/p>
&lt;p>创建函数最简单的方法是使用 FaaS CLI 和模板。CLI 抽象了所有 Docker 的知识，使得你只需要编写所支持语言的 handler 文件即可。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//blog.alexellis.io/first-faas-python-function/" target="_blank" rel="noopener"
>你的第一个使用 OpenFaaS 的无服务器 Python 函数&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//github.com/openfaas/faas-cli" target="_blank" rel="noopener"
>阅读有关 FaaS CLI 的教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="深入研究">&lt;strong>深入研究&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>Package your function 打包你的函数&lt;/strong>&lt;/p>
&lt;p>如果你不想使用 CLI 或者现有的二进制文件或镜像，可以使用下面的方法去打包函数：&lt;/p>
&lt;ul>
&lt;li>使用一个现有的或者一个新的 Docker 镜像作为基础镜像 &lt;code>FROM&lt;/code>&lt;/li>
&lt;li>通过&lt;code>curl&lt;/code> 或 &lt;code>ADD https://&lt;/code>从 &lt;a class="link" href="https://link.zhihu.com/?target=https%3A//github.com/openfaas/faas/releases" target="_blank" rel="noopener"
>Releases 页面&lt;/a> 添加 fwatchdog 二进制文件&lt;/li>
&lt;li>为每个你要运行的函数设置 &lt;code>fprocess&lt;/code>(函数进程) 环境变量&lt;/li>
&lt;li>Expose port 8080&lt;/li>
&lt;li>暴露端口 8080&lt;/li>
&lt;li>Set the &lt;code>CMD&lt;/code> to &lt;code>fwatchdog&lt;/code>&lt;/li>
&lt;li>设置 &lt;code>CMD&lt;/code>为&lt;code>fwatchdog&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>一个&lt;code>echo&lt;/code>函数的示例 Dockerfile：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">FROM alpine:3.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ADD https://github.com/openfaas/faas/releases/download/0.8.0/fwatchdog /usr/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN chmod +x /usr/bin/fwatchdog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Define your binary here
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV fprocess=&amp;#34;/bin/cat&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CMD [&amp;#34;fwatchdog&amp;#34;]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Implementing a Docker healthcheck 实现一个 Docker 健康检查&lt;/strong>&lt;/p>
&lt;p>Docke 的健康检查不是必需的，但是它是最佳实践。这会确保监视器已经在 API 网关转发请求之前准备好接收请求。如果函数或者监视器遇到一个不可恢复的问题，Swarm 也会重启容器。&lt;/p>
&lt;p>Here is an example of the &lt;code>echo&lt;/code> function implementing a healthcheck with a 5-second checking interval.&lt;/p>
&lt;p>下面是实现了一个具有 5 秒间隔的健康检查的&lt;code>echo&lt;/code>函数示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">FROM functions/alpine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV fprocess=&amp;#34;cat /etc/hostname&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HEALTHCHECK --interval=5s CMD [ -e /tmp/.lock ] || exit 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>监视器进程早启动内部 Golang HTTP 服务的时候会在 &lt;code>/tmp/&lt;/code>下面创建一个.lock 文件。&lt;code>[ -e file_name ]&lt;/code>shell 命令可以检查文件是否存在。在 Windows 容器中，这是一个不合法的路径，所以你可能需要设置&lt;code>suppress_lock&lt;/code> 环境变量。&lt;/p>
&lt;p>有关健康检查，请阅读我的 Docker Swarm 教程：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://link.zhihu.com/?target=http%3A//blog.alexellis.io/test-drive-healthcheck/" target="_blank" rel="noopener"
>10 分钟内试用 Docker 的健康检查&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>环境变量重载:&lt;/strong>&lt;/p>
&lt;p>监视器可以通过环境变量来配置，你必须始终指定一个&lt;code>fprocess&lt;/code> 变量&lt;/p>
&lt;h2 id="高级调整">&lt;strong>高级/调整&lt;/strong>&lt;/h2>
&lt;h2 id="新子监视器和-http-模式">&lt;strong>(新)——子监视器和 HTTP 模式&lt;/strong>&lt;/h2>
&lt;ul>
&lt;li>部分的监视器&lt;/li>
&lt;/ul>
&lt;p>为每个请求创建一个新的进程分支具有进程隔离，可移植和简单的优点。任何进程都可以在没有任何附加代码的情况下变成一个函数。of-watchdog 可和 HTTP 模式是一种优化，这样就可以在所有请求之间维护一个单一的进程。&lt;/p>
&lt;p>新版本的监视器正在&lt;a class="link" href="https://link.zhihu.com/?target=https%3A//github.com/openfaas-incubator/of-watchdog" target="_blank" rel="noopener"
>openfaas-incubator/of-watchdog&lt;/a>上测试。&lt;/p>
&lt;p>这种重写主要是生成一个可以持续维护的结构。它将会替代现有的监视器，也会有二进制的释放版。&lt;/p>
&lt;h2 id="使用-http-头">&lt;strong>使用 HTTP 头&lt;/strong>&lt;/h2>
&lt;p>HTTP 的头和其他请求信息以下面的格式注入到环境变量中：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">X-Forwarded-By`头变成了`Http_X_Forwarded_By
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>Http_Method&lt;/code> - GET/POST etc&lt;/li>
&lt;li>&lt;code>Http_Method&lt;/code> - GET/POST 等等&lt;/li>
&lt;li>&lt;code>Http_Query&lt;/code> - QueryString value&lt;/li>
&lt;li>&lt;code>Http_Query&lt;/code> - 查询字符串的值&lt;/li>
&lt;li>&lt;code>Http_ContentLength&lt;/code> - gives the total content-length of the incoming HTTP request received by the watchdog.&lt;/li>
&lt;li>&lt;code>Http_ContentLength&lt;/code> - 监视器收到的 HTTP 请求的内容长度。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>默认情况下，通过&lt;code>cgi_headers&lt;/code> 环境变量启用该行为。&lt;/p>
&lt;/blockquote>
&lt;p>以下是带有附加头和查询字符串的 POST 请求的示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">$ cgi_headers=true fprocess=env ./watchdog &amp;amp;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2017/06/23 17:02:58 Writing lock-file to: /tmp/.lock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl &amp;#34;localhost:8080?q=serverless&amp;amp;page=1&amp;#34; -X POST -H X-Forwarded-By:http://my.vpn.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你再 Linux 系统下设置了&lt;code>fprocess&lt;/code> 到 &lt;code>env&lt;/code>中，会看到如下结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Http_User_Agent=curl/7.43.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Accept=*/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_X_Forwarded_By=http://my.vpn.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Method=POST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Query=q=serverless&amp;amp;page=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以使用&lt;code>GET&lt;/code>请求：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">curl &amp;#34;localhost:8080?action=quote&amp;amp;qty=1&amp;amp;productId=105&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>监视器的输出如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Http_User_Agent=curl/7.43.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Accept=*/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Method=GET
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Http_Query=action=quote&amp;amp;qty=1&amp;amp;productId=105
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在就可以在程序中使用 HTTP 状态来做决策了。&lt;/p>
&lt;h2 id="http-方法">&lt;strong>HTTP 方法&lt;/strong>&lt;/h2>
&lt;p>监视器支持的 HTTP 方法有：&lt;/p>
&lt;p>带有请求体的：&lt;/p>
&lt;ul>
&lt;li>POST, PUT, DELETE, UPDATE&lt;/li>
&lt;/ul>
&lt;p>不带请求体的：&lt;/p>
&lt;ul>
&lt;li>GET&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>API 网关现在支持函数的 POST 路由。&lt;/p>
&lt;/blockquote>
&lt;h2 id="请求响应的内容类型">&lt;strong>请求响应的内容类型&lt;/strong>&lt;/h2>
&lt;p>默认情况下，监视器会匹配客户端的&amp;quot;Content-Type&amp;quot;。&lt;/p>
&lt;ul>
&lt;li>如果客户端发送 Content-Type 为 &lt;code>application/json&lt;/code> 的 json 形式的 post 请求，将会在响应的时候自动匹配。&lt;/li>
&lt;li>如果客户端发送 Content-Type 为 &lt;code>text/plain&lt;/code> 的 json 形式的 post 请求，响应也会自动匹配。&lt;/li>
&lt;/ul>
&lt;p>若要重载所有响应的 Content-Type ，需要设置&lt;code>content_type&lt;/code> 环境变量。&lt;/p>
&lt;h2 id="i-dont-want-to-use-the-watchdog">&lt;strong>I don&amp;rsquo;t want to use the watchdog&lt;/strong>&lt;/h2>
&lt;h2 id="我不想使用监视器">&lt;strong>我不想使用监视器&lt;/strong>&lt;/h2>
&lt;p>这种案例是 OpenFaaS 所不支持的，但是如果你的容器符合以下要求，那么 OpenFaaS 的网关和其他工具也会管理和伸缩服务。&lt;/p>
&lt;p>你需要提供一个锁文件 &lt;code>/tmp/.lock&lt;/code>，以便业务流程系统可以在容器中运行健康检查。如果你正在使用 swarm，那么请确保在 Dockerfile 中提供&lt;code>HEALTHCHECK&lt;/code>指令——在 &lt;code>faas&lt;/code>存储库中有示例。&lt;/p>
&lt;ul>
&lt;li>在 HTTP 之上暴露 TCP 端口 8080&lt;/li>
&lt;li>创建&lt;code>/tmp/.lock&lt;/code> 文件，或者在响应操作 tempdir 系统调用的任何位置。&lt;/li>
&lt;/ul>
&lt;h2 id="调整自动伸缩">&lt;strong>调整自动伸缩&lt;/strong>&lt;/h2>
&lt;p>自动伸缩式从 1 个副本开始，以 5 个位一个单位进行升级：&lt;/p>
&lt;ul>
&lt;li>1-&amp;gt;5&lt;/li>
&lt;li>5-&amp;gt;10&lt;/li>
&lt;li>10-&amp;gt;15&lt;/li>
&lt;li>15-&amp;gt;20&lt;/li>
&lt;/ul>
&lt;p>你可以通过标签来覆盖一个函数 minimum 和 maximum 。&lt;/p>
&lt;p>如果要在 2 到 15 之间的话，请在部署的时候配置以下标签：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">com.openfaas.scale.min: &amp;#34;2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">com.openfaas.scale.max: &amp;#34;15&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些标签是可选的&lt;/p>
&lt;p>&lt;strong>禁用自动伸缩&lt;/strong>&lt;/p>
&lt;p>如果要禁用某个函数的自动伸缩，将最小和最大的副本数设置为相同的值，即“1”。&lt;/p>
&lt;p>同样也可以删除 AlertManager。&lt;/p></description></item><item><title>queue-worker</title><link>https://example.com/p/queue-worker/</link><pubDate>Thu, 06 Sep 2018 16:23:12 +0000</pubDate><guid>https://example.com/p/queue-worker/</guid><description>&lt;h1 id="queue-worker-源码分析">queue-worker 源码分析&lt;/h1>
&lt;h2 id="异步函数和同步函数">&lt;strong>异步函数和同步函数&lt;/strong>&lt;/h2>
&lt;p>在 OpenFaaS 中同步调用函数时，将会连接到网关，直到函数成功返回才会关闭连接。同步调用是阻塞的。&lt;/p>
&lt;ul>
&lt;li>网关的路由是：&lt;code>/function/&amp;lt;function_name&amp;gt;&lt;/code>&lt;/li>
&lt;li>必须等待&lt;/li>
&lt;li>在结束的时候得到结果&lt;/li>
&lt;li>明确知道是成功还是失败&lt;/li>
&lt;/ul>
&lt;p>异步函数会有一些差异：&lt;/p>
&lt;ul>
&lt;li>网关的路由是：&lt;code>/async-function/&amp;lt;function_name&amp;gt;&lt;/code>&lt;/li>
&lt;li>客户端获得 202 的即时响应码&lt;/li>
&lt;li>从 queue-worker 中调用函数&lt;/li>
&lt;li>默认情况下，结果是被丢弃的。&lt;/li>
&lt;/ul>
&lt;h2 id="查看-queue-worker-的日志">&lt;strong>查看 queue-worker 的日志&lt;/strong>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">docker service logs -f func_queue-worker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="利用-requestbin-和-x-callback-url-获取异步函数的结果">&lt;strong>利用 requestbin 和 X-Callback-Url 获取异步函数的结果&lt;/strong>&lt;/h2>
&lt;p>如果需要获得异步函数的结果，有两个方法：&lt;/p>
&lt;ul>
&lt;li>更改代码，将结果返回给端点或者消息系统&lt;/li>
&lt;li>利用内置的回调
内置的回调将会允许函数提供一个 url，queue-worker 会报告函数的成功或失败。
requestbin 会创建一个新的 bin，这是互联网的一个 url 地址，可以从这里获取函数的结果。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuzvzbcz2vj30k00b3aar.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fuzvztfu66j30k00b2757.jpg"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuzw08o8w3j30k00b1aay.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="源码分析">&lt;strong>源码分析&lt;/strong>&lt;/h2>
&lt;h2 id="依赖项">&lt;strong>依赖项&lt;/strong>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">github.com/nats-io/go-nats-streaming
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/nats-io/go-nats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/openfaas/faas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>go-nats 和 go-nats-streaming 是 nats 和 nats-streaming 的 go 版本的客户端。&lt;/p>
&lt;p>faas 这个依赖其实是只用到了 queue 包下面的 types.go 文件。这个文件是定义了异步请求的 Request 结构体和一个 CanQueueRequests 接口。如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package queue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#34;net/url&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import &amp;#34;net/http&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// Request for asynchronous processing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type Request struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Header http.Header
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Body []byte
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Method string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> QueryString string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Function string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CallbackURL *url.URL `json:&amp;#34;CallbackUrl&amp;#34;`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// CanQueueRequests can take on asynchronous requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type CanQueueRequests interface {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Queue(req *Request) error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从这里我们就可以明白作者的设计思路，只要是实现了这个 CanQueueRequests 接口，就可以作为一个 queue-worker。&lt;/p>
&lt;h2 id="接口实现类-natsqueue">&lt;strong>接口实现类 NatsQueue&lt;/strong>&lt;/h2>
&lt;p>接口的实现类 NatsQueue 是在 handler 包里。它的属性都是 nats 中常用到的，包括 clientId，clusterId，url，连接，主题等，如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// NatsQueue queue for work
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type NatsQueue struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nc stan.Conn // nats的连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ClientID string // nats的clientId
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ClusterID string // nats的clusterId
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> NATSURL string // nats的URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Topic string // 主题
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>它的 queue 方法也很简单，主要做了两件事儿：&lt;/p>
&lt;ol>
&lt;li>解析传入的 Request 对象，并转为 json 对象 out&lt;/li>
&lt;li>将 out 发布到队列里&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// Queue request for processing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func (q *NatsQueue) Queue(req *queue.Request) error {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var err error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Printf(&amp;#34;NatsQueue - submitting request: %s.\n&amp;#34;, req.Function)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> out, err := json.Marshal(req)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> err = q.nc.Publish(q.Topic, out)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>go 语言没有构造方法，所以 NatsQueue 还用于创建 NatsQueue 的实例的方法，这里就成为工厂方法。这个工厂方法主要就是从配置文件中读取环境变量的值，然后创建一个 nats 的连接，相当于给 NatsQueue 的对象的每个属性进行赋值。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func CreateNatsQueue(address string, port int, clientConfig NatsConfig) (*NatsQueue, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queue1 := NatsQueue{}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var err error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> natsURL := fmt.Sprintf(&amp;#34;nats://%s:%d&amp;#34;, address, port)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Opening connection to %s\n&amp;#34;, natsURL)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clientID := clientConfig.GetClientID()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clusterID := &amp;#34;faas-cluster&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nc, err := stan.Connect(clusterID, clientID, stan.NatsURL(natsURL))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queue1.nc = nc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;amp;queue1, err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 CreateNatsQueue 方法是 Gateway 项目中进行调用，我们可以在 Gateway 项目的 main.go 中找到，如果 Gateway 的配置开启了异步函数支持，就会调用该方法，创建一个 NatsQueue 对象，然后把函数放到队列中，这里就不深入讲解：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">if config.UseNATS() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;Async enabled: Using NATS Streaming.&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> natsQueue, queueErr := natsHandler.CreateNatsQueue(*config.NATSAddress, *config.NATSPort, natsHandler.DefaultNatsConfig{})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if queueErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(queueErr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.QueuedProxy = handlers.MakeQueuedProxy(metricsOptions, true, natsQueue)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.AsyncReport = handlers.MakeAsyncReport(metricsOptions)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>到这里，我相信读者也了解到，Gateway 其实就是一个发布者，将异步请求扔到队列里。接下来肯定要有一个订阅者将请求消费处理。&lt;/p>
&lt;h2 id="订阅者处理">&lt;strong>订阅者处理&lt;/strong>&lt;/h2>
&lt;p>我们都知道，nats streaming 的订阅者订阅到消息之后，会把消息扔给一个回调函数去处理。queue-worker 的订阅者实现也是这样，它的实现并不复杂，所有逻辑都在 main.go 的中。&lt;/p>
&lt;p>我们先看回调函数 mcb 都做了什么：&lt;/p>
&lt;ol>
&lt;li>首先当然是将消息体反序列化成上面说到的用于异步处理的 Request 对象。&lt;/li>
&lt;li>构造 http 请求的 url 和 querystring，url 的格式如下：
functionURL := fmt.Sprintf(&amp;ldquo;http://%s%s:8080/%s&amp;rdquo;, req.Function, config.FunctionSuffix, queryString)&lt;/li>
&lt;li>设置 http 的 header，并以 post 的形式向 functionURL 发起请求。&lt;/li>
&lt;li>如果请求失败，设置返回状态码为&lt;code>http.StatusServiceUnavailable&lt;/code>，并分别处理 CallbackURL 是否存在的情况。&lt;/li>
&lt;li>如果请求成功，同样也是要分别处理 CallbackURL 是否存在的情况。&lt;/li>
&lt;/ol>
&lt;p>当然在这个 callback 中会根据一些环境变量的存在，选择是否打印日志出来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">mcb := func(msg *stan.Msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> i++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> printMsg(msg, i)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> started := time.Now()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> req := queue.Request{}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> unmarshalErr := json.Unmarshal(msg.Data, &amp;amp;req)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if unmarshalErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Unmarshal error: %s with data %s&amp;#34;, unmarshalErr, msg.Data)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Printf(&amp;#34;Request for %s.\n&amp;#34;, req.Function)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if config.DebugPrintBody {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Println(string(req.Body))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryString := &amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if len(req.QueryString) &amp;gt; 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryString = fmt.Sprintf(&amp;#34;?%s&amp;#34;, strings.TrimLeft(req.QueryString, &amp;#34;?&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> functionURL := fmt.Sprintf(&amp;#34;http://%s%s:8080/%s&amp;#34;, req.Function, config.FunctionSuffix, queryString)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> request, err := http.NewRequest(http.MethodPost, functionURL, bytes.NewReader(req.Body))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> defer request.Body.Close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> copyHeaders(request.Header, &amp;amp;req.Header)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res, err := client.Do(request)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var status int
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var functionResult []byte
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> status = http.StatusServiceUnavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeTaken := time.Since(started).Seconds()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if req.CallbackURL != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Callback to: %s\n&amp;#34;, req.CallbackURL.String())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resultStatusCode, resultErr := postResult(&amp;amp;client, res, functionResult, req.CallbackURL.String())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if resultErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(resultErr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Posted result: %d&amp;#34;, resultStatusCode)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> statusCode, reportErr := postReport(&amp;amp;client, req.Function, status, timeTaken, config.GatewayAddress)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if reportErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(reportErr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Posting report - %d\n&amp;#34;, statusCode)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if res.Body != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> defer res.Body.Close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resData, err := ioutil.ReadAll(res.Body)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> functionResult = resData
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if config.WriteDebug {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Println(string(functionResult))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Printf(&amp;#34;Wrote %d Bytes\n&amp;#34;, len(string(functionResult)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> timeTaken := time.Since(started).Seconds()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Println(res.Status)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if req.CallbackURL != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Callback to: %s\n&amp;#34;, req.CallbackURL.String())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resultStatusCode, resultErr := postResult(&amp;amp;client, res, functionResult, req.CallbackURL.String())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if resultErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(resultErr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Posted result: %d&amp;#34;, resultStatusCode)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> statusCode, reportErr := postReport(&amp;amp;client, req.Function, res.StatusCode, timeTaken, config.GatewayAddress)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if reportErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(reportErr)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;Posting report - %d\n&amp;#34;, statusCode)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>postResult&lt;/code>函数是用来处理 callbackURL 存在的情况，在这个函数中将结果，以 post 请求调用 callbackURL 发送出去。&lt;/p>
&lt;p>&lt;code>postReport&lt;/code>函数用来处理 callbackURL 不存在的情况，这里是将结果发到 Gateway 网关的&lt;code>&amp;quot;http://&amp;quot; + gatewayAddress + &amp;quot;:8088/system/async-report&amp;quot;&lt;/code>中，我们之后就可以从这个 url 里查询异步函数的执行结果了。&lt;/p>
&lt;h2 id="总结">&lt;strong>总结&lt;/strong>&lt;/h2>
&lt;p>本文主要分析了 NATS Streaming 版本的 queue worker 的实现，通过分析源码我们可以看到 OpenFaaS 在架构的设计很有考究，充分的考虑到了可扩展性，通过定义接口规范，使得开发者很容易实现自定义。&lt;/p></description></item><item><title>区块链学习笔记</title><link>https://example.com/p/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 23 Aug 2018 15:14:02 +0000</pubDate><guid>https://example.com/p/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;blockquote>
&lt;p>本文是阅读&lt;a class="link" href="http://www.netkiller.cn/blockchain/ch01s10.html" target="_blank" rel="noopener"
>http://www.netkiller.cn/blockchain/ch01s10.html&lt;/a> 上的一些笔记。&lt;/p>
&lt;/blockquote>
&lt;h2 id="理解区块链的分布式记账">理解区块链的分布式记账&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.netkiller.cn/blockchain/ch01s10.html" target="_blank" rel="noopener"
>http://www.netkiller.cn/blockchain/ch01s10.html&lt;/a>&lt;/p>
&lt;p>区块链中提到的账本，记账等词汇是和会计无关的词汇。&lt;/p>
&lt;p>我们传统理解的账本是一个二维的表格，记录了某年某月某日的费用：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>时间&lt;/th>
&lt;th>用途&lt;/th>
&lt;th>金额&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2018-08-23&lt;/td>
&lt;td>借&lt;/td>
&lt;td>100&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2018-08-22&lt;/td>
&lt;td>还&lt;/td>
&lt;td>200&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2018-08-21&lt;/td>
&lt;td>借&lt;/td>
&lt;td>50&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2018-08-20&lt;/td>
&lt;td>还&lt;/td>
&lt;td>1000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果账目比较多，可以拆账，将不同分类的账目放在特定的账本中，而且二维表格还可以设置索引等，快速找到一笔交易。&lt;/p>
&lt;p>但是区块链的记账形式是：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fujnyii772j30ku08twex.jpg"
loading="lazy"
>&lt;/p>
&lt;p>可以发现，区块链的这种记账方式是做了行列矩阵转换，节点之间收尾相互连接，成为链式结构，所有的账目都在一条链上。&lt;/p>
&lt;p>&lt;strong>所谓分布式记账，其实就是上述链状的数据结构保存在所有的节点上，形成分布式集群。&lt;/strong>&lt;/p>
&lt;p>之所以采用区块链来做分布式记账，主要是区块链有如下好处：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>去中心化&lt;/p>
&lt;p>传统的数据库存储是中心化的，通过暴露 ip 地址和端口号提供服务，后来分布式进群化之后，出现了主主从架构等。&lt;/p>
&lt;p>与数据库相比，区块链是多主架构，而且实现更为复杂，节点之间的数据之间不是简单的二进制日志同步，而是要通过加密技术，节点达成共识之后才存储。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可追溯&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安全&lt;/p>
&lt;p>安全分为很多层，区块链只能做到存储层的安全。&lt;/p>
&lt;p>区块链无法解决用户层，应用层，逻辑层等安全问题，他只能保证存储在硬盘上的区块不被修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不可篡改&lt;/p>
&lt;p>很多人认为区块链数据一旦创建之后就不能修改，所以采用区块链技术很安全。其实不然，数据是可以修改的，但是不能篡改。&lt;/p>
&lt;p>撰改是指非法修改区块链数据，而修改则是合法变更数据。&lt;/p>
&lt;p>通常撰改区块链数据多指数据存储层面的修改。而修改则是通过合约提供的修改函数变更区块链里面的数据。&lt;/p>
&lt;p>多数区块链平台没有用户认证权限管理模块。所以无法控制区块中的哪些数据能被修改，哪些不能修改，哪些用户可以修改等等。即使有些区块链平台具备权限控制，颗粒度也无法达到目前的数据库控制的那么细。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>采用区块链作为账本的时候，会面临如下几个问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不能建立索引，无法快速搜索出区块中的数据，必须依赖区块链以外的技术，如搜索引擎，数据库等。例如；etherscan.io 就是把以太坊上的区块重新入库，借助数据库实现数据检索。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区块链只能顺序检索，运算成本高。例如在中心化账本中汇总求和操作，区块链必须从头向后遍历。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有账目均在一条链上，不同的分类混在一起，彼此相连。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无法归档。&lt;/p>
&lt;p>传统的数据库，我们可以归档一段时间内的数据，而这些归档的数据基本都是冷数据，不会再被查询，归档数据的备份到存储介质上的解决方案也有很多。&lt;/p>
&lt;p>但是区块链的数据都是热数据，任何新增的节点都必须从 0 开始同步，并且保证同步到最新区块，否则可能无法完成交易，数据会一直膨胀下去。&lt;/p>
&lt;p>虽然有算法能够减少同步的量，但是现阶段的体验仍然不好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有事务处理。&lt;/p>
&lt;p>因为区块链是首尾相连的链式结构，所以只能在尾部加区块，无法修改中间的区块。假设有个区块回滚，该区块的 hash 产生变化，后面的区块都要作废。&lt;/p>
&lt;p>所以当并发执行的时候，可能会出现混乱。因此我们要在应用层做一些处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于是异步执行，无法预测何时完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>交易容易阻塞&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gas 费用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="区块链落地的一些问题和解决方案">区块链落地的一些问题和解决方案&lt;/h2>
&lt;p>如果要在企业中落地区块链，尝尝有如下解决方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>解决性能问题&lt;/p>
&lt;p>目前区块链只适合做&lt;strong>低频高价值业务&lt;/strong>。&lt;/p>
&lt;p>读取性能通常是没有问题的，但是写入实际上无论你用多少个服务器节点都不能提升，因为写入区块需要做共识算法，这步操作，会在所有节点上进行，同时还需要加密运算，这些操作都是 CPU 密集型操作。&lt;/p>
&lt;p>方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通过消息队列技术异步写入，将需要写入的区块放入队列，异步完成上链操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>并行写入，我们可以建设多个区块链平台。多个平台同时服务于业务。&lt;/p>
&lt;p>为了达到去中心化并行写入，我们将在客户端通过算法，匹配服务器。因为如果在平台前面增加负载均衡，加因为这样又回到了中心化系统。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>溯源颗粒度&lt;/p>
&lt;p>对于所要被溯源的物品或者交易来讲，有四种情况，低频低价值，低频高价值，高频高价值，高频低价值 。&lt;/p>
&lt;p>对于低频高价值和高频高价值的业务，尽量做到最小颗粒度。&lt;/p>
&lt;p>对于低频低价值和高频低价值的业务，可以颗粒度更粗。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>和传统数据库互补&lt;/p>
&lt;p>区块链技术本身是一种追求分布一致性的数据库。&lt;/p>
&lt;p>我们都知道 CAP 理论。CAP 理论是指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。大多数区块链，放弃了一些可用性，偏向了一致性和分区容错。&lt;/p>
&lt;p>区块链并非能解决所有问题，虽然他也算是一种数据库，它能解决问题十分有限，它的数据管理和查询能力还打不到 NoSQL 的水平，更别提 SQL 的复杂应用。所以在实际的应用中，区块链不能替代传统数据库，只能互补。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>链上链下数据一致性问题&lt;/p>
&lt;p>既然区块链替代不了传统数据库，那么必然要在项目中同时使用两种技术。这样问题来了，会有两份数据，一份存储在链下，即传统数据库，另外一部分数据上链，这样就有两份重复的数据，那么怎样保证他们的一致性呢？&lt;/p>
&lt;p>区块链和比特币网络不同，比特币是在链上产生的，它与区块链密布可分，是一体的，所以它的数据安全性是自闭环的。而我们的链下数据并不是在区块链中产生的，因此我们在上链的时候，尽量采用如下的方案：&lt;/p>
&lt;ul>
&lt;li>两端都做一次哈希，可快速对比数据是否一致&lt;/li>
&lt;li>以链上数据为准，因为数据库的数据更容易被篡改&lt;/li>
&lt;li>前端业务走链，后端业务走数据库，因为前台业务是为用户提供服务，所以要走链上数据，而后台是可以管理的，走数据库即可。&lt;/li>
&lt;li>共享数据上链，私有数据不上链。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="区块链的相关技术">区块链的相关技术&lt;/h2>
&lt;p>区块链的技术模型自下而上分为；数据层，网路层，共识层，激励层，合约层以及应用层。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>数据层，封装了底层数据区块的链式结构，以及相关的非对称公私钥数据加密技术和时间戳等技术，这是整个区块链技术中最底层的数据结构。&lt;/p>
&lt;p>这些技术是构建全球金融系统的基础，数十年的使用证明了它非常安全的可靠性。而区块链，正式巧妙地把这些技术结合在了一起。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络层，包括 P2P 组网机制、数据传播机制和数据验证机制等。&lt;/p>
&lt;p>P2P 组网技术早期应用在 BT 这类 P2P 下载软件中，这就意味着区块链具有自动组网功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共识层，封装了网络节点的各类共识机制算法。共识机制算法是区块链的核心技术，因为这决定了到底是谁来进行记账，而记账决定方式将会影响整个系统的安全性和可靠性。&lt;/p>
&lt;p>数据层、网络层、共识层是构建区块链技术的必要元素，缺少任何一层都将不能称之为真正意义上的区块链技术。&lt;/p>
&lt;p>目前已经出现了十余种共识机制算法，其中比较最为知名的有工作量证明机制（PoW，Proof of Work）、权益证明机制（PoS，Proof ofStake）、股份授权证明机制（DPoS，Delegated ProofofStake）等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>激励层，将经济因素集成到区块链技术体系中来，包括经济激励的发行机制和分配机制等，主要出现在公有链当中。&lt;/p>
&lt;p>在公有链中必须激励遵守规则参与记账的节点，并且惩罚不遵守规则的节点，才能让整个系统朝着良性循环的方向发展。而在私有链当中，则不一定需要进行激励，因为参与记账的节点往往是在链外完成了博弈，通过强制力或自愿来要求参与记账。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>合约层，封装各类脚本、算法和智能合约，是区块链可编程特性的基础。&lt;/p>
&lt;p>比特币本身就具有简单脚本的编写功能，而以太坊极大的强化了编程语言协议，理论上可以编写实现任何功能的应用。如果把比特币看成是全球账本的话，以太坊可以看作是一台“全球计算机”，任何人都可以上传和执行任意的应用程序，并且程序的有效执行能得到保证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>应用层，封装了区块链的各种应用场景和案例，比如搭建在以太坊上的各类区块链应用即部署在应用层，而未来的可编程金融和可编程社会也将会是搭建在应用层。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>共识算法&lt;/p>
&lt;ul>
&lt;li>pow&lt;/li>
&lt;li>pos&lt;/li>
&lt;li>dpos&lt;/li>
&lt;li>poa&lt;/li>
&lt;li>pbft&lt;/li>
&lt;li>raft&lt;/li>
&lt;/ul>
&lt;p>HD Wallet&lt;/p>
&lt;p>BIP32 定义 Hierarchical Deterministic wallet (简称 &amp;ldquo;HD Wallet&amp;rdquo;)，是一个系统可以从单个 seed 产生树状结构储存多组 keypairs（私钥和公钥）。&lt;/p>
&lt;p>BIP39 定义钱包助记词和 seed 生成规则，一般由 12 -24 个单字组成，称为 mnemonic。&lt;/p>
&lt;p>BIP44 基于 BIP32 的系统，赋予树状结构中的各层特殊的意义。让同一个 seed 可以支援多币种、多帐户等 。&lt;/p>
&lt;p>使用助记词生成确定性钱包。&lt;/p>
&lt;p>HD Wallet 采用 2048 个单词，或者汉字作为助记词，这些词库对外公开，很多钱包仅仅使用 path 第一个地址并且没有加密。如果你知道某个用户的助记词中的 11 各词的排列顺序，那么我们就可以通过穷举方法，算出所有地址的私钥，如果碰巧找到了已经在使用的地址。就可以将里面的 ETH 全部转走。&lt;/p>
&lt;h2 id="以太坊常用操作">以太坊常用操作&lt;/h2>
&lt;p>计算 gas 费用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var estimateGas = eth.estimateGas({from:eth.accounts[1], to: eth.accounts[2], value: web3.toWei(1)})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var cost = estimateGas * gasPrice
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解锁账户&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">personal.unlockAccount(eth.accounts[3], &amp;#34;12345678&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>转账&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var txnHash = eth.sendTransaction({from: eth.accounts[3], to: eth.accounts[5], value: eth.getBalance(eth.accounts[3]) - cost, gas: estimateGas})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查看交易细节&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">web3.eth.getTransaction(txnHash)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>获取余额&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">eth.getBalance(eth.accounts[3])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>keystore 文件&lt;/p>
&lt;p>以太坊的每个外部账户都是由一对密钥（一个公钥和一个私钥）定义的。账户以地址为索引，地址由公钥衍生而来，取公钥的最后 20 个字节。&lt;/p>
&lt;p>每对私钥 /地址都编码在一个钥匙文件里，也就是我们说的 keystore 文件。该文件是 JSON 文本文件，可以用任何文本编辑器打开和浏览。钥匙文件的关键部分——账户私钥，通常用你创建帐户时设置的密码进行加密。如果你丢失了这个文件，你就丢失了私钥，意味着你失去了签署交易的能力，意味着你的资金被永久的锁定在了你的账户里。&lt;/p>
&lt;p>批量转账&lt;/p>
&lt;p>有时我们需要将 Token 发送到多个地址上去。通常的做法就是使用 web.js 写一个循环程序，但是实际使用过程中发现这种做法存在很多问题，常会发生转账失败情况。&lt;/p>
&lt;p>经过分析造成发送失败原因是，频率太高，因为 web.js 是异步操作，当前程序还未完成交易，交易尚未确认的情况下第二笔交易发送出去，这时就会出错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">web3.eth.getTransactionCount(from).then(function(nonce){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 问题就出在 nonce ， nonce 如同数据库中的序列主键，如果上一个交易没有完成，下一个交易取得 nonce + 1 后与上一个 pending 的交易相同，产生冲突
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最好的解方案是在合约中实现批量转账功能，这样需要一个交易 txhash 完成多比交易。&lt;/p>
&lt;p>如果你的 Token 已经在使用了，且没有批量转账的功能怎么解决呢？我们可以在写一个 Token 继承原来的 Token，在新的 Token 中实现批量转账功能。&lt;/p>
&lt;p>代币兑换&lt;/p>
&lt;p>兑换代币通常是指使用 ETH 或者其他币兑换 Token。通常是这样实现的，使用智能合约，将 ETH 达到指定合约地址，合约会打回代币给用户。&lt;/p>
&lt;p>这种方式不用人工参与，也不用开发程序。缺点不能做到实时汇率，需要人工设置汇率。&lt;/p>
&lt;p>ERC20 Token&lt;/p>
&lt;p>ERC20 “描述了实现代币合约的标准功能”，ERC20 是各个代币的标准接口。ERC20 代币仅仅是以太坊代币的子集。为了充分兼容 ERC20，开发者需要将一组特定的函数集成到他们的智能合约中，以便在高层面能够执行以下操作：&lt;/p>
&lt;ul>
&lt;li>获得代币总供应量&lt;/li>
&lt;li>获得账户余额&lt;/li>
&lt;li>转让代币&lt;/li>
&lt;li>批准花费代币&lt;/li>
&lt;/ul>
&lt;p>最简单的合约如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">pragma solidity ^0.4.24;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">contract EncryptToken {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint256 INITIAL_SUPPLY = 666666;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mapping(address =&amp;gt; uint256) balances;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> constructor() public {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balances[msg.sender] = INITIAL_SUPPLY;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function transfer(address to, uint256 amount) public{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert(balances[msg.sender] &amp;gt; amount);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balances[msg.sender] -= amount;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balances[to] += amount;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function balanceOf(address owner) constant public returns (uint256){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return balances[owner];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用了 openzeppeline-solidity 的安全标准代币合约是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> pragma solidity ^0.4.24;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> import &amp;#34;openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> contract BloggerCoin is StandardToken{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string public name = &amp;#34;BloggerCoin&amp;#34;; // 名字
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> string public symbol = &amp;#34;BLC&amp;#34;; // 简称
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint8 public decimals = 4; // 10的4次方
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint256 public INITIAL_SUPPLY = 666666;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> constructor() public{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> totalSupply_ = INITIAL_SUPPLY;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balances[msg.sender] = INITIAL_SUPPLY;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>谈谈聊天机器人框架的实现原理</title><link>https://example.com/p/%E8%B0%88%E8%B0%88%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link><pubDate>Wed, 22 Aug 2018 19:39:12 +0000</pubDate><guid>https://example.com/p/%E8%B0%88%E8%B0%88%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid><description>&lt;p>在这篇文章不考虑人工智能，谈谈我对聊天机器人框架实现机制的理解。&lt;/p>
&lt;h2 id="聊天机器人">聊天机器人&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>聊天机器人&lt;/strong>（Chatterbot）是经由对话或文字进行交谈的计算机程序[&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA#cite_note-target-1" target="_blank" rel="noopener"
>1]&lt;/a>。能够模拟人类对话，通过&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%B5%8B%E8%AF%95" target="_blank" rel="noopener"
>图灵测试&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以看到现有的 IM 工具上已经有了很多机器人，其实聊天机器人不只是单纯的和用户进行聊天，他其实还可以做很多事情，例如根据用户输入的一些话，可以帮用户订餐。另外在运维领域，也出现了 chatops，通过和机器人聊天，进行运维操作。&lt;/p>
&lt;h2 id="机器人开发框架">机器人开发框架&lt;/h2>
&lt;p>作为聊天机器人开发者，面对如此多的 IM 工具和 SDK，常会感到无所适从。Bot 开发框架就是对聊天机器人开发过程中的人工内容做抽象化处理。简单地解释，机器人开发框架就是用来制造机器人并定义其行为。&lt;/p>
&lt;p>然而尽管很多机器人框架宣称「代码一旦写好可部署到任何地方」，但是还会是出现为每一个 IM 工具开发一个单独的聊天机器人。而一个良好的机器人框架主要包含开发 SDK，连接器和模拟器等。&lt;/p>
&lt;p>使用机器人框架其实并不适合初学者学习聊天机器人开发。它们尝试自动化太多工作，对初学者掩盖了基础机制。&lt;/p>
&lt;h2 id="实现方式">实现方式&lt;/h2>
&lt;ul>
&lt;li>webhook 事件回调&lt;/li>
&lt;li>FSM 状态机&lt;/li>
&lt;li>workflow 工作流&lt;/li>
&lt;/ul>
&lt;p>最简单的机器人是没有上下文的语义理解的一问一答，仅仅是对用户的对话进行响应，这种就可以采用 webhook 的方式进行开发。不需要采用什么开发框架。&lt;/p>
&lt;p>那么对于多轮对话的时候，就需要进行一定的对话管理。由此引入了 FSM 状态机。&lt;/p>
&lt;p>可能有人不是很懂有限状态机，这里做一下简单说明。&lt;/p>
&lt;blockquote>
&lt;p>有限状态机在现实生活中其实随处可见，伸缩式圆珠笔其实就是一个有限状态机（两种状态互相转换）。&lt;/p>
&lt;p>有限状态机，缩写为 FSM，又称为有限状态自动机，简称状态机。是表示有限个&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%8A%B6%E6%80%81" target="_blank" rel="noopener"
>状态&lt;/a>以及在这些状态之间的转移和动作等行为的&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener"
>数学模型&lt;/a>。&lt;/p>
&lt;p>可以总结为：f(state, action) =&amp;gt; state’&lt;/p>
&lt;p>也就是说，这个函数采用当前的状态和一次行动（即更改状态的方法），之后将该行动应用于这种状态并返回新的状态。&lt;/p>
&lt;p>可以认为状态机是图灵完备的。&lt;/p>
&lt;/blockquote>
&lt;p>我们可以将对话看做是在有限状态内跳转的过程，每个状态都有对应的动作和回复，如果能从开始节点顺利的流转到终止节点，任务就完成了。&lt;/p>
&lt;p>我们可以将对话的过程，分为一个个的状态，然后使用 DSL 来实现一个 FSM，对于开发者来讲，我们只需要关注一个个状态函数即可。&lt;/p>
&lt;p>特点是：&lt;/p>
&lt;ul>
&lt;li>人为定义对话流程&lt;/li>
&lt;li>完全有系统主导，系统问用户答&lt;/li>
&lt;li>答非所问的情况直接忽略&lt;/li>
&lt;li>建模简单，能清晰明了的把交互匹配到模型&lt;/li>
&lt;li>难以扩展，很容易变的复杂&lt;/li>
&lt;li>适用于简单的任务，难以处理复杂问题&lt;/li>
&lt;li>缺少灵活性，表达能力有限，输入有限，对话结构和流转路径有限&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const {startWith, when, goto, stay, stop} = botkit.DSL(fsm);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">startWith(MyStates.IDLE, {counter: 0});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.IDLE)(async (sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.UI)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.STEP1)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.STEP2)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.DONE)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.EMPTY)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">when(MyStates.LOOP)((sender, content, data) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从示例中可以发现，基于 fsm 的机器人框架需要使用类似 DSL 领域特定语言一样的描述语言，定义各种各样的状态，每一个状态都有触发点。当满足某个状态条件时，进入该状态，执行该状态的逻辑。这种基于状态机的机器人框架，对于简单的场景比较容易写，但是如果是遇到了复杂的场景，比如多轮对话中还附带上下文信息，就会写起来非常复杂。&lt;/p>
&lt;p>于是引入了基于工作流的 chatbot 框架。其实工作流是对 fsm 的一种简化封装，本质上来讲，工作流能做到的，fsm 状态机也能做到，而且 fsm 状态机或许能拆的更细，但是工作流的一个个 function，或者是 function 的集合 dialog，可以互相组合，开发起来更符合大部分人的直觉。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>routing dialog&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// hotels.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(&amp;#39;Welcome to the Hotels finder!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder.Prompts.text(session, &amp;#39;Please enter your destination&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session, results, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.dialogData.destination = results.response;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(&amp;#39;Looking for hotels in %s&amp;#39;, results.response);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// app.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var bot = new builder.UniversalBot(connector, [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bot.dialog(&amp;#39;hotels&amp;#39;, require(&amp;#39;./hotels&amp;#39;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bot.dialog(&amp;#39;flights&amp;#39;, require(&amp;#39;./flights&amp;#39;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过 routing dialog，我们可以实现 dialog 的复用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>waterfall dialog&lt;/p>
&lt;p>一个瀑布流的 dialog，可以让我们在一个 dialog 中像流一样完成一系列的动作。就像 fsm 的多种状态的集合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">[
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Destination
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(&amp;#39;Welcome to the Hotels finder!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> builder.Prompts.text(session, &amp;#39;Please enter your destination&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session, results, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.dialogData.destination = results.response;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(&amp;#39;Looking for hotels in %s&amp;#39;, results.response);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function (session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var destination = session.dialogData.destination;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var checkIn = new Date(session.dialogData.checkIn);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var checkOut = checkIn.addDays(session.dialogData.nights);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;Ok. Searching for Hotels in %s from %d/%d to %d/%d...&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> destination,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> checkIn.getMonth() + 1, checkIn.getDate(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> checkOut.getMonth() + 1, checkOut.getDate());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Async search
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Store
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .searchHotels(destination, checkIn, checkOut)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .then(function (hotels) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Results
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(&amp;#39;I found in total %d hotels for your dates:&amp;#39;, hotels.length);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var message = new builder.Message()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .attachmentLayout(builder.AttachmentLayout.carousel)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .attachments(hotels.map(hotelAsAttachment));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.send(message);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // End
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> session.endDialog();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>state&lt;/p>
&lt;p>在一个 dialog 上下文中共享的数据，或者在多个 dialog 中共享的数据。对于微软的 botbuilder 来讲，他们提供了如下几个 API：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Field&lt;/th>
&lt;th>Use Cases&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>userData&lt;/td>
&lt;td>Stores information globally for the user across all conversations.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>conversationData&lt;/td>
&lt;td>Stores information globally for a single conversation. This data is visible to everyone within the conversation so care should be used to what’s stored there. It’s disabled by default and needs to be enabled using the bots &lt;a class="link" href="https://docs.botframework.com/en-us/node/builder/chat-reference/interfaces/_botbuilder_d_.iuniversalbotsettings.html#persistconversationdata" target="_blank" rel="noopener"
>&lt;code>persistConversationData&lt;/code>&lt;/a> setting.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>privateConversationData&lt;/td>
&lt;td>Stores information globally for a single conversation but its private data for the current user. This data spans all dialogs so it’s useful for storing temporary state that you want cleaned up when the conversation ends.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dialogData&lt;/td>
&lt;td>Persists information for a single dialog instance. This is essential for storing temporary information in between the steps of a waterfall.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;h2 id="conversation-ui">Conversation UI&lt;/h2>
&lt;p>对话式 UI（Conversation UI，下文简称 CUI）。&lt;/p>
&lt;p>CUI 到底是什么？很好理解，我们日常跟人聊天的微信、短信界面就是。由一条条消息组成，按时间先后展示出来，就可以看作 CUI。&lt;/p>
&lt;p>chatbot 在与用户交流时，不单单是只有文字，还会需要用户进行互动，这时候就是 CUI 的用武之地了。我们可以和移动端进行约定，对一些特定的消息格式进行渲染，这样就可以做出按钮，列表等。&lt;/p>
&lt;h2 id="bot-service">Bot Service&lt;/h2>
&lt;p>作为一个机器人框架，开发完成之后，还需要和 telegram，Facebook messenger，slack 等 IM 平台进行对接，如果要开发者一个个对接的话，将会特别麻烦。作为 chatbot 开发框架的一部分，bot service 的工作就是对接 IM 平台。&lt;/p>
&lt;h2 id="bot-builder-源码阅读">Bot Builder 源码阅读&lt;/h2>
&lt;p>微软的 botbuilder-js 出到了 V4 版本，在新版本的机器人框架有着很大的变动，相比于 V3 目录结构变化了，而且机器人编写流程也有了一定的差异。&lt;/p>
&lt;p>项目结构&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">├── botbuilder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botbuilder-ai
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botbuilder-azure
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botbuilder-core
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botbuilder-dialogs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botframework-config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botframework-connector
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── botframework-schema
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目录结构更加的组件化。&lt;/p>
&lt;p>如果我们不使用微软的服务，那么 botbuilder-ai 和 botbuilder-azure 其实不重要。&lt;/p>
&lt;h3 id="botbuilder">botbuilder&lt;/h3>
&lt;p>botbuilder 是框架的入口，在这个 package 中做的事情比较简单：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./botFrameworkAdapter&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./fileTranscriptStore&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;../../botbuilder-core/lib&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>导出 botbuilder-core 和继承了 botAdapter 的子类 botFrameworkAdapter。&lt;/p>
&lt;p>fileTranscriptStore 是存储每个 activity 的 transcript 到文件中，Transcript 是人和 bot 的对话动作的日志。&lt;/p>
&lt;p>如果我们要定制自己的 bot 动作，其实就可以继承 botAdapter，然后对接自己的 IM 等等。botAdapter 也是 botbuilder-core 中的，所以 botbuilder-core 是核心，只要读懂了 botbuilder-core，就可以说是理解了微软的机器人框架。&lt;/p>
&lt;h3 id="botbuilder-core">botbuilder-core&lt;/h3>
&lt;p>看 botbuilder-core，也从 index.ts 开始。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;../../botframework-schema/lib&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./autoSaveStateMiddleware&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./botAdapter&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./botState&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./botStatePropertyAccessor&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./botStateSet&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./browserStorage&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./cardFactory&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./conversationState&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./memoryStorage&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./memoryTranscriptStore&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./messageFactory&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./middlewareSet&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./privateConversationState&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./propertyManager&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./recognizerResult&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./showTypingMiddleware&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./storage&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./testAdapter&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./transcriptLogger&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./turnContext&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./userState&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里引入了一个 botframework-schema，通过名字可以看出来，这就是一个类型定义的包，主要是机器人 Activity 的 Schema。Activity 是人和 bot 所做的会话的程序级别的表示，该 schema 中包含了文本协议、多媒体和非内容动作（如社交互动和打字指示符）的规定。&lt;/p></description></item><item><title>基于以太坊的 Parity 联盟链部署</title><link>https://example.com/p/%E5%9F%BA%E4%BA%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84-parity-%E8%81%94%E7%9B%9F%E9%93%BE%E9%83%A8%E7%BD%B2/</link><pubDate>Wed, 22 Aug 2018 16:51:13 +0000</pubDate><guid>https://example.com/p/%E5%9F%BA%E4%BA%8E%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%9A%84-parity-%E8%81%94%E7%9B%9F%E9%93%BE%E9%83%A8%E7%BD%B2/</guid><description>&lt;p>公司项目中使用公网上的以太坊私链，交易速度比较慢，于是这几天都在鼓捣基于以太坊的联盟链，parity 是可以构建出一个基于 PoA 共识的私链，而且兼容以太坊的合约。这篇文章主要是记录自己的踩坑经历，主要实现了节点的搭建，合约的部署以及本地以太坊浏览器的启动。&lt;/p>
&lt;h2 id="部署联盟链">部署联盟链&lt;/h2>
&lt;p>parity 的文档：&lt;a class="link" href="https://wiki.parity.io/Demo-PoA-tutorial" target="_blank" rel="noopener"
>https://wiki.parity.io/Demo-PoA-tutorial&lt;/a>&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>首先是下载 parity，在 mac 下是直接 brew 安装即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew tap paritytech/paritytech
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install parity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创世区块">创世区块&lt;/h3>
&lt;p>创世区块的配置文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// demo-spec.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;DemoPoA&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;engine&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;authorityRound&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;params&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stepDuration&amp;#34;: &amp;#34;5&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;validators&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;list&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x00bd138abd70e2f00903268f3db08f2d25677c9e&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x00aa39d30f0d20ff03a22ccfc30b7efbfca597c2&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;params&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;gasLimitBoundDivisor&amp;#34;: &amp;#34;0x400&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;maximumExtraDataSize&amp;#34;: &amp;#34;0x20&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;minGasLimit&amp;#34;: &amp;#34;0x1388&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;networkID&amp;#34;: &amp;#34;0x2323&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;eip155Transition&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;validateChainIdTransition&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;eip140Transition&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;eip211Transition&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;eip214Transition&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;eip658Transition&amp;#34;: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;genesis&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;seal&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;authorityRound&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;step&amp;#34;: &amp;#34;0x0&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;signature&amp;#34;: &amp;#34;0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;difficulty&amp;#34;: &amp;#34;0x20000&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;gasLimit&amp;#34;: &amp;#34;0x5B8D80&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;accounts&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x0000000000000000000000000000000000000001&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;balance&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;builtin&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;ecrecover&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pricing&amp;#34;: { &amp;#34;linear&amp;#34;: { &amp;#34;base&amp;#34;: 3000, &amp;#34;word&amp;#34;: 0 } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x0000000000000000000000000000000000000002&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;balance&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;builtin&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;sha256&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pricing&amp;#34;: { &amp;#34;linear&amp;#34;: { &amp;#34;base&amp;#34;: 60, &amp;#34;word&amp;#34;: 12 } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x0000000000000000000000000000000000000003&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;balance&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;builtin&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;ripemd160&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pricing&amp;#34;: { &amp;#34;linear&amp;#34;: { &amp;#34;base&amp;#34;: 600, &amp;#34;word&amp;#34;: 120 } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x0000000000000000000000000000000000000004&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;balance&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;builtin&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;identity&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;pricing&amp;#34;: { &amp;#34;linear&amp;#34;: { &amp;#34;base&amp;#34;: 15, &amp;#34;word&amp;#34;: 3 } }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;0x004ec07d2329997267ec62b4166639513386f32e&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;balance&amp;#34;: &amp;#34;10000000000000000000000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="node0">node0&lt;/h3>
&lt;p>node0 节点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c">## node0.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">parity&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;demo-spec.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">base_path&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;parity0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30300&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">rpc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8546&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;web3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;eth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;net&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;personal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity_set&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;traces&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rpc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity_accounts&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">interface&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">cors&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">hosts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">websockets&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8456&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">account&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">password&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;node.pwds&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">mining&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">engine_signer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0x00bd138abd70e2f00903268f3db08f2d25677c9e&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">reseal_on_txs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="node1">node1&lt;/h3>
&lt;p>node1 节点：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c">## node1.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">parity&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;demo-spec.json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">base_path&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;parity1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">30301&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">rpc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8541&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">apis&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;web3&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;eth&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;net&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;personal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity_set&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;traces&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rpc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;parity_accounts&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">websockets&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">port&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8451&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">ipc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">account&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">password&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;node.pwds&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">mining&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">engine_signer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;0x00aa39d30f0d20ff03a22ccfc30b7efbfca597c2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">reseal_on_txs&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;none&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">ui&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="启动并创建账户">启动并创建账户&lt;/h3>
&lt;p>启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">parity --config node0.toml --fat-db=on
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">parity --config node1.toml --fat-db=on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建账户：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;parity_newAccountFromPhrase&amp;#34;,&amp;#34;params&amp;#34;:[&amp;#34;node0&amp;#34;, &amp;#34;node0&amp;#34;],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8546
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;parity_newAccountFromPhrase&amp;#34;,&amp;#34;params&amp;#34;:[&amp;#34;user&amp;#34;, &amp;#34;user&amp;#34;],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8546
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;parity_newAccountFromPhrase&amp;#34;,&amp;#34;params&amp;#34;:[&amp;#34;node1&amp;#34;, &amp;#34;node1&amp;#34;],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8541
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就创建了 3 个账户，其中 node0 和 node1 是见证者 user 是初始发钱的。&lt;/p>
&lt;p>因为 parity ui 是要连接 8546 端口，所以这里就让 node0 的 rpc 的端口是 8546。&lt;/p>
&lt;h3 id="节点互通和转账">节点互通和转账&lt;/h3>
&lt;p>让 node0 和 node1 节点相通，其实就是让两个节点成为一个网络：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// 获取node0的encode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;parity_enode&amp;#34;,&amp;#34;params&amp;#34;:[],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8546
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 调用node1的rpc，将node0加入， RESULT就是上一步获取的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;parity_addReservedPeer&amp;#34;,&amp;#34;params&amp;#34;:[&amp;#34;enode://RESULT&amp;#34;],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8541
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们先给两个账户转账：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl --data &amp;#39;{&amp;#34;jsonrpc&amp;#34;:&amp;#34;2.0&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;personal_sendTransaction&amp;#34;,&amp;#34;params&amp;#34;:[{&amp;#34;from&amp;#34;:&amp;#34;0x004ec07d2329997267Ec62b4166639513386F32e&amp;#34;,&amp;#34;to&amp;#34;:&amp;#34;0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e&amp;#34;,&amp;#34;value&amp;#34;:&amp;#34;0xde0b6b3a7640000&amp;#34;}, &amp;#34;user&amp;#34;],&amp;#34;id&amp;#34;:0}&amp;#39; -H &amp;#34;Content-Type: application/json&amp;#34; -X POST localhost:8540
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从 user 中转了 1 个以太坊到了 node0 账户中，同样再转给 node1。&lt;/p>
&lt;h2 id="部署合约">部署合约&lt;/h2>
&lt;p>再使用 truffle 开发完合约之后，把账户部署到我们刚刚起来的联盟链。部署合约需要消耗一定的 gas，truffle 使用的是 HD wallet 的 Provider，所以我们要先给一个钱包转一些以太币。&lt;/p>
&lt;p>因为这里用的是 metamask，在最初创建钱包的时候有设置 12 个助记词，所以先让钱包连接到 node0 节点：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fuioo9rlayj30ab0h2gne.jpg"
loading="lazy"
>&lt;/p>
&lt;p>创建一个账户，向那个账户转几个以太币。&lt;/p>
&lt;p>然后在 truffle 中，配置如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// truffle.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // See &amp;lt;http://truffleframework.com/docs/advanced/configuration&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // to customize your Truffle configuration!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> development: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> host: &amp;#34;127.0.0.1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 8545,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> network_id: &amp;#34;*&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> parity: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> provider: function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new HDWalletProvider(&amp;#39;这里写助记词&amp;#39;, &amp;#34;http://127.0.0.1:8546&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> network_id: 3,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gas: 4700000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在执行部署合约的时候，指定 parity 即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">truffle migrate --network parity
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="部署以太坊浏览器">部署以太坊浏览器&lt;/h2>
&lt;p>以太坊的浏览器找了好几个，最后选中了&lt;a class="link" href="https://github.com/gobitfly/etherchain-light" target="_blank" rel="noopener"
>etherchain-light&lt;/a>。部署起来简单。&lt;/p>
&lt;p>首先 clone 代码到本地，然后 npm 安装依赖。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git clone https://github.com/gobitfly/etherchain-light --recursive
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd etherchain-light &amp;amp;&amp;amp; yarn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一定要用&lt;code>—-recursive&lt;/code>，将所有 git 的子模块都下载下来。&lt;/p>
&lt;p>修改 config.js.example 文件为 config.js，然后把 Provider 改为 HttpProvider，连接到 node0 的节点即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// config.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var web3 = require(&amp;#39;web3&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var net = require(&amp;#39;net&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var config = function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.logFormat = &amp;#34;combined&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // this.ipcPath = process.env[&amp;#34;HOME&amp;#34;] + &amp;#34;/.local/share/io.parity.ethereum/jsonrpc.ipc&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // this.provider = new web3.providers.IpcProvider(this.ipcPath, net);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.provider = new web3.providers.HttpProvider(&amp;#34;http://127.0.0.1:8546&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // ... 省略其余代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = config;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行&lt;code>npm start&lt;/code>之后即可将以太坊浏览器运行起来。然后在浏览器中访问&lt;code>http://localhost:3000&lt;/code>。&lt;/p>
&lt;h2 id="思考">思考&lt;/h2>
&lt;p>PoA 共识基于权威的共识机制，和基于 raft 协议的共识机制具体哪个更快？&lt;/p>
&lt;p>Parity 文档中没有找到和权限控制相关的模块，用它来做联盟链还有待确定。&lt;/p>
&lt;p>Quorum 是 JP 摩根开源的基于以太坊的联盟链，使用的 raft 算法，可以研究研究。&lt;/p>
&lt;p>还不是很清楚，fabric 已经是联盟链主流的情况下，选择以太坊做联盟链的好处有多大。&lt;/p></description></item><item><title>dive-into-redis</title><link>https://example.com/p/dive-into-redis/</link><pubDate>Mon, 20 Aug 2018 09:39:08 +0000</pubDate><guid>https://example.com/p/dive-into-redis/</guid><description>&lt;p>redis 持久化，&lt;/p>
&lt;p>机制有两种：&lt;/p>
&lt;ul>
&lt;li>快照：全量备份，二进制序列化，存储紧凑&lt;/li>
&lt;li>AOF 日志：连续的增量备份，内存数据修改的文本&lt;/li>
&lt;/ul></description></item><item><title>golang 踩坑</title><link>https://example.com/p/golang-%E8%B8%A9%E5%9D%91/</link><pubDate>Tue, 14 Aug 2018 20:10:55 +0000</pubDate><guid>https://example.com/p/golang-%E8%B8%A9%E5%9D%91/</guid><description>&lt;h3 id="一">一&lt;/h3>
&lt;blockquote>
&lt;p>x509 error when using HTTPS inside a Docker container&lt;/p>
&lt;/blockquote>
&lt;p>因为 docker 中没有 CA 证书。&lt;/p>
&lt;p>普通的镜像解决办法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">FROM ubuntu:14.04.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get install -y ca-certificates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CMD curl https://www.google.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果是 alpine 的参考这个：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">FROM docker.finogeeks.club/base/alpine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MAINTAINER &amp;#34;zhuzhenfeng@finogeeks.club&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN set -ex \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; apk add --no-cache ca-certificates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">COPY src/wallet/wallet /opt/wallet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENTRYPOINT /opt/wallet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="二">二&lt;/h3>
&lt;blockquote>
&lt;p>panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x38 pc=0x26df]&lt;/p>
&lt;/blockquote>
&lt;p>&lt;em>&amp;ldquo;An error is returned if caused by client policy (such as CheckRedirect), or if there was an HTTP protocol error. A non-2xx response doesn&amp;rsquo;t cause an error.&lt;/em>&lt;/p>
&lt;p>&lt;em>When err is nil, resp always contains a non-nil resp.Body.&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>是 http 请求的时候，defer res.Body.Close()引起的，应该在 err 检查之后。&lt;/p>
&lt;p>The &lt;code>defer&lt;/code> only defers the function call. The field and method are accessed immediately.&lt;/p></description></item><item><title>以太坊开发总结</title><link>https://example.com/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 10 Aug 2018 18:57:09 +0000</pubDate><guid>https://example.com/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</guid><description>&lt;p>最近因公司项目需要，做为一个打杂工程师，操起键盘和笔记本开始了以太坊的踩坑之旅。以太坊的开发比较新，变化也比较多，还好有&lt;a class="link" href="https://github.com/cctanfujun" target="_blank" rel="noopener"
>@cctanfujun&lt;/a>的手把手带领下，半只脚踏入了以太坊的开发的大门。&lt;/p>
&lt;p>在这篇文章中，我将会简单介绍一下以太坊的基本概念，以及我现在用到的一些工具，还有具体的一个开发流程。因为我还没有接触到如何上主链，所以这些都是基于测试链讲解。希望能给大家带来一些帮助。&lt;/p>
&lt;p>什么是区块链&lt;/p>
&lt;p>相信大家对区块链都有自己的理解，不仅仅是互联网公司，传统企业也在“币改转型”。&lt;/p>
&lt;p>**简言之，区块链就是数据库。**它是特定数据的数据库，里面的数据不断增长，具有非凡特性：&lt;/p>
&lt;ol>
&lt;li>一旦数据存储于数据库，永远都无法被修改或删除。区块链上的每个记录会被永久保存下来。&lt;/li>
&lt;li>没有单独的个人或组织能维护该数据库。必须要上千个人才行，每个人都有数据库的副本。&lt;/li>
&lt;/ol>
&lt;p>什么是以太坊？&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>以太坊&lt;/strong>（英语：Ethereum）是一个&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%BA%90" target="_blank" rel="noopener"
>开源&lt;/a>的有&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6" target="_blank" rel="noopener"
>智能合约&lt;/a>功能的公共&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE" target="_blank" rel="noopener"
>区块链&lt;/a>平台[&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A#cite_note-Gray-2014-04-07-1" target="_blank" rel="noopener"
>1]&lt;/a>[&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A#cite_note-Vigna-28-Oct-2015-2" target="_blank" rel="noopener"
>2]&lt;/a>。通过其专用&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81" target="_blank" rel="noopener"
>加密货币&lt;/a>&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%B8%81" target="_blank" rel="noopener"
>以太币&lt;/a>（Ether，又称“以太币”）提供&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96" target="_blank" rel="noopener"
>去中心化&lt;/a>的&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E6%9C%BA" target="_blank" rel="noopener"
>虚拟机&lt;/a>（称为“以太虚拟机”Ethereum Virtual Machine）来处理&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%AF%B9%E7%82%B9" target="_blank" rel="noopener"
>点对点&lt;/a>合约。&lt;/p>
&lt;/blockquote>
&lt;p>为什么选择以太坊？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>智能合约&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代币&lt;/p>
&lt;/li>
&lt;li>
&lt;p>资料相对完善，相对容易开发&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大佬对以太坊比较熟悉&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大佬对以太坊比较熟悉&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大佬对以太坊比较熟悉&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>重要的事情说三遍，有一个经验丰富的人带领，做东西肯定事半功倍。&lt;/p>
&lt;p>自己动手写区块链&lt;/p>
&lt;p>这里提供两个教程，一个是书，一个是视频。其中视频和书是对应的，不清楚是不是同一个作者。&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/liuchengxu/blockchain-tutorial" target="_blank" rel="noopener"
>Blockchain Tutorial&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.imooc.com/learn/1021?mc_marking=cfb7fb7f097d2fca6dabbe4c5e71cf77&amp;amp;mc_channel=syb38" target="_blank" rel="noopener"
>私有区块链，我们一起 GO&lt;/a>&lt;/p>
&lt;p>以太坊开发&lt;/p>
&lt;p>由于我是专注于后端的开发，现在的技术栈是&lt;/p>
&lt;ul>
&lt;li>node&lt;/li>
&lt;li>go&lt;/li>
&lt;/ul>
&lt;p>正式进入以太坊的开发。这是我这段时间接触到的一些资源：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>go-ethereum：也就是 geth，官方的 go 版本的客户端&lt;/p>
&lt;/li>
&lt;li>
&lt;p>solidity：智能合约编程语言&lt;/p>
&lt;/li>
&lt;li>
&lt;p>truffle：智能合约的编程框架，基于 nodejs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ganache：启动了多个节点本地私链&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rinkeby：以太坊测试链&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Etherscan：以太坊区块链浏览器，可以查询交易&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MetaMask：chrome 的钱包插件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>web3：官方封装的开发 Dapp 的库，可以调用合约&lt;/p>
&lt;/li>
&lt;li>
&lt;p>truffle-hdwallet-provider：web3 的确定性钱包 provider&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>概念&lt;/p>
&lt;p>账户和钱包&lt;/p>
&lt;p>在以太坊中，一个账号就是一个地址（address），里面有余额。&lt;/p>
&lt;p>钱包是保管私钥的地址， 私钥-&amp;gt;公钥-&amp;gt;地址 这是一个一一对应的关系，钱包里面可以有多个账户。&lt;/p>
&lt;p>私钥不同的生成方法，对应着不同的钱包结构，因此分为了确定性钱包和非确定性钱包。&lt;/p>
&lt;ul>
&lt;li>比特币最早的客户端（Satoshi client）就是非确定性钱包，钱包是一堆随机生成的私钥的集合。 客户端会预先生成 100 个随机私钥，并且每个私钥只使用一次。&lt;/li>
&lt;li>确定性钱包则不需要每次转账都要备份，确定性钱包的私钥是对种子进行单向哈希运算生成的，种子是一串由随机数生成器生成的随机数。在确定性钱包中，只要有这个种子，就可以找回所有私钥&lt;/li>
&lt;/ul>
&lt;p>HD 钱包是目前常用的确定性钱包 ，说到 HD 钱包，大家可能第一反应会想到硬件钱包 （Hardware Wallet），其实这里的 HD 是 Hierarchical Deterministic（分层确定性）的缩写。&lt;/p>
&lt;blockquote>
&lt;p>所谓分层，就是一个大公司可以为每个子部门分别生成不同的私钥，子部门还可以再管理子子部门的私钥，每个部门可以看到所有子部门里的币，也可以花这里面的币。也可以只给会计人员某个层级的公钥，让他可以看见这个部门及子部门的收支记录，但不能花里面的钱，使得财务管理更方便了。&lt;/p>
&lt;/blockquote>
&lt;p>生成规则是：&lt;/p>
&lt;ol>
&lt;li>生成一个助记词（参见 BIP39）&lt;/li>
&lt;li>该助记词使用 PBKDF2 转化为种子（参见 BIP39）&lt;/li>
&lt;li>种子用于使用 HMAC-SHA512 生成根私钥（参见 BIP32）&lt;/li>
&lt;li>从该根私钥，导出子私钥（参见 BIP32），其中节点布局由 BIP44 设置&lt;/li>
&lt;/ol>
&lt;p>DAPP&lt;/p>
&lt;p>以太坊与其他加密货币的主要不同在于，以太坊不是单纯的货币，而是一个环境/平台。在这个平台上，任何人都可以利用区块链的技术，通过智能合约来构建自己的项目和 DAPPS（去中心化应用）。DAPPS 发布的方式通常是采用被称为“ICO”的众筹方式。简单来说，你需要用你的以太来购买相应 DAPP 的一些 tokens。&lt;/p>
&lt;p>代币&lt;/p>
&lt;p>为什么不能在这些 DAPPS 中直接使用以太完成交易？为什么我们需要给 DAPPS 创造一种原生的货币？&lt;/p>
&lt;p>因为即使在现实生活中，我们也在使用某种形式的 Token 来代替现金。比如：在游乐场里，你先用现金兑换代币，然后用代币来支付各种服务。在这个例子中，现金就是以太，代币就是 token。&lt;/p>
&lt;p>ERC20：以太坊 token 标准&lt;/p>
&lt;p>简单来说，ERC20 是开发者在自己的 tokens 中必须采用的一套具体的公式/方法，从而确保该 token 与 ERC20 兼容。在合约执行过程中，下面的四个行为是 ERC20 tokens 所需要完成的：&lt;/p>
&lt;ul>
&lt;li>获得 Token 供给总量.&lt;/li>
&lt;li>获得账户余额.&lt;/li>
&lt;li>从一方向另一方转移 Token.&lt;/li>
&lt;li>认可 Token 作为货币性资产的使用.&lt;/li>
&lt;/ul>
&lt;p>大佬说：代币其实就是智能合约，而这个合约是发生了 0 个以太的转账。&lt;/p>
&lt;p>Gas 和挖矿&lt;/p>
&lt;p>不少小哥哥或小姐姐会认为挖矿就是挖以太币，其实代币不用挖的，当你挖到了区块，代币是给你的奖励。因为任何一笔交易都需要记录，一个区块的大小也就几 M，存储不了那么多交易信息，所以要持续挖区块来记录交易，同时只要是你发起了交易，就得付手续费，这些手续费也成为 Gas，会按照一定的算法奖励给挖出区块的人。&lt;/p>
&lt;p>接下来会讲一下，平时开发中如何创建钱包，如何转账，如何自己发代币，如何部署合约并调用。&lt;/p>
&lt;p>环境准备&lt;/p>
&lt;ul>
&lt;li>安装 Ganache 并启动&lt;/li>
&lt;li>安装 truffle 框架&lt;/li>
&lt;/ul>
&lt;p>创建钱包&lt;/p>
&lt;p>golang&lt;/p>
&lt;p>依赖&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">github.com/ethereum/go-ethereum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>首先要连接到测试链，测试链可以是本地的也可以是公网的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func connectRPC() (*ethclient.Client, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 连接测试链的节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //rpcClient, err := rpc.Dial(&amp;#34;https://rinkeby.infura.io/v3/6c81fb1b66804f0698d49f2ec242afc9&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpcClient, err := rpc.Dial(&amp;#34;http://127.0.0.1:7545&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return nil, err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conn := ethclient.NewClient(rpcClient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return conn, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般都选择以 keystore 的形式创建账户&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func CreateWallet() (key, addr string) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ks := keystore.NewKeyStore(&amp;#34;~/Documents/github/gowork/src/geth-demo/&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> keystore.StandardScryptN, keystore.StandardScryptP)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> account, _ := ks.NewAccount(&amp;#34;password&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key_json, err := ks.Export(account, &amp;#34;password&amp;#34;, &amp;#34;password&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;导出账户错误: &amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key = string(key_json)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addr = account.Address.Hex()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然另一种创建账户的方式是用私钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func CreateWallet() (string, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key, err := crypto.GenerateKey()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;&amp;#34;, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> address := crypto.PubkeyToAddress(key.PublicKey).Hex()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;address: &amp;#34;, address)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> privateKey := hex.EncodeToString(key.D.Bytes())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;privateKey: &amp;#34;, privateKey)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return address, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Node&lt;/p>
&lt;p>node 一般使用 web3。创建 web3 对象的时候要使用一个 provider，这个 provider 用来连接到测试链，可以是钱包的，也可以是一个 HttpProvider。&lt;/p>
&lt;p>创建 web3&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const web3 = new Web3(new Web3.providers.HttpProvider(&amp;#34;http://localhost:7545&amp;#34;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者使用&lt;code>truffle-hdwallet-provider&lt;/code>来创建，使用这个的前提是，自己已经创建了一个钱包，并且这个钱包是 HD 的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const Web3 = require(&amp;#39;web3&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const HDWalletProvider = require(&amp;#39;truffle-hdwallet-provider&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const provider = new HDWalletProvider(助记词, 测试链url);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const web3 = new Web3(provider);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建账户&lt;/p></description></item><item><title>以太坊</title><link>https://example.com/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A/</link><pubDate>Tue, 07 Aug 2018 20:09:26 +0000</pubDate><guid>https://example.com/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A/</guid><description>&lt;p>参与了公司的一个项目，上了以太坊，这里简单记录一下踩坑。&lt;/p>
&lt;p>首先先把 go 的依赖下载下来：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">go get -u -v github.com/ethereum/go-ethereum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>有时候下载的很慢，可以从 github 上拉下来代码。&lt;/p>
&lt;h2 id="账户">账户&lt;/h2>
&lt;p>以太坊的地址在离线状态下也可以创建到。&lt;/p>
&lt;p>创建账户有两种方式：&lt;/p>
&lt;h4 id="以公钥和私钥的形式创建">以公钥和私钥的形式创建&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func CreateAccount() (string, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key, err := crypto.GenerateKey()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;&amp;#34;, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> address := crypto.PubkeyToAddress(key.PublicKey).Hex()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;address: &amp;#34;, address)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> privateKey := hex.EncodeToString(key.D.Bytes())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;privateKey: &amp;#34;, privateKey)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return address, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这种方式一般用的比较少。&lt;/p>
&lt;h4 id="以-keystore-的形式创建">以 keystore 的形式创建&lt;/h4>
&lt;p>keystore 会创建一个文件，这个文件如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;address&amp;#34;: &amp;#34;d93688757810e644f0b9c162102d9c598813f0dd&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;crypto&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;cipher&amp;#34;: &amp;#34;aes-128-ctr&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;ciphertext&amp;#34;:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;71ae7c8144729b2f9e0c51d95c6dfb73e63f14b5332b3594e8a1f325237c27ed&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;cipherparams&amp;#34;: { &amp;#34;iv&amp;#34;: &amp;#34;620c73001081c014a862ce80003a4648&amp;#34; },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;kdf&amp;#34;: &amp;#34;scrypt&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;kdfparams&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;dklen&amp;#34;: 32,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;n&amp;#34;: 262144,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;p&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;r&amp;#34;: 8,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;salt&amp;#34;: &amp;#34;bd272aa37271ef9913eb095a4d143be238e348c48fce6459896e1bb1b0236741&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;mac&amp;#34;: &amp;#34;2b3ade771645090a2b34c214906c592a1300d529e459faefb1421ba496b6fe1d&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;id&amp;#34;: &amp;#34;e4dd5384-56a8-4ec7-b6e0-492dcd3742e9&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;version&amp;#34;: 3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在生成这个文件的时候，会让你输一个密码，这个文件加密码其实就是一个私钥。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// 理论上来讲，这个函数应该只被创建一次即可
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 创建一个账户
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func CreateWallet() (key, addr string) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ks := keystore.NewKeyStore(&amp;#34;/Users/zhuzhenfeng/Documents/github/gowork/src/geth-demo/&amp;#34;, keystore.StandardScryptN, keystore.StandardScryptP)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> account, _ := ks.NewAccount(&amp;#34;password&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key_json, err := ks.Export(account, &amp;#34;password&amp;#34;, &amp;#34;password&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;导出账户错误: &amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key = string(key_json)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addr = account.Address.Hex()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 key 和 address，&amp;ldquo;password&amp;quot;是这个文件的密码。&lt;/p>
&lt;h2 id="私链">私链&lt;/h2>
&lt;p>一种方式是连接互联网上的测试链，一种是连接本地的私链。&lt;/p>
&lt;h4 id="本地私链的启动">本地私链的启动&lt;/h4>
&lt;p>启动本地私链最简单的一种方式是用 Truffle 提供的 Ganache，只要将它下载下来，启动起来即可。&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/0069RVTdgy1fu1f8kub6vj30xc0m8aet.jpg"
loading="lazy"
alt="image-20180807202239542"
>&lt;/p>
&lt;p>可以看到已经启动了，连接的地址是:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://127.0.0.1:7545
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="互联网上的测试链地址">互联网上的测试链地址&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">https://rinkeby.infura.io/v3/6c81fb1b66804f0698d49f2ec242afc9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="连接">连接&lt;/h4>
&lt;p>我们用 geth 的 rpc 连接上面的私链地址即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func connectRPC() (*ethclient.Client, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 连接测试链的节点
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //rpcClient, err := rpc.Dial(&amp;#34;https://rinkeby.infura.io/v3/6c81fb1b66804f0698d49f2ec242afc9&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rpcClient, err := rpc.Dial(&amp;#34;http://127.0.0.1:7545&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return nil, err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> conn := ethclient.NewClient(rpcClient)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return conn, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他操作">其他操作&lt;/h2>
&lt;p>在上一步中连接 rpc 中，拿到了 client。用这个 client 就可以做很多事儿：&lt;/p>
&lt;h3 id="获取余额">获取余额&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func GetBalance(address string) (float64, error) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client, err := connectRPC()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;err: &amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balance, err := client.BalanceAt(context.TODO(), common.HexToAddress(address), nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(balance)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return 0, err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balanceV := float64(balance.Int64()) * math.Pow(10, -18)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return balanceV, nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="代币转账">代币转账&lt;/h3>
&lt;p>要生成代币，需要写一个 token 的合约。可以用这一个最简单的 token.abi。复杂一般可以用 truffle 框架来编写。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;span class="lnt">78
&lt;/span>&lt;span class="lnt">79
&lt;/span>&lt;span class="lnt">80
&lt;/span>&lt;span class="lnt">81
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// token.abi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;anonymous&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;indexed&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;from&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;address&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;indexed&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;to&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;address&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;indexed&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;value&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;Transfer&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;event&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;constant&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inputs&amp;#34;: [],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;totalSupply&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;payable&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stateMutability&amp;#34;: &amp;#34;view&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;constant&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;_to&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;address&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;_value&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;transfer&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;bool&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;payable&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stateMutability&amp;#34;: &amp;#34;nonpayable&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;constant&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;inputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;_owner&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;address&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;balanceOf&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;outputs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;uint256&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;payable&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;stateMutability&amp;#34;: &amp;#34;view&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;function&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后将其转换为 go 文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">abigen --abi token.abi --pkg main --type Token --out token.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生成的 token.go 文件，才是可以被操作的文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func TransferToken() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> key, to_address := CreateWallet()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client, err := connectRPC()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> auth, err := bind.NewTransactor(strings.NewReader(key), &amp;#34;password&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;读取keystore失败&amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> token, err := cont.NewToken(common.HexToAddress(&amp;#34;0x75a26aaaecda412bd914e8fbfaed586a467fa8b5&amp;#34;), client)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;获取token失败&amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> panic(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> balance, err := token.BalanceOf(nil, common.HexToAddress(to_address))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatalln(&amp;#34;token balance of&amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(&amp;#34;to address balance: &amp;#34;, balance)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> amount := big.NewFloat(10.00)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //这是处理位数的代码段
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tenDecimal := big.NewFloat(math.Pow(10, 18))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> convertAmount, _ := new(big.Float).Mul(tenDecimal, amount).Int(&amp;amp;big.Int{})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> tx, err := token.Transfer(auth, common.HexToAddress(to_address), convertAmount)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if nil != err {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Printf(&amp;#34;err: %v \n&amp;#34;, err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fmt.Printf(&amp;#34;result: %v\n&amp;#34;, tx)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>不知为何会出现 failed to estimate gas needed 的情况&lt;/p>
&lt;/blockquote>
&lt;p>代币转账的代码就如上所示，有了这个，其实我们就可以发币了。&lt;/p>
&lt;p>至于上面的一句代码中的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">token, err := cont.NewToken(common.HexToAddress(&amp;#34;0x75a26aaaecda412bd914e8fbfaed586a467fa8b5&amp;#34;), client)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个&lt;code>0x75a26aaaecda412bd914e8fbfaed586a467fa8b5&lt;/code>地址，就是合约的地址。关于合约的部署，其实如果是在本地调试的话，可以用 truffle。truffle 在部署的时候，会将合约地址返回。&lt;/p>
&lt;p>如下图所示：&lt;/p>
&lt;p>&lt;img src="https://ws4.sinaimg.cn/large/0069RVTdgy1fu1f8bx1xvj30xc0m8mzv.jpg"
loading="lazy"
alt="image-20180807203645670"
>&lt;/p>
&lt;p>关于如何在以太坊上写代币的合约，下次再写一下笔记。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>可以用 web3 去做这些事儿，会更简单一些。因为服务端选型用的 go，所以就用 go 踩了一些坑。&lt;/p></description></item><item><title>contract</title><link>https://example.com/p/contract/</link><pubDate>Fri, 03 Aug 2018 14:32:03 +0000</pubDate><guid>https://example.com/p/contract/</guid><description>&lt;h2 id="类型">类型&lt;/h2>
&lt;p>Solidity 是静态类型的语言。&lt;/p>
&lt;h3 id="值类型">值类型&lt;/h3>
&lt;ul>
&lt;li>bool&lt;/li>
&lt;li>int/uint&lt;/li>
&lt;li>fixed/unfixed&lt;/li>
&lt;li>address
&lt;ul>
&lt;li>balance 和 transfer&lt;/li>
&lt;li>send&lt;/li>
&lt;li>call, callcode 和 delegatecall&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>byte&lt;/li>
&lt;li>bytes 和 string&lt;/li>
&lt;li>十六进制 hex&amp;quot;0012&amp;quot;&lt;/li>
&lt;li>enum&lt;/li>
&lt;li>function&lt;/li>
&lt;/ul>
&lt;h3 id="引用类型">引用类型&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>数组&lt;/p>
&lt;p>uint[]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结构体&lt;/p>
&lt;p>struct&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Map&lt;/p>
&lt;p>mapping(key =&amp;gt; value)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="单元和全局变量">单元和全局变量&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>以太币的单位&lt;/p>
&lt;p>在数字后面加上 &lt;code>wei&lt;/code>、 &lt;code>finney&lt;/code>、 &lt;code>szabo&lt;/code> 或 &lt;code>ether&lt;/code>。默认是 wei&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间单位&lt;/p>
&lt;p>数字后面带有 &lt;code>seconds&lt;/code>、 &lt;code>minutes&lt;/code>、 &lt;code>hours&lt;/code>、 &lt;code>days&lt;/code>、 &lt;code>weeks&lt;/code> 和 &lt;code>years&lt;/code>。默认是秒。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区块和交易&lt;/p>
&lt;ul>
&lt;li>&lt;code>block.blockhash(uint blockNumber) returns (bytes32)&lt;/code>：指定区块的区块哈希。&lt;/li>
&lt;li>&lt;code>block.coinbase&lt;/code> (&lt;code>address&lt;/code>): 挖出当前区块的矿工地址&lt;/li>
&lt;li>&lt;code>block.difficulty&lt;/code> (&lt;code>uint&lt;/code>): 当前区块难度&lt;/li>
&lt;li>&lt;code>block.gaslimit&lt;/code> (&lt;code>uint&lt;/code>): 当前区块 gas 限额&lt;/li>
&lt;li>&lt;code>block.number&lt;/code> (&lt;code>uint&lt;/code>): 当前区块号&lt;/li>
&lt;li>&lt;code>block.timestamp&lt;/code> (&lt;code>uint&lt;/code>): 自 unix epoch 起始当前区块以秒计的时间戳&lt;/li>
&lt;li>&lt;code>gasleft() returns (uint256)&lt;/code>：剩余的 gas&lt;/li>
&lt;li>&lt;code>msg.data&lt;/code> (&lt;code>bytes&lt;/code>): 完整的 calldata&lt;/li>
&lt;li>&lt;code>msg.gas&lt;/code> (&lt;code>uint&lt;/code>): 剩余 gas - 自 0.4.21 版本开始已经不推荐使用，由 &lt;code>gesleft()&lt;/code> 代替&lt;/li>
&lt;li>&lt;code>msg.sender&lt;/code> (&lt;code>address&lt;/code>): 消息发送者（当前调用）&lt;/li>
&lt;li>&lt;code>msg.sig&lt;/code> (&lt;code>bytes4&lt;/code>): calldata 的前 4 字节（也就是函数标识符）&lt;/li>
&lt;li>&lt;code>msg.value&lt;/code> (&lt;code>uint&lt;/code>): 随消息发送的 wei 的数量&lt;/li>
&lt;li>&lt;code>now&lt;/code> (&lt;code>uint&lt;/code>): 目前区块时间戳（&lt;code>block.timestamp&lt;/code>）&lt;/li>
&lt;li>&lt;code>tx.gasprice&lt;/code> (&lt;code>uint&lt;/code>): 交易的 gas 价格&lt;/li>
&lt;li>&lt;code>tx.origin&lt;/code> (&lt;code>address&lt;/code>): 交易发起者（完全的调用链）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>地址相关&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.balance&lt;/code> (&lt;code>uint256&lt;/code>):&lt;/p>
&lt;p>以 Wei 为单位的 &lt;a class="link" href="http://solidity-cn.readthedocs.io/zh/develop/types.html#address" target="_blank" rel="noopener"
>地址类型&lt;/a> 的余额。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.transfer(uint256 amount)&lt;/code>:&lt;/p>
&lt;p>向 &lt;a class="link" href="http://solidity-cn.readthedocs.io/zh/develop/types.html#address" target="_blank" rel="noopener"
>地址类型&lt;/a> 发送数量为 amount 的 Wei，失败时抛出异常，发送 2300 gas 的矿工费，不可调节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.send(uint256 amount) returns (bool)&lt;/code>:&lt;/p>
&lt;p>向 &lt;a class="link" href="http://solidity-cn.readthedocs.io/zh/develop/types.html#address" target="_blank" rel="noopener"
>地址类型&lt;/a> 发送数量为 amount 的 Wei，失败时返回 &lt;code>false&lt;/code>，发送 2300 gas 的矿工费用，不可调节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.call(...) returns (bool)&lt;/code>:&lt;/p>
&lt;p>发出低级函数 &lt;code>CALL&lt;/code>，失败时返回 &lt;code>false&lt;/code>，发送所有可用 gas，可调节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.callcode(...) returns (bool)&lt;/code>：&lt;/p>
&lt;p>发出低级函数 &lt;code>CALLCODE&lt;/code>，失败时返回 &lt;code>false&lt;/code>，发送所有可用 gas，可调节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>&amp;lt;address&amp;gt;.delegatecall(...) returns (bool)&lt;/code>:&lt;/p>
&lt;p>发出低级函数 &lt;code>DELEGATECALL&lt;/code>，失败时返回 &lt;code>false&lt;/code>，发送所有可用 gas，可调节。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>合约相关&lt;/p>
&lt;p>&lt;code>this&lt;/code> (current contract&amp;rsquo;s type):&lt;/p>
&lt;p>当前合约，可以明确转换为 &lt;a class="link" href="http://solidity-cn.readthedocs.io/zh/develop/types.html#address" target="_blank" rel="noopener"
>地址类型&lt;/a>。&lt;/p>
&lt;p>&lt;code>selfdestruct(address recipient)&lt;/code>:&lt;/p>
&lt;p>销毁合约，并把余额发送到指定 &lt;a class="link" href="http://solidity-cn.readthedocs.io/zh/develop/types.html#address" target="_blank" rel="noopener"
>地址类型&lt;/a>。&lt;/p>
&lt;p>&lt;code>suicide(address recipient)&lt;/code>:&lt;/p>
&lt;p>与 selfdestruct 等价，但已不推荐使用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="控制结构">控制结构&lt;/h2>
&lt;p>输入参数和我们常见的函数的参数相同&lt;/p>
&lt;p>输出参数必须要在 returns 后面，和 go 的类似&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">function arithmetics(uint _a, uint _b) returns (uint o_sum, uint o_product) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o_sum = _a + _b;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o_product = _a * _b;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function arithmetics(uint _a, uint _b) returns (uint , uint ) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o_sum = _a + _b;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> o_product = _a * _b;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return o_sum, o_product;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不能用 switch 和 goto&lt;/p>
&lt;p>内部函数调用，就和普通的方法调用一样。&lt;/p>
&lt;p>从外部调用合约的函数，先创建一个合约实例（和类的对象一样），然后调用实例方法。&lt;/p>
&lt;p>调函数要发送 wei 和 gas，就像下图所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">pragma solidity ^0.4.0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">contract InfoFeed {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function info() public payable returns (uint ret) { return 42; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">contract Consumer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InfoFeed feed;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function setFeed(address addr) public { feed = InfoFeed(addr); }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> function callFeed() public { feed.info.value(10).gas(800)(); }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>payable&lt;/code> 修饰符要用于修饰 &lt;code>info&lt;/code>，否则，.value() 选项将不可用。&lt;/p>
&lt;p>可以通过 new 创建一个合约，和 new 出一个对象一样。&lt;/p>
&lt;h2 id="合约结构">合约结构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>状态变量&lt;/p>
&lt;p>状态变量是永久存储在合约中的值，其实可以理解为类的成员变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数&lt;/p>
&lt;p>函数是合约的可执行单元，可以理解为类的成员函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>函数修饰器&lt;/p>
&lt;p>以声明的形式改良函数语义。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事件&lt;/p>
&lt;p>以太坊的日志工具接口。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">event HighestBidIncreased(address bidder, uint amount); // 事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">emit HighestBidIncreased(msg.sender, msg.value); // 触发事件
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>结构体&lt;/p>
&lt;p>理解为数据类。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>枚举&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>合约函数可见性修饰&lt;/p></description></item><item><title>faas-provider</title><link>https://example.com/p/faas-provider/</link><pubDate>Wed, 01 Aug 2018 19:53:23 +0000</pubDate><guid>https://example.com/p/faas-provider/</guid><description>&lt;p>faas-provider 是一个模板，只要实现了这个模板的接口，就可以自定义实现自己的 provider。&lt;/p>
&lt;h2 id="faas-provider">faas-provider&lt;/h2>
&lt;p>OpenFaaS 官方提供了两套后台 provider：&lt;/p>
&lt;ul>
&lt;li>Docker Swarm&lt;/li>
&lt;li>Kubernetes&lt;/li>
&lt;/ul>
&lt;p>这两者在部署和调用函数的时候流程图如下：&lt;/p>
&lt;p>部署一个函数&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1ftuggjuhtpj20xc07k0x7.jpg"
loading="lazy"
>&lt;/p>
&lt;p>调用一个函数&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1ftuggyto07j20xc071n1c.jpg"
loading="lazy"
>&lt;/p>
&lt;p>provider 要提供的一些 API 有：&lt;/p>
&lt;ul>
&lt;li>List / Create / Delete 一个函数&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/system/functions&lt;/code>&lt;/p>
&lt;p>方法: GET / POST / DELETE&lt;/p>
&lt;ul>
&lt;li>获取一个函数&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/system/function/{name:[-a-zA-Z_0-9]+}&lt;/code>&lt;/p>
&lt;p>方法: GET&lt;/p>
&lt;ul>
&lt;li>伸缩一个函数&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/system/scale-function/{name:[-a-zA-Z_0-9]+}&lt;/code>&lt;/p>
&lt;p>方法: POST&lt;/p>
&lt;ul>
&lt;li>调用一个函数&lt;/li>
&lt;/ul>
&lt;p>&lt;code>/function/{name:[-a-zA-Z_0-9]+}&lt;/code>&lt;/p>
&lt;p>方法: POST&lt;/p>
&lt;p>在 provider 的 server.go 的 serve 方法，可以看到这个 serve 方法创建了几个路由，接受一个 FaaSHandler 对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// Serve load your handlers into the correct OpenFaaS route spec. This function is blocking.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func Serve(handlers *types.FaaSHandlers, config *types.FaaSConfig) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/functions&amp;#34;, handlers.FunctionReader).Methods(&amp;#34;GET&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/functions&amp;#34;, handlers.DeployHandler).Methods(&amp;#34;POST&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/functions&amp;#34;, handlers.DeleteHandler).Methods(&amp;#34;DELETE&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/functions&amp;#34;, handlers.UpdateHandler).Methods(&amp;#34;PUT&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/function/{name:[-a-zA-Z_0-9]+}&amp;#34;, handlers.ReplicaReader).Methods(&amp;#34;GET&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/scale-function/{name:[-a-zA-Z_0-9]+}&amp;#34;, handlers.ReplicaUpdater).Methods(&amp;#34;POST&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/function/{name:[-a-zA-Z_0-9]+}&amp;#34;, handlers.FunctionProxy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/function/{name:[-a-zA-Z_0-9]+}/&amp;#34;, handlers.FunctionProxy)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/system/info&amp;#34;, handlers.InfoHandler).Methods(&amp;#34;GET&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if config.EnableHealth {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r.HandleFunc(&amp;#34;/healthz&amp;#34;, handlers.Health).Methods(&amp;#34;GET&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此在自定义的 provider，只需实现 FaaSHandlers 中的几个路由处理函数即可。这几个 handler 是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// FaaSHandlers provide handlers for OpenFaaS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type FaaSHandlers struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FunctionReader http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DeployHandler http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DeleteHandler http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaReader http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FunctionProxy http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaUpdater http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // Optional: Update an existing function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UpdateHandler http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Health http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InfoHandler http.HandlerFunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们以官方实现的 faas-netes 为例，讲解一下这几个 hander 的实现过程。&lt;/p>
&lt;h2 id="faas-netes">faas-netes&lt;/h2>
&lt;p>我们看下在 faas-netes 的中的 FaaSHandlers 实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bootstrapHandlers := bootTypes.FaaSHandlers{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FunctionProxy: handlers.MakeProxy(functionNamespace, cfg.ReadTimeout),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DeleteHandler: handlers.MakeDeleteHandler(functionNamespace, clientset),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DeployHandler: handlers.MakeDeployHandler(functionNamespace, clientset, deployConfig),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FunctionReader: handlers.MakeFunctionReader(functionNamespace, clientset),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaReader: handlers.MakeReplicaReader(functionNamespace, clientset),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaUpdater: handlers.MakeReplicaUpdater(functionNamespace, clientset),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> UpdateHandler: handlers.MakeUpdateHandler(functionNamespace, clientset),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Health: handlers.MakeHealthHandler(),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> InfoHandler: handlers.MakeInfoHandler(version.BuildVersion(), version.GitCommit),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因为是 Kubernetes 上的 provider 实现，所以这些函数都带有一个 namespace 的参数。&lt;/p>
&lt;h3 id="functionproxy">FunctionProxy&lt;/h3>
&lt;p>这里最重要的就是 FunctionProxy，它主要负责调用函数。这个 handler 其实也是起到了一个代理转发的作用，在这个函数中，只接受 get 和 post。调用函数只接受 post 和 get 请求&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建一个 http 的 client 对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只处理 get 和 post 请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>组装代理转发的 watchdog 的地址&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">url := forwardReq.ToURL(fmt.Sprintf(&amp;#34;%s.%s&amp;#34;, service, functionNamespace), watchdogPort)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以最后请求的格式就会形如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://函数名.namespace:监视器的端口/路径
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将请求发出去&lt;/p>
&lt;/li>
&lt;li>
&lt;p>设置 http 响应的头&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="replicareader-和-replicaupdater">ReplicaReader 和 ReplicaUpdater&lt;/h3>
&lt;p>这两个是和副本数相关的，所以放在一起对比讲解。这两个的实现依赖于 Kubernetes 的客户端，获取代码如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">clientset, err := kubernetes.NewForConfig(config)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 config 主要满足以下几个条件就行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">Config{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // TODO: switch to using cluster DNS.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Host: &amp;#34;https://&amp;#34; + net.JoinHostPort(host, port),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> BearerToken: string(token),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TLSClientConfig: tlsClientConfig,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kubernetes 的所有操作都可以通过 rest api 来完成，这两个 handler 也是通过调用 Kubernetes 的 api 来做的。&lt;/p>
&lt;h4 id="replicareader">ReplicaReader&lt;/h4>
&lt;p>&lt;code>MakeReplicaReader&lt;/code>函数是获取当前的副本数：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过 mux 从路由中获取到 name 参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 getService 方法获取副本数，getService 的核心代码就一句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">item, err := clientset.ExtensionsV1beta1().Deployments(functionNamespace).Get(functionName, getOpts)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>序列化之后，把结果返回&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="replicaupdater">ReplicaUpdater&lt;/h4>
&lt;p>&lt;code>MakeReplicaUpdater&lt;/code>是解析从 gateway 传过来的 post 请求，调用 k8s 的 API 设置副本数。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>从请求中取出 body&lt;/p>
&lt;/li>
&lt;li>
&lt;p>首先获取该函数的已部署的 deployment 对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后将 deployment 的副本数量设置为应设数量，这样做的目的是为了仅仅修改副本数，而不修改别的属性。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">_, err = clientset.ExtensionsV1beta1().Deployments(functionNamespace).Update(deployment)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>注：mux 做路由的时候，如果成功的时候不对 w 做任何处理，是会默认状态码为 200，空字符串。&lt;/p>
&lt;/blockquote>
&lt;h4 id="deletehandlerdeployhandlerfunctionreader-和-updatehandler">DeleteHandler，DeployHandler，FunctionReader 和 UpdateHandler&lt;/h4>
&lt;p>这几个都是对函数的操作，其实就是调用一下 Kubernetes 的 API 进行操作。&lt;/p>
&lt;p>这几个是核心的几句代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">clientset.ExtensionsV1beta1().Deployments(functionNamespace).Delete(request.FunctionName, opts)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deploy := clientset.Extensions().Deployments(functionNamespace)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">res, err := clientset.ExtensionsV1beta1().Deployments(functionNamespace).List(listOpts)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_, updateErr := clientset.CoreV1().Services(functionNamespace).Update(service)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>官方还提供了一个 faas-swarm，其实现思路也是这样，操作 swarm 的 api 来做对容器的操作。至于如何调用一个函数，都是在函数的 watchdog 中实现。&lt;/p></description></item><item><title>gateway-reading</title><link>https://example.com/p/gateway-reading/</link><pubDate>Wed, 01 Aug 2018 09:15:35 +0000</pubDate><guid>https://example.com/p/gateway-reading/</guid><description>&lt;p>OpenFaaS 的 Gateway 是一个 golang 实现的请求转发的网关，在这个网关服务中，主要有以下几个功能：&lt;/p>
&lt;ul>
&lt;li>UI&lt;/li>
&lt;li>部署函数&lt;/li>
&lt;li>监控&lt;/li>
&lt;li>自动伸缩&lt;/li>
&lt;/ul>
&lt;h2 id="架构分析">架构分析&lt;/h2>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1fttxzimdp3j20sm0hqabx.jpg"
loading="lazy"
alt="图：Kubernetes作为Provider的架构图"
>&lt;/p>
&lt;p>从图中可以发现，当 Gateway 作为一个入口，当 CLI 或者 web 页面发来要部署或者调用一个函数的时候，Gateway 会将请求转发给 Provider，同时会将监控指标发给 Prometheus。AlterManager 会根据需求，调用 API 自动伸缩函数。&lt;/p>
&lt;h2 id="源码分析">源码分析&lt;/h2>
&lt;h3 id="依赖">依赖&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">github.com/gorilla/mux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/nats-io/go-nats-streaming
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/nats-io/go-nats
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/openfaas/nats-queue-worker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">github.com/prometheus/client_golang
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>mux 是一个用来执行 http 请求的路由和分发的第三方扩展包。&lt;/p>
&lt;p>go-nats-streaming，go-nats，nats-queue-worker 这三个依赖是异步函数的时候才会用到，在分析 queue-worker 的时候有说到 Gateway 也是一个发布者。&lt;/p>
&lt;p>client_golang 是 Prometheus 的客户端。&lt;/p>
&lt;h3 id="项目结构">项目结构&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">├── Dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Dockerfile.arm64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Dockerfile.armhf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Gopkg.lock
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Gopkg.toml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── assets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── build.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── handlers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── alerthandler.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── alerthandler_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── asyncreport.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── baseurlresolver_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── basic_auth.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── basic_auth_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── callid_middleware.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── cors.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── cors_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── forwarding_proxy.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── forwarding_proxy_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── function_cache.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── function_cache_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── infohandler.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── metrics.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── queueproxy.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── scaling.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── service_query.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── metrics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── add_metrics.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── add_metrics_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── externalwatcher.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── metrics.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── prometheus_query.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── plugin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── external.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── external_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── queue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── types.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── forward_request.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── forward_request_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── prometheus.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── prometheus_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── requests.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── server.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── tests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── integration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── types
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── handler_set.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── inforequest.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── load_credentials.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── proxy_client.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   ├── readconfig.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── readconfig_test.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── vendor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│   └── github.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── version.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Gateway 的目录明显多了很多，看源码的时候，首先要找到的是 main 包，从 main 函数看起，就能很容易分析出来项目是如何运行的。&lt;/p>
&lt;p>从 server.go 的 main 函数中我们可以看到，其实有如下几个模块：&lt;/p>
&lt;ul>
&lt;li>基本的安全验证&lt;/li>
&lt;li>和函数相关的代理转发
&lt;ul>
&lt;li>同步函数
&lt;ul>
&lt;li>列出函数&lt;/li>
&lt;li>部署函数&lt;/li>
&lt;li>删除函数&lt;/li>
&lt;li>更新函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>异步函数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prometheus 的监控&lt;/li>
&lt;li>ui&lt;/li>
&lt;li>自动伸缩&lt;/li>
&lt;/ul>
&lt;h3 id="基本的安全验证">基本的安全验证&lt;/h3>
&lt;p>如果配置了开启基本安全验证，会从磁盘中读取密钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var credentials *types.BasicAuthCredentials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if config.UseBasicAuth {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var readErr error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> reader := types.ReadBasicAuthFromDisk{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SecretMountPath: config.SecretMountPath,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> credentials, readErr = reader.Read()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if readErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Panicf(readErr.Error())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Gateway 的配置相关的，都会有一个 read()方法，进行初始化赋值。&lt;/p>
&lt;p>如果 credentials 被赋值之后，就会对一些要加密的 API handler 进行一个修饰，被修饰的 API 有：&lt;/p>
&lt;ul>
&lt;li>UpdateFunction&lt;/li>
&lt;li>DeleteFunction&lt;/li>
&lt;li>DeployFunction&lt;/li>
&lt;li>ListFunctions&lt;/li>
&lt;li>ScaleFunction&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">if credentials != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.UpdateFunction =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handlers.DecorateWithBasicAuth(faasHandlers.UpdateFunction, credentials)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.DeleteFunction =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handlers.DecorateWithBasicAuth(faasHandlers.DeleteFunction, credentials)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.DeployFunction =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handlers.DecorateWithBasicAuth(faasHandlers.DeployFunction, credentials)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.ListFunctions =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handlers.DecorateWithBasicAuth(faasHandlers.ListFunctions, credentials)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.ScaleFunction =
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> handlers.DecorateWithBasicAuth(faasHandlers.ScaleFunction, credentials)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 DecorateWithBasicAuth()方法是一个路由中间件：&lt;/p>
&lt;ol>
&lt;li>调用 mux 路由的 BasicAuth()，从 http 的 header 中取到用户名和密码&lt;/li>
&lt;li>然后给请求头上设置一个字段&lt;code>WWW-Authenticate&lt;/code>，值为&lt;code>Basic realm=&amp;quot;Restricted&amp;quot;&lt;/code>&lt;/li>
&lt;li>如果校验失败，则返回错误，成功的话调用 next 方法继续进入下一个 handler。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// DecorateWithBasicAuth enforces basic auth as a middleware with given credentials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func DecorateWithBasicAuth(next http.HandlerFunc, credentials *types.BasicAuthCredentials) http.HandlerFunc {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return func(w http.ResponseWriter, r *http.Request) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> user, password, ok := r.BasicAuth()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w.Header().Set(&amp;#34;WWW-Authenticate&amp;#34;, `Basic realm=&amp;#34;Restricted&amp;#34;`)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if !ok || !(credentials.Password == password &amp;amp;&amp;amp; user == credentials.User) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w.WriteHeader(http.StatusUnauthorized)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w.Write([]byte(&amp;#34;invalid credentials&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next.ServeHTTP(w, r)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="代理转发">代理转发&lt;/h3>
&lt;p>Gateway 本身不做任何和部署发布函数的事情，它只是作为一个代理，把请求转发给相应的 Provider 去处理，所有的请求都要通过这个网关。&lt;/p>
&lt;h4 id="同步函数转发">同步函数转发&lt;/h4>
&lt;p>主要转发的 API 有：&lt;/p>
&lt;ul>
&lt;li>RoutelessProxy&lt;/li>
&lt;li>ListFunctions&lt;/li>
&lt;li>DeployFunction&lt;/li>
&lt;li>DeleteFunction&lt;/li>
&lt;li>UpdateFunction&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faasHandlers.RoutelessProxy = handlers.MakeForwardingProxyHandler(reverseProxy, forwardingNotifiers, urlResolver)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.ListFunctions = handlers.MakeForwardingProxyHandler(reverseProxy, forwardingNotifiers, urlResolver)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.DeployFunction = handlers.MakeForwardingProxyHandler(reverseProxy, forwardingNotifiers, urlResolver)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.DeleteFunction = handlers.MakeForwardingProxyHandler(reverseProxy, forwardingNotifiers, urlResolver)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> faasHandlers.UpdateFunction = handlers.MakeForwardingProxyHandler(reverseProxy, forwardingNotifiers, urlResolver)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>MakeForwardingProxyHandler()有三个参数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>proxy&lt;/p>
&lt;p>这是一个 http 的客户端，作者把这个客户端抽成一个类，然后使用该类的 NewHTTPClientReverseProxy 方法创建实例，这样就简化了代码，不用每次都得写一堆相同的配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>notifiers&lt;/p>
&lt;p>这个其实是要打印的日志，这里是一个 HTTPNotifier 的接口。而在这个 MakeForwardingProxyHandler 中其实有两个实现类，一个是 LoggingNotifier，一个是 PrometheusFunctionNotifier，分别用来打印和函数 http 请求相关的日志以及和 Prometheus 监控相关的日志。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>baseURLResolver&lt;/p>
&lt;p>这个就是 Provider 的 url 地址。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在这个 MakeForwardingProxyHandler 中主要做了三件事儿：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>解析要转发的 url&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调用 forwardRequest 方法转发请求，&lt;/p>
&lt;p>forwardRequest 方法的逻辑比较简单，只是把请求发出去。这里就不深入分析了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打印日志&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// MakeForwardingProxyHandler create a handler which forwards HTTP requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func MakeForwardingProxyHandler(proxy *types.HTTPClientReverseProxy, notifiers []HTTPNotifier, baseURLResolver BaseURLResolver) http.HandlerFunc {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return func(w http.ResponseWriter, r *http.Request) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> baseURL := baseURLResolver.Resolve(r)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> requestURL := r.URL.Path
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> start := time.Now()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> statusCode, err := forwardRequest(w, r, proxy.Client, baseURL, requestURL, proxy.Timeout)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> seconds := time.Since(start)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;error with upstream request to: %s, %s\n&amp;#34;, requestURL, err.Error())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for _, notifier := range notifiers {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> notifier.Notify(r.Method, requestURL, statusCode, seconds)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="异步函数转发">异步函数转发&lt;/h4>
&lt;p>前面说过，如果是异步函数，Gateway 就作为一个发布者，将函数放到队列里。MakeQueuedProxy 方法就是做这件事儿的：&lt;/p>
&lt;ol>
&lt;li>读取请求体&lt;/li>
&lt;li>将&lt;code>X-Callback-Url&lt;/code>参数从参数中 http 的 header 中读出来&lt;/li>
&lt;li>实例化用于异步处理的 Request 对象&lt;/li>
&lt;li>调用 canQueueRequests.Queue(req)，将请求发布到队列中&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// MakeQueuedProxy accepts work onto a queue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func MakeQueuedProxy(metrics metrics.MetricOptions, wildcard bool, canQueueRequests queue.CanQueueRequests) http.HandlerFunc {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return func(w http.ResponseWriter, r *http.Request) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> defer r.Body.Close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body, err := ioutil.ReadAll(r.Body)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> vars := mux.Vars(r)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name := vars[&amp;#34;name&amp;#34;]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callbackURLHeader := r.Header.Get(&amp;#34;X-Callback-Url&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var callbackURL *url.URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if len(callbackURLHeader) &amp;gt; 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> urlVal, urlErr := url.Parse(callbackURLHeader)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callbackURL = urlVal
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> req := &amp;amp;queue.Request{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Function: name,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Body: body,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Method: r.Method,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> QueryString: r.URL.RawQuery,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Header: r.Header,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CallbackURL: callbackURL,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> err = canQueueRequests.Queue(req)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> w.WriteHeader(http.StatusAccepted)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="自动伸缩">自动伸缩&lt;/h4>
&lt;p>伸缩性其实有两种，一种是可以通过调用 API 接口，来将函数进行缩放。另外一种就是通过 AlertHandler。&lt;/p>
&lt;p>自动伸缩是 OpenFaaS 的一大特点，触发自动伸缩主要是根据不同的指标需求。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>根据每秒请求数来做伸缩&lt;/p>
&lt;p>OpenFaaS 附带了一个自动伸缩的规则，这个规则是在 AlertManager 配置文件中定义。AlertManager 从 Prometheus 中读取使用情况（每秒请求数），然后在满足一定条件时向 Gateway 发送警报。&lt;/p>
&lt;p>可以通过删除 AlertManager，或者将部署扩展的环境变量设置为 0，来禁用此方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最小/最大副本数&lt;/p>
&lt;p>通过向函数添加标签, 可以在部署时设置最小 (初始) 和最大副本数。&lt;/p>
&lt;ul>
&lt;li>&lt;code>com.openfaas.scale.min&lt;/code> 默认是 &lt;code>1&lt;/code>&lt;/li>
&lt;li>&lt;code>com.openfaas.scale.max&lt;/code> 默认是 &lt;code>20&lt;/code>&lt;/li>
&lt;li>&lt;code>com.openfaas.scale.factor&lt;/code> 默认是 &lt;code>20%&lt;/code> ，在 0-100 之间，这是每次扩容的时候，新增实例的百分比，若是 100 的话，会瞬间飙升到副本数的最大值。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>com.openfaas.scale.min&lt;/code> 和 &lt;code>com.openfaas.scale.max&lt;/code>值一样的时候，可以关闭自动伸缩。&lt;/p>
&lt;p>&lt;code>com.openfaas.scale.factor&lt;/code>是 0 时，也会关闭自动伸缩。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过内存和 CPU 的使用量。&lt;/p>
&lt;p>使用 k8s 内置的 HPA，也可以触发 AlertManager。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="手动指定伸缩的值">手动指定伸缩的值&lt;/h5>
&lt;p>可以从这句代码中发现，调用这个路由，转发给了 provider 处理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">r.HandleFunc(&amp;#34;/system/scale-function/{name:[-a-zA-Z_0-9]+}&amp;#34;, faasHandlers.ScaleFunction).Methods(http.MethodPost)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="处理-alertmanager-的伸缩请求">处理 AlertManager 的伸缩请求&lt;/h5>
&lt;p>Prometheus 将监控指标发给 AlertManager 之后，会触发 AlterManager 调用&lt;code>/system/alert&lt;/code>接口，这个接口的 handler 是由&lt;code>handlers.MakeAlertHandler&lt;/code>方法生成。&lt;/p>
&lt;p>MakeAlertHandler 方法接收的参数是 ServiceQuery。ServiceQuery 是一个接口，它有两个函数，用来 get 或者 ser 最大的副本数。Gateway 中实现这个接口的类是 ExternalServiceQuery，这个实现类是在 plugin 包中，我们也可以直接定制这个实现类，用来实现满足特定条件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// ServiceQuery provides interface for replica querying/setting
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type ServiceQuery interface {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GetReplicas(service string) (response ServiceQueryResponse, err error)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SetReplicas(service string, count uint64) error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// ExternalServiceQuery proxies service queries to external plugin via HTTP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type ExternalServiceQuery struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> URL url.URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ProxyClient http.Client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个 ExternalServiceQuery 有一个&lt;code>NewExternalServiceQuery&lt;/code>方法，这个方法也是一个工厂方法，用来创建实例。这个 url 其实就是 provider 的 url，proxyClient 就是一个 http 的 client 对象。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>GetReplicas&lt;/code>方法&lt;/p>
&lt;p>从&lt;code>system/function/:name&lt;/code>接口获取到函数的信息，组装一个&lt;code>ServiceQueryResponse&lt;/code>对象即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SetReplicas&lt;/code>方法&lt;/p>
&lt;p>调用&lt;code>system/scale-function/:name&lt;/code>接口，设置副本数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>MakeAlertHandler 的函数主要是从&lt;code>http.Request&lt;/code>中读取 body，然后反序列化成&lt;code>PrometheusAlert&lt;/code>对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// PrometheusAlert as produced by AlertManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type PrometheusAlert struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Status string `json:&amp;#34;status&amp;#34;`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Receiver string `json:&amp;#34;receiver&amp;#34;`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Alerts []PrometheusInnerAlert `json:&amp;#34;alerts&amp;#34;`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以发现，这个 Alerts 是一个数组对象，所以可以是对多个函数进行缩放。反序列化之后，调用&lt;code>handleAlerts&lt;/code>方法，而&lt;code>handleAlerts&lt;/code>对 Alerts 进行遍历，针对每个 Alerts 调用了&lt;code>scaleService&lt;/code>方法。&lt;code>scaleService&lt;/code>才是真正处理伸缩服务的函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func scaleService(alert requests.PrometheusInnerAlert, service ServiceQuery) error {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var err error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> serviceName := alert.Labels.FunctionName
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if len(serviceName) &amp;gt; 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryResponse, getErr := service.GetReplicas(serviceName)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if getErr == nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> status := alert.Status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> newReplicas := CalculateReplicas(status, queryResponse.Replicas, uint64(queryResponse.MaxReplicas), queryResponse.MinReplicas, queryResponse.ScalingFactor)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;[Scale] function=%s %d =&amp;gt; %d.\n&amp;#34;, serviceName, queryResponse.Replicas, newReplicas)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if newReplicas == queryResponse.Replicas {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return nil
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> updateErr := service.SetReplicas(serviceName, newReplicas)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if updateErr != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> err = updateErr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从代码总就可以看到，scaleService 做了三件事儿：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>获取现在的副本数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算新的副本数&lt;/p>
&lt;p>新副本数的计算方法是根据&lt;code>com.openfaas.scale.factor&lt;/code>计算步长：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">step := uint64((float64(maxReplicas) / 100) * float64(scalingFactor))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置为新的副本数&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h5 id="从-0-增加副本到的最小值">从 0 增加副本到的最小值&lt;/h5>
&lt;p>我们在调用函数的时候，用的路由是：&lt;code>/function/:name&lt;/code>。如果环境变量里有配置&lt;code>scale_from_zero&lt;/code>为 true，先用&lt;code>MakeScalingHandler()&lt;/code>方法对 proxyHandler 进行一次包装。&lt;/p>
&lt;p>&lt;code>MakeScalingHandler&lt;/code>接受参数主要是：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>next：就是下一个 httpHandlerFunc，中间件都会有这样一个参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>config：&lt;code>ScalingConfig&lt;/code>的对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// ScalingConfig for scaling behaviours
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">type ScalingConfig struct {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MaxPollCount uint // 查到的最大数量
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FunctionPollInterval time.Duration // 函数调用时间间隔
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CacheExpiry time.Duration // 缓存过期时间
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ServiceQuery ServiceQuery // 外部服务调用的一个接口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>这个&lt;code>MakeScalingHandler&lt;/code>中间件主要做了如下的事情：&lt;/p>
&lt;ul>
&lt;li>先从 FunctionCache 缓存中获取该函数的基本信息，从这个缓存可以拿到每个函数的副本数量。&lt;/li>
&lt;li>为了加快函数的启动速度，如果缓存中可以获该得函数，且函数的副本数大于 0，满足条件，return 即可。&lt;/li>
&lt;li>如果不满足上一步，就会调用&lt;code>SetReplicas&lt;/code>方法设置副本数，并更新 FunctionCache 的缓存。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// MakeScalingHandler creates handler which can scale a function from
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// zero to 1 replica(s).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func MakeScalingHandler(next http.HandlerFunc, upstream http.HandlerFunc, config ScalingConfig) http.HandlerFunc {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache := FunctionCache{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Cache: make(map[string]*FunctionMeta),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Expiry: config.CacheExpiry,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return func(w http.ResponseWriter, r *http.Request) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> functionName := getServiceName(r.URL.String())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if serviceQueryResponse, hit := cache.Get(functionName); hit &amp;amp;&amp;amp; serviceQueryResponse.AvailableReplicas &amp;gt; 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next.ServeHTTP(w, r)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryResponse, err := config.ServiceQuery.GetReplicas(functionName)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache.Set(functionName, queryResponse)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if queryResponse.AvailableReplicas == 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minReplicas := uint64(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if queryResponse.MinReplicas &amp;gt; 0 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> minReplicas = queryResponse.MinReplicas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> err := config.ServiceQuery.SetReplicas(functionName, minReplicas)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for i := 0; i &amp;lt; int(config.MaxPollCount); i++ {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> queryResponse, err := config.ServiceQuery.GetReplicas(functionName)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cache.Set(functionName, queryResponse)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略错误处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.Sleep(config.FunctionPollInterval)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next.ServeHTTP(w, r)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="监控">监控&lt;/h3>
&lt;p>监控是一个定时任务，开启了一个新协程，利用 go 的 ticker.C 的间隔不停的去调用&lt;code>/system/functions&lt;/code>接口。反序列化到 MetricOptions 对象中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func AttachExternalWatcher(endpointURL url.URL, metricsOptions MetricOptions, label string, interval time.Duration) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ticker := time.NewTicker(interval)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> quit := make(chan struct{})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> proxyClient := // 省略创建一个http.Client对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go func() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case &amp;lt;-ticker.C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> get, _ := http.NewRequest(http.MethodGet, endpointURL.String()+&amp;#34;system/functions&amp;#34;, nil)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> services := []requests.Function{}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res, err := proxyClient.Do(get)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 省略反序列的代码
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for _, service := range services {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> metricsOptions.ServiceReplicasCounter.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WithLabelValues(service.Name).
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Set(float64(service.Replicas))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> break
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> case &amp;lt;-quit:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ui">UI&lt;/h3>
&lt;p>UI 的代码很简单，主要就是一些前端的代码，调用上面的讲的一些 API 接口即可，这里就略去不表。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>Gateway 是 OpenFaaS 最为重要的一个组件。回过头看整个项目的结构，Gateway 就是一个 rest 转发服务，一个一个的 handler，每个模块之间的耦合性不是很高，可以很容易的去拆卸，自定义实现相应的模块。&lt;/p></description></item><item><title>NATS streaming</title><link>https://example.com/p/nats-streaming/</link><pubDate>Mon, 30 Jul 2018 14:51:26 +0000</pubDate><guid>https://example.com/p/nats-streaming/</guid><description>&lt;p>市面上常见到的和 Nats 功能类似的消息通信系统有：&lt;/p>
&lt;p>ActiveMQ（Java 编写）、KafKa（Scala 编写）、RabbitMq（Ruby 编写）、Nats（之前是 Ruby 编写现已修改为 Go）、Redis（C 语言编写）、Kestrel（Scala 编写不常用）、NSQ（Go 语言编写），这些消息通信系统在 Broker 吞吐量方面的比较：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1fts2j6kv9mj20mv0c8aa8.jpg"
loading="lazy"
>&lt;/p>
&lt;p>可以看到 NATS 的吞吐量特别高， NATS 原来是使用 Ruby 编写，可以实现每秒 150k 消息，后来使用 Go 语言重写，能够达到每秒 8-11 百万个消息，整个程序很小只有 3M Docker image，它不支持持久化消息，如果你离线，你就不能获得消息。关于 NATS 的详细介绍，请参考上篇文章：&lt;a class="link" href="https://zhuanlan.zhihu.com/p/40871363" target="_blank" rel="noopener"
>NATS 简介&lt;/a>&lt;/p>
&lt;h2 id="nats-streaming">NATS Streaming&lt;/h2>
&lt;p>NATS Streaming 是由 NATS 驱动的数据流系统，也是由 go 语言写成的，在保证吞吐量和时延的基础上，解决了 Nats 消息投递一致性的问题。nats streaming 可以和核心 nats 平台无缝嵌入，扩展和互动。&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1fts2wctrfzj20tk0r8afy.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="功能">功能&lt;/h3>
&lt;p>除了 nats 平台的一些功能，nats streaming 还支持以下的：&lt;/p>
&lt;ul>
&lt;li>增强的消息协议&lt;/li>
&lt;li>消息/事件持久化&lt;/li>
&lt;li>至少一次投递&lt;/li>
&lt;li>发布者速率限制&lt;/li>
&lt;li>每个订阅者的速率匹配/限制&lt;/li>
&lt;li>可重复消费&lt;/li>
&lt;li>持久订阅&lt;/li>
&lt;/ul>
&lt;h3 id="使用">使用&lt;/h3>
&lt;p>首先安装 nats-streaming-server 服务，有多种方式，这里介绍两种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>homebrew&lt;/p>
&lt;p>直接在命令行启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install nats-streaming-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>go get&lt;/p>
&lt;p>这种方式可以让我们直接运行源码启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">go get github.com/nats-io/nats-streaming-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>启动 nats-streaming-server&lt;/p>
&lt;p>有三种启动方式&lt;/p>
&lt;ul>
&lt;li>
&lt;p>直接启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">nats-streaming-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>开启 nats 监控的启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">nats-streaming-server -m 8222
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>源码方式启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">cd $GOPATH/src/github.com/nats-io/nats-streaming-server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run nats-streaming-server.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="客户端">客户端&lt;/h3>
&lt;p>直接下载 go 的客户端&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">go get github.com/nats-io/go-nats-streaming
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行发布者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">cd $GOPATH/src/github.com/nats-io/go-nats-streaming/examples/stan-pub
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run main.go foo &amp;#34;msg one&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run main.go foo &amp;#34;msg two&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run main.go foo &amp;#34;msg three&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如下图所示：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1ftrx4gytrhj20q50g0juj.jpg"
loading="lazy"
>&lt;/p>
&lt;p>运行订阅者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">cd $GOPATH/src/github.com/nats-io/go-nats-streaming/examples/stan-sub
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go run main.go --all -c test-cluster -id myID foo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1ftrx8h85rpj20qq0fu41n.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="实例">实例&lt;/h3>
&lt;p>首先在本地启动 nats-streaming-server，然后下面的代码展示了发布订阅的过程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;github.com/nats-io/go-nats-streaming&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;github.com/nats-io/go-nats-streaming/pb&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;log&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;strconv&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;time&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var clusterId string = &amp;#34;test-cluster&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var clientId string = &amp;#34;test-client&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sc, err := stan.Connect(clusterId, clientId, stan.NatsURL(&amp;#34;nats://localhost:4222&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatal(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 开启一个协程，不停的生产数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go func() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m := 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> m++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sc.Publish(&amp;#34;foo1&amp;#34;, []byte(&amp;#34;hello message &amp;#34;+strconv.Itoa(m)))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.Sleep(time.Second)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 消费数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> i := 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> mcb := func(msg *stan.Msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> i++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Println(i, &amp;#34;----&amp;gt;&amp;#34;, msg.Subject, msg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> startOpt := stan.StartAt(pb.StartPosition_LastReceived)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //_, err = sc.QueueSubscribe(&amp;#34;foo1&amp;#34;, &amp;#34;&amp;#34;, mcb, startOpt) // 也可以用queue subscribe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _, err = sc.Subscribe(&amp;#34;foo1&amp;#34;, mcb, startOpt)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if err != nil {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sc.Close()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Fatal(err)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 创建一个channel，阻塞着
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> signalChan := make(chan int)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;-signalChan
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:01 2 ----&amp;gt; foo1 sequence:546 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 1&amp;#34; timestamp:1532945041825538757
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:02 3 ----&amp;gt; foo1 sequence:547 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 2&amp;#34; timestamp:1532945042828881383
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:03 4 ----&amp;gt; foo1 sequence:548 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 3&amp;#34; timestamp:1532945043833360222
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:04 5 ----&amp;gt; foo1 sequence:549 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 4&amp;#34; timestamp:1532945044833810697
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:05 6 ----&amp;gt; foo1 sequence:550 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 5&amp;#34; timestamp:1532945045838056450
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:06 7 ----&amp;gt; foo1 sequence:551 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 6&amp;#34; timestamp:1532945046838585417
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/07/30 18:04:07 8 ----&amp;gt; foo1 sequence:552 subject:&amp;#34;foo1&amp;#34; data:&amp;#34;hello message 7&amp;#34; timestamp:1532945047840775810
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>源码在：&lt;a class="link" href="https://github.com/zhenfeng-zhu/nats-demo" target="_blank" rel="noopener"
>https://github.com/zhenfeng-zhu/nats-demo&lt;/a>&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>NATS Streaming 的高级功能类似于 Apache Kafka 的功能，但当你考虑简单性而非复杂性时前者更优。由于 NATS Streaming 相对来说是一项新技术，与 Apache Kafka 相比，它在某些领域需要改进，尤其是为负载均衡场景提供更好的解决方案。&lt;/p></description></item><item><title>nats 简介</title><link>https://example.com/p/nats-%E7%AE%80%E4%BB%8B/</link><pubDate>Mon, 30 Jul 2018 11:15:39 +0000</pubDate><guid>https://example.com/p/nats-%E7%AE%80%E4%BB%8B/</guid><description>&lt;p>nats 是一个开源的，云原生的消息系统。Apcera，百度，西门子，VMware，HTC 和爱立信等公司都有在使用。&lt;/p>
&lt;p>核心基于 EventMachine 开发，原理是基于消息发布订阅机制，每台服务器上的每个模块会根据自己的消息类别向 MessageBus 发布多个消息主题，而同时也向自己需要交互的模块，按照需要的主题订阅消息。能够达到每秒 8-11 百万个消息，整个程序很小只有 3M Docker image，它不支持持久化消息，如果你离线，你就不能获得消息。使用 nats streaming 可以做到持久化，缓存等功能。&lt;/p>
&lt;h2 id="nats-server">NATS server&lt;/h2>
&lt;p>nats 提供了一个 go 编写的轻量级服务器。发行版包括二进制和 docker 镜像&lt;/p>
&lt;p>NATS clients&lt;/p>
&lt;p>nats 官方提供的客户端有 Go，Node，Ruby，Java，C，C＃，NGINX 等。&lt;/p>
&lt;p>NATS 设计目标&lt;/p>
&lt;p>核心原则是性能，可伸缩和易用性。&lt;/p>
&lt;ul>
&lt;li>高效&lt;/li>
&lt;li>始终在线和可用&lt;/li>
&lt;li>非常轻巧&lt;/li>
&lt;li>支持多种质量的服务&lt;/li>
&lt;li>支持各种消息传递模型和使用场景&lt;/li>
&lt;/ul>
&lt;h2 id="nats-使用场景">NATS 使用场景&lt;/h2>
&lt;p>nats 是一个简单且强大的消息系统，为支持现代云原生架构设计。由于可伸缩性的复杂性，nats 旨在容易使用和实现，且能提供多种质量的服务。&lt;/p>
&lt;p>一些适用 nats 的场景有：&lt;/p>
&lt;ul>
&lt;li>高吞吐量的消息分散 —— 少数的生产者需要将数据发送给很多的消费者。&lt;/li>
&lt;li>寻址和发现 —— 将数据发送给特定的应用实例，设备或者用户，也可用于发现并连接到基础架构中的实例，设备或用户。&lt;/li>
&lt;li>命令和控制（控制面板）—— 向程序或设备发送指令，并从程序/设备中接收状态，如 SCADA，卫星遥感，物联网等。&lt;/li>
&lt;li>负载均衡 —— 主要应用于程序会生成大量的请求，且可动态伸缩程序实例。&lt;/li>
&lt;li>N 路可扩展性 —— 通信基础架构能够充分利用 go 的高效并发/调度机制，以增强水平和垂直的扩展性。&lt;/li>
&lt;li>位置透明 —— 程序在各个地理位置上分布者大量实例，且你无法了解到程序之间的端点配置详情，及他们所生产或消费的数据。&lt;/li>
&lt;li>容错&lt;/li>
&lt;/ul>
&lt;p>使用 nats-streaming 的附加场景有：&lt;/p>
&lt;ul>
&lt;li>从特定时间或顺序消费&lt;/li>
&lt;li>持久性&lt;/li>
&lt;li>有保证的消息投递&lt;/li>
&lt;/ul>
&lt;h2 id="nats-消息传递模型">NATS 消息传递模型&lt;/h2>
&lt;ul>
&lt;li>发布订阅&lt;/li>
&lt;li>请求回复&lt;/li>
&lt;li>排队&lt;/li>
&lt;/ul>
&lt;h2 id="nats-的特点">NATS 的特点&lt;/h2>
&lt;p>nats 的独特功能有：&lt;/p>
&lt;ul>
&lt;li>纯净的 pub-sub&lt;/li>
&lt;li>集群模式的 server&lt;/li>
&lt;li>订阅者的自动裁剪&lt;/li>
&lt;li>基于文本的协议&lt;/li>
&lt;li>多种服务质量
&lt;ul>
&lt;li>最多一次投递&lt;/li>
&lt;li>至少一次投递&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>持久&lt;/li>
&lt;li>缓存&lt;/li>
&lt;/ul></description></item><item><title>overview-of-openfaas</title><link>https://example.com/p/overview-of-openfaas/</link><pubDate>Thu, 26 Jul 2018 17:41:33 +0000</pubDate><guid>https://example.com/p/overview-of-openfaas/</guid><description>&lt;h2 id="openfaas-概览">OpenFaaS 概览&lt;/h2>
&lt;blockquote>
&lt;p>无服务器函数变得简单。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/b831e4c7gy1ftucj00kylj20xc0j511g.jpg"
loading="lazy"
>&lt;/p>
&lt;h3 id="函数监视器">函数监视器&lt;/h3>
&lt;ul>
&lt;li>你可以通过添加&lt;em>函数监视器&lt;/em> (一个小型的 Golang HTTP 服务)把任何一个 Docker 镜像变成无服务器函数。&lt;/li>
&lt;li>&lt;em>函数监视器&lt;/em>是允许 HTTP 请求通过 STDIN 转发到目标进程的入口点。响应会从你应用写入 STDOUT 返回给调用者。&lt;/li>
&lt;/ul>
&lt;h3 id="api-网关ui-门户">API 网关/UI 门户&lt;/h3>
&lt;ul>
&lt;li>API 网关为你的函数提供外部路由，并通过 Prometheus 收集云原生指标。&lt;/li>
&lt;li>你的 API 网关将会根据需求更改 Docker Swarm 或 Kubernetes API 中的服务副本数来实现伸缩性。&lt;/li>
&lt;li>UI 是允许你在浏览器中调用函数或者根据需要创建新的函数。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>API 网关是一个 RESTful 形式的微服务，你可以在这里查看&lt;a class="link" href="https://github.com/openfaas/faas/tree/master/api-docs" target="_blank" rel="noopener"
>Swagger 文档&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="命令行">命令行&lt;/h3>
&lt;p>Docker 中的任何容器或者进程都可以是 FaaS 中的一个无服务器函数。使用&lt;a class="link" href="http://github.com/openfaas/faas-cli" target="_blank" rel="noopener"
>FaaS CLI&lt;/a> ，你可以快速的部署函数。&lt;/p>
&lt;p>可以从 Node.js, Python, &lt;a class="link" href="https://blog.alexellis.io/serverless-golang-with-openfaas/" target="_blank" rel="noopener"
>Go&lt;/a> 或者更多的语言模板中创建新的函数。如果你无法找到一个合适的模板，甚至可以使用一个 Dockerfile。&lt;/p>
&lt;blockquote>
&lt;p>CLI 实际上是 API 网关的一个 RESTful 客户端。&lt;/p>
&lt;/blockquote>
&lt;p>在配置好 OpenFaaS 之后，你可以在这里开始学习 CLI&lt;a class="link" href="https://blog.alexellis.io/quickstart-openfaas-cli/" target="_blank" rel="noopener"
>开始学习 CLI&lt;/a>&lt;/p>
&lt;h3 id="函数示例">函数示例&lt;/h3>
&lt;p>你可以通过 使用 FaaS-CLI 和其内置的模板创建新函数，也可以在 Docker 中使用 Windows 或 Linux 的二进制文件。&lt;/p>
&lt;ul>
&lt;li>Python 示例：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">import requests
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">def handle(req):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> r = requests.get(req, timeout = 1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> print(req +&amp;#34; =&amp;gt; &amp;#34; + str(r.status_code))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>handler.py&lt;/em>&lt;/p>
&lt;ul>
&lt;li>Node.js 示例：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#34;use strict&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = (callback, context) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callback(null, {&amp;#34;message&amp;#34;: &amp;#34;You said: &amp;#34; + context})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>handler.js&lt;/em>&lt;/p>
&lt;p>在 Github 仓库中提供了一系列编程语言的其他&lt;a class="link" href="https://github.com/openfaas/faas/tree/master/sample-functions" target="_blank" rel="noopener"
>示例函数&lt;/a> 。&lt;/p></description></item><item><title>OpenFaaS on Rancher 2.0</title><link>https://example.com/p/openfaas-on-rancher-2.0/</link><pubDate>Thu, 26 Jul 2018 09:50:46 +0000</pubDate><guid>https://example.com/p/openfaas-on-rancher-2.0/</guid><description>&lt;p>这是一篇关于如何在 Rancher 2.0 上创建 OpenFaaS 栈的文章。我假设你已经准备好了 Rancher 2.0 集群，如果没有请按照官方文档创建一个。&lt;/p>
&lt;p>下面的视频展示了如何创建 OpenFaaS 栈，并在实际中使用：&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=kX8mXv5d1qg&amp;amp;feature=youtu.be" target="_blank" rel="noopener"
>https://www.youtube.com/watch?v=kX8mXv5d1qg&amp;feature=youtu.be&lt;/a>&lt;/p>
&lt;p>这里是创建栈的&lt;code>compose.yml&lt;/code>文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">alertmanager&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">functions/alertmanager:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">io.rancher.container.pull_image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stop_signal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SIGTERM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scale&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">faas-rancher&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">CATTLE_URL=${CATTLE_URL}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">CATTLE_ACCESS_KEY=${CATTLE_ACCESS_KEY}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">CATTLE_SECRET_KEY=${CATTLE_SECRET_KEY}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">FUNCTION_STACK_NAME=faas-functions&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kenfdev/faas-rancher:v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">io.rancher.container.pull_image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stop_signal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SIGTERM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scale&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">functions_provider_url=http://faas-rancher:8080/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">functions/gateway:0.6.6-beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">io.rancher.container.pull_image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">8080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="l">/tcp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stop_signal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SIGTERM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scale&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">prometheus&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>-&lt;span class="l">config.file=/etc/prometheus/prometheus.yml, -storage.local.path=/prometheus,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>-&lt;span class="l">storage.local.memory-chunks=10000, &amp;#39;--alertmanager.url=http://alertmanager:9093&amp;#39;]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kenfdev/prometheus:latest-cattle&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">io.rancher.container.pull_image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stop_signal&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">SIGTERM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">stdin_open&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tty&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scale&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我在 Rancher 2.0 中找到一个比较酷的点是&lt;code>compose.yml&lt;/code>文件中的变量都可以在 UI 中进行配置，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://cdn-images-1.medium.com/max/800/1*EBWsJ76oelqjtXIFozZSkQ.png"
loading="lazy"
>&lt;/p>
&lt;p>新的&lt;a class="link" href="https://github.com/kenfdev/faas-rancher/tree/v3" target="_blank" rel="noopener"
>faas-rancher&lt;/a>项目已经转换为使用 Rancher 的 v3 版本的 API，而且基本上已经通过了测试。欢迎贡献和反馈。&lt;/p></description></item><item><title>openfaas-workshop-lab4</title><link>https://example.com/p/openfaas-workshop-lab4/</link><pubDate>Mon, 02 Jul 2018 09:32:59 +0000</pubDate><guid>https://example.com/p/openfaas-workshop-lab4/</guid><description>&lt;h1 id="实验-4--更深入地使用函数">实验 4&amp;ndash;更深入地使用函数&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始本实验之前，为你的文件创建一个新的文件夹。由于本实验是建立在早期实验的基础上的，所以请复制 lab3。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ cp -r lab3 lab4\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;amp;&amp;amp; cd lab4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="通过环境变量注入配置">通过环境变量注入配置&lt;/h2>
&lt;p>能够控制一个函数在运行时的行为方式是很有用的，我们至少可以通过两种方式来实现这一点。&lt;/p>
&lt;h3 id="在部署时">在部署时&lt;/h3>
&lt;p>*在部署时设置环境变量&lt;/p>
&lt;p>我们在&lt;a class="link" href="./lab3.md" >Lab 3&lt;/a>中用&lt;code>write_debug&lt;/code>做了这个 - 你也可以在这里设置任何你想要的自定义环境变量 - 例如，如果你想为你的&lt;em>hello world&lt;/em>函数配置一种语言，你可以引入一个&lt;code>spoken_language&lt;/code>变量。&lt;/p>
&lt;h3 id="使用-http-上下文--querystring--headers">使用 HTTP 上下文&amp;ndash;querystring / headers&lt;/h3>
&lt;p>*使用 querystring 和 HTTP headers&lt;/p>
&lt;p>另一个更动态的、可以在每个请求层面上改变的选项是使用查询字符串和 HTTP 头信息，两者都可以通过&lt;code>faas-cli&lt;/code>或&lt;code>curl&lt;/code>传递。&lt;/p>
&lt;p>这些头信息通过环境变量暴露出来，所以它们很容易在你的函数中被使用。所以任何头信息都以&lt;code>Http_&lt;/code>为前缀，所有&lt;code>-&lt;/code>连字符都被替换成&lt;code>_&lt;/code>下划线。&lt;/p>
&lt;p>让我们用 querystring 和一个列出所有环境变量的函数来试试。&lt;/p>
&lt;ul>
&lt;li>使用 BusyBox 的内置命令，部署一个打印环境变量的函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli deploy --name env --fprocess=&amp;#34;env&amp;#34; --image=&amp;#34;function/alpine:latest&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用一个查询字符串调用该函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke env --query &lt;span class="nv">workshop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/bin:/usr/local/bin:/usr/bin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOSTNAME&lt;/span>&lt;span class="o">=&lt;/span>05e8db360c5a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">fprocess&lt;/span>&lt;span class="o">=&lt;/span>env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOME&lt;/span>&lt;span class="o">=&lt;/span>/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Connection&lt;/span>&lt;span class="o">=&lt;/span>close
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Content_Type&lt;/span>&lt;span class="o">=&lt;/span>text/plain
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Call_Id&lt;/span>&lt;span class="o">=&lt;/span>cdbed396-a20a-43fe-9123-1d5a122c976d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Forwarded_For&lt;/span>&lt;span class="o">=&lt;/span>10.255.0.2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Start_Time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1519729562486546741&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_User_Agent&lt;/span>&lt;span class="o">=&lt;/span>Go-http-client/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Accept_Encoding&lt;/span>&lt;span class="o">=&lt;/span>gzip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Method&lt;/span>&lt;span class="o">=&lt;/span>POST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_ContentLength&lt;/span>&lt;span class="o">=&lt;/span>-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Query&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">workshop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Python 代码中，你会输入&lt;code>os.getenv(&amp;quot;Http_Query&amp;quot;)&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>将路径附加到你的函数 URL 上&lt;/li>
&lt;/ul>
&lt;p>用以下方法调用 env 函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ curl -X GET &lt;span class="nv">$OPENFAAS_URL&lt;/span>/function/env/some/path -d &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOSTNAME&lt;/span>&lt;span class="o">=&lt;/span>fae2ac4b75f9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">fprocess&lt;/span>&lt;span class="o">=&lt;/span>env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOME&lt;/span>&lt;span class="o">=&lt;/span>/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Forwarded_Host&lt;/span>&lt;span class="o">=&lt;/span>127.0.0.1:8080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Start_Time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1539370471902481800&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Accept_Encoding&lt;/span>&lt;span class="o">=&lt;/span>gzip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_User_Agent&lt;/span>&lt;span class="o">=&lt;/span>curl/7.54.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Accept&lt;/span>&lt;span class="o">=&lt;/span>*/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Forwarded_For&lt;/span>&lt;span class="o">=&lt;/span>10.255.0.2:60460
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Call_Id&lt;/span>&lt;span class="o">=&lt;/span>bb86b4fb-641b-463d-ae45-af68c1aa0d42
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Method&lt;/span>&lt;span class="o">=&lt;/span>GET
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_ContentLength&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Path&lt;/span>&lt;span class="o">=&lt;/span>/some/path
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正如你所看到的，&lt;code>Http_Path&lt;/code>头包含你的路径。
如果你想在你的代码中使用它，只要用&lt;code>os.getenv(&amp;quot;Http_Path&amp;quot;)&lt;/code>来获取它。&lt;/p>
&lt;ul>
&lt;li>现在用标头来调用它。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ curl &lt;span class="nv">$OPENFAAS_URL&lt;/span>/function/env --header &lt;span class="s2">&amp;#34;X-Output-Mode: json&amp;#34;&lt;/span> -d &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/bin:/usr/local/bin:/usr/bin:/sbin:/bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOSTNAME&lt;/span>&lt;span class="o">=&lt;/span>05e8db360c5a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">fprocess&lt;/span>&lt;span class="o">=&lt;/span>env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">HOME&lt;/span>&lt;span class="o">=&lt;/span>/root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Call_Id&lt;/span>&lt;span class="o">=&lt;/span>8e597bcf-614f-4ca5-8f2e-f345d660db5e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Forwarded_For&lt;/span>&lt;span class="o">=&lt;/span>10.255.0.2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Start_Time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1519729577415481886&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Accept&lt;/span>&lt;span class="o">=&lt;/span>*/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Accept_Encoding&lt;/span>&lt;span class="o">=&lt;/span>gzip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Connection&lt;/span>&lt;span class="o">=&lt;/span>close
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_User_Agent&lt;/span>&lt;span class="o">=&lt;/span>curl/7.55.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Method&lt;/span>&lt;span class="o">=&lt;/span>GET
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_ContentLength&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_Path&lt;/span>&lt;span class="o">=&lt;/span>/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">Http_X_Output_Mode&lt;/span>&lt;span class="o">=&lt;/span>json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Python 代码中，你会输入`os.getenv(&amp;ldquo;Http_X_Output_Mode&amp;rdquo;)&amp;rsquo;。&lt;/p>
&lt;p>你可以看到所有其他的 HTTP 上下文也被提供了，比如当 &lt;code>Http_Method&lt;/code>是 &lt;code>POST&lt;/code>时的 &lt;code>Content-Length&lt;/code>，&lt;code>User_Agent&lt;/code>，Cookies 和其他你期望从 HTTP 请求中看到的东西。&lt;/p>
&lt;h2 id="安全只读文件系统">安全：只读文件系统&lt;/h2>
&lt;p>OpenFaaS 可以使用的容器安全特性之一是使我们执行环境的根文件系统只读的能力。如果一个函数被破坏，这可以减少攻击面。&lt;/p>
&lt;p>生成一个函数，将文件保存到函数的文件系统中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 ingest-file --prefix&lt;span class="o">=&lt;/span>your-name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新处理程序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># Read the path or a default from environment variable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;save_path&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/home/app/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># generate a name using the current timestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">file_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">path&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># write a file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">file_name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建立这个例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f ingest-file.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调用该例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello function&amp;#34;&lt;/span> &amp;gt; message.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat message.txt &lt;span class="p">|&lt;/span> faas-cli invoke -f ingest-file.yml ingest-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该文件将被写入&lt;code>/home/app&lt;/code>路径中。&lt;/p>
&lt;p>现在编辑 ingest-file.yml 并使该函数为只读。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ingest-file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./ingest-file&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">alexellis2/ingest-file:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">readonly_root_filesystem&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>也请参见。&lt;a class="link" href="https://docs.openfaas.com/reference/yaml/#function-read-only-root-filesystem" target="_blank" rel="noopener"
>YAML 参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>再次部署。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f ingest-file.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在这将会失败。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello function&amp;#34;&lt;/span> &amp;gt; message.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat message.txt &lt;span class="p">|&lt;/span> faas-cli invoke -f ingest-file.yml ingest-file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请看错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Server returned unexpected status code: &lt;span class="m">500&lt;/span> - &lt;span class="nb">exit&lt;/span> status &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &lt;span class="s2">&amp;#34;index.py&amp;#34;&lt;/span>, line 19, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ret&lt;/span> &lt;span class="o">=&lt;/span> handler.handle&lt;span class="o">(&lt;/span>st&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> File &lt;span class="s2">&amp;#34;/home/app/function/handler.py&amp;#34;&lt;/span>, line 13, in handle
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> with open&lt;span class="o">(&lt;/span>file_name, &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> as f:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OSError: &lt;span class="o">[&lt;/span>Errno 30&lt;span class="o">]&lt;/span> Read-only file system: &lt;span class="s1">&amp;#39;/home/app/1556714998.092464&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了写到一个临时区域，设置环境变量&lt;code>save_path&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ingest-file&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./ingest-file&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">alexellis2/ingest-file:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">readonly_root_filesystem&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">save_path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;/tmp/&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以再运行一次&lt;code>faas-cli up -f ingest-file.yml&lt;/code>来测试这个修正，文件将被写入&lt;code>/tmp/&lt;/code>。&lt;/p>
&lt;p>我们现在有能力锁定我们的函数代码，使其不能被意外改变或恶意更新。&lt;/p>
&lt;h2 id="利用日志记录">利用日志记录&lt;/h2>
&lt;p>OpenFaaS 看门狗通过标准 I/O 流&lt;code>stdin&lt;/code>和&lt;code>stdout&lt;/code>传入 HTTP 请求和读取 HTTP 响应来运行。这意味着作为一个函数运行的进程不需要知道任何关于网络或 HTTP 的信息。&lt;/p>
&lt;p>一个有趣的情况是，当一个函数以非零退出代码退出时，&lt;code>stderr&lt;/code>不是空的。
默认情况下，一个函数的&lt;code>stdout/stderr&lt;/code>是合并的，&lt;code>stderr&lt;/code>不被打印到日志中。&lt;/p>
&lt;p>让我们用&lt;a class="link" href="./lab3.md#hello-world-in-python" >Lab 3&lt;/a>中的&lt;code>hello-openfaas&lt;/code>函数来检查。&lt;/p>
&lt;p>将&lt;code>handler.py&lt;/code>的代码改为&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stderr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;This should be an error message.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">json&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dumps&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="s2">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;OpenFaaS&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>构建和部署&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f hello-openfaas.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在用以下方法调用该函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke hello-openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你应该看到合并输出。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">This should be an error message.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;Hello&amp;#34;: &amp;#34;OpenFaaS&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：如果你用&lt;code>docker service logs hello-openfaas&lt;/code>检查容器日志（或者&lt;code>kubectl logs deployment/hello-openfaas -n openfaas-fn&lt;/code>），你应该看不到 stderr 输出。&lt;/p>
&lt;/blockquote>
&lt;p>在这个例子中，我们需要这个函数返回有效的 JSON，可以被解析。不幸的是，日志信息使输出无效。
所以我们需要将这些信息从 stderr 重定向到容器的日志中。
OpenFaaS 提供了一个解决方案，所以你可以将错误信息打印到日志中，并保持函数响应的清晰，只返回&lt;code>stdout&lt;/code>。
为此你应该使用&lt;code>combine_output&lt;/code>标志。&lt;/p>
&lt;p>让我们来试试。打开&lt;code>hello-openfaas.yml&lt;/code>文件，添加这些行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">combine_output&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>部署并调用该函数。&lt;/p>
&lt;p>输出应该是。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">{&amp;#34;Hello&amp;#34;: &amp;#34;OpenFaaS&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>检查容器日志中的&lt;code>stderr&lt;/code>。你应该看到类似的信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">hello-openfaas.1.2xtrr2ckkkth@linuxkit-025000000001 | 2018/04/03 08:35:24 stderr: This should be an error message.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="创建工作流">创建工作流&lt;/h2>
&lt;p>在有些情况下，把一个函数的输出作为另一个函数的输入是很有用的。 这在客户端和通过 API 网关都可以实现。&lt;/p>
&lt;h3 id="客户端上的连锁函数">客户端上的连锁函数&lt;/h3>
&lt;p>你可以使用&lt;code>curl&lt;/code>、&lt;code>faas-cli&lt;/code>或一些你自己的代码将一个函数的结果输送到另一个函数。这里有一个例子。&lt;/p>
&lt;p>优点。&lt;/p>
&lt;ul>
&lt;li>不需要代码 - 可以用 CLI 程序完成
*快速开发和测试
*容易在代码中建模&lt;/li>
&lt;/ul>
&lt;p>缺点。&lt;/p>
&lt;ul>
&lt;li>额外的延迟 - 每个函数都要返回到服务器上&lt;/li>
&lt;li>聊天（更多的信息）&lt;/li>
&lt;/ul>
&lt;p>例子。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>从&lt;em>函数库&lt;/em>部署 NodeInfo 函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后通过 Markdown 转换器推送 NodeInfo 的输出&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke nodeinfo &lt;span class="p">|&lt;/span> faas-cli invoke markdown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;Hostname: 64767782518c&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;p&amp;gt;Platform: linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Arch: x64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CPU count: &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Uptime: 1121466&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你会看到 NodeInfo 函数的输出被装饰成 HTML 标签，例如。&lt;code>&amp;lt;p&amp;gt;&lt;/code>.&lt;/p>
&lt;p>另一个客户端函数链的例子可能是调用一个生成图像的函数，然后将该图像发送到另一个添加水印的函数中。&lt;/p>
&lt;h3 id="从另一个函数中调用一个函数">从另一个函数中调用一个函数&lt;/h3>
&lt;p>从另一个函数中调用一个函数的最简单方法是通过 OpenFaaS &lt;em>API 网关&lt;/em>通过 HTTP 进行调用。这个调用不需要知道外部域名或 IP 地址，它可以简单地通过 DNS 条目将 API 网关称为&lt;code>gateway&lt;/code>。&lt;/p>
&lt;p>当从一个函数访问 API 网关等服务时，最好的做法是使用环境变量来配置主机名，这很重要，有两个原因&amp;ndash;名称可能会改变，在 Kubernetes 中有时需要一个后缀。&lt;/p>
&lt;p>优点。&lt;/p>
&lt;ul>
&lt;li>函数之间可以直接利用对方&lt;/li>
&lt;li>低延迟，因为函数可以在同一网络上相互访问&lt;/li>
&lt;/ul>
&lt;p>缺点。&lt;/p>
&lt;ul>
&lt;li>需要一个代码库来进行 HTTP 请求&lt;/li>
&lt;/ul>
&lt;p>例子。&lt;/p>
&lt;p>在&lt;a class="link" href="./lab3.md" >实验室 3&lt;/a>中，我们介绍了 request 模块，并使用它来调用一个远程 API，以获得国际空间站上的一个宇航员的名字。我们可以使用同样的技术来调用部署在 OpenFaaS 上的另一个函数。&lt;/p>
&lt;ul>
&lt;li>使用用户界面，进入&lt;em>函数商店&lt;/em>并部署&lt;em>情感分析&lt;/em>函数。&lt;/li>
&lt;/ul>
&lt;p>或者使用 CLI。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli store deploy SentimentAnalysis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>情感分析函数将告诉你任何句子的主观性和极性（积极性评级）。该函数的结果是以 JSON 格式显示的，如下面的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;California is great, it&amp;#39;s always sunny there.&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke sentimentanalysis
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span>&lt;span class="s2">&amp;#34;polarity&amp;#34;&lt;/span>: 0.8, &lt;span class="s2">&amp;#34;sentence_count&amp;#34;&lt;/span>: 1, &lt;span class="s2">&amp;#34;subjectivity&amp;#34;&lt;/span>: 0.75&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因此，结果显示我们的测试句子既非常主观（75%）又非常积极（80%）。这两个字段的值总是在&lt;code>-1.00&lt;/code>和&lt;code>1.00&lt;/code>之间。&lt;/p>
&lt;p>下面的代码可以用来调用&lt;em>情绪分析&lt;/em>函数或任何其他函数。&lt;/p>
&lt;p>给网关主机加上&lt;code>openfaas&lt;/code>命名空间的后缀。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://gateway.openfaas:8080/function/sentimentanalysis&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">test_sentence&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者通过一个环境变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gateway_hostname&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># uses a default of &amp;#34;gateway.openfaas&amp;#34; for when &amp;#34;gateway_hostname&amp;#34; is not set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_sentence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;California is great, it&amp;#39;s always sunny there.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;:8080/function/sentimentanalysis&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">test_sentence&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于结果总是以 JSON 格式出现，我们可以利用辅助函数&lt;code>.json()&lt;/code>来转换响应。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;polarity&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mf">0.45&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;That was probably positive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;That was neutral or negative&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在，在 Python 中创建一个新的函数，并将其全部整合起来&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">getenv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gateway_hostname&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;gateway.openfaas&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># uses a default of &amp;#34;gateway&amp;#34; for when &amp;#34;gateway_hostname&amp;#34; is not set&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">test_sentence&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">req&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">gateway_hostname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;:8080/function/sentimentanalysis&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="n">test_sentence&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sys&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Error with sentimentanalysis, expected: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="s2">, got: &lt;/span>&lt;span class="si">%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;polarity&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mf">0.45&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;That was probably positive&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;That was neutral or negative&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>记得在你的&lt;code>requirements.txt&lt;/code>文件中加入&lt;code>requests&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>注意：你不需要修改或改变 SentimentAnalysis 函数的源代码，我们已经部署了它并将通过 API 网关访问它。&lt;/p>
&lt;p>现在转到&lt;a class="link" href="lab5.md" >实验室 5&lt;/a>。&lt;/p></description></item><item><title>ubuntu-docker-sudo</title><link>https://example.com/p/ubuntu-docker-sudo/</link><pubDate>Fri, 29 Jun 2018 13:54:25 +0000</pubDate><guid>https://example.com/p/ubuntu-docker-sudo/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">sudo chown &amp;#34;$USER&amp;#34;:&amp;#34;$USER&amp;#34; /home/&amp;#34;$USER&amp;#34;/.docker -R
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo chmod g+rwx &amp;#34;/home/$USER/.docker&amp;#34; -R
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">https://api.finochat.com/api/v1/platform/apps/RETAIL/profiles/@custom:finolabs.com.cn/avatar?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmY2lkIjoiQHBjdXN0b20tMTA6Zmlub2xhYnMuY29tLmNuIiwiaXNzIjoieUNkNXVhaWRhWU4zc1pwTTdHU2V5WWVqSGdlN3hSa1EiLCJpYXQiOjE1MzAyNjk5NDh9.UUsO2xw1f8cA6FiG1bNAGyYQh-vh32hKHKSJ2EKZicI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http://localhost:3000/api/v1/platform/apps/RETAIL/profiles/@custom:finolabs.com.cn/avatar?jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmY2lkIjoiQHBjdXN0b20tMTA6Zmlub2xhYnMuY29tLmNuIiwiaXNzIjoieUNkNXVhaWRhWU4zc1pwTTdHU2V5WWVqSGdlN3hSa1EiLCJpYXQiOjE1MzAyNjk5NDh9.UUsO2xw1f8cA6FiG1bNAGyYQh-vh32hKHKSJ2EKZicI
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>openfaas-workshop-lab3</title><link>https://example.com/p/openfaas-workshop-lab3/</link><pubDate>Thu, 28 Jun 2018 17:29:56 +0000</pubDate><guid>https://example.com/p/openfaas-workshop-lab3/</guid><description>&lt;h1 id="实验-3--函数介绍">实验 3&amp;ndash;函数介绍&lt;/h1>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>在开始这个实验之前，为你的文件创建一个新的文件夹。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ mkdir -p lab3&lt;span class="se">\`&lt;/span>s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> lab3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="创建一个新的函数">创建一个新的函数&lt;/h2>
&lt;p>有两种方法来创建一个新的函数。&lt;/p>
&lt;ul>
&lt;li>使用一个内置的或社区的代码模板建立一个函数（默认情况下）&lt;/li>
&lt;li>使用一个现有的二进制文件并将其作为你的函数（高级）&lt;/li>
&lt;/ul>
&lt;h3 id="构建或生成一个新函数">构建或生成一个新函数&lt;/h3>
&lt;p>在用模板创建新函数之前，请确保你从 GitHub 上提取了&lt;a class="link" href="https://github.com/openfaas/templates" target="_blank" rel="noopener"
>模板&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli template pull
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Fetch templates from repository: https://github.com/openfaas/templates.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Attempting to expand templates from https://github.com/openfaas/templates.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2021/08/25 15:58:10 Fetched &lt;span class="m">13&lt;/span> template&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> : &lt;span class="o">[&lt;/span>csharp dockerfile go java11 java11-vert-x node node12 node14 php7 python python3 python3-debian ruby&lt;span class="o">]&lt;/span> from https://github.com/openfaas/templates.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后，要想知道哪些语言是可用的，请键入。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli new --list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Languages available as templates:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- csharp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- dockerfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- java11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- java11-vert-x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- node12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- node14
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- php7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python3-debian
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- ruby
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者创建一个包含&lt;code>Dockerfile&lt;/code>的文件夹，然后在 YAML 文件中选择 &lt;code>Dockerfile&lt;/code>语言类型。&lt;/p>
&lt;p>在这一点上，你可以为 Python、Python 3、Ruby、Go、Node、CSharp 等创建一个新函数。&lt;/p>
&lt;ul>
&lt;li>关于我们的例子的说明&lt;/li>
&lt;/ul>
&lt;p>我们这次研讨会的所有例子都经过了 OpenFaaS 社区对&lt;em>Python 3&lt;/em>的全面测试，但也应该与&lt;em>Python 2.7&lt;/em>兼容。&lt;/p>
&lt;p>如果你喜欢使用 Python 2.7 而不是 Python 3，那么把&lt;code>faas-cli new --lang python3&lt;/code>换成&lt;code>faas-cli new --lang python&lt;/code>。&lt;/p>
&lt;h3 id="python-中的-hello-world">Python 中的 Hello world&lt;/h3>
&lt;p>我们将在 Python 中创建一个 hello-world 函数，然后转到也使用额外依赖的东西上。&lt;/p>
&lt;ul>
&lt;li>构建函数的脚手架&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 hello-openfaas --prefix&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数&lt;code>--prefix&lt;/code>将更新&lt;code>image:&lt;/code>&amp;ndash;prefix&lt;code>参数将更新&lt;/code>hello-openfaas.yml&lt;code>中的值，其前缀应该是你的Docker Hub账号。对于[OpenFaaS](https://hub.docker.com/r/functions)来说，这是&lt;/code>image: functions/hello-openfaas&lt;code>，参数将是&lt;/code>&amp;ndash;prefix=&amp;ldquo;function&amp;rdquo;`。&lt;/p>
&lt;p>如果你在创建函数时没有指定前缀，那么在创建后编辑 YAML 文件。&lt;/p>
&lt;p>这将创建三个文件和一个目录。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./hello-openfaas.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./hello-openfaas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./hello-openfaas/handler.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./hello-openfaas/requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>YAML (.yml) 文件是用来配置 CLI 来构建、推送和部署你的函数。&lt;/p>
&lt;blockquote>
&lt;p>注意：每当你需要在 Kubernetes 或远程 OpenFaaS 实例上部署一个函数时，你必须在构建函数后推送它。在这种情况下，你也可以用一个环境变量覆盖默认的网关 URL，即 127.0.0.1:8080&lt;code>。&lt;/code>export OPENFAAS_URL=127.0.0.1:31112`.&lt;/p>
&lt;/blockquote>
&lt;p>下面是 YAML 文件的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hello-openfaas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./hello-openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello-openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>函数的名称由&lt;code>functions&lt;/code>下的键表示，即&lt;code>hello-openfaas&lt;/code>。&lt;/li>
&lt;li>语言由 &lt;code>lang&lt;/code> 字段表示。&lt;/li>
&lt;li>用于构建的文件夹被称为 &lt;code>handler&lt;/code>，它必须是一个文件夹而不是一个文件。&lt;/li>
&lt;li>要使用的 Docker 镜像名称在&lt;code>image&lt;/code>字段下。&lt;/li>
&lt;/ul>
&lt;p>请记住，&lt;code>gateway&lt;/code>URL 可以在 YAML 文件中（通过编辑&lt;code>provider:&lt;/code>下的&lt;code>gateway:&lt;/code>值）或在 CLI 上（通过使用&lt;code>--gateway&lt;/code>或设置&lt;code>OPENFAAS_URL&lt;/code>环境变量）进行覆盖。&lt;/p>
&lt;p>下面是&lt;code>handler.py&lt;/code>文件的内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;&amp;#34;&amp;#34;handle a request to the function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> Args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> req (str): request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">req&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个函数将只是返回输入，所以它实际上是一个&lt;code>echo&lt;/code>函数。&lt;/p>
&lt;p>编辑信息，使其返回 &lt;code>Hello OpenFaaS&lt;/code>，例如。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;Hello OpenFaaS&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>任何返回到 stdout 的值都会随后返回到调用程序。另外，也可以使用&lt;code>print()&lt;/code>语句，它将表现出类似的流向，并传递给调用程序。&lt;/p>
&lt;p>这是本地开发人员对函数的工作流程。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f hello-openfaas.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：在运行这个命令之前，请确保你已经用&lt;code>docker login&lt;/code>命令登录了 docker 注册中心。
注意: &lt;code>faas-cli up&lt;/code>命令将&lt;code>faas-cli&lt;/code>的构建、推送和部署命令合并为一条命令。&lt;/p>
&lt;/blockquote>
&lt;p>随后通过用户界面、CLI、&lt;code>curl&lt;/code>或其他应用程序调用该函数。&lt;/p>
&lt;p>该函数将始终获得一个路由，例如。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$OPENFAAS_URL&lt;/span>/function/&amp;lt;function_name&amp;gt;（函数名）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$OPENFAAS_URL&lt;/span>/function/figlet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$OPENFAAS_URL&lt;/span>/function/hello-openfaas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>提示：如果你把 YAML 文件重命名为&lt;code>stack.yml&lt;/code>，那么你就不需要向任何命令传递&lt;code>-f&lt;/code>标志。&lt;/p>
&lt;/blockquote>
&lt;p>函数只能通过&lt;code>GET&lt;/code>或&lt;code>POST&lt;/code>方法来调用。&lt;/p>
&lt;ul>
&lt;li>调用你的函数&lt;/li>
&lt;/ul>
&lt;p>用&lt;code>faas-cli invoke&lt;/code>测试函数，查看&lt;code>faas-cli invoke --help&lt;/code>获取更多选项。&lt;/p>
&lt;h3 id="示例函数astronaut-finder">示例函数：astronaut-finder&lt;/h3>
&lt;p>我们将创建一个名为 &lt;code>astronaut-finder&lt;/code> 的函数，在国际空间站（ISS）上随机拉出一个太空人的名字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 astronaut-finder --prefix&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这将为我们写三个文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./astronaut-finder/handler.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>函数的处理程序&amp;ndash;你会得到一个带有原始请求的&lt;code>req&lt;/code>对象，并可以将函数的结果打印到控制台。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./astronaut-finder/requirements.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个文件用来管理函数&amp;ndash;它有函数的名称、Docker 镜像和任何其他需要的定制。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./astronaut-finder.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用该文件列出你要安装的任何&lt;code>pip&lt;/code>模块，如&lt;code>requests&lt;/code>或&lt;code>urllib&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>编辑&lt;code>./astronaut-finder/requirements.txt&lt;/code>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">requests
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这告诉函数它需要使用一个名为&lt;a class="link" href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener"
>requests&lt;/a>的第三方模块，用于通过 HTTP 访问网站。&lt;/p>
&lt;ul>
&lt;li>编写该函数的代码。&lt;/li>
&lt;/ul>
&lt;p>我们将从以下地方拉入数据： &lt;a class="link" href="http://api.open-notify.org/astros.json" target="_blank" rel="noopener"
>http://api.open-notify.org/astros.json&lt;/a>&lt;/p>
&lt;p>下面是一个结果的例子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;people&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Alexander Misurkin&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Mark Vande Hei&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Joe Acaba&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Anton Shkaplerov&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Scott Tingle&amp;#34;&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;craft&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;ISS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Norishige Kanai&amp;#34;&lt;/span>&lt;span class="p">}],&lt;/span> &lt;span class="nt">&amp;#34;message&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;success&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新&lt;code>handler.py&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">req&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://api.open-notify.org/astros.json&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;people&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;people&amp;#34;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">%s&lt;/span>&lt;span class="s2"> is in space&amp;#34;&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：在这个例子中，我们没有使用参数&lt;code>req&lt;/code>，但必须把它放在函数的头部。&lt;/p>
&lt;/blockquote>
&lt;p>现在建立这个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli build -f ./astronaut-finder.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>提示。试着把 astronaut-finder.yml 重命名为&lt;code>stack.yml&lt;/code>，然后只调用&lt;code>faas-cli build&lt;/code>。&lt;code>stack.yml&lt;/code>是 CLI 的默认文件名。&lt;/p>
&lt;/blockquote>
&lt;p>推送函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli push -f ./astronaut-finder.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli deploy -f ./astronaut-finder.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>调用该函数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke astronaut-finder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">安东-史卡普勒夫在太空中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="p">|&lt;/span> faas-cli invoke astronaut-finder
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">乔-阿卡巴在太空中
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="故障排除找到容器的日志">故障排除：找到容器的日志&lt;/h2>
&lt;p>你可以通过容器的日志找到你的函数的每次调用的高级信息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl logs deployment/astronaut-finder -n openfaas-fn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="故障排除使用write_debug的-verbose-输出">故障排除：使用`write_debug&amp;rsquo;的 verbose 输出&lt;/h2>
&lt;p>让我们为你的函数打开 verbose 输出。这在默认情况下是关闭的，这样我们就不会用数据淹没你的函数的日志&amp;ndash;这在处理二进制数据时尤其重要，因为二进制数据在日志中没有意义。&lt;/p>
&lt;p>这是标准的 YAML 配置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">astronaut-finder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为该函数编辑 YAML 文件，并添加一个 &lt;code>environment&lt;/code> 部分。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">astronaut-finder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在用&lt;code>faas-cli deploy -f ./astronaut-finder.yml&lt;/code>再次部署你的函数。&lt;/p>
&lt;p>调用该函数，然后再次检查日志，查看函数的响应。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl logs deployment/astronaut-finder -n openfaas-fn
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="管理多个函数">管理多个函数&lt;/h3>
&lt;p>CLI 的 YAML 文件允许将函数分组为堆栈，这在处理一组相关函数时很有帮助。&lt;/p>
&lt;p>为了了解它是如何工作的，生成两个函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 first
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于第二个函数使用&lt;code>--append&lt;/code>标志。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang python3 second --append&lt;span class="o">=&lt;/span>./first.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了方便起见，我们把&lt;code>first.yml&lt;/code>改名为&lt;code>example.yml&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mv first.yml example.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在看看这个文件。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">provider&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">openfaas&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gateway&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http://127.0.0.1:8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">functions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">first&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./first&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">first&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">second&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./second&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">second&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有几个标志，在处理函数堆栈时有帮助。&lt;/p>
&lt;ul>
&lt;li>以并行方式构建。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli build -f ./example.yml --parallel&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>只建立/推送一个函数。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli build -f ./example.yml --filter&lt;span class="o">=&lt;/span>second
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>花点时间来探索&lt;code>build&lt;/code>/&lt;code>push&lt;/code>和&lt;code>deploy&lt;/code>的选项。&lt;/p>
&lt;ul>
&lt;li>&lt;code>faas-cli build --help&lt;/code>。&lt;/li>
&lt;li>&lt;code>faas-cli push --help&lt;/code>。&lt;/li>
&lt;li>&lt;code>faas-cli deploy --help&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>要同时运行&lt;code>faas-cli build &amp;amp;&amp;amp;faas-cli push &amp;amp;&amp;amp;faas-cli deploy&lt;/code>，请使用&lt;code>faas-cli up&lt;/code>代替。&lt;/p>
&lt;blockquote>
&lt;p>专业提示：如果你不想传递&lt;code>-f&lt;/code>参数，&lt;code>stack.yml&lt;/code>是 faas-cli 寻找的默认名称。&lt;/p>
&lt;/blockquote>
&lt;p>你也可以使用&lt;code>faas-cli deploy -f https://....&lt;/code>通过 HTTP（s）部署远程函数栈（yaml）文件。&lt;/p>
&lt;h3 id="自定义模板">自定义模板&lt;/h3>
&lt;p>如果你有自己的一套分叉模板或自定义模板，那么你可以把它们拉下来，用 CLI 使用。&lt;/p>
&lt;p>下面是一个获取 Python 3 模板的例子，它使用 Debian Linux。&lt;/p>
&lt;p>使用 &lt;code>git&lt;/code> URL 拉取模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli template pull https://github.com/openfaas-incubator/python3-debian
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在键入 &lt;code>faas-cli new --list&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli new --list &lt;span class="p">|&lt;/span> grep python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- python3-debian
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些新模板会被保存在你当前的工作目录下&lt;code>./templates/&lt;/code>。&lt;/p>
&lt;h4 id="自定义模板模板商店">自定义模板。模板商店&lt;/h4>
&lt;p>模板商店&lt;em>是一个类似于&lt;/em>函数商店*的概念，它使用户可以通过分享他们的模板来进行协作。模板商店也意味着你不必记住任何 URL 来利用你喜欢的社区或项目模板。&lt;/p>
&lt;p>你可以使用以下两个命令来搜索和发现模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli template store list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ faas-cli template store list -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME SOURCE DESCRIPTION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">csharp openfaas Classic C# template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">dockerfile openfaas Classic Dockerfile template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go openfaas Classic Golang template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了获得更多的细节，你可以使用&lt;code>--verbose&lt;/code>标志，或者&lt;code>describe&lt;/code>命令。&lt;/p>
&lt;p>让我们找到一个具有 HTTP 格式的 Golang 模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">faas-cli template store list &lt;span class="p">|&lt;/span> grep golang
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">golang-http openfaas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Golang HTTP template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">golang-middleware openfaas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Golang Middleware template
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后查看其上游仓库。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ faas-cli template store describe golang-http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: golang-http
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Platform: x86_64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Language: Go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Source: openfaas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Description: Golang HTTP template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Repository: https://github.com/openfaas/golang-http-template
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Official Template: &lt;span class="nb">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>把模板拉下来。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli template store pull golang-http
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在你可以通过输入以下内容用这个模板创建一个函数。&lt;/p>
&lt;p>bash
faas-cli new &amp;ndash;lang golang-http NAME&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">为了比运行`faas-cli template store pull golang-http`来创建函数更容易，你可以在你的stack.yml文件中附加以下内容。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">```yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">configuration:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> templates:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - name: golang-http
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后运行以下内容，而不是指定模板名称。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">faas-cli template store pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也请参见。&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://docs.openfaas.com/reference/yaml/" target="_blank" rel="noopener"
>OpenFaaS YAML 参考指南&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/openfaas/store/" target="_blank" rel="noopener"
>函数与模板存储&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="yaml-文件中的变量替换可选练习">YAML 文件中的变量替换（可选练习)&lt;/h3>
&lt;p>用于配置 CLI 的&lt;code>.yml&lt;/code>文件能够进行变量替换，这样你就能够使用同一个&lt;code>.yml&lt;/code>文件进行多种配置。&lt;/p>
&lt;p>其中一个例子是，当开发和生产图像有不同的注册表时，这就很有用。你可以使用变量替换，使本地和测试环境使用默认账户，而 CI 服务器可以被配置为使用生产账户。&lt;/p>
&lt;blockquote>
&lt;p>这是由[envsubst 库]（&lt;a class="link" href="https://github.com/drone/envsubst" target="_blank" rel="noopener"
>https://github.com/drone/envsubst&lt;/a>）提供的。遵循该链接可以看到支持的变量的例子&lt;/p>
&lt;/blockquote>
&lt;p>编辑你的&lt;code>astronaut-finder.yml&lt;/code>以匹配以下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">astronaut-finder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">python3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">handler&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${DOCKER_USER:-development}/astronaut-finder&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">write_debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你会注意到&lt;code>image&lt;/code>属性已被更新，包括一个变量定义（&lt;code>DOCKER_USER&lt;/code>）。该值将被替换为同名的环境变量的值。如果环境变量不存在，或为空，将使用默认值（&lt;code>development&lt;/code>）。&lt;/p>
&lt;p>该变量将在整个文件中被替换成该值。所以，如果你的&lt;code>.yml&lt;/code>文件中有几个函数，所有对&lt;code>DOCKER_USER&lt;/code>变量的引用将被替换为该环境变量的值&lt;/p>
&lt;p>运行下面的命令并观察输出。&lt;/p>
&lt;p>&lt;code>faas-cli build -f ./astronaut-finder.yml&lt;/code>。&lt;/p>
&lt;p>输出应该显示，构建的镜像被标记为&lt;code>development/astronaut-finder:latest&lt;/code>。&lt;/p>
&lt;p>现在，将环境变量设置为你的 Docker Hub 账户名（在这个例子中，我们将使用 OpenFaaS 的 &lt;code>function&lt;/code>账户）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">DOCKER_USER&lt;/span>&lt;span class="o">=&lt;/span>functions
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行与之前相同的构建命令，观察输出。&lt;/p>
&lt;p>&lt;code>faas-cli build -f ./astronaut-finder.yml&lt;/code>。&lt;/p>
&lt;p>现在输出应该显示，镜像是用更新的标签 &lt;code>functions/astronaut-finder:latest&lt;/code>构建的。&lt;/p>
&lt;h3 id="自定义二进制文件作为函数可选练习">自定义二进制文件作为函数(可选练习)&lt;/h3>
&lt;p>自定义二进制文件或容器可以作为函数使用，但大多数时候，使用语言模板应该涵盖所有最常见的情况。&lt;/p>
&lt;p>为了使用自定义二进制文件或 Dockerfile，使用&lt;code>dockerfile&lt;/code>语言创建一个新函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli new --lang dockerfile sorter --prefix&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;lt;your-docker-username-here&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你会看到一个名为 &lt;code>sorter&lt;/code>和 &lt;code>sorter.yml&lt;/code>的文件夹被创建。&lt;/p>
&lt;p>编辑&lt;code>sorter/Dockerfile&lt;/code>并更新设置&lt;code>fprocess'的那一行。让我们把它改成内置的bash命令&lt;/code>sort`。我们可以用它来对一个字符串列表按字母数字顺序进行排序。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">ENV&lt;/span> &lt;span class="nv">fprocess&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;sort&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在构建、推送和部署该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">faas-cli up -f sorter.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在通过用户界面或 CLI 来调用该函数。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> -n &lt;span class="s1">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">elephant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">zebra
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">horse
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">aardvark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">monkey&amp;#39;&lt;/span>&lt;span class="p">|&lt;/span> faas-cli invoke sorter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aardvark
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">elephant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">horse
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">monkey
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zebra
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这个例子中，我们使用了&lt;a class="link" href="https://busybox.net/downloads/BusyBox.html" target="_blank" rel="noopener"
>BusyBox&lt;/a>中的&lt;code>sort&lt;/code>，它是内置的函数。还有其他有用的命令，如&lt;code>sha512sum&lt;/code>，甚至是&lt;code>bash&lt;/code>或 shell 脚本，但你并不局限于这些内置命令。任何二进制或现有的容器都可以通过添加 OpenFaaS 函数看门狗而成为无服务器函数。&lt;/p>
&lt;blockquote>
&lt;p>提示：你知道 OpenFaaS 也支持 Windows 二进制文件吗？比如 C#、VB 或 PowerShell？&lt;/p>
&lt;/blockquote>
&lt;p>现在进入&lt;a class="link" href="lab4.md" >实验室 4&lt;/a>&lt;/p></description></item><item><title>译：openfaas-workshop-Lab1</title><link>https://example.com/p/%E8%AF%91openfaas-workshop-lab1/</link><pubDate>Mon, 25 Jun 2018 18:04:09 +0000</pubDate><guid>https://example.com/p/%E8%AF%91openfaas-workshop-lab1/</guid><description>&lt;p>今天大多数公司在开发应用程序并将其部署在服务器上的时候，无论是选择公有云还是私有的数据中心，都需要提前了解究竟需要多少台服务器、多大容量的存储和数据库的功能等。并需要部署运行应用程序和依赖的软件到基础设施之上。假设我们不想在这些细节上花费精力，是否有一种简单的架构模型能够满足我们这种想法？这个答案已经存在，这就是今天软件架构世界中新鲜但是很热门的一个话题——Serverless（无服务器）架构。&lt;/p>
&lt;p>目前已经有一批优秀的 serverless 架构开源项目，OpenFaas 就是其中的佼佼者。奈何其中的中文资料比较少，我也是边学边翻译，希望能够抛砖引玉，助力 serverless 的发展。&lt;/p>
&lt;p>这是一个自学研讨会，学习如何构建、部署和运行 OpenFaas 函数。&lt;/p>
&lt;h1 id="lab1---openfaas-的准备工作">Lab1 - OpenFaas 的准备工作&lt;/h1>
&lt;p>OpenFaas 可以在 Docker Swarm 和 Kubernetes 的过几个主要平台之上运行。在此教程里，我们将会在的您本地电脑使用 Docker Swarm 来入门。&lt;/p>
&lt;h2 id="预备条件">预备条件&lt;/h2>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;p>Mac&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener"
>Docker CE for Mac Edge Edition&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Windows&lt;/p>
&lt;ul>
&lt;li>仅针对 windows10 专业版或企业版&lt;/li>
&lt;li>安装&lt;a class="link" href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener"
>Docker CE for Windows&lt;/a>&lt;/li>
&lt;li>安装&lt;a class="link" href="https://git-scm.com/downloads" target="_blank" rel="noopener"
>Git Bash&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>备注：所有步骤中请使用 Git Bash：不要尝试使用 WSL 或 Bash for Windows。&lt;/p>
&lt;/blockquote>
&lt;p>Linux - Ubuntu 或 Debian&lt;/p>
&lt;ul>
&lt;li>Docker CE for Linux&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>你可以从&lt;a class="link" href="https://store.docker.com/" target="_blank" rel="noopener"
>Docker Store&lt;/a>中安装 Docker CE&lt;/p>
&lt;/blockquote>
&lt;h3 id="设置一个单节点的-docker-swarm">设置一个单节点的 Docker Swarm&lt;/h3>
&lt;p>OpenFaas 在 Docker Swarm 和 Kubernetes 上工作。因为 Docker Swarm 很容易设置，所以在此 Workshop 中我们使用 Docker Swarm。在文档中有他们两个的指南。&lt;/p>
&lt;p>在你的笔记本或虚拟机中设置一个单节点的 Docker Swarm：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker swarm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>如果运行此命令出错，加上 &amp;ndash;advertise-addr 你的 IP 参数。&lt;/p>
&lt;/blockquote>
&lt;h3 id="docker-hub">Docker Hub&lt;/h3>
&lt;p>注册一个 Docker Hub 账号。Docker Hub 允许你在互联网中发布自己的 Docker 镜像来用于多节点集群或社区共享。在 Workshop 中我们使用 Docker Hub 发布函数。&lt;/p>
&lt;p>你可以在这里注册：&lt;a class="link" href="https://hub.docker.com/" target="_blank" rel="noopener"
>Docker Hub&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>备注：Docker Hub 也可以设置为自动构建镜像。&lt;/p>
&lt;/blockquote>
&lt;p>打开一个终端或者 Git Bash 窗口，然后使用上面注册的用户名登陆 Docker Hub。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="openfaas-cli">OpenFaas CLI&lt;/h3>
&lt;p>你可以在 mac 上使用 brew 或者在 Linu 和 mac 上使用一个集成脚本来安装 OpenFaas CLI。&lt;/p>
&lt;p>在 Mac 或 Linux 上终端中输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">curl -sL cli.openfaas.com | sudo sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于 windows 平台，从&lt;a class="link" href="https://github.com/openfaas/faas-cli" target="_blank" rel="noopener"
>releases page&lt;/a>中下载最新的的 faas-cli.exe。你可以把它放在一个 local 文件夹或者在 C:\Windows\路径中，这样它就可以在命令行中使用。&lt;/p>
&lt;blockquote>
&lt;p>如果你是一个高级 Windows 用户，把 CLI 放在你自定义的文件夹中，然后把此文件夹添加到环境变量。&lt;/p>
&lt;/blockquote>
&lt;p>我们将会使用 faas-创建新函数的脚手架，build，deploy 和 invoke 函数。你可以从 faas-cli —help 中找到这些命令。&lt;/p>
&lt;p>测试 faas-cli&lt;/p>
&lt;p>打开一个终端或 Git Bash 窗口，然后输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faas-cli version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="部署-openfaas">部署 OpenFaas&lt;/h3>
&lt;p>发布 OpenFaas 的说明文档修改了很多次，因为我们努力使他简单。接下来将会在 60 秒左右的时间使得 OpenFaas 部署起来。&lt;/p>
&lt;ul>
&lt;li>首先 clone 项目&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git clone https://github.com/openfaas/faas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>然后使用 git 检出到最新版本&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">$ cd faas &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> git checkout master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>备注：你也可以在&lt;a class="link" href="https://github.com/openfaas/faas/releases" target="_blank" rel="noopener"
>project release page&lt;/a>中找到最新导入 release 版本。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>现在使用 Docker Swarm 部署 stack&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">./deploy_stack.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你现在应该已经把 OpenFaas 部署了。&lt;/p>
&lt;p>如果你现在在一个共享 WIFI 连接中，它将会需要几分钟时间拉取镜像并启动。&lt;/p>
&lt;p>在此屏幕上检查服务是否显示为 1/1:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker service ls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果你期间有遇到任何问题，请查阅 Docker Swarm 的 &lt;a class="link" href="https://github.com/openfaas/faas/blob/master/guide/deployment_swarm.md" target="_blank" rel="noopener"
>部署指南&lt;/a>。&lt;/p>
&lt;p>现在进入&lt;a class="link" href="https://github.com/openfaas/workshop/blob/master/lab2.md" target="_blank" rel="noopener"
>Lab 2&lt;/a>。&lt;/p>
&lt;h1 id="未完待续">未完待续&lt;/h1></description></item><item><title>openfaas</title><link>https://example.com/p/openfaas/</link><pubDate>Sun, 24 Jun 2018 15:43:46 +0000</pubDate><guid>https://example.com/p/openfaas/</guid><description>&lt;p>对于 mac 环境来讲，首先安装新版 docker:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew cask install docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后启动 docker。&lt;/p>
&lt;p>命令行登陆 docker hub&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动 docker swarm&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker swarm init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装 faas-cli&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">brew install faas-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>clone 下来代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git clone https://github.com/openfaas/faas
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后执行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">./deploy_stack.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>部署一些示例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli deploy -f https://raw.githubusercontent.com/openfaas/faas/master/stack.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用浏览器打开 &lt;a class="link" href="http://127.0.0.1:8080" target="_blank" rel="noopener"
>http://127.0.0.1:8080&lt;/a> 就可以看到 ui 界面了。&lt;/p>
&lt;p>安装 grafana 进行监控&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">docker service create -d \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--name=grafana \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--publish=3000:3000 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--network=func_functions \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stefanprodan/faas-grafana:4.6.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>浏览器打开： &lt;a class="link" href="http://127.0.0.1:3000" target="_blank" rel="noopener"
>http://127.0.0.1:3000&lt;/a> 登陆 admin admin 查看。&lt;/p>
&lt;p>常用命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">faas-cli new --list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faas-cli build -f ./hello-openfaas.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faas-cli push -f ./hello-openfaas.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">faas-cli deploy -f ./hello-openfaas.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>java-reactive-web</title><link>https://example.com/p/java-reactive-web/</link><pubDate>Sat, 23 Jun 2018 15:05:32 +0000</pubDate><guid>https://example.com/p/java-reactive-web/</guid><description>&lt;p>Spring web mvc： 传统 servlet web&lt;/p>
&lt;p>spring web flux： Reactive web&lt;/p>
&lt;ul>
&lt;li>编程模式： non-blocking 非阻塞
&lt;ul>
&lt;li>nio：同步？异步？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>并行模型
&lt;ul>
&lt;li>sync 同步&lt;/li>
&lt;li>async 异步&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="reactive-概念">Reactive 概念&lt;/h1>
&lt;p>Reactive programming： 响应式编程&lt;/p>
&lt;p>In &lt;a class="link" href="https://en.wikipedia.org/wiki/Computing" target="_blank" rel="noopener"
>computing&lt;/a>, &lt;strong>reactive programming&lt;/strong> is a declarative &lt;a class="link" href="https://en.wikipedia.org/wiki/Programming_paradigm" target="_blank" rel="noopener"
>programming paradigm&lt;/a> concerned with &lt;a class="link" href="https://en.wikipedia.org/wiki/Dataflow_programming" target="_blank" rel="noopener"
>data streams&lt;/a> and the propagation of change. With this paradigm it is possible to express static (e.g. arrays) or dynamic (e.g. event emitters) &lt;em>data streams&lt;/em> with ease, and also communicate that an inferred dependency within the associated &lt;em>execution model&lt;/em> exists, which facilitates the automatic propagation of the changed data flow.&lt;/p>
&lt;h2 id="实现框架">实现框架&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>RxJava&lt;/p>
&lt;p>ReactiveX is a library for composing asynchronous and event-based programs by using observable sequences.&lt;/p>
&lt;p>这种就是推的模式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">int[] a=[1, 2, 3]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">for(int i: a){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.reactive.demo.reactivedemo;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import java.util.Observable;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * todo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * @author zhuzhenfeng
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * @date 2018/6/23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class ObserverPatternDemo {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> MyObservable observable = new MyObservable();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 1 observable n个observer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> observable.addObserver((o, value) -&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;1 收到数据更新&amp;#34; + value);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> observable.addObserver((o, value) -&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;2 收到数据更新&amp;#34; + value);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> observable.setChanged();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> observable.notifyObservers(&amp;#34;hello world&amp;#34;);// push data 发布数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static class MyObservable extends Observable {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected synchronized void setChanged() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> super.setChanged();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/java &amp;#34;-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2 收到数据更新hello world
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1 收到数据更新hello world
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Process finished with exit code 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当时不阻塞，后续回调。非阻塞基本上采用 callback 的形式。&lt;/p>
&lt;p>对于 java 来讲，异步代表切换了线程。&lt;/p>
&lt;p>当前的实现： 同步+非阻塞&lt;/p>
&lt;p>如果是切换了线程，代表是异步 的非阻塞，一般是 gui 程序的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reactor&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="特性">特性&lt;/h2>
&lt;ul>
&lt;li>异步&lt;/li>
&lt;li>非阻塞&lt;/li>
&lt;li>事件驱动&lt;/li>
&lt;li>可能有背压 backpressure&lt;/li>
&lt;li>防止回调地狱&lt;/li>
&lt;/ul>
&lt;h1 id="reactive-使用场景">Reactive 使用场景&lt;/h1>
&lt;p>Long Live 模式： netty 的 io 连接（rpc） timeout&lt;/p>
&lt;p>short live 模式：不太适合 Reactive web，因为这是等待。只是会快速返回，但是并不会给你真正的结果。短频快的连接，不太有用武之地。&lt;/p>
&lt;ul>
&lt;li>http&lt;/li>
&lt;li>http 超时时间&lt;/li>
&lt;/ul>
&lt;h1 id="reactive-理解误区">Reactive 理解误区&lt;/h1>
&lt;p>web：快速响应&lt;/p>
&lt;p>200 Q-&amp;gt;200 T -&amp;gt; 50T&lt;/p>
&lt;p>1-50&lt;/p>
&lt;p>Tomcat connector thread pool(200)-&amp;gt;reactive thread pool(50)&lt;/p>
&lt;p>io 连接从 Tomcat-&amp;gt;Reactive&lt;/p>
&lt;p>连接&lt;/p>
&lt;p>Reactive thread pool（50）&lt;/p>
&lt;p>不太适合 web 请求。&lt;/p>
&lt;p>webflux 其实并不会提升性能。&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/b831e4c7gy1fsl9ian4ezj20ma0g7tg4.jpg"
loading="lazy"
>&lt;/p>
&lt;p>少量的线程，少量的内存来做更好的伸缩性，而并不是为了提升更好的性能。使用 Reactive 只会是使单位时间内接受请求的数量增加，单位时间内的处理请求的数量下降。&lt;/p></description></item><item><title>kafka</title><link>https://example.com/p/kafka/</link><pubDate>Thu, 21 Jun 2018 17:49:46 +0000</pubDate><guid>https://example.com/p/kafka/</guid><description>&lt;p>启动 zookeeper&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/zookeeper-server-start.sh config/zookeeper.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动 kafka&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/kafka-server-start.sh config/server.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建一个主题&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/kafka-topics.sh --list --zookeeper localhost:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>生产者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>消费者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>kafka connect&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">echo -e &amp;#34;zhisheng\ntian&amp;#34; &amp;gt; test.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ls&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro➜ kafka_2.12-1.1.0 ᐅ echo -e &amp;#34;zhisheng\ntian&amp;#34; &amp;gt; test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro➜ kafka_2.12-1.1.0 ᐅ
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro➜ kafka_2.12-1.1.0 ᐅ ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LICENSE NOTICE bin config libs logs site-docs test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro➜ kafka_2.12-1.1.0 ᐅ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>启动连接器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bin/connect-standalone.sh config/connect-standalone.properties config/connect-file-source.properties config/connect-file-sink.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后发现多了一个文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">/Users/zhuzhenfeng/Documents/software/kafka_2.12-1.1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[kafka_2.12-1.1.0] ls 18:25:38
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">LICENSE NOTICE bin config libs logs site-docs test.sink.txt test.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[kafka_2.12-1.1.0]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后消费&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;gt;&amp;gt; bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic connect-test --from-beginning
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;schema&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;,&amp;#34;optional&amp;#34;:false},&amp;#34;payload&amp;#34;:&amp;#34;zhisheng&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;schema&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;,&amp;#34;optional&amp;#34;:false},&amp;#34;payload&amp;#34;:&amp;#34;tian&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;schema&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;,&amp;#34;optional&amp;#34;:false},&amp;#34;payload&amp;#34;:&amp;#34;sd&amp;#34;}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{&amp;#34;schema&amp;#34;:{&amp;#34;type&amp;#34;:&amp;#34;string&amp;#34;,&amp;#34;optional&amp;#34;:false},&amp;#34;payload&amp;#34;:&amp;#34;sdafasdfasdfdsa&amp;#34;}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>译：vertx-kotlin-coroutine</title><link>https://example.com/p/%E8%AF%91vertx-kotlin-coroutine/</link><pubDate>Sat, 02 Jun 2018 16:00:52 +0000</pubDate><guid>https://example.com/p/%E8%AF%91vertx-kotlin-coroutine/</guid><description>&lt;blockquote>
&lt;p>尝试翻译 vertx 的文档。尊重原文，部分使用自己的理解。&lt;/p>
&lt;/blockquote>
&lt;p>Vert.x 的 kotlin 协程提供了 async/await 或者和 go 类似的 channel。这使得你能够以熟悉的顺序风格写垂直代码。&lt;/p>
&lt;p>vertx-lang-kotlin-coroutines 集成了 kotlin 协程，用于执行异步操作和处理事件。这样就能够以同步代码的模型编写代码，而且不会阻塞内核线程。&lt;/p>
&lt;h1 id="简介">简介&lt;/h1>
&lt;p>vert.x 与许多旧的应用平台相比的一个主要优势是它几乎完全是非阻塞的（内核线程）。这允许基于 vert.x 的程序使用极少数的内核线程处理大量的并发（例如：许多连接和消息），可以获得更好的伸缩性。&lt;/p>
&lt;p>vert.x 的非阻塞特性形成了非阻塞 API。非阻塞 API 可以采用多种形式来实现，包括回调函数，promise，fibers 或者响应式扩展。vert.x 的核心 API 使用回调函数的风格，但是它也支持其他模型，如 RxJava 1 和 2。&lt;/p>
&lt;p>在某些情况下，使用异步的 API 编程可能比使用经典的顺序代码风格更具有挑战性，特别是需要按照顺序完成若干操作。另外，使用异步 API 时，错误的传播也更为复杂。&lt;/p>
&lt;p>vertx-lang-kotlin-coroutines 使用协程。协程是非常轻量级的线程，而且不与底层的内核线程对应。所以当协程需要“阻塞”时，它会暂停并释放当前的内核线程，使得另一个协程可以处理事件。&lt;/p>
&lt;p>vertx-lang-kotlin-coroutines 使用 kotlinx.coroutines 来实现协程。&lt;/p>
&lt;blockquote>
&lt;p>vertx-lang-kotlin-coroutines 目前仅适用于 kotlin，而且是 kotlin1.1 的一个实验特性。&lt;/p>
&lt;/blockquote>
&lt;h1 id="从一个-vertxx-的-contex-中启动协程">从一个 vertx.x 的 contex 中启动协程&lt;/h1>
&lt;p>导入 io.vertx.kotlin.coroutines.VertxCoroutine，launch（协程生成器）方法中允许运行一段代码作为可以暂停的协程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">vertx&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">deployVerticle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ExampleVerticle&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">launch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">timerId&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">awaitEvent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">handler&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Event fired from timer with id &lt;/span>&lt;span class="si">${timerId}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>vertx.dispatcher()返回一个使用 vert.x 的事件循环执行协程的 disptacher。&lt;/p>
&lt;p>awaitEvent 函数暂停协程的执行直到定时器触发为止，并使用赋给 handler 的值恢复协程。&lt;/p>
&lt;p>有关 handlers，events 和事件流的更多细节，将在下一节中给出。&lt;/p>
&lt;h1 id="继承-coroutineverticle">继承 CoroutineVerticle&lt;/h1>
&lt;p>你可以将代码部署为 io.vertx.kotlin.coroutines.CoroutineVerticle 的实例，这是 kotlin 协程的专用类型。你应该重载 verticle 的 start()方法，stop()方法的重载是可选的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyVerticle&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">CoroutineVerticle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">suspend&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">start&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="获得一次性的异步结果">获得一次性的异步结果&lt;/h1>
&lt;p>vert.x 的许多异步操作都采用 &lt;code>Handler&amp;lt;AsyncResult&amp;lt;T&amp;gt;&amp;gt;&lt;/code> 作为最后一个参数。一个例子就是使用 vert.x 的 mongo client 执行对象检索，或者是发送一个事件总线消息之后等待回复。&lt;/p>
&lt;p>这是通过 awaitResult 方法来实现，它返回一个值或者抛出一个异常。&lt;/p>
&lt;p>协程会一直处于暂停的状态知道事件被处理，并且这时没有内核线程被阻塞。&lt;/p>
&lt;p>The method is executed by specifying the asynchronous operation that needs to be executed in the form of a block that is passed to the handler at run-time.&lt;/p>
&lt;p>这个方法是通过指定一个异步操作来执行，这个异步操作需要以块的形式执行，而这个异步操作块在运行时会被传给 handler。&lt;/p>
&lt;p>这里是一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">awaitResultExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">consumer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">localConsumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">handler&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Consumer received: &lt;/span>&lt;span class="si">${message.body()}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">reply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pong&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send a message and wait for a reply
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">reply&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">awaitResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Reply received: &lt;/span>&lt;span class="si">${reply.body()}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当此块产生失败时，调用者可以使用 try/catch 结构处理异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">awaitResultFailureExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">consumer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">localConsumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">consumer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">handler&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The consumer will get a failure
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;it failed!!!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send a message and wait for a reply
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">reply&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Message&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">awaitResult&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ReplyException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Handle specific reply exception here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Reply failure: &lt;/span>&lt;span class="si">${e.message}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="获取一次性事件">获取一次性事件&lt;/h1>
&lt;p>使用 awaitEvent 函数处理一次性事件（而不是下一次出现的事件）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">awaitEventExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">awaitEvent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">2000L&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">h&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;This should be fired in 2s by some time with id=&lt;/span>&lt;span class="si">$id&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="获取一次性-worker-的结果">获取一次性 worker 的结果&lt;/h1>
&lt;p>使用 awaitBlocking 函数处理阻塞计算：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">awaitBlockingExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">awaitBlocking&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;some-string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="事件流">事件流&lt;/h1>
&lt;p>在 vert.x API 的很多地方，事件流都是通过 handler 来处理。这些例子包括事件消息总线的使用者和 http 服务器的请求。&lt;/p>
&lt;p>ReceiveChannelHandler 类允许通过(suspendable)receive 方法接收事件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">streamExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">adapter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receiveChannelHandler&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">localConsumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">adapter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Send 15 messages
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a.b.c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Receive the first 10 messages
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">message&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">adapter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Received: &lt;/span>&lt;span class="si">${message.body()}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="等待-vertx-的-future-的完成">等待 vert.x 的 future 的完成&lt;/h1>
&lt;p>vert.x 的 future 类实例的扩展方法 await，可以暂停协程直到他们完成。在这种情况下，该方法返回相应的 &lt;code>AsyncResult&amp;lt;T&amp;gt;&lt;/code> 对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">awaitingFuture&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">httpServerFuture&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Future&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">future&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">HttpServer&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">createHttpServer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">requestHandler&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">req&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">req&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">response&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">httpServerFuture&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">httpServer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">httpServerFuture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">await&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;HTTP server port: &lt;/span>&lt;span class="si">${httpServer.actualPort()}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CompositeFuture&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">all&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">httpServerFuture&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">httpServerFuture&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">await&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">succeeded&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The server is now running!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cause&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">printStackTrace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="通道">通道&lt;/h1>
&lt;p>channel 和 java 的 BlockingQueue 类似，只是 Channel 不会阻塞而是暂停协程。&lt;/p>
&lt;ul>
&lt;li>将值发送到满了的 Channel 会暂停协程&lt;/li>
&lt;li>从一个空 Channel 中接收值也会暂停协程&lt;/li>
&lt;/ul>
&lt;p>使用 toChannel 的扩展方法可以将 vert.x 的 ReadStream 和 WriteStream 适配成通道。&lt;/p>
&lt;p>这些适配器负责管理背压和流终端：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ReadStream&amp;lt;T&amp;gt;&lt;/code> 适配为 &lt;code>ReceiveChannel&amp;lt;T&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>WriteStream&amp;lt;T&amp;gt;&lt;/code> 适配为 &lt;code>SendChannel&amp;lt;T&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="接收数据">接收数据&lt;/h2>
&lt;p>当你需要处理一系列相关值的时候，channel 可能非常有用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">handleTemperatureStream&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">stream&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">consumer&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">channel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">min&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MAX_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">max&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">MIN_VALUE&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Iterate until the stream is closed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">msg&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">temperature&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">msg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">body&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">min&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">min&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">max&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The stream is now closed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>他也可以用于解析协议。我们将构建一个非阻塞的 http 请求解析器来展示通道的功能。&lt;/p>
&lt;p>我们将依靠 RecordParser 将以\r \n 分割的 buffer 流进行分割。&lt;/p>
&lt;p>这是解析器的初始版本，它只处理 http 的请求行。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">server&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">createNetServer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">connectHandler&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">socket&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The record parser provides a stream of buffers delimited by \r\n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">stream&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">RecordParser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">newDelimited&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Convert the stream to a Kotlin channel
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">channel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Run the coroutine
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">launch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Receive the request-line
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">line&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">method&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">uri&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Received HTTP request (&lt;/span>&lt;span class="si">$method&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">$uri&lt;/span>&lt;span class="s2">)&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Still need to parse headers and body...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>解析请求行就像在 channel 上调用 receive 一样简单。&lt;/p>
&lt;p>下一步是通过接收块来解析 http 头，直到我们得到一个空块为止。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Receive HTTP headers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">headers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">header&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Done with parsing headers
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">pos&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;:&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toLowerCase&lt;/span>&lt;span class="p">()]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substring&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pos&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">trim&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Received HTTP request (&lt;/span>&lt;span class="si">$method&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">$uri&lt;/span>&lt;span class="s2">) with headers &lt;/span>&lt;span class="si">${headers.keys}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后，我们通过处理可选的请求体来终止解析器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Receive the request body
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">transferEncoding&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;transfer-encoding&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">contentLength&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;content-length&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">body&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">transferEncoding&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;chunked&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Handle chunked encoding, e.g
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 5\r\n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// HELLO\r\n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 0\r\n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// \r\n
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Parse length chunk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">len&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">toString&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">16&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">len&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The stream is flipped to parse a chunk of the exact size
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fixedSizeMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">len&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Receive the chunk and append it
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">chunk&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">appendBuffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The stream is flipped back to the \r\n delimiter to parse the next chunk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">delimitedMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\r\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">contentLength&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The stream is flipped to parse a body of the exact size
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fixedSizeMode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">contentLength&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Non-blocking
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">body&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">receive&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">body&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Received HTTP request (&lt;/span>&lt;span class="si">$method&lt;/span>&lt;span class="s2">, &lt;/span>&lt;span class="si">$uri&lt;/span>&lt;span class="s2">) with headers &lt;/span>&lt;span class="si">${headers.keys}&lt;/span>&lt;span class="s2"> and body with size &lt;/span>&lt;span class="si">${body?.length() ?: 0}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="发送数据">发送数据&lt;/h2>
&lt;p>使用 channel 发送数据也非常直接：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">suspend&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">sendChannel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">stream&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eventBus&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">publisher&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s2">&amp;#34;temperature&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">channel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">temperature&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readTemperatureSensor&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Broadcast the temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Non-blocking but could be suspended
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">channel&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Wait for one second
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">awaitEvent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>SendChannel#send 和 WriteStream#write 都是非阻塞操作。不像当 channel 满的时候 SendChannel#send 可以停止执行，而等效 WriteStream#writ 的无 channel 操作可能像这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Check we can write in the stream
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">writeQueueFull&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// We can&amp;#39;t write so we set a drain handler to be called when we can write again
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">drainHandler&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">broadcastTemperature&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Read temperature
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">temperature&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readTemperatureSensor&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Write it to the stream
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">temperature&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Wait for one second
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setTimer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">broadcastTemperature&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="延迟取消和超时">延迟，取消和超时&lt;/h1>
&lt;p>借助于 vert.x 的定时器，vert.x 的调度器完全支持协程的 delay 函数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">launch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Set a one second Vertx timer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>定时器也支持取消：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">job&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">launch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Set a one second Vertx timer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something periodically
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Sometimes later
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">job&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取消是合作的。&lt;/p>
&lt;p>你也可以使用 withTimeout 函数安排超时。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">launch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">vertx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dispatcher&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">withTimeout&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">awaitEvent&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">anAsyncMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">TimeoutCancellationException&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Cancelled
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vert.x 支持所有的协程构建器：launch，async 和 runBlocking。runBlocking 构建器不能再 vert.x 的时间循环线程中使用。&lt;/p>
&lt;h1 id="协程的互操作性">协程的互操作性&lt;/h1>
&lt;p>vert.x 集成协程被设计为完全可以和 kotlin 协程互操作。&lt;/p>
&lt;p>kotlinx.coroutines.experimental.sync.Mutex 被执行在使用 vert.x 调度器的事件循环线程。&lt;/p>
&lt;h1 id="rxjava-的互操作性">RxJava 的互操作性&lt;/h1>
&lt;p>虽然 vertx-lang-kotlin-coroutines 模块没有与 RxJava 特定集成，但是 kotlin 协程提供了 RxJava 的集成。RxJava 可以和 vertx-lang-kotlin-coroutines 很好的协同工作。&lt;/p>
&lt;p>你可以阅读响应流和协程的指南。&lt;/p></description></item><item><title>小议 async/await 和 coroutine</title><link>https://example.com/p/%E5%B0%8F%E8%AE%AE-async/await-%E5%92%8C-coroutine/</link><pubDate>Mon, 21 May 2018 19:37:14 +0000</pubDate><guid>https://example.com/p/%E5%B0%8F%E8%AE%AE-async/await-%E5%92%8C-coroutine/</guid><description>&lt;blockquote>
&lt;p>Being happy doesn&amp;rsquo;t mean that everything is perfect. It means that you decided to look beyond the imperfections.&lt;/p>
&lt;/blockquote>
&lt;p>后端编程，涉及最多的就是并发。简单理解就是：&lt;/p>
&lt;blockquote>
&lt;p>并发是同时管理多个任务去执行，并行是针对多核处理器，同时执行多个任务。可以理解为一个是 manage，一个是 run。&lt;/p>
&lt;/blockquote>
&lt;p>并发一般特指 IO，IO 是独立于 CPU 的设备，IO 设备通常远远慢于 CPU，所以我们引入了并发的概念，让 CPU 可以一次性发起多个 IO 操作而不用等待 IO 设备做完一个操作再做令一个。原理就是非阻塞操作+事件通知。&lt;/p>
&lt;p>硬件底层上我其实不关心，主要就是在写程序上，如何简单的去写并发的代码。在语法层面上对并发做的比较好的，很适合做服务端，比如 go，比如 node，又比如某些函数式语言。我最近最近主要使用的是 node 和 kotlin。&lt;/p>
&lt;p>那么在写并发代码的时候，就会时不时的想这样一个问题：&lt;/p>
&lt;h2 id="一个问题">一个问题&lt;/h2>
&lt;p>当代码遇到一个“暂时不能完成”的流程时（例如建立一个 tcp 链接，可能需要 5ms 才能建立），他不想阻塞在这里睡眠，想暂时离开现场去干点别的事情（例如看看另外一个已经建立的链接是否可以收包了）。问题是：离开现场后，当你回来的时候，上下文还像你走的时候吗？&lt;/p>
&lt;p>跳转离开，在任何语言里都有 2 种最基本的方法：1）从当前函数返回； 2）调用一个新的函数。 前者会把上下文中的局部变量和函数参数全部摧毁，除非他返回前把这些变量找个别的地方保存起来；后者则能保护住整个上下文的内存（除了协程切换后会摧毁一些寄存器），而且跳转回来也是常规方法：函数返回。&lt;/p>
&lt;p>在写 node 的时候，基本上是无脑上 async/await。每次看到回调函数的时候，强迫症就犯了，总是想方设法将那个方法转成 promise，然后使用 await 获得结果。无脑尝试了 bluebird 和 node 的 util，虽然有些是很好用的，但是有的还是无法达到我预期的。靠着无脑的 async/await，实现了很多功能，代码写起来也是快的飞起，但是只顾着做业务而不深入思考的话，是一个不好的表现，所以我就停下来搜了很多 async/await 的东西，特别是从阮一峰老师那里收获了很多。&lt;/p>
&lt;h2 id="js-异步编程">js 异步编程&lt;/h2>
&lt;p>因为 js 是单线程，所以异步编程对 js 特别重要。&lt;/p>
&lt;p>实现异步主要有如下几种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>回调函数&lt;/p>
&lt;p>callback，英语直译就是重新调用。&lt;/p>
&lt;p>所谓的回调函数就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，直接调用这个函数。&lt;/p>
&lt;p>回调本身没问题，但是就怕多重嵌套。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>promise&lt;/p>
&lt;p>promise 是一种新的写法，把回调函数的横向嵌套，用 then 的形式改成纵向的加载。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协程&lt;/p>
&lt;p>协程就是比线程更小的单位。&lt;/p>
&lt;p>执行过程大致如下：&lt;/p>
&lt;p>第一步，协程 A 开始执行。&lt;/p>
&lt;p>第二步，协程 A 执行到一半，进入暂停，执行权转移到协程 B。&lt;/p>
&lt;p>第三步，（一段时间后）协程 B 交还执行权。&lt;/p>
&lt;p>第四步，协程 A 恢复执行。&lt;/p>
&lt;p>后面再展开说协程。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>很明显，在 go 火起来之后，很多编程语言都在往协程上靠，因为协程很好的将异步的写法转化成了同步的写法，降低了心智负担。js 当然也不落后。&lt;/p>
&lt;p>js 的异步写法的演进&lt;/p>
&lt;ul>
&lt;li>
&lt;p>generator&lt;/p>
&lt;p>es6 增加了 generator 函数，就是协程的一种实现，最大特点就是使用 yield 关键字就是用来交出函数的执行权。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">function* gen(x){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var y = yield x + 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return y;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不同于普通函数的地方在于调用 generator 函数的时候，不返回结果，而是会返回一个内部的指针。调用指针的 next 方法，会移动内部指针（即执行异步任务的第一段），遇到的 yield 语句就交出执行权，执行别的代码。下次再调用该函数指针的 next 方法，就继续执行到该函数的下一个 yield 语句。&lt;/p>
&lt;p>虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段），这样看来其实 generator 函数就是一个异步操作的容器，需要有一个触发它自动执行的机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thunk 函数&lt;/p>
&lt;p>说到 thunk 函数，就得先了解一下参数的求值策略。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">let m=1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function f(x){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return x*2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">f(m+5)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>传值调用&lt;/p>
&lt;p>先计算出来 m+5 的值 6，然后再将值传给函数 f，即 6*2&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传名调用&lt;/p>
&lt;p>把 m+5 传入到 f 中，在用到的时候再计算，即(x+5)*2。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>传值调用比较简单，但是对参数求值的时候，实际上还没用到这个参数，有可能造成性能损失。&lt;/p>
&lt;p>编译器的&amp;quot;传名调用&amp;quot;实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。&lt;/p>
&lt;p>js 是传值调用。他的 thunk 函数是将多参数的函数，替换成了单参数的版本，而且只接受回调函数作为参数。&lt;/p>
&lt;p>这样就可以很方便的实现了基于 thunk 函数的 generator 自动执行器。&lt;/p>
&lt;p>具体的实现和如何使用，参考&lt;a class="link" href="http://www.ruanyifeng.com/blog/2015/05/thunk.html" target="_blank" rel="noopener"
>http://www.ruanyifeng.com/blog/2015/05/thunk.html&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>co 函数&lt;/p>
&lt;p>co 函数是基于 Promise 的 generator 函数的自动执行器。&lt;/p>
&lt;p>源代码只有几十行，tj 大神太强👍了。&lt;/p>
&lt;p>&lt;a class="link" href="http://www.ruanyifeng.com/blog/2015/05/co.html" target="_blank" rel="noopener"
>http://www.ruanyifeng.com/blog/2015/05/co.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>async/await&lt;/p>
&lt;p>async 函数就是 generator 函数的语法糖。&lt;/p>
&lt;p>async 函数自带执行器，无脑写 async 和 await 的时候就是，几乎所有的函数都写成了 async 函数，只要需要等待的方法，都用 await 去等待，这样就造成了很多无意义的等待。本来两个不相干的操作，如果每个都是用 await 等的话，就会很影响性能。&lt;/p>
&lt;p>多个请求并发执行的时候，尽量选用 Promise.all 方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>理解了以上的演进过程，感觉自己终于摆脱了 java 思维的枪，对 node 终于入门了。然后，同步地写着 kotlin 项目，又陷入了泥潭中。&lt;/p>
&lt;h2 id="futurerxjavaactor-和-kotlin-协程">Future、RxJava、Actor 和 kotlin 协程&lt;/h2>
&lt;p>我理解的也不是很深，求科普。&lt;/p>
&lt;p>以前写 java 的时候，自己都是无脑用线程池，开多线程去处理，一般这种情况下不需要线程的结果。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>future&lt;/p>
&lt;p>因为不能直接从别的线程中得到函数的返回值，所以 future 就出场了。&lt;/p>
&lt;p>Futrue 可以监视目标线程调用 call 的情况，当你调用 Future 的 get()方法以获得结果时，当前线程就开始阻塞，直接 call 方法结束返回结果。&lt;/p>
&lt;p>Future 对象本身可以看作是一个显式的引用，一个对异步处理结果的引用。由于其异步性质，在创建之初，它所引用的对象可能还并不可用（比如尚在运算中，网络传输中或等待中）。这时，得到 Future 的程序流程如果并不急于使用 Future 所引用的对象，那么它可以做其它任何想做的事儿，当流程进行到需要 Future 背后引用的对象时，可能有两种情况：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>希望能看到这个对象可用，并完成一些相关的后续流程。&lt;/p>
&lt;p>可以通过调用 Future.isDone()判断引用的对象是否就绪，并采取不同的处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果实在不可用，也可以进入其它分支流程。&lt;/p>
&lt;p>只需调用 get()或 get(long timeout, TimeUnit unit)通过同步阻塞方式等待对象就绪。实际运行期是阻塞还是立即返回就取决于 get()的调用时机和对象就绪的先后了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>rxjava&lt;/p>
&lt;/li>
&lt;li>
&lt;p>actor&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coroutine&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>跪求科普，等理解了再接着完善。&lt;/p>
&lt;h2 id="浅谈协程">浅谈协程&lt;/h2>
&lt;p>说到协程，就要说线程。&lt;/p>
&lt;p>线程是操作系统的用户态概念，线程本身也依赖中断来进行调度。早期的用户态 IO 并发处理是用 poll(select)模型去轮询 IO 状态，然后发起相应的 IO 操作，称之为事件响应式的异步模型，这种方式并不容易使用，所以又发展出了阻塞式 IO 操作，让逻辑挂起并等待 IO 完成，为了让阻塞式 IO 能够并发就必须依赖多线程或者多进程模型来实现。但是线程的开销是非常大的，当遇到大规模并发的时候多线程模型就无法胜任了。所以大规模并发时我们又退回去使用事件响应，epoll 在本质上还是 poll 模型，只是在算法上优化了实现，此时我们只用单线程就可以处理上万的并发请求了。&lt;/p>
&lt;p>直到多核 CPU 的出现，我们发现只用一个线程是无法发挥多核 CPU 的威力的，所以再次引入线程池来分摊 IO 操作的 CPU 消耗，甚至 CPU 的中断响应也可以由多个核来分摊执行，此时的线程数量是大致等于 CPU 的核心数而远小于并发 IO 数的（这时 CPU 能处理百万级的并发），线程的引入完全是为了负载均衡而跟并发没有关系。所以不管是用 select/epoll/iocp 在逻辑层都绕不开基于事件响应的异步操作，面对异步逻辑本身的复杂性，我们才引入了 async/await 以及 coroutine 来降低复杂性。&lt;/p>
&lt;p>coroutine 是个很宽泛的概念，async/await 也属于 coroutine 的一种。&lt;/p>
&lt;p>而协程在实现模式上又分为：stackful coroutine 和 stackless coroutine。&lt;/p>
&lt;p>所谓 stackful 是指每个 coroutine 有独立的运行栈，比如 go 语言的每个 goroutine 会分配一个 4k 的内存来做为运行栈，切换 goroutine 的时候运行栈也会切换。stackful 的好处在于这种 coroutine 是完整的，coroutine 可以嵌套、循环。&lt;/p>
&lt;p>与 stackful 对应的是 stackless coroutine，比如 js 的 generator 函数，这类 coroutine 不需要分配单独的栈空间，coroutine 状态保存在闭包里，但缺点是功能比较弱，不能被嵌套调用，也没办法和异步函数配合使用进行控制流的调度，所以基本上没办法跟 stackful coroutine 做比较。保存这些状态的时候，有的语言就引入了状态机的模型来实现线程。&lt;/p>
&lt;p>async/await 的出现，实现了基于 stackless coroutine 的完整 coroutine。在特性上已经非常接近 stackful coroutine 了，不但可以嵌套使用也可以支持 try catch。&lt;/p>
&lt;h2 id="结语">结语&lt;/h2>
&lt;p>发现自己挺无脑的，学会了一个东西，就无脑的去用，直到碰壁了才会去思考。&lt;/p></description></item><item><title>elasticsearch</title><link>https://example.com/p/elasticsearch/</link><pubDate>Sun, 20 May 2018 14:17:07 +0000</pubDate><guid>https://example.com/p/elasticsearch/</guid><description>&lt;p>以前没有好好学的东西，现在在工作中慢慢的补回来了。&lt;/p>
&lt;h1 id="基础概念">基础概念&lt;/h1>
&lt;ul>
&lt;li>索引&lt;/li>
&lt;/ul>
&lt;p>es 是将数据存储在一个或者多个索引（index）中。&lt;/p>
&lt;p>索引就像是数据库。&lt;/p>
&lt;ul>
&lt;li>文档&lt;/li>
&lt;/ul>
&lt;p>文档是 es 的实体。由字段构成，每个字段包含字段名和一个或者多个字段值。&lt;/p>
&lt;p>文档就像数据库中的一条条记录。&lt;/p>
&lt;ul>
&lt;li>类型&lt;/li>
&lt;/ul>
&lt;p>每个文档都有一个类型与之相对应。&lt;/p>
&lt;p>类型就像数据库中的表。&lt;/p>
&lt;ul>
&lt;li>Map&lt;/li>
&lt;/ul>
&lt;p>所有文档在被写入到 es 中，都会被分析。由用户设置一些参数决定如何分割词条、哪些字应该被过滤掉等等。&lt;/p>
&lt;ul>
&lt;li>节点&lt;/li>
&lt;/ul>
&lt;p>单个 es 服务实例就是一个节点。&lt;/p>
&lt;ul>
&lt;li>集群&lt;/li>
&lt;/ul>
&lt;p>多个协同工作的 es 节点的集合就是集群。&lt;/p>
&lt;ul>
&lt;li>分片&lt;/li>
&lt;/ul>
&lt;p>es 将数据分散到多个物理的 Lucene 索引上，这些物理 Lucene 索引被称为分片。&lt;/p>
&lt;ul>
&lt;li>副本&lt;/li>
&lt;/ul>
&lt;p>副本就是每个分片都做冗余处理，一个宕机之后，不影响服务。&lt;/p>
&lt;h1 id="快速入门">快速入门&lt;/h1>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>es 的安装很简单，我这里使用的是 mac，下载下来 zip 包，解压即可使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">[elasticsearch-6.2.4] pwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/Users/zhuzhenfeng/Documents/software/elasticsearch-6.2.4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[elasticsearch-6.2.4] ./bin/elasticsearch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Java HotSpot(TM) 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[2018-05-20T17:18:37,619][INFO ][o.e.n.Node ] [] initializing ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[2018-05-20T17:18:37,766][INFO ][o.e.e.NodeEnvironment ] [M41310-] using [1] data paths, mounts [[/ (/dev/disk1s1)]], net usable_space [136gb], net total_space [233.4gb], types [apfs]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[2018-05-20T17:18:37,767][INFO ][o.e.e.NodeEnvironment ] [M41310-] heap size [990.7mb], compressed ordinary object pointers [true]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样就将 es 启动了，然后在 chrome 中，输入&lt;a class="link" href="http://localhost:9200" target="_blank" rel="noopener"
>http://localhost:9200&lt;/a>，即可查看有没有启动成功。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;name&amp;#34;: &amp;#34;M41310-&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;cluster_name&amp;#34;: &amp;#34;elasticsearch&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;cluster_uuid&amp;#34;: &amp;#34;58U11tViTYuXpI2b5SiGrg&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;version&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;number&amp;#34;: &amp;#34;6.2.4&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;build_hash&amp;#34;: &amp;#34;ccec39f&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;build_date&amp;#34;: &amp;#34;2018-04-12T20:37:28.497551Z&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;build_snapshot&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;lucene_version&amp;#34;: &amp;#34;7.2.1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;minimum_wire_compatibility_version&amp;#34;: &amp;#34;5.6.0&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;minimum_index_compatibility_version&amp;#34;: &amp;#34;5.0.0&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;tagline&amp;#34;: &amp;#34;You Know, for Search&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常用的命令">常用的命令&lt;/h2>
&lt;p>使用 postman 来模拟发送请求。&lt;/p>
&lt;h3 id="创建-index">创建 index&lt;/h3>
&lt;p>PUT&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://127.0.0.1:9200/myindex
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;acknowledged&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;shards_acknowledged&amp;#34;: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;index&amp;#34;: &amp;#34;myindex&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>创建了一个叫 myindex 的索引&lt;/p>
&lt;h3 id="删除-index">删除 index&lt;/h3>
&lt;p>DELETE&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://127.0.0.1:9200/myindex
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;acknowledged&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 delete 方法就可以删除索引，而且可以发现 es 的 response 特别人性化。&lt;/p>
&lt;h3 id="创建-maping">创建 maping&lt;/h3>
&lt;p>POST&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://localhost:9200/myindex/fulltext/_mapping
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>body&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;properties&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;content&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;analyzer&amp;#34;: &amp;#34;ik_max_word&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;search_analyzer&amp;#34;: &amp;#34;ik_max_word&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;acknowledged&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这里在创建一个 type 是 fulltext 的同时，指定了这个 fulltext 类型的字段 Map。在 mapping 中，一般是设置字段是什么类型的，比如 bool，text 等。analyzer 是给文档建索引的分词方法，search_analyzer 是搜索时对搜索的内容进行分词的方法。这里都是用了 ik 的分词器。&lt;/p>
&lt;h3 id="新增-doc">新增 doc&lt;/h3>
&lt;p>POST&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://localhost:9200/myindex/fulltext/1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>body&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;content&amp;#34;: &amp;#34;中国崛起哦&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_index&amp;#34;: &amp;#34;myindex&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_type&amp;#34;: &amp;#34;fulltext&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_id&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_version&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;result&amp;#34;: &amp;#34;created&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_shards&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;total&amp;#34;: 2,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;successful&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;failed&amp;#34;: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_seq_no&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_primary_term&amp;#34;: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有指定 id 的话，每次新增的时候都会用 es 自动给的 id。如果不注意的话，可能会出现重复新增，所以我们一般情况下会使用自己给的的 id。&lt;/p>
&lt;h3 id="搜索">搜索&lt;/h3>
&lt;p>POST&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">http://127.0.0.1:9200/myindex/fulltext/_search
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>body&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;match&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;content&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34;: &amp;#34;中国&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>response&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;took&amp;#34;: 98,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;timed_out&amp;#34;: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_shards&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;total&amp;#34;: 5,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;successful&amp;#34;: 5,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;skipped&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;failed&amp;#34;: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;hits&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;total&amp;#34;: 1,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;max_score&amp;#34;: 0.2876821,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;hits&amp;#34;: [
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_index&amp;#34;: &amp;#34;myindex&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_type&amp;#34;: &amp;#34;fulltext&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_id&amp;#34;: &amp;#34;1&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_score&amp;#34;: 0.2876821,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;_source&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;content&amp;#34;: &amp;#34;中国崛起哦&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>前面都没啥，主要就是如何把数据灌到 es 中。es 作为一个搜索引擎，肯定搜索才是最重要的。这里只是用的最简单的搜索。关于 es 的搜索，我在实际生产中主要使用的是，多字段的搜索，使用了 bool 操作符。&lt;/p>
&lt;h1 id="原理">原理&lt;/h1>
&lt;h2 id="相关性得分">相关性得分&lt;/h2>
&lt;p>Elasticsearch 默认按照相关性得分排序，即每个文档跟查询的匹配程度。Elasticsearch 中的 &lt;em>相关性&lt;/em> 概念非常重要，也是完全区别于传统关系型数据库的一个概念，数据库中的一条记录要么匹配要么不匹配。&lt;/p>
&lt;h1 id="搜索-1">搜索&lt;/h1>
&lt;h2 id="轻量级搜索">轻量级搜索&lt;/h2>
&lt;p>_search&lt;/p>
&lt;p>_search?q=content:中国&lt;/p>
&lt;p>这种搜索方式比较简单，很轻量。&lt;/p>
&lt;h2 id="查询表达式">查询表达式&lt;/h2>
&lt;p>即 dsl 形式的。使用的是 POST 方法，在 body 中，写搜索的 dsl。&lt;/p>
&lt;h3 id="简单的-dsl">简单的 dsl&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;match&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;content&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34;: &amp;#34;中国&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="bool-操作符的-dsl">bool 操作符的 DSL&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;bool&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;must&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;match&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;last_name&amp;#34; : &amp;#34;smith&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;filter&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;range&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;age&amp;#34; : { &amp;#34;gt&amp;#34; : 30 }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们添加了一个 &lt;em>过滤器&lt;/em> 用于执行一个范围查询，并复用之前的 &lt;code>match&lt;/code> 查询。&lt;/p>
&lt;h3 id="短语搜索">短语搜索&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;match_phrase&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;about&amp;#34; : &amp;#34;rock climbing&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果不用短语搜索的话，会将只含有 rock 或者 climbing 的返回。为了能让二者是短语形式，es 中新增了短语搜索 dsl。&lt;/p>
&lt;h3 id="高亮">高亮&lt;/h3>
&lt;p>许多应用都倾向于在每个搜索结果中 &lt;em>高亮&lt;/em> 部分文本片段，以便让用户知道为何该文档符合查询条件。在 Elasticsearch 中检索出高亮片段也很容易。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;query&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;match_phrase&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;about&amp;#34; : &amp;#34;rock climbing&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;highlight&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;fields&amp;#34; : {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;about&amp;#34; : {}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>加上 highlight 关键字即可。&lt;/p>
&lt;h3 id="聚合">聚合&lt;/h3>
&lt;p> Elasticsearch 有一个功能叫聚合（aggregations），允许我们基于数据生成一些精细的分析结果。聚合与 SQL 中的 &lt;code>GROUP BY&lt;/code> 类似但更强大。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;aggs&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;all_interests&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;terms&amp;#34;: { &amp;#34;field&amp;#34;: &amp;#34;interests&amp;#34; }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>git 常用操作</title><link>https://example.com/p/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 14 May 2018 10:04:02 +0000</pubDate><guid>https://example.com/p/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid><description>&lt;p>整理一下常用的 git 操作，不用再到处找了。&lt;/p>
&lt;h1 id="git-放弃本地修改强制更新">git 放弃本地修改，强制更新&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git fetch --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git reset --hard origin/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="git-修改远程仓库地址">git 修改远程仓库地址&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git remote set-url origin url
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="cherry-pick">cherry-pick&lt;/h1>
&lt;p>当你通过一番挣扎终于搞定一个 bug,顺手提交到 git 服务器,心里一阵暗爽. 这时发现你当前所在的分支是 master !!!&lt;/p>
&lt;p>这个分支不是开发者用来提交代码的,可惜现在剁手也晚了.&lt;/p>
&lt;ol>
&lt;li>先切换到 master&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>
&lt;p>复制提交的 commit id&lt;/p>
&lt;/li>
&lt;li>
&lt;p>切换到 dev, cherry-pick&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git checkout dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git cherry-pic ${commit_id}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="常用开发流程">常用开发流程&lt;/h1>
&lt;p>git checkout -b feature1&lt;/p>
&lt;p>git commit 之后，进行 rebase&lt;/p>
&lt;p>git pull &amp;ndash;rebase&lt;/p>
&lt;p>gca!&lt;/p>
&lt;p>git rvm&lt;/p></description></item><item><title>node 的 cluster</title><link>https://example.com/p/node-%E7%9A%84-cluster/</link><pubDate>Sat, 05 May 2018 15:45:47 +0000</pubDate><guid>https://example.com/p/node-%E7%9A%84-cluster/</guid><description>&lt;p>我们知道 js 是运行单线程的，也就是说一个 node 进程只能运行在一个 cpu 上。那么如果用 node 来做 web server 的话，就无法享受到多核运算的好处。&lt;/p>
&lt;p>一个问题就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">如何榨干服务器资源，利用多核CPU的并发优势。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>node 官方提供的解决方案是 cluster。&lt;/p>
&lt;h2 id="1-cluster-是什么">1 cluster 是什么&lt;/h2>
&lt;p>简单来说：&lt;/p>
&lt;ul>
&lt;li>在服务器上同时启动多个进程。&lt;/li>
&lt;li>每个进程都跑的是同一份源码。&lt;/li>
&lt;li>这些进程可以同时监听一个端口。&lt;/li>
&lt;/ul>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>负责启动其他进程的叫做 master 进程，不做具体工作，只负责启动其他进程。&lt;/li>
&lt;li>其他被启动的叫 worker 进程。他们接收请求，对外提供服务。&lt;/li>
&lt;li>worker 进程的数量一般根据服务器的 cpu 核数来决定，这样就可以完美利用多核资源。&lt;/li>
&lt;/ul>
&lt;p>以下是官方文档的一个例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const cluster = require(&amp;#39;cluster&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const numCPUs = require(&amp;#39;os&amp;#39;).cpus().length;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">if (cluster.isMaster) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(`主进程 ${process.pid} 正在运行`);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 衍生工作进程。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> for (let i = 0; i &amp;lt; numCPUs; i++) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cluster.fork();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cluster.on(&amp;#39;exit&amp;#39;, (worker, code, signal) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(`工作进程 ${worker.process.pid} 已退出`);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">} else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 工作进程可以共享任何 TCP 连接。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 在本例子中，共享的是一个 HTTP 服务器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> http.createServer((req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.writeHead(200);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(&amp;#39;你好世界\n&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }).listen(8000);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(`工作进程 ${process.pid} 已启动`);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">% node cluster.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">主进程 16391 正在运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">工作进程 16394 已启动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">工作进程 16393 已启动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">工作进程 16395 已启动
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">工作进程 16392 已启动
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-多进程模型">2 多进程模型&lt;/h2>
&lt;p>官网的示例很简单，但是我们还要考虑很多东西。&lt;/p>
&lt;ul>
&lt;li>worker 进程异常退出以后如何处理？&lt;/li>
&lt;li>多个 worker 进程之间如何共享资源？&lt;/li>
&lt;li>多个 worker 进程之间如何调度？&lt;/li>
&lt;li>。。。&lt;/li>
&lt;/ul>
&lt;h3 id="进程守护">进程守护&lt;/h3>
&lt;p>健壮性是我们做大型应用要考虑的一个问题。一般来说，node 的进程退出可以分为两类：&lt;/p>
&lt;ul>
&lt;li>未捕获异常&lt;/li>
&lt;li>内存溢出（OOM）或者系统异常&lt;/li>
&lt;/ul>
&lt;p>代码跑出了异常却没有没捕捉时，进程将会退出，此时 node 提供了 process.on(&amp;lsquo;uncaughtException&amp;rsquo;, handler)来捕获。但是当一个 worker 进程遇到未 捕获的异常时，他已经处于一个不确定的状态，此时我们应该让这个进程优雅的退出。&lt;/p>
&lt;p>优雅退出的流程是：&lt;/p>
&lt;ol>
&lt;li>关闭异常 worker 进程和所有的 tcp server(将已有的连接快速断开，且不再接收新的连接)，断开和 master 的 ipc 通道，不再接收新的用户请求。&lt;/li>
&lt;li>master 立即 fork 一个新的 worker 进程，保证在线的“工人”总数不变。&lt;/li>
&lt;li>异常 worker 等待一段时间，处理完已经接受的请求后退出。&lt;/li>
&lt;/ol>
&lt;p>而当一个进程出现异常导致 crash 或者 OOM 被系统杀死时，不像未捕获异常发生时我们还有机会让进程继续执行，只能够让当前进程直接退出，Master 立刻 fork 一个新的 Worker。&lt;/p>
&lt;h3 id="agent-机制">Agent 机制&lt;/h3>
&lt;p>有些工作并不需要每个 worker 都去做，如果都做，一个是浪费资源，另一个更重要的是可能会导致多进程之间资源访问冲突。&lt;/p>
&lt;p>比如：生产环境中一般会按照日期进行归档，在单进程模型的时候比较简单：&lt;/p>
&lt;ol>
&lt;li>每天凌晨，批量将日志文件重命名&lt;/li>
&lt;li>创建新的日志文件继续写入。&lt;/li>
&lt;/ol>
&lt;p>如果这个任务由 4 个进程同时做，就乱套了。所以对于这一类的后台运行逻辑，应该放到一个单独的进程去执行，这个进程就是 agent。agent 好比是给其他 worker 请的一个秘书，它不对外提供服务，只给 worker 打工，处理一些公共事务。&lt;/p>
&lt;p>另外，关于 Agent Worker 还有几点需要注意的是：&lt;/p>
&lt;ol>
&lt;li>由于 Worker 依赖于 Agent，所以必须等 Agent 初始化完成后才能 fork Worker&lt;/li>
&lt;li>Agent 虽然是 Worker 的『小秘』，但是业务相关的工作不应该放到 Agent 上去做。&lt;/li>
&lt;li>由于 Agent 的特殊定位，&lt;strong>我们应该保证它相对稳定&lt;/strong>。当它发生未捕获异常，不应该像 Worker 一样让他退出重启，而是记录异常日志、报警等待人工处理。&lt;/li>
&lt;/ol>
&lt;h2 id="3-进程间通讯ipc">3 进程间通讯（IPC）&lt;/h2>
&lt;p>虽然每个 Worker 进程是相对独立的，但是它们之间始终还是需要通讯的，叫进程间通讯（IPC）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">if (cluster.isMaster) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const worker = cluster.fork();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> worker.send(&amp;#39;hi there&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">} else if (cluster.isWorker) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> process.on(&amp;#39;message&amp;#39;, (msg) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> process.send(msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子里面，工作进程将主进程发送的消息 echo 回去。&lt;/p>
&lt;h2 id="4-长连接">4 长连接&lt;/h2>
&lt;p>一些中间件客户端需要和服务器建立长连接，理论上一台服务器最好只建立一个长连接，但多进程模型会导致 n 倍（n = Worker 进程数）连接被创建。&lt;/p>
&lt;p>为了尽可能的复用长连接（因为它们对于服务端来说是非常宝贵的资源），我们会把它放到 Agent 进程里维护，然后通过 messenger 将数据传递给各个 Worker。这种做法是可行的，但是往往需要写大量代码去封装接口和实现数据的传递，非常麻烦。&lt;/p>
&lt;p>另外，通过 messenger 传递数据效率是比较低的，因为它会通过 Master 来做中转；万一 IPC 通道出现问题还可能将 Master 进程搞挂。&lt;/p>
&lt;p>那么有没有更好的方法呢？答案是肯定的，我们提供一种新的模式来降低这类客户端封装的复杂度。通过建立 Agent 和 Worker 的 socket 直连跳过 Master 的中转。Agent 作为对外的门面维持多个 Worker 进程的共享连接。&lt;/p>
&lt;h3 id="核心思想">核心思想&lt;/h3>
&lt;ul>
&lt;li>受到 &lt;a class="link" href="http://www.cs.wustl.edu/~schmidt/PDF/lf.pdf" target="_blank" rel="noopener"
>Leader/Follower&lt;/a> 模式的启发&lt;/li>
&lt;li>客户端会被区分为两种角色：
&lt;ul>
&lt;li>Leader: 负责和远程服务端维持连接，对于同一类的客户端只有一个 Leader&lt;/li>
&lt;li>Follower: 会将具体的操作委托给 Leader，常见的是订阅模型（让 Leader 和远程服务端交互，并等待其返回）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如何确定谁是 Leader，谁是 Follower 呢？有两种模式：
&lt;ul>
&lt;li>自由竞争模式：客户端启动的时候通过本地端口的争夺来确定 Leader。例如：大家都尝试监听 7777 端口，最后只会有一个实例抢占到，那它就变成 Leader，其余的都是 Follower。&lt;/li>
&lt;li>强制指定模式：框架指定某一个 Leader，其余的就是 Follower&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>启动的时候 Master 会随机选择一个可用的端口作为 Cluster Client 监听的通讯端口，并将它通过参数传递给 Agent 和 App Worker&lt;/li>
&lt;li>Leader 和 Follower 之间通过 socket 直连（通过通讯端口），不再需要 Master 中转&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-参考资料">5 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener"
>多进程模型和进程间通讯&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://nodejs.cn/api/cluster.html" target="_blank" rel="noopener"
>Node.js v8.11.1 文档 cluster&lt;/a>&lt;/p></description></item><item><title>node 踩坑</title><link>https://example.com/p/node-%E8%B8%A9%E5%9D%91/</link><pubDate>Sat, 05 May 2018 15:32:59 +0000</pubDate><guid>https://example.com/p/node-%E8%B8%A9%E5%9D%91/</guid><description>&lt;h1 id="module">module&lt;/h1>
&lt;p>首先第一个就是 es6 的 module。&lt;/p>
&lt;p>看到别人写的&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">import { a } from &amp;#34;./module&amp;#34;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>所以自己也想要这么写，但是每次运行的时候都会报错。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// demo2.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export const a = &amp;#34;hello&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//demo1.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import { a } from &amp;#34;./demo2&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function hello() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(a);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro :: node/node-example » node demo1.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/Users/zhuzhenfeng/Documents/github/node/node-example/demo1.js:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(function (exports, require, module, __filename, __dirname) { import { a } from &amp;#34;./demo2&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">SyntaxError: Unexpected token {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at new Script (vm.js:74:7)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at createScript (vm.js:246:10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Object.runInThisContext (vm.js:298:10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Module._compile (internal/modules/cjs/loader.js:646:28)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Object.Module._extensions..js (internal/modules/cjs/loader.js:689:10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Module.load (internal/modules/cjs/loader.js:589:32)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at tryModuleLoad (internal/modules/cjs/loader.js:528:12)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Function.Module._load (internal/modules/cjs/loader.js:520:3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at Function.Module.runMain (internal/modules/cjs/loader.js:719:10)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at startup (internal/bootstrap/node.js:228:19)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro :: node/node-example »
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>后来仔细查了资料之后，才发现，node 现在还不能这么使用。&lt;/p>
&lt;p>如下是解决的办法。&lt;/p>
&lt;p>给每个 js 文件都以 mjs 命名。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// module.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">export const a = &amp;#34;hello&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// useModule.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import { a } from &amp;#34;./module.mjs&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function hello() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(a);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro :: node/node-example » node --experimental-modules useModule.mjs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">(node:15282) ExperimentalWarning: The ESM module loader is experimental.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zhuzhenfengdeMacBook-Pro :: node/node-example »
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样才能够正常使用。&lt;/p></description></item><item><title>node 学习笔记</title><link>https://example.com/p/node-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 22 Apr 2018 15:41:21 +0000</pubDate><guid>https://example.com/p/node-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>&lt;p>写 node 也有一段时间了，整理一下学习笔记，共同进步&lt;/p>
&lt;h1 id="什么是-node">什么是 node&lt;/h1>
&lt;p>首先看一下什么是 node.js&lt;/p>
&lt;ul>
&lt;li>Node 是一个服务器端 JavaScript&lt;/li>
&lt;li>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境&lt;/li>
&lt;li>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效&lt;/li>
&lt;li>Node.js 的包管理器 npm，是全球最大的开源库生态系统&lt;/li>
&lt;/ul>
&lt;p>模块系统是 node 最基本也是最常用的。一般可以分为四类：&lt;/p>
&lt;ul>
&lt;li>原生模块&lt;/li>
&lt;li>文件模块&lt;/li>
&lt;li>第三方模块&lt;/li>
&lt;li>自定义模块&lt;/li>
&lt;/ul>
&lt;p>node 社区崇尚 DRY 文化，即 Don&amp;rsquo;t repeate yourself。这种文化使得 node 的生态异常繁荣，同样也由于某些包的质量低下引来了一些诟病。&lt;/p>
&lt;h1 id="谈谈自定义模块">谈谈自定义模块&lt;/h1>
&lt;p>我们在写 node 程序的时候，一般都是在写自定义模块。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建模块&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// b.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function FunA(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#34;hello world&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 暴露方法FunA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = FunA;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>加载模块&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">// a.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const FunA=require(&amp;#39;./b.js&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 运行FunA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const name=FunA();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(name);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>在做模块到处的时候有两种方式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>module.exports&lt;/p>
&lt;p>module.exports 就 Node.js 用于对外暴露，或者说对外开放指定访问权限的一个对象。&lt;/p>
&lt;p>一个模块中有且仅有一个 module.exports，如果有多个那后面的则会覆盖前面的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>exports&lt;/p>
&lt;p>exports 是 module 对象的一个属性，同时它也是一个对象。在很多时候一个 js 文件有多个需要暴露的方法或是对象，module.exports 又只能暴露一个，那这个时候就要用到 exports:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">function FunA(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#39;Tom&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function FunB(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return &amp;#39;Sam&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exports.FunA = FunA;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">exports.FunB = FunB;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">//FunA = exports,exports 是一个对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var FunA = require(&amp;#39;./b.js&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name1 = FunA.FunA();// 运行 FunA，name = &amp;#39;Tom&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name2 = FunA.FunB();// 运行 FunB，name = &amp;#39;Sam&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(name1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(name2);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然在引入的时候也可以这样写：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">//FunA = exports,exports 是一个对象
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var {FunA, FunB} = require(&amp;#39;./b.js&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name1 = FunA();// 运行 FunA，name = &amp;#39;Tom&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var name2 = FunB();// 运行 FunB，name = &amp;#39;Sam&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(name1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(name2);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h1 id="常用的原生模块">常用的原生模块&lt;/h1>
&lt;p>常用的原生模块有如下四个：&lt;/p>
&lt;ul>
&lt;li>http&lt;/li>
&lt;li>url&lt;/li>
&lt;li>queryString&lt;/li>
&lt;li>fs&lt;/li>
&lt;/ul>
&lt;h2 id="http">http&lt;/h2>
&lt;p>所有后端的语言要想运行起来，都得有服务器。node 通过原生的 http 模块来搭建服务器：&lt;/p>
&lt;ol>
&lt;li>加载 http 模块&lt;/li>
&lt;li>调用 http.createServer() 方法创建服务，方法接受一个回调函数，回调函数中有两个参数，第一个是请求体，第二个是响应体。&lt;/li>
&lt;li>在回调函数中一定要使用 response.end() 方法，用于结束当前请求，不然当前请求会一直处在等待的状态。&lt;/li>
&lt;li>调用 listen 监听一个端口。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">//原生模块
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function(reqeust, response){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.end(&amp;#39;Hello Node&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8080);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>处理参数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>get&lt;/p>
&lt;p>当 get 请求的时候，服务器通过 request.method 来判断当前的请求方式并通过 request.url 来获取当前的请求参数：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var url = require(&amp;#39;url&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function(req, res){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var params = url.parse(req.url, true).query;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(params);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(3000);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>post&lt;/p>
&lt;p>post 请求则不能通过 url 来获取，这时候就得对请求体进行事件监听。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var util = require(&amp;#39;util&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var querystring = require(&amp;#39;querystring&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function(req, res){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 定义了一个post变量，用于暂存请求体的信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var post = &amp;#39;&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> req.on(&amp;#39;data&amp;#39;, function(chunk){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> post += chunk;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> req.on(&amp;#39;end&amp;#39;, function(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> post = querystring.parse(post);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.end(util.inspect(post));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(3000);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="url">url&lt;/h2>
&lt;p>url 和 http 是配合使用的。一般情况下 url 都是字符串类型的，包含的信息也比较多，比如有：协议、主机名、端口、路径、参数、锚点等。如果是对字符串进行直接解析的话，相当麻烦，node 提供的 url 模块便可轻松解决这一类的问题。&lt;/p>
&lt;h3 id="字符串转对象">字符串转对象&lt;/h3>
&lt;ul>
&lt;li>格式：url.parse(urlstring, boolean)&lt;/li>
&lt;li>参数
&lt;ul>
&lt;li>urlstring：字符串格式的 url&lt;/li>
&lt;li>boolean：在 url 中有参数，默认参数为字符串，如果此参数为 true，则会自动将参数转转对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>常用属性
&lt;ul>
&lt;li>href： 解析前的完整原始 URL，协议名和主机名已转为小写&lt;/li>
&lt;li>protocol： 请求协议，小写&lt;/li>
&lt;li>host： url 主机名，包括端口信息，小写&lt;/li>
&lt;li>hostname: 主机名，小写&lt;/li>
&lt;li>port: 主机的端口号&lt;/li>
&lt;li>pathname: URL 中路径，下面例子的 /one&lt;/li>
&lt;li>search: 查询对象，即：queryString，包括之前的问号“?”&lt;/li>
&lt;li>path: pathname 和 search 的合集&lt;/li>
&lt;li>query: 查询字符串中的参数部分（问号后面部分字符串），或者使用 querystring.parse() 解析后返回的对象&lt;/li>
&lt;li>hash: 锚点部分（即：“#”及其后的部分）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="对象转字符串">对象转字符串&lt;/h3>
&lt;ul>
&lt;li>格式：url.format(urlObj)&lt;/li>
&lt;li>参数 urlObj 在格式化的时候会做如下处理
&lt;ul>
&lt;li>href: 会被忽略，不做处理&lt;/li>
&lt;li>protocol：无论末尾是否有冒号都会处理，协议包括 http, https, ftp, gopher, file 后缀是 :// (冒号-斜杠-斜杠)&lt;/li>
&lt;li>hostname：如果 host 属性没被定义，则会使用此属性&lt;/li>
&lt;li>port：如果 host 属性没被定义，则会使用此属性&lt;/li>
&lt;li>host：优先使用，将会替代 hostname 和 port&lt;/li>
&lt;li>pathname：将会同样处理无论结尾是否有/ (斜杠)&lt;/li>
&lt;li>search：将会替代 query 属性，无论前面是否有 ? (问号)，都会同样的处理&lt;/li>
&lt;li>query：(object 类型; 详细请看 querystring) 如果没有 search,将会使用此属性.&lt;/li>
&lt;li>hash：无论前面是否有# (井号, 锚点)，都会同样处理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="拼接">拼接&lt;/h3>
&lt;p>当有多个 url 需要拼接处理的时候，可以用到 url.resolve&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var url = require(&amp;#39;url&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">url.resolve(&amp;#39;http://dk-lan.com/&amp;#39;, &amp;#39;/one&amp;#39;)// &amp;#39;http://dk-lan.com/one&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="querystring">querystring&lt;/h2>
&lt;p>url 是对 url 字符串的处理，而 querystring 就是仅针对参数的处理。&lt;/p>
&lt;h3 id="字符串转对象-1">字符串转对象&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var str = &amp;#39;firstname=dk&amp;amp;url=http%3A%2F%2Fdk-lan.com&amp;amp;lastname=tom&amp;amp;passowrd=123456&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var param = querystring.parse(param);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//{firstname:&amp;#34;dk&amp;#34;, url:&amp;#34;http://dk-lan.com&amp;#34;, lastname: &amp;#39;tom&amp;#39;, passowrd: 123456};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="对象转字符串-1">对象转字符串&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var querystring = require(&amp;#39;querystring&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var obj = {firstname:&amp;#34;dk&amp;#34;, url:&amp;#34;http://dk-lan.com&amp;#34;, lastname: &amp;#39;tom&amp;#39;, passowrd: 123456};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//将对象转换成字符串
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var param = querystring.stringify(obj);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//结果
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//firstname=dk&amp;amp;url=http%3A%2F%2Fdk-lan.com&amp;amp;lastname=tom&amp;amp;passowrd=123456
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fs">fs&lt;/h2>
&lt;p>任何服务端语言都不能缺失文件的读写操作。&lt;/p>
&lt;h3 id="读取文本----异步读取">读取文本 &amp;ndash; 异步读取&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var fs = require(&amp;#39;fs&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 异步读取
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 参数1：文件路径，
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 参数2：读取文件后的回调
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fs.readFile(&amp;#39;demoFile.txt&amp;#39;, function (err, data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;异步读取: &amp;#34; + data.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="读取文本----同步读取">读取文本 &amp;ndash; 同步读取&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var fs = require(&amp;#39;fs&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var data = fs.readFileSync(&amp;#39;demoFile.txt&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(&amp;#34;同步读取: &amp;#34; + data.toString());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="写入文本----覆盖写入">写入文本 &amp;ndash; 覆盖写入&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var fs = require(&amp;#39;fs&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//每次写入文本都会覆盖之前的文本内容
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fs.writeFile(&amp;#39;input.txt&amp;#39;, &amp;#39;抵制一切不利于中国和世界和平的动机！&amp;#39;, function(err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;数据写入成功！&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;--------我是分割线-------------&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;读取写入的数据！&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fs.readFile(&amp;#39;input.txt&amp;#39;, function (err, data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;异步读取文件数据: &amp;#34; + data.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="写入文本----追加写入">写入文本 &amp;ndash; 追加写入&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var fs = require(&amp;#39;fs&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">fs.appendFile(&amp;#39;input.txt&amp;#39;, &amp;#39;愿世界和平！&amp;#39;, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;数据写入成功！&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;--------我是分割线-------------&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;读取写入的数据！&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> fs.readFile(&amp;#39;input.txt&amp;#39;, function (err, data) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;异步读取文件数据: &amp;#34; + data.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="图片读取">图片读取&lt;/h3>
&lt;p>图片读取不同于文本，因为文本读出来可以直接用 console.log() 打印，但图片则需要在浏览器中显示，所以需要先搭建 web 服务，然后把以字节方式读取的图片在浏览器中渲染。&lt;/p>
&lt;ol>
&lt;li>图片读取是以字节的方式&lt;/li>
&lt;li>图片在浏览器的渲染因为没有 img 标签，所以需要设置响应头为 image&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var fs = require(&amp;#39;fs&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var content = fs.readFileSync(&amp;#39;001.jpg&amp;#39;, &amp;#34;binary&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.createServer(function(request, response){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.writeHead(200, {&amp;#39;Content-Type&amp;#39;: &amp;#39;image/jpeg&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.write(content, &amp;#34;binary&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.end();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(8888);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">console.log(&amp;#39;Server running at http://127.0.0.1:8888/&amp;#39;);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="stream-流处理">stream 流处理&lt;/h2>
&lt;p>对 http 服务器发起请求的 request 对象就是一个 Stream，还有 stdout（标准输出）。往往用于打开大型的文本文件，创建一个读取操作的数据流。所谓大型文本文件，指的是文本文件的体积很大，读取操作的缓存装不下，只能分成几次发送，每次发送会触发一个 data 事件，发送结束会触发 end 事件。&lt;/p>
&lt;p>主要分为&lt;/p>
&lt;ul>
&lt;li>读取流&lt;/li>
&lt;li>写入流&lt;/li>
&lt;li>管道流&lt;/li>
&lt;li>链式流&lt;/li>
&lt;/ul>
&lt;p>这几种流都是 fs 的一部分。&lt;/p>
&lt;h2 id="路由">路由&lt;/h2>
&lt;p>在 BS 架构中，路由的概念都是一样的，可以理解为根据客户端请求的 url 映射到不同的方法实现。一般 web 框架中都会有相应的路由模块。但是在原生 node 中去处理的话只能是解析 url 来进行映射，实现起来不够简洁。&lt;/p>
&lt;h1 id="fetch">fetch&lt;/h1>
&lt;p>axios 是一种对 ajax 的封装，fetch 是一种浏览器原生实现的请求方式，跟 ajax 对等。&lt;/p>
&lt;p>在现在发起 http 请求里，都是通过 fetch 来发送请求，和 ajax 类似。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const fetch=require(&amp;#39;isomorphic-fetch&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const options={
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> header:{},
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body:JSON.strify({}),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> method: &amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">try{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> const res=await fetch(&amp;#39;url&amp;#39;, options);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}catch(err){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="async">Async&lt;/h1>
&lt;p>Node.js 是一个异步机制的服务端语言，在大量异步的场景下需要按顺序执行，那正常做法就是回调嵌套回调，回调嵌套太多的问题被称之回调地狱。&lt;/p>
&lt;p>Node.js 为解决这一问题推出了异步控制流 ———— Async&lt;/p>
&lt;p>Async/Await&lt;/p>
&lt;p>Async/Await 就 ES7 的方案，结合 ES6 的 Promise 对象，使用前请确定 Node.js 的版本是 7.6 以上。&lt;/p>
&lt;p>Async/await 的主要益处是可以避免回调地狱（callback hell），且以最接近同步代码的方式编写异步代码。&lt;/p>
&lt;p>基本规则&lt;/p>
&lt;ul>
&lt;li>async 表示这是一个 async 函数，await 只能用在这个函数里面。&lt;/li>
&lt;li>await 表示在这里等待 promise 返回结果了，再继续执行。&lt;/li>
&lt;li>await 后面跟着的应该是一个 promise 对象&lt;/li>
&lt;/ul>
&lt;h1 id="express-框架">express 框架&lt;/h1>
&lt;p>使用 node，都绕不开 express。&lt;/p>
&lt;h2 id="简单使用">简单使用&lt;/h2>
&lt;p>express 的使用比较简单，由于我最早接触的是 spring 那套 web 框架，所以在使用到 express 的时候觉得 node 的 web 特别轻量简单。&lt;/p>
&lt;p>加载模块&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const express=require(&amp;#39;express&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const app=express();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>监听端口 8080&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.listen(3000, ()=&amp;gt;consloe.log(&amp;#39;running&amp;#39;));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="路由-1">路由&lt;/h2>
&lt;p>express 对路由的处理特别简单，配合中间件 body parser，很方便的提供 rest 接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/&amp;#39;, (req, res)=&amp;gt;{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;hello world&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>response.send()&lt;/code> 可理解为 &lt;code>response.end()&lt;/code>，其中一个不同点在于 &lt;code>response.send()&lt;/code> 参数可为对象。&lt;/p>
&lt;p>Node.js 默认是不能访问静态资源文件（&lt;em>.html、&lt;/em>.js、&lt;em>.css、&lt;/em>.jpg 等），如果要访问服务端的静态资源文件则要用到方法 &lt;code>sendFile&lt;/code>&lt;/p>
&lt;p>__dirname 为 Node.js 的系统变量，指向文件的绝对路径。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/index.html&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.sendFile( __dirname + &amp;#34;/&amp;#34; + &amp;#34;index.html&amp;#34; );
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Express &amp;ndash; GET 参数接收之路径方式&lt;/p>
&lt;p>访问地址：&lt;code>http://localhost:8080/getusers/admin/18&lt;/code>，可通过 &lt;code>request.params&lt;/code> 来获取参数&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/getUsers/:username/:age&amp;#39;, function(request, response){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var params = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: request.params.username,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> age: request.params.age
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send(params);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Express &amp;ndash; POST&lt;/p>
&lt;ul>
&lt;li>post 参数接收，可依赖第三方模块 body-parser 进行转换会更方便、更简单，该模块用于处理 JSON, Raw, Text 和 URL 编码的数据。&lt;/li>
&lt;li>安装 body-parser &lt;code>npm install body-parser&lt;/code>&lt;/li>
&lt;li>参数接受和 GET 基本一样，不同的在于 GET 是 &lt;code>request.query&lt;/code> 而 POST 的是 &lt;code>request.body&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var bodyParser = require(&amp;#39;body-parser&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 创建 application/x-www-form-urlencoded 编码解析
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var urlencodedParser = bodyParser.urlencoded({ extended: false })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.post(&amp;#39;/getUsers&amp;#39;, urlencodedParser, function (request, response) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var params = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: request.body.username,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> age: request.body.age
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send(params);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Express &amp;ndash; 跨域支持(放在最前面)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.all(&amp;#39;*&amp;#39;, function(req, res, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Methods&amp;#34;,&amp;#34;PUT,POST,GET,DELETE,OPTIONS&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;X-Powered-By&amp;#34;,&amp;#39; 3.2.1&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(req.method==&amp;#34;OPTIONS&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(200);/*让options请求快速返回*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="中间件">中间件&lt;/h2>
&lt;p>express 的中间件编写——过滤器&lt;/p>
&lt;p>简单使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const express = require(&amp;#39;express&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const app = express();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">let filter = (req, res, next) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(req.params.name == &amp;#39;admin&amp;#39; &amp;amp;&amp;amp; req.params.pwd == &amp;#39;admin&amp;#39;){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next(&amp;#39;用户名密码不正确&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/:name/:pwd&amp;#39;, filter, (req, res) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;ok&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}).listen(88)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里写了一个 filter 方法，有一个 next 参数。在路由的时候，把 filter 作为一个参数，则就可以先执行 filter 函数，然后执行路由的逻辑。&lt;/p>
&lt;p>如果想要全局使用的话，就直接使用 use 方法即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.use(filter);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="文件上传">文件上传&lt;/h2>
&lt;p>前面说到的 body-parser 不支持文件上传，那么使用 multer 则可以实现。&lt;/p>
&lt;h1 id="操作数据库">操作数据库&lt;/h1>
&lt;p>node 一般会使用 mongo 和 mysql，使用下面这个例子即可：&lt;/p>
&lt;h2 id="操作-mongodb">操作 MongoDB&lt;/h2>
&lt;p>官方 api &lt;code>http://mongodb.github.io/node-mongodb-native/&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var mongodb = require(&amp;#39;mongodb&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var MongoClient = mongodb.MongoClient;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var db;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MongoClient.connect(&amp;#34;mongodb://localhost:27017/test1705candel&amp;#34;, function(err, database) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(err) throw err;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> db = database;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> insert: function(_collection, _data, _callback){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var i = db.collection(_collection).insert(_data).then(function(result){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _callback(result);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> },
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select: function(_collection, _condition, _callback){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var i = db.collection(_collection).find(_condition || {}).toArray(function(error, dataset){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> _callback({status: true, data: dataset});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="操作-mysql">操作 MySql&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var mysql = require(&amp;#39;mysql&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">//创建连接池
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var pool = mysql.createPool({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> host : &amp;#39;localhost&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> user : &amp;#39;root&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password : &amp;#39;root&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 3306,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> database: &amp;#39;1000phone&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> multipleStatements: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> select: function(tsql, callback){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pool.query(tsql, function(error, rows){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(rows.length &amp;gt; 1){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callback({rowsCount: rows[1][0][&amp;#39;rowsCount&amp;#39;], data: rows[0]});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> callback(rows);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="session">session&lt;/h1>
&lt;p>Session 是一种记录客户状态的机制，不同的是 Cookie 保存在客户端浏览器中，而 Session 保存在服务器上的进程中。&lt;/p>
&lt;p>客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上，这就是 Session。客户端浏览器再次访问时只需要从该 Session 中查找该客户的状态就可以了。&lt;/p>
&lt;p>如果说 Cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 Session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。&lt;/p>
&lt;p>Session 相当于程序在服务器上建立的一份客户档案，客户来访的时候只需要查询客户档案表就可以了。&lt;/p>
&lt;p>Session 不能跨域。&lt;/p>
&lt;p>node 操作 session 和 cookie 也很简单，也是通过中间件的形式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const express = require(&amp;#39;express&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const path = require(&amp;#39;path&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const app = express();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const bodyParser = require(&amp;#39;body-parser&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const cp = require(&amp;#39;cookie-parser&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const session = require(&amp;#39;express-session&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(cp());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(session({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> secret: &amp;#39;12345&amp;#39;,//用来对session数据进行加密的字符串.这个属性值为必须指定的属性
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> name: &amp;#39;testapp&amp;#39;, //这里的name值得是cookie的name，默认cookie的name是：connect.sid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cookie: {maxAge: 5000 }, //设置maxAge是5000ms，即5s后session和相应的cookie失效过期
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> resave: false,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> saveUninitialized: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(bodyParser.urlencoded({extended: false}));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(express.static(path.join(__dirname, &amp;#39;/&amp;#39;)));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/setsession&amp;#39;, (request, response) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> request.session.user = {username: &amp;#39;admin&amp;#39;};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send(&amp;#39;set session success&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/getsession&amp;#39;, (request, response) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send(request.session.user);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/delsession&amp;#39;, (request, response) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> delete reqeust.session.user;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send(request.session.user);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.listen(88)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="token">Token&lt;/h1>
&lt;p>Token 的特点&lt;/p>
&lt;ul>
&lt;li>随机性&lt;/li>
&lt;li>不可预测性&lt;/li>
&lt;li>时效性&lt;/li>
&lt;li>无状态、可扩展&lt;/li>
&lt;li>跨域&lt;/li>
&lt;/ul>
&lt;p>基于 Token 的身份验证场景&lt;/p>
&lt;ol>
&lt;li>客户端使用用户名和密码请求登录&lt;/li>
&lt;li>服务端收到请求，验证登录是否成功&lt;/li>
&lt;li>验证成功后，服务端会返回一个 Token 给客户端，反之，返回身份验证失败的信息&lt;/li>
&lt;li>客户端收到 Token 后把 Token 用一种方式(cookie/localstorage/sessionstorage/其他)存储起来&lt;/li>
&lt;li>客户端每次发起请求时都选哦将 Token 发给服务端&lt;/li>
&lt;li>服务端收到请求后，验证 Token 的合法性，合法就返回客户端所需数据，反之，返回验证失败的信息&lt;/li>
&lt;/ol>
&lt;p>Token 身份验证实现 —— jsonwebtoken&lt;/p>
&lt;p>先安装第三方模块 jsonwebtoken &lt;code>npm install jsonwebtoken&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const express = require(&amp;#39;express&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const path = require(&amp;#39;path&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const app = express();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const bodyParser = require(&amp;#39;body-parser&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const jwt = require(&amp;#39;jsonwebtoken&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(bodyParser.urlencoded({extended: false}));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(express.static(path.join(__dirname, &amp;#39;/&amp;#39;)));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.all(&amp;#39;*&amp;#39;, function(req, res, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Headers&amp;#34;, &amp;#34;Content-Type,Content-Length, Auth, Accept,X-Requested-With&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;Access-Control-Allow-Methods&amp;#34;,&amp;#34;PUT,POST,GET,DELETE,OPTIONS&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.header(&amp;#34;X-Powered-By&amp;#34;,&amp;#39; 3.2.1&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(req.method==&amp;#34;OPTIONS&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.sendStatus(200);/*让options请求快速返回*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/createtoken&amp;#39;, (request, response) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //要生成 token 的主题信息
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> let user = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username: &amp;#39;admin&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //这是加密的 key（密钥）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> let secret = &amp;#39;dktoken&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //生成 Token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> let token = jwt.sign(user, secret, {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;expiresIn&amp;#39;: 60*60*24 // 设置过期时间, 24 小时
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send({status: true, token});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.post(&amp;#39;/verifytoken&amp;#39;, (request, response) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //这是加密的 key（密钥），和生成 token 时的必须一样
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> let secret = &amp;#39;dktoken&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> let token = request.headers[&amp;#39;auth&amp;#39;];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(!token){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send({status: false, message: &amp;#39;token不能为空&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jwt.verify(token, secret, (error, result) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if(error){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send({status: false});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> response.send({status: true, data: result});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.listen(88)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="web-socket">web socket&lt;/h1>
&lt;p>HTTP 协议可以总结几个特点：&lt;/p>
&lt;ul>
&lt;li>一次性的、无状态的短连接：客户端发起请求、服务端响应、结束。&lt;/li>
&lt;li>被动性响应：只有当客户端请求时才被执行，给予响应，不能主动向客户端发起响应。&lt;/li>
&lt;li>信息安全性：得在服务器添加 SSL 证书，访问时用 HTTPS。&lt;/li>
&lt;li>跨域：服务器默认不支持跨域，可在服务端设置支持跨域的代码或对应的配置。&lt;/li>
&lt;/ul>
&lt;p>TCP 协议可以总结几个特点：&lt;/p>
&lt;ul>
&lt;li>有状态的长连接：客户端发起连接请求，服务端响应并建立连接，连接会一直保持直到一方主动断开。&lt;/li>
&lt;li>主动性：建立起与客户端的连接后，服务端可主动向客户端发起调用。&lt;/li>
&lt;li>信息安全性：同样可以使用 SSL 证书进行信息加密，访问时用 WSS 。&lt;/li>
&lt;li>跨域：默认支持跨域。&lt;/li>
&lt;/ul>
&lt;p>安装第三方模块 ws：&lt;code>npm install ws&lt;/code>&lt;/p>
&lt;p>开启一个 WebSocket 的服务器，端口为 8080&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var socketServer = require(&amp;#39;ws&amp;#39;).Server;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var wss = new socketServer({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> port: 8080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以利用 Express 来开启 WebSocket 的服务器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var app = require(&amp;#39;express&amp;#39;)();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var server = require(&amp;#39;http&amp;#39;).Server(app);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var socketServer = require(&amp;#39;ws&amp;#39;).Server;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var wss = new socketServer({server: server, port: 8080});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用 on 来进行事件监听&lt;/li>
&lt;li>connection：连接监听，当客户端连接到服务端时触发该事件&lt;/li>
&lt;li>close：连接断开监听，当客户端断开与服务器的连接时触发&lt;/li>
&lt;li>message：消息接受监听，当客户端向服务端发送信息时触发该事件&lt;/li>
&lt;li>send: 向客户端推送信息&lt;/li>
&lt;/ul>
&lt;p>soket.io 可以理解为对 WebSocket 的一种封装。好比前端的 jQuery 对原生 javascript 的封装。
soket.io 依靠事件驱动的模式，灵活的使用了自定义事件和调用事件来完成更多的场景，不必依赖过多的原生事件。&lt;/p>
&lt;ul>
&lt;li>安装第三方模块 &lt;code>npm install express socket.io&lt;/code>&lt;/li>
&lt;li>开户 Socket 服务器，端口为 88&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var express = require(&amp;#39;express&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var app = express();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var http = require(&amp;#39;http&amp;#39;).Server(app);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var io = require(&amp;#39;socket.io&amp;#39;)(http);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">http.listen(88);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>用 on 来进行事件监听和定义事件&lt;/li>
&lt;li>connection：监听客户端连接,回调函数会传递本次连接的 socket&lt;/li>
&lt;li>emit：触发用客户端的事件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">io.on(&amp;#39;connection&amp;#39;, function(client){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //把当前登录的用户保存到对象 onlinePersons，并向所有在线的用户发起上线提示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //serverLogin 为自定义事件，供客户端调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client.on(&amp;#39;serverLogin&amp;#39;, function(_person){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var _personObj = JSON.parse(_person);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onlinePersons[_personObj.id] = _personObj;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //向所有在线的用户发起上线提示
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //触发客户端的 clientTips 事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //clientTips 为客户端的自定义事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> io.emit(&amp;#39;clientTips&amp;#39;, JSON.stringify(onlinePersons));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //当监听到客户端有用户在移动，就向所有在线用户发起移动信息，触发客户端 clientMove 事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //serverMove 为自定义事件，供客户端调用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client.on(&amp;#39;serverMove&amp;#39;, function(_person){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var _personObj = JSON.parse(_person);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onlinePersons[_personObj.id] = _personObj;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#39;serverLogin&amp;#39;, onlinePersons);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //clientTips 为客户端的自定义事件
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> io.emit(&amp;#39;clientMove&amp;#39;, _person);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="kafka-node">kafka-node&lt;/h1>
&lt;p>node 也可以去读写 kafka，而且很简单。只需要引入 kafka 的库即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn add kafka-node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>具体 api 可以看文档：&lt;a class="link" href="https://github.com/SOHU-Co/kafka-node" target="_blank" rel="noopener"
>https://github.com/SOHU-Co/kafka-node&lt;/a>&lt;/p>
&lt;p>生产者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var kafka = require(&amp;#39;..&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var Producer = kafka.Producer;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var KeyedMessage = kafka.KeyedMessage;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var Client = kafka.Client;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var client = new Client(&amp;#39;localhost:2181&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var argv = require(&amp;#39;optimist&amp;#39;).argv;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var topic = argv.topic || &amp;#39;topic1&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var p = argv.p || 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var a = argv.a || 0;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var producer = new Producer(client, { requireAcks: 1 });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">producer.on(&amp;#39;ready&amp;#39;, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var message = &amp;#39;a message&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var keyedMessage = new KeyedMessage(&amp;#39;keyed&amp;#39;, &amp;#39;a keyed message&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> producer.send([
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> { topic: topic, partition: p, messages: [message, keyedMessage], attributes: a }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ], function (err, result) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(err || result);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> process.exit();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">producer.on(&amp;#39;error&amp;#39;, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#39;error&amp;#39;, err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>消费者&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;#39;use strict&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var kafka = require(&amp;#39;..&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var Consumer = kafka.Consumer;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var Offset = kafka.Offset;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var Client = kafka.Client;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var argv = require(&amp;#39;optimist&amp;#39;).argv;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var topic = argv.topic || &amp;#39;topic1&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var client = new Client(&amp;#39;localhost:2181&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var topics = [{ topic: topic, partition: 1 }, { topic: topic, partition: 0 }];
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var options = { autoCommit: false, fetchMaxWaitMs: 1000, fetchMaxBytes: 1024 * 1024 };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var consumer = new Consumer(client, topics, options);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var offset = new Offset(client);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">consumer.on(&amp;#39;message&amp;#39;, function (message) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(message);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">consumer.on(&amp;#39;error&amp;#39;, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#39;error&amp;#39;, err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* If consumer get `offsetOutOfRange` event, fetch data from the smallest(oldest) offset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">consumer.on(&amp;#39;offsetOutOfRange&amp;#39;, function (topic) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> topic.maxNum = 2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> offset.fetch([topic], function (err, offsets) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return console.error(err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var min = Math.min.apply(null, offsets[topic.topic][topic.partition]);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> consumer.setOffset(topic.topic, topic.partition, min);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="node-单元测试">Node 单元测试&lt;/h1>
&lt;p>以 function 为最小单位，验证特定情况下的 input 和 output 是否正确。&lt;/p>
&lt;ul>
&lt;li>防止改 A 坏 B，避免不能跑的代码比能跑的还多。&lt;/li>
&lt;li>明确指出问题所在、告知正确的行为是什么，减少 debug 的时间。&lt;/li>
&lt;/ul>
&lt;p>对于 node 来说，单元测试也很容易做。&lt;/p>
&lt;p>测试主要分为两种，TDD 和 BDD。&lt;/p>
&lt;h2 id="tdd-vs-bdd">TDD VS. BDD&lt;/h2>
&lt;p>比较 TDD 与 BDD 的差异。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>TDD&lt;/th>
&lt;th>BDD&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>全名&lt;/td>
&lt;td>测试驱动开发 Test-Driven Development&lt;/td>
&lt;td>行为驱动开发 Behavior Driven Development&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>定义&lt;/td>
&lt;td>在开发前先撰写测试程式，以确保程式码品质与符合验收规格。&lt;/td>
&lt;td>TDD 的进化版。除了实作前先写测试外，还要写一份「可以执行的规格」。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>特性&lt;/td>
&lt;td>从测试去思考程式如何实作。强调小步前进、快速且持续回馈、拥抱变化、重视沟通、满足需求。&lt;/td>
&lt;td>从用户的需求出发，强调系统行为。使用自然语言描述测试案例，以减少使用者和工程师的沟通成本。测试后的输出结果可以直接做为文件阅读。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>从代码层面来看：&lt;/p>
&lt;p>TDD&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">suite(&amp;#39;Array&amp;#39;, ()=&amp;gt;{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setup(()={
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> test(&amp;#39;equal -1 when index beyond array length&amp;#39;, ()=&amp;gt;{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> assert.equal(-1, [1,2,3].indexOf(4));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>BDD&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">describe(&amp;#39;Array&amp;#39;, function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> before(function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> it(&amp;#39;should return -1 when no such index&amp;#39;, function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [1,2,3].indexOf(4).should.equal(-1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对比了这两种类型的语法之后，我选择了 BDD。&lt;/p>
&lt;h2 id="测试框架实践">测试框架实践&lt;/h2>
&lt;p>在 node 社区，比较成熟的是 mocha。mocha 本身是不提供断言库的，一般来说断言库比较常用的是 chai。mocha 和 chai，合起来就被戏称为抹茶。&lt;/p>
&lt;p>mocha 一般需要全局安装，chai 安装到项目目录下即可。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn global add mocha
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yarn add chai
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mocha">mocha&lt;/h3>
&lt;h4 id="语法说明">语法说明&lt;/h4>
&lt;ul>
&lt;li>&lt;code>describe()&lt;/code>：描述场景或圈出特定区块，例如：标明测试的功能或 function。&lt;/li>
&lt;li>&lt;code>it()&lt;/code>：撰写测试案例（Test Case）。&lt;/li>
&lt;li>&lt;code>before()&lt;/code>：在所有测试开始前会执行的代码。&lt;/li>
&lt;li>&lt;code>after()&lt;/code>：在所有测试结束后会执行的代码。&lt;/li>
&lt;li>&lt;code>beforeEach()&lt;/code>：在每个 Test Case 开始前执行的代码。&lt;/li>
&lt;li>&lt;code>afterEach()&lt;/code>：在每个 Test Case 结束后执行的代码。&lt;/li>
&lt;/ul>
&lt;h4 id="代码示例">代码示例&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">describe(&amp;#39;hooks&amp;#39;, function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> before(function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> after(function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> beforeEach(function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> afterEach(function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> it(&amp;#39;should ...&amp;#39;, function() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="chai">chai&lt;/h3>
&lt;h4 id="assert">assert&lt;/h4>
&lt;p>assert(expression, message)：测试这个项目的 expression 是否为真，若为假则显示错误消息 message。&lt;/p>
&lt;h4 id="expect--should">Expect / Should&lt;/h4>
&lt;p>预期 3 等于（===）2。这是使用可串连的操作符 来完成断言。这些可串联的有 to、is、have 等。它很像英文，用很口语的方式做判断。&lt;/p>
&lt;h2 id="覆盖率">覆盖率&lt;/h2>
&lt;p>既然是给功能代码写单元测试，那就应该有个指标去衡量单元测试覆盖了哪些功能代码，这就是接下来要介绍的测试覆盖率。&lt;/p>
&lt;p>在 Node.js 中，我们使用 istanbul 作为覆盖率统计的工具，istanbul 可以帮助我们统计到代码的语句覆盖率、分支覆盖率、函数覆盖率以及行覆盖率。&lt;/p>
&lt;p>全局安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn global add istanbul
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>只需要使用 istanbul cover 就可以得到覆盖率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">istanbul cover simple.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以和 mocha 配合使用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">isbuntal cover _mocha test/simple-test.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>mocha 和 _mocha 是两个不同的命令，前者会新建一个进程执行测试，而后者是在当前进程（即 istanbul 所在的进程）执行测试，只有这样， istanbul 才会捕捉到覆盖率数据。其他测试框架也是如此，必须在同一个进程执行测试。&lt;/p>
&lt;h1 id="引入-typescript">引入 typescript&lt;/h1>
&lt;p>typescript 其实就是加了类型的 js。&lt;/p>
&lt;p>所谓类型，就是约定变量的内存布局。js 作为一个动态弱类型的语言，在开发大型项目的时候，不免可能出现问题，所以有类型的语言可以在编译期就能检测到错误，减少 debug 的时间。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn global add typescript
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="新项目引入-ts">新项目引入 ts&lt;/h2>
&lt;p>现在新建文件&lt;code>server.ts&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;http&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello, world&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;server is listening&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了能执行此文件，需要通过 &lt;strong>tsc&lt;/strong> 命令来编译该 TypeScript 源码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tsc server.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果没有什么意外的话，此时控制台会打印出以下的出错信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">server.ts(1,23): error TS2307: Cannot find module &amp;#39;http&amp;#39;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这表示没有找到&lt;code>http&lt;/code>这个模块定义（TyprScript 编译时是通过查找模块的 typings 声明文件来判断模块是否存在的，而不是根据真实的 js 文件，下文会详细解释），但是我们当前目录下还是生成了一个新的文件&lt;code>server.js&lt;/code>，我们可以试着执行它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">node server.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果一切顺利，那么控制台将会打印出 &lt;strong>server is listening&lt;/strong> 这样的信息，并且我们在浏览器中访问 &lt;a class="link" href="http://127.0.0.1:3000/" target="_blank" rel="noopener"
>http://127.0.0.1:3000&lt;/a>时也能看到正确的结果：&lt;strong>Hello, world&lt;/strong>&lt;/p>
&lt;p>现在再回过头来看看刚才的编译错误信息。由于这是一个 Node.js 项目，typescript 语言中并没有定义&lt;code>http&lt;/code>这个模块，所以我们需要安装 Node.js 运行环境的声明文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn global add @types/node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装完毕之后，再重复上文的编译过程，此时 &lt;strong>tsc&lt;/strong> 不再报错了。&lt;/p>
&lt;p>大多数时候，为了方便我们可以直接使用 &lt;strong>ts-node&lt;/strong> 命令执行 TypeScript 源文件而不需要预先编译。首先执行以下命令安装 &lt;strong>ts-node&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn global add -g ts-node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用 &lt;strong>ts-node&lt;/strong> 命令执行即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">ts-node --no-cache server.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>说明：使用 &lt;strong>ts-node&lt;/strong> 执行 TypeScript 程序时，为了提高编译速度，默认会缓存未修改过的 &lt;strong>.ts&lt;/strong> 文件，但有时候会导致一些 Bug，所以建议启动时加上 &lt;code>--no-cache&lt;/code> 参数。&lt;/p>
&lt;h3 id="tsconfigjson-配置文件">tsconfig.json 配置文件&lt;/h3>
&lt;p>每个 TypeScript 项目都需要一个 &lt;strong>tsconfig.json&lt;/strong> 文件来指定相关的配置，比如告诉 TypeScript 编译器要将代码转换成 ES5 还是 ES6 代码等。&lt;/p>
&lt;p>可以使用 tsc 命令生成。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">tsc --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="使用第三方模块">使用第三方模块&lt;/h3>
&lt;p>一般情况下在 TypeScript 中是不能”&lt;em>直接&lt;/em>“使用 npm 上的模块的，比如我们要使用 express 模块，先执行以下命令安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn add express
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后新建文件 &lt;code>server.ts&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kr">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hello, world&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;server is listening&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用以下命令执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">ts-node server.ts
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果不出意外，我们将会看到这样的报错信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">src/server.ts(1,26): error TS7016: Could not find a declaration file for module &amp;#39;express&amp;#39;.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>报错的信息表明没有找到&lt;code>express&lt;/code>模块的声明文件。由于 TypeScript 项目最终会编译成 JavaScript 代码执行，当我们在 TypeScript 源码中引入这些被编译成 JavaScript 的模块时，它需要相应的声明文件（&lt;strong>.d.ts&lt;/strong>文件）来知道该模块类型信息，这些声明文件可以通过设置&lt;code>tsconfig.json&lt;/code>中的&lt;code>declaration: true&lt;/code>来自动生成。而那些不是使用 TypeScript 编写的模块，也可以通过手动编写声明文件来兼容 TypeScript。&lt;/p>
&lt;p>当遇到缺少模块声明文件的情况，开发者可以尝试通过 yarn addl @types/xxx 来安装模块声明文件即可。&lt;/p>
&lt;p>现在我们尝试执行以下命令安装 &lt;strong>express&lt;/strong> 模块的声明文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn add @types/express
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>没有意外，果然能成功安装。现在再通过 &lt;strong>ts-node&lt;/strong> 来执行的时候，发现已经没有报错了。&lt;/p>
&lt;h3 id="单元测试">单元测试&lt;/h3>
&lt;p>直接使用 mocha 和 chai，进行 ts 的测试。&lt;/p>
&lt;h2 id="旧项目迁移">旧项目迁移&lt;/h2>
&lt;p>通常来说这个过程包括了以下步骤：&lt;/p>
&lt;ul>
&lt;li>添加 &lt;code>tsconfig.json&lt;/code>&lt;/li>
&lt;li>将你的源代码文件扩展名从 &lt;code>.js&lt;/code> 改成 &lt;code>.ts&lt;/code>。使用 &lt;code>any&lt;/code> 来开始&lt;em>抑止&lt;/em>错误。&lt;/li>
&lt;li>使用 TypeScript 来编写新的代码并且尽可能少地使用 &lt;code>any&lt;/code>。&lt;/li>
&lt;li>返回到旧代码里并且开始加入类型标注和解决发现的 bugs。&lt;/li>
&lt;li>为第三方 JavaScript 代码使用环境定义。&lt;/li>
&lt;/ul></description></item><item><title>node 的 redis 实战</title><link>https://example.com/p/node-%E7%9A%84-redis-%E5%AE%9E%E6%88%98/</link><pubDate>Fri, 13 Apr 2018 10:00:12 +0000</pubDate><guid>https://example.com/p/node-%E7%9A%84-redis-%E5%AE%9E%E6%88%98/</guid><description>&lt;h1 id="nodejs-redis-客户端模块">Node.js Redis 客户端模块&lt;/h1>
&lt;p>为了追新，这里我使用的 yarn，毕竟我是 HDD（面向热点编程）编程实践者。&lt;/p>
&lt;p>模块安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">yarn add redis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>模块使用实例&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const redis = require(&amp;#39;redis&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const client = redis.createClient(&amp;#39;6379&amp;#39;, &amp;#39;127.0.0.1&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.on(&amp;#34;error&amp;#34;, function (err) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34;Error &amp;#34; + err);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.set(&amp;#34;string key&amp;#34;, &amp;#34;string val&amp;#34;, redis.print);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.hset(&amp;#34;hash key&amp;#34;, &amp;#34;hashtest 1&amp;#34;, &amp;#34;some value&amp;#34;, redis.print);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.hset([&amp;#34;hash key&amp;#34;, &amp;#34;hashtest 2&amp;#34;, &amp;#34;some other value&amp;#34;], redis.print);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">client.hkeys(&amp;#34;hash key&amp;#34;, function (err, replies) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(replies.length + &amp;#34; replies:&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> replies.forEach(function (reply, i) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#34; &amp;#34; + i + &amp;#34;: &amp;#34; + reply);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> client.quit();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出的结果如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">➜ node-example git:(master) ✗ node redis-demo.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reply: OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reply: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Reply: 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2 replies:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 0: hashtest 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1: hashtest 2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Promises&lt;/p>
&lt;p>如果是使用 node 8 或者之上的话，使用 node 的 util.promisify 来将请求变成 promise 的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">const {promisify}=require(&amp;#39;util&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const redis = require(&amp;#39;redis&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const client = redis.createClient(&amp;#39;6379&amp;#39;, &amp;#39;127.0.0.1&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const getAsync=promisify(client.get).bind(client)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function getFoo(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return getAsync(&amp;#39;foo&amp;#39;).then(res =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(res)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">getFoo()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发送命令&lt;/p>
&lt;p>每个 redis 命令都会通过 client 对象的一个函数暴露，所有这些函数都会有一个 args 数组选项和一个 callback 回调函数。&lt;/p>
&lt;p>字符串操作&lt;/p>
&lt;p>set key value&lt;/p>
&lt;p>get key&lt;/p>
&lt;p>哈希操作&lt;/p>
&lt;p>hmset key field1 value1&lt;/p>
&lt;p>hget key field1 value1&lt;/p>
&lt;p>列表操作&lt;/p>
&lt;p>lpush key value1 value2&lt;/p>
&lt;p>lrange key 0 n&lt;/p>
&lt;p>集合操作&lt;/p>
&lt;p>sadd key member1 member2&lt;/p>
&lt;p>smembers key&lt;/p>
&lt;p>有序集合操作&lt;/p>
&lt;p>zadd key index value&lt;/p>
&lt;p>zrange key 0 n&lt;/p></description></item><item><title>谈谈 web 框架</title><link>https://example.com/p/%E8%B0%88%E8%B0%88-web-%E6%A1%86%E6%9E%B6/</link><pubDate>Sun, 08 Apr 2018 16:01:48 +0000</pubDate><guid>https://example.com/p/%E8%B0%88%E8%B0%88-web-%E6%A1%86%E6%9E%B6/</guid><description>&lt;p>这篇文章打的标签比较多，也基本涵盖了我所了解的一些知识，归纳总结一下自己对 web 框架的理解。自己了解的也不是很多，也请多多指教。&lt;/p>
&lt;p>写程序免不了要做 web 相关的，现在由于前后端的分离，后端一般只提供 rest 接口，前端一般使用 node 来做渲染。在之前使用 jsp 那一套的时候，基本上都要写 html+js 的前端的一套，也要写后端 java 的 CRUD。&lt;/p>
&lt;p>我理解的 web 框架中，大致是分为这么两类：&lt;/p>
&lt;ul>
&lt;li>router 框架&lt;/li>
&lt;li>mvc 框架&lt;/li>
&lt;/ul>
&lt;h2 id="mvc-类框架">mvc 类框架&lt;/h2>
&lt;p>mvc，初级程序员面试笔试的时候必考的一个知识点。model-view-controller，即模型-视图-控制器。&lt;/p>
&lt;ul>
&lt;li>m，模型主要用于封装与应用程序相关的数据以及对数据的处理方法。&lt;/li>
&lt;li>v，在 View 中一般没有程序上的逻辑。为了实现 View 上的刷新功能，View 需要访问它监视的数据模型（Model），因此应该事先在被它监视的数据那里注册。&lt;/li>
&lt;li>c，用于控制应用程序的流程。&lt;/li>
&lt;/ul>
&lt;p>我了解比较多的 mvc 框架是 spring mvc。spring、spring mvc 和 spring boot 等，他们并不是一个概念，也不是仅仅用于 web 开发。但是在这里我就不分那么细，统一用 spring 来代替。这里所说的 spring 都是指狭义上的 web 开发方面。&lt;/p>
&lt;p>在做 web 开发的时候，项目目录一般是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> $ tree [16:23:43]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── mvnw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── mvnw.cmd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── pom.xml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   ├── java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   └── com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   └── example
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   └── demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   │   └── DemoApplication.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   └── resources
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   ├── application.properties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   ├── static
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │   └── templates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── example
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── demo
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── DemoApplicationTests.java
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">14 directories, 6 files
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要渲染页面的时候，会把相关的类写在 controller 包下面，然后使用@Controlle 注解表示这是一个 controller。&lt;/p>
&lt;p>如果是实体类，一般会放在 entity 包或者 domain 包中。&lt;/p>
&lt;p>对数据库进行操作的类，一般会放在 repository 或者 dao 中。&lt;/p>
&lt;p>controller 一般不直接使用 dao，而是会单独写一个 service 负责去做一些其他的事情。&lt;/p>
&lt;p>每个包分工明确。&lt;/p>
&lt;p>而 url 的路由拦截处理是在 controller 了中去实现的。&lt;/p>
&lt;h2 id="router-框架">router 框架&lt;/h2>
&lt;p>我理解的 router 框架主要是以 express 为代表的框架。现在的轻量级的 web 框架会有路由这么一个重要的概念。&lt;/p>
&lt;p>&lt;em>路由&lt;/em>用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。&lt;/p>
&lt;p>每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。&lt;/p>
&lt;p>路由一般采用如下的结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">router.METHOD(PATH, HANDLER)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>router 是路由实例。&lt;/li>
&lt;li>METHOD 是 http 的请求方法，如 GET，POST 等。&lt;/li>
&lt;li>PATH 是 URL 请求路径。&lt;/li>
&lt;li>HANDLER 是一个回调函数，在路由匹配成功时执行的。&lt;/li>
&lt;/ul>
&lt;p>可以发现，在 router 类框架中，handler 是一个很常用的，这是一种编程的模式——行为参数化。&lt;/p>
&lt;p>java 的 vertx 和 go 的 gin 框架也是这样一种思路。&lt;/p>
&lt;p>下面这个示例是 gin 的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;github.com/gin-gonic/gin&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;net/http&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> router:=gin.Default()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> router.GET(&amp;#34;/hello&amp;#34;, greeting)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 也可以写成匿名函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> router.GET(&amp;#34;/&amp;#34;, func(context *gin.Context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context.String(http.StatusOK, &amp;#34;I am Lucas&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> router.Run()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// 可以单独写一个handler函数
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func greeting(context *gin.Context) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> context.String(http.StatusOK, &amp;#34;hello world&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到 router 类的框架特别轻量级，而且很适合写 rest api 接口。&lt;/p>
&lt;h3 id="router-的原理">router 的原理&lt;/h3>
&lt;p>一般情况下，router 使用的数据结构是 radix tree，压缩字典树。&lt;/p>
&lt;p>字典树是一个比较常用的数据结构，下图是一个典型的字典树结构：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/b831e4c7gy1fq5cnri5emj212o0vagm1.jpg"
loading="lazy"
>&lt;/p>
&lt;p>字典树一般用来进行字符串的检索。对于目标字符串，只要从根节点开始深度优先搜索，即可判断出该字符串是否曾经出现过，时间复杂度为 O(n)，n 可以认为是目标字符串的长度。为什么要这样做？字符串本身不像数值类型可以进行数值比较，两个字符串对比的时间复杂度取决于字符串长度。如果不用字典树来完成上述功能，要对历史字符串进行排序，再利用二分查找之类的算法去搜索，时间复杂度只高不低。可认为字典树是一种空间换时间的典型做法。&lt;/p>
&lt;p>普通的字典树有一个比较明显的缺点，就是每个字母都需要建立一个孩子节点，这样会导致字典树的层树比较深，压缩字典树相对好地平衡了字典树的优点和缺点。下图是典型的压缩字典树结构：&lt;/p>
&lt;p>&lt;img src="http://ww1.sinaimg.cn/large/b831e4c7gy1fq5cpko9n2j212o0vaq3g.jpg"
loading="lazy"
>&lt;/p>
&lt;p>每个节点上不只存储一个字母了，这也是压缩字典树中“压缩”的主要含义。使用压缩字典树可以减少树的层数，同时因为每个节点上数据存储也比通常的字典树要多，所以程序的局部性较好(一个节点的 path 加载到 cache 即可进行多个字符的对比)，从而对 CPU 缓存友好。&lt;/p>
&lt;h2 id="中间件">中间件&lt;/h2>
&lt;p>对于大多数的场景来讲，非业务的需求都是在 http 请求处理前做一些事情，或者/并且在响应完成之后做一些事情。我们有没有办法使用一些重构思路把这些公共的非业务功能代码剥离出去呢？&lt;/p>
&lt;p>这个时候就是就引入了中间件的概念。&lt;/p>
&lt;p>&lt;em>中间件&lt;/em>函数能够访问&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#req" target="_blank" rel="noopener"
>请求对象&lt;/a> (&lt;code>req&lt;/code>)、&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res" target="_blank" rel="noopener"
>响应对象&lt;/a> (&lt;code>res&lt;/code>) 以及应用程序的请求/响应循环中的下一个中间件函数。&lt;/p>
&lt;p>中间件函数可以执行以下任务：&lt;/p>
&lt;ul>
&lt;li>执行任何代码。&lt;/li>
&lt;li>对请求和响应对象进行更改。&lt;/li>
&lt;li>结束请求/响应循环。&lt;/li>
&lt;li>调用堆栈中的下一个中间件。&lt;/li>
&lt;/ul>
&lt;p>这些中间件其实就是一些可插拔的函数组件，对请求和响应的对象进行封装处理。&lt;/p>
&lt;h3 id="哪些事情适合在中间件中做">哪些事情适合在中间件中做&lt;/h3>
&lt;p>以较流行的开源 go 框架 chi 为例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">compress.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 对 http 的 response body 进行压缩处理
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">heartbeat.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 设置一个特殊的路由，例如 /ping，/healthcheck，用来给 load balancer 一类的前置服务进行探活
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">logger.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 打印 request 处理日志，例如请求处理时间，请求路由
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">profiler.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 挂载 pprof 需要的路由，如 /pprof、/pprof/trace 到系统中
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">realip.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 从请求头中读取 X-Forwarded-For 和 X-Real-IP，将 http.Request 中的 RemoteAddr 修改为得到的 RealIP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">requestid.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 为本次请求生成单独的 requestid，可一路透传，用来生成分布式调用链路，也可用于在日志中串连单次请求的所有逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 用 context.Timeout 设置超时时间，并将其通过 http.Request 一路透传下去
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">throttler.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> =&amp;gt; 通过定长大小的 channel 存储 token，并通过这些 token 对接口进行限流
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以发现，一些通用的非业务场景的都可以用中间件来包裹。&lt;/p>
&lt;p>spring 有 AOP 这个大杀器，它采用动态代理的方式也可以实现中间件的行为。&lt;/p></description></item><item><title>技术栈</title><link>https://example.com/p/%E6%8A%80%E6%9C%AF%E6%A0%88/</link><pubDate>Thu, 05 Apr 2018 09:49:06 +0000</pubDate><guid>https://example.com/p/%E6%8A%80%E6%9C%AF%E6%A0%88/</guid><description>&lt;p>创业公司真的比较锻炼人，接触了很多的东西，视野开阔了，但是在某些时候自己疲于奔命，每个东西都是接触了一点点就被赶鸭子上架开始开发了。&lt;/p>
&lt;h1 id="技术栈">技术栈&lt;/h1>
&lt;ul>
&lt;li>Docker&lt;/li>
&lt;/ul>
&lt;p>docker 是一个容器，以前就看过 docker 相关的东西，但是没有仔细研究，docker 的命令会用一些，在工作中使用了，看了一本 docker 的书，能够编写 docker 的 compose 文件。&lt;/p>
&lt;ul>
&lt;li>rancher&lt;/li>
&lt;/ul>
&lt;p>rancher 是一个做容器管理的。我们把主机添加到 rancher 中，他就可以自动做到 LB，服务的发现编排。我们部署的时候只需要编写 catalog，他就可以自动发现 docker 应用，然后拉取镜像，部署到相关的机器上，很是方便。&lt;/p>
&lt;ul>
&lt;li>aws&lt;/li>
&lt;/ul>
&lt;p>近期主要是对 aws 的进行公司服务的部署，搭建一套 rancher 的环境。aws 的服务特别多，ec2 是实例主机，就和虚拟机一样，VPC 就像机房，ec2 依托于 VPC 而存在，在这基础上又了解了子网、DHCP 弹性 IP 等等。&lt;/p>
&lt;ul>
&lt;li>kotlin&lt;/li>
&lt;/ul>
&lt;p>之前自己用 kotlin 开发过一个博客，对 kotlin 的感觉是有些东西写的很爽，但是还是觉得 java 好用一些，对 kotlin 的态度是用不用都无所谓。&lt;/p>
&lt;ul>
&lt;li>guice&lt;/li>
&lt;/ul>
&lt;p>这个我之前都读错了，我读成了盖斯，其实是和果汁的英文发音很像，ju 斯。只是一个依赖注入框架，只是单纯的去做 DI，比 spring 更轻量级一些。&lt;/p>
&lt;p>需要我们编写 AppModule.java 去手动配置哪个类注入哪个类。&lt;/p>
&lt;ul>
&lt;li>rxjava&lt;/li>
&lt;/ul>
&lt;p>rxjava 我都没有找到一个系统的教程，不知道该从哪里学习。&lt;/p>
&lt;ul>
&lt;li>vertx&lt;/li>
&lt;/ul>
&lt;p>vertx+Reactive 编程的方式相当考验心智，自己脑子中的编程方式还没转过来。&lt;/p>
&lt;ul>
&lt;li>ES6&lt;/li>
&lt;/ul>
&lt;p>node 代码中都是用 es6 来写的，async 和 await 现在也会用了。&lt;/p>
&lt;ul>
&lt;li>express&lt;/li>
&lt;/ul>
&lt;p>想到自己大学的时候看过 node 的书，里面讲的就是 express，只是自己当时没想明白，现在看的回调多了，算是熟悉了他这种的编程模式，所以觉得 express 特别简单易上手。&lt;/p>
&lt;ul>
&lt;li>typescript&lt;/li>
&lt;/ul>
&lt;p>还没它去写东西，可能下周会用它来写个机器人。&lt;/p>
&lt;p>貌似自己已经完全抛弃了 spring+java 的那一套东西，没机会用到。&lt;/p>
&lt;h2 id="知识面扩展">知识面扩展&lt;/h2>
&lt;ul>
&lt;li>监控&lt;/li>
&lt;/ul>
&lt;p>grafana+Prometheus+graylog 去做可视化和日志的监控。&lt;/p>
&lt;p>对于业务的数据，需要在代码层面进行埋点，把要监控的数据传给普罗米修斯。&lt;/p>
&lt;ul>
&lt;li>FSM 状态机&lt;/li>
&lt;/ul>
&lt;p>机器人的框架使用的是 FSM 状态机来管理，以前做游戏的时候接触过。&lt;/p>
&lt;ul>
&lt;li>网关&lt;/li>
&lt;/ul>
&lt;p>网关现在已经是微服务架构中的标配了，用它来做一些限流，LB 和日志收集等等。&lt;/p>
&lt;p>我们使用的是 kong，在这里 kong 加上一些插件，相当好用。&lt;/p>
&lt;ul>
&lt;li>规则引擎&lt;/li>
&lt;/ul>
&lt;p>在规则引擎中，都是一个个规则。&lt;/p>
&lt;ul>
&lt;li>DSL&lt;/li>
&lt;/ul>
&lt;p>领域特定语言，在规则引擎和机器人的时候，就用了 DSL。我现在的理解就是 DSL 就是用编程语言实现的一些函数。&lt;/p>
&lt;ul>
&lt;li>Key Transparency&lt;/li>
&lt;/ul>
&lt;p>谷歌的一个公钥管理库，保证了无法被篡改。&lt;/p>
&lt;h2 id="未来可能要接触">未来可能要接触&lt;/h2>
&lt;ul>
&lt;li>go&lt;/li>
&lt;/ul></description></item><item><title>同步一个 fork</title><link>https://example.com/p/%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA-fork/</link><pubDate>Wed, 04 Apr 2018 16:01:31 +0000</pubDate><guid>https://example.com/p/%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA-fork/</guid><description>&lt;h2 id="具体方法">具体方法&lt;/h2>
&lt;h3 id="configuring-a-remote-for-a-fork">Configuring a remote for a fork&lt;/h3>
&lt;ul>
&lt;li>给 fork 配置一个 remote&lt;/li>
&lt;li>主要使用 &lt;code>git remote -v&lt;/code> 查看远程状态。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git remote -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>添加一个将被同步给 fork 远程的上游仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>再次查看状态确认是否配置成功。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git remote -v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="syncing-a-fork">Syncing a fork&lt;/h3>
&lt;ul>
&lt;li>从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 upstream/master
&lt;code>git fetch upstream&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git fetch upstream
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># remote: Counting objects: 75, done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># remote: Compressing objects: 100% (53/53), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># remote: Total 62 (delta 27), reused 44 (delta 9)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Unpacking objects: 100% (62/62), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># * [new branch] master -&amp;gt; upstream/master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>切换到本地主分支(如果不在的话)
&lt;code>git checkout master&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git checkout master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Switched to branch &amp;#39;master&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>把 upstream/master 分支合并到本地 master 上，这样就完成了同步，并且不会丢掉本地修改的内容。
&lt;code>git merge upstream/master&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">git merge upstream/master
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Updating a422352..5fdff0f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Fast-forward
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># README | 9 -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># README.md | 7 ++++++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 2 files changed, 7 insertions(+), 9 deletions(-)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># delete mode 100644 README
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># create mode 100644 README.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果想更新到 GitHub 的 fork 上，直接 &lt;code>git push origin master&lt;/code> 就好了。&lt;/li>
&lt;/ul></description></item><item><title>Go 语言体会</title><link>https://example.com/p/go-%E8%AF%AD%E8%A8%80%E4%BD%93%E4%BC%9A/</link><pubDate>Wed, 04 Apr 2018 13:48:57 +0000</pubDate><guid>https://example.com/p/go-%E8%AF%AD%E8%A8%80%E4%BD%93%E4%BC%9A/</guid><description>&lt;p>最近公司要统一技术栈，在 kotlin 和 go 之间选。我心里是比较倾向 go 的，主要有如下几点体会。&lt;/p>
&lt;ul>
&lt;li>语言简单，上手快。&lt;/li>
&lt;li>gorotuine&lt;/li>
&lt;li>易发布&lt;/li>
&lt;li>垃圾回收&lt;/li>
&lt;li>约定大于配置&lt;/li>
&lt;/ul>
&lt;p>我最早听说协程，是在大三找实习的时候，那个时候面试会问线程和进程的关系，问的深一些就是协程和线程的区别。游戏公司基本都用 lua，看了 lua 的资料后，对协程有了一些自己的了解，随后就是在做 Unity 相关的开发，在 unity 中使用了很多的协程，但是在 unity 中使用的协程好像跟主流的不太一样，在看了 go 之后，豁然开朗。&lt;/p>
&lt;p>goroutine 使用的内存比线程更少，go 在运行的时候会自动在配置的一组逻辑处理器上调度执行。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">func log(msg string){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">go log(&amp;#34;&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用关键字 go，即可让 log 函数在一个 goroutine 里执行了。&lt;/p>
&lt;p>并发最难的部分是要确保其他并发运行的进程、线程或者 goroutine 不会以外的修改数据。go 使用了 Channel 的方式来解决这个问题。对于通道模式，保证同一时刻只会有一个 goroutine 修改数据。&lt;/p>
&lt;p>说起 go 的语言简单，其实主要是他的类型比较简单。go 使用的是组合模式，只需要将一个类型嵌入到另外一个类型就可以复用所有的功能。而且 go 还具有独特的接口实现机制，允许用户对行为进行建模，在 go 中不需要声明某个类型实现了某个接口，编译器会自动判断一个实例是使用什么接口。&lt;/p>
&lt;p>对于 java 来说，所有的设计都是围绕着接口展开，于是在设计模式中，就是面向接口编程：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">interface User{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void login();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void logout();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 java 中，继承的类必须显式声明继承了此接口。而在 go 中接口只是描述一个动作，如果说是实现这个接口，只需要让某个实例实现了这个接口中的所有方法就行了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">type Reader interface{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Read(p []byte))(n int, err error)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这其实和传统的 oop 语言的接口有着本质的区别，go 中的接口一般只定义一个单一的动作，实际使用的过程中，这更有利于使用组合来复用代码。&lt;/p>
&lt;p>约定大于配置这点，go 在这方面上做的感觉有点儿吹毛求疵了，但是这样也使得程序可读性更强，没有很多垃圾代码。比如 go 的文件结构必须是 src pkg 和 bin 三个包，而且 go 也不允许你声明一个变量却不使用，导入了一个包却不使用，而且程序的代码也有约定，init 方法比 main 方法更早执行。&lt;/p>
&lt;h2 id="go-的并发">go 的并发&lt;/h2>
&lt;p>说到并发，就会想到另外一个概念，并行。可以简单这样的理解：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">并发是同时管理多个事情，而并行是同时做很多事情。也就是并发是manage，并行是run。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于单核处理器来讲，同一时刻只能有一个任务在执行，那么并发就是同时管理多个任务，让他们交替执行。并行是针对于多核处理器的，同一时刻可以把多个任务放在不同的处理器上执行，这样就可以同时执行。&lt;/p>
&lt;p>在 go 里面主要是采用协程来实现并发的，也就是 goroutine。与其他语言不同的是，go 是在语法层面做到的，即 go func();&lt;/p>
&lt;h3 id="语法">语法&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">go f(x, y)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>go 是关键字，后面跟函数。&lt;/p>
&lt;h3 id="例子">例子&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;log&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;time&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func doSomething(id int) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;before do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.Sleep(3 * time.Second)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;after do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doSomething(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doSomething(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> doSomething(3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子的输出是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:05 before do job:(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:08 after do job:(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:08 before do job:(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:11 after do job:(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:11 before do job:(3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:06:14 after do job:(3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到是用了 9 秒的时间才完成，如果是采用 goroutine 的话，就很快。很简单，就是在执行 doSomething 之前，加上 go 关键字。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">import (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;log&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;time&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func doSomething(id int) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;before do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.Sleep(3 * time.Second)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;after do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是这样的话，什么结果也没有，是因为 main 函数本身也是一个 goroutine，main 执行完之后，其他的还没开始，所以什么也看不到。最简单的办法就是让 main 函数等待一段时间再结束，但是这样不够优雅。&lt;/p>
&lt;p>我们应该采用 sync.WaitGroup 来等待所有的 goroutine 结束。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;log&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;sync&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;time&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func doSomething(id int, wg *sync.WaitGroup) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> defer wg.Done()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;before do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> time.Sleep(3 * time.Second)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;after do job:(%d) \n&amp;#34;, id)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func main() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> var wg sync.WaitGroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wg.Add(3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 因为我们要修改wg的状态，所以要传指针过去
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(1, &amp;amp;wg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(2, &amp;amp;wg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> go doSomething(3, &amp;amp;wg)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> wg.Wait()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> log.Printf(&amp;#34;finish all jobs\n&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行结果是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:14 before do job:(3)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:14 before do job:(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:14 before do job:(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:17 after do job:(2)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:17 after do job:(1)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2018/04/15 17:13:17 after do job:(3)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到这次只用了 3 秒左右就执行完了，而且他们的执行顺序也不确定，竞争执行。&lt;/p>
&lt;h3 id="channel">channel&lt;/h3>
&lt;p>每个协程之间要进行通信，那么在通信的时候采用的是 Channel 的形式，即一个 goroutine 将数据传递给 Channel，另一个 goroutine 从 Channel 中读取数据。&lt;/p>
&lt;p>创建 Channel 有两种方式：&lt;/p>
&lt;p>使用内建函数 make 可以创建 channel，举例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">ch := make(chan int) // 注意： channel 必须定义其传递的数据类型
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以用 var 声明 channel, 如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var ch chan int
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上声明的 channel 都是双向的，意味着可以该 channel 可以发送数据，也可以接收数据。&lt;/p></description></item><item><title>关于时间管理</title><link>https://example.com/p/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</link><pubDate>Sun, 25 Mar 2018 20:28:42 +0000</pubDate><guid>https://example.com/p/%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/</guid><description>&lt;p>&lt;img src="https://static001.geekbang.org/resource/image/a7/e4/a7e048981c7d5a853232422d792790e4.jpg"
loading="lazy"
>&lt;/p>
&lt;p>主动管理时间，敢于说不。&lt;/p>
&lt;p>有目标向前看，没目标向钱看。&lt;/p></description></item><item><title>一致性哈希算法</title><link>https://example.com/p/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</link><pubDate>Sat, 24 Mar 2018 19:03:58 +0000</pubDate><guid>https://example.com/p/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</guid><description>&lt;p>当我们在做数据库分库分表或者做分布式缓存的时候，不可避免的都会遇到一个问题：&lt;/p>
&lt;p>&lt;strong>如何将数据均匀的分散到各个节点中，并且尽量的在加减节点的时能使受影响的数据最少。&lt;/strong>&lt;/p>
&lt;h2 id="1-hash-取模">1 hash 取模&lt;/h2>
&lt;p>随机放置就不多说了。通常最容易想到的方案是哈希取模了。&lt;/p>
&lt;p>可以将传入的 key 按照
$$
index=hash(key) % N
$$
这样来计算出需要存放的节点。&lt;/p>
&lt;p>这样可以满足数据的均匀分配，但是这个算法的容错性和扩展性比较差。比如增加或者删除一个节点的时候，所有的 key 都要重新计算，显然这样的成本比较高，为此需要一个算法来满足均匀的同时也要有良好的容错性和扩展性。&lt;/p>
&lt;h2 id="2-一致性-hash-算法">2 一致性 hash 算法&lt;/h2>
&lt;p>一致性 hash 算法是将所有的哈希值构成了一个环，其范围是 0~2^32-1。如图：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn8kbmd4ncj30ad08y3yn.jpg"
loading="lazy"
alt="哈希环"
>&lt;/p>
&lt;p>之后将各个服务器节点散列到这个环上，可以用节点的 IP，hostname 这样唯一性的字段作为 key 进行 hash。散列之后如下：&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kf72uwuj30a40a70t5.jpg"
loading="lazy"
>&lt;/p>
&lt;p>之后需要将数据定位到对应的节点上，使用同样的 hash 函数将 key 也映射到这个环上。&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kj9kd4oj30ax0aomxq.jpg"
loading="lazy"
>&lt;/p>
&lt;p>这样就按照顺时针方向就可以将 k1 定位到 N1 节点，k2 定位到 N3 节点，k3 定位到 N2 节点。&lt;/p>
&lt;h3 id="21-容错性">2.1 容错性&lt;/h3>
&lt;p>假设 N1 宕机了：&lt;/p>
&lt;p>&lt;img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kl9pp06j30a409waaj.jpg"
loading="lazy"
>&lt;/p>
&lt;p>依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少部分数据。&lt;/p>
&lt;h3 id="22-扩展性">2.2 扩展性&lt;/h3>
&lt;p>当新增一个节点时：&lt;/p>
&lt;p>&lt;img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn8kp1fc9xj30ca0abt9c.jpg"
loading="lazy"
>&lt;/p>
&lt;p>在 N2 和 N3 之间新增了一个节点 N4，这时受影响的数据只有 k3，其余的数据也是保持不变。&lt;/p>
&lt;h3 id="23-虚拟节点">2.3 虚拟节点&lt;/h3>
&lt;p>到目前为止，该算法也有一些问题：&lt;/p>
&lt;p>当节点较少的时候可能出现数据不均匀的情况：&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn8krttekbj30c10a5dg5.jpg"
loading="lazy"
>&lt;/p>
&lt;p>这样会导致大部分数据都在 N1 节点，只有少量的数据在 N2 节点。&lt;/p>
&lt;p>为了解决这个问题，一致性哈希算法引入了虚拟节点。&lt;/p>
&lt;p>将每一个节点进行多次哈希，生成的节点放置在环上成为&lt;strong>虚拟节点&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn8ktzuswkj30ae0abdgb.jpg"
loading="lazy"
>&lt;/p>
&lt;p>计算时可以在 IP 后加上编号来生成哈希值。&lt;/p>
&lt;p>这样只需要在原有的基础上多一步由虚拟节点映射到实际节点的步骤即可让少量节点也能满足均匀性。&lt;/p>
&lt;h2 id="3-参考">3 参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://crossoverjie.top/2018/01/08/Consistent-Hash/#more" target="_blank" rel="noopener"
>https://crossoverjie.top/2018/01/08/Consistent-Hash/#more&lt;/a>&lt;/p></description></item><item><title>Spring Boot 启动原理分析</title><link>https://example.com/p/spring-boot-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</link><pubDate>Sat, 24 Mar 2018 19:03:22 +0000</pubDate><guid>https://example.com/p/spring-boot-%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</guid><description>&lt;h1 id="spring-boot-启动原理分析">Spring Boot 启动原理分析&lt;/h1>
&lt;p>我们在开发 spring boot 应用的时候，一般会遇到如下的启动类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@SpringBootApplication
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DemoApplication {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SpringApplication.run(DemoApplication.class, args);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从这段代码可以看出，注解@SpringBootApplication 和 SpringApplication.run()是比较重要的两个东西。&lt;/p>
&lt;h2 id="1-springapplication-注解">1 @SpringApplication 注解&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Target(ElementType.TYPE)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Retention(RetentionPolicy.RUNTIME)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Documented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Inherited
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@EnableAutoConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@ComponentScan(excludeFilters = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public @interface SpringBootApplication {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这段代码里，比较重要的只有三个注解：&lt;/p>
&lt;ul>
&lt;li>@Configuration（@SpringBootConfiguration 点开查看发现里面还是应用了@Configuration）&lt;/li>
&lt;li>@EnableAutoConfiguration&lt;/li>
&lt;li>@ComponentScan&lt;/li>
&lt;/ul>
&lt;p>其实，我们使用这三个注解来修饰 springboot 的启动类也可以正常运行,如下所示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@ComponentScan
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@EnableAutoConfiguration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DemoApplication {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SpringApplication.run(DemoApplication.class, args);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>每次写这三个注解的话，比较繁琐，所以就 spring 团队就封装了一个@SpringBootApplication。&lt;/p>
&lt;h2 id="11-configuration">1.1 @Configuration&lt;/h2>
&lt;p>@Configuration 就是 JavaConfig 形式的 Spring Ioc 容器的配置类使用的那个@Configuration，SpringBoot 社区推荐使用基于 JavaConfig 的配置形式，所以，这里的启动类标注了@Configuration 之后，本身其实也是一个 IoC 容器的配置类。&lt;/p>
&lt;p>XML 跟 config 配置方式的区别可以从如下几个方面来说：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>表达形式层面
基于 xml 的配置方式是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;beans&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">default-lazy-init=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">&amp;lt;!--bean定义--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/beans&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>基于 java config 配置方式是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MockConfiguration{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //bean定义
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>注册 bean 定义层面
基于 XML 的配置形式是这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;mockService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;..MockServiceImpl&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而基于 Java config 的配置形式是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MockConfiguration{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MockService mockService(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new MockServiceImpl();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>任何一个标注了@Bean 的方法，其返回值将作为一个 bean 定义注册到 Spring 的 IoC 容器，方法名将默认成该 bean 定义的 id。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表达依赖注入关系层面
为了表达 bean 与 bean 之间的依赖关系，在 XML 形式中一般是这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;mockService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;..MockServiceImpl&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;propery&lt;/span> &lt;span class="na">name =&lt;/span>&lt;span class="s">&amp;#34;dependencyService&amp;#34;&lt;/span> &lt;span class="na">ref=&lt;/span>&lt;span class="s">&amp;#34;dependencyService&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;bean&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;dependencyService&amp;#34;&lt;/span> &lt;span class="na">class=&lt;/span>&lt;span class="s">&amp;#34;DependencyServiceImpl&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>而基于 Java config 的配置形式是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MockConfiguration{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MockService mockService(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new MockServiceImpl(dependencyService());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public DependencyService dependencyService(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new DependencyServiceImpl();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果一个 bean 的定义依赖其他 bean,则直接调用对应的 JavaConfig 类中依赖 bean 的创建方法就可以了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-componentscan">1.2 @ComponentScan&lt;/h3>
&lt;p>@ComponentScan 的功能其实就是自动扫描并加载符合条件的组件（比如@Component 和@Repository 等）或者 bean 定义，最终将这些 bean 定义加载到 IoC 容器中。&lt;/p>
&lt;p>我们可以通过 basePackages 等属性来细粒度的定制@ComponentScan 自动扫描的范围，如果不指定，则默认 Spring 框架实现会从声明@ComponentScan 所在类的 package 进行扫描。&lt;/p>
&lt;p>所以 SpringBoot 的启动类最好是放在 root package 下，因为默认不指定 basePackages。&lt;/p>
&lt;h3 id="13-enableautoconfiguration">1.3 @EnableAutoConfiguration&lt;/h3>
&lt;p>Spring 框架提供了各种名字为@Enable 开头的 Annotation 定义，比如@EnableScheduling、@EnableCaching、@EnableMBeanExport 等。@EnableAutoConfiguration 的理念和做事方式其实一脉相承，简单概括一下就是，借助@Import 的支持，收集和注册特定场景相关的 bean 定义。&lt;/p>
&lt;p>@EnableAutoConfiguration 也是借助@Import 的帮助，将所有符合自动配置条件的 bean 定义加载到 IoC 容器。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@SuppressWarnings(&amp;#34;deprecation&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Target(ElementType.TYPE)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Retention(RetentionPolicy.RUNTIME)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Documented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Inherited
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@AutoConfigurationPackage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Import(EnableAutoConfigurationImportSelector.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public @interface EnableAutoConfiguration {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>@EnableAutoConfiguration 作为一个复合 Annotation，&lt;/p>
&lt;p>其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助 EnableAutoConfigurationImportSelector，@EnableAutoConfiguration 借助于 SpringFactoriesLoader 的支持可以帮助 SpringBoot 应用将所有符合条件的@Configuration 配置都加载到当前 SpringBoot 创建并使用的 IoC 容器。SpringFactoriesLoader 的支持。&lt;/p>
&lt;h3 id="14-springfactoriesloader">1.4 SpringFactoriesLoader&lt;/h3>
&lt;p>SpringFactoriesLoader 属于 Spring 框架私有的一种扩展方案，其主要功能就是从指定的配置文件&lt;code>META-INF/spring.factories&lt;/code>加载配置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public abstract class SpringFactoriesLoader {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; loadFactories(Class&amp;lt;T&amp;gt; factoryClass, ClassLoader classLoader) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static List&amp;lt;String&amp;gt; loadFactoryNames(Class&amp;lt;?&amp;gt; factoryClass, ClassLoader classLoader){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配合@EnableAutoConfiguration 使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration 的完整类名 org.springframework.boot.autoconfigure.EnableAutoConfiguration 作为查找的 Key,获取对应的一组@Configuration 类。&lt;/p>
&lt;p>&lt;img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot3-2.jpg"
loading="lazy"
>&lt;/p>
&lt;p>@EnableAutoConfiguration 自动配置流程就是：&lt;/p>
&lt;ul>
&lt;li>从 classpath 中搜寻所有的 META-INF/spring.factories 配置文件；&lt;/li>
&lt;li>并将其中 org.springframework.boot.autoconfigure.EnableutoConfiguration 对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration 的 JavaConfig 形式的 IoC 容器配置类；&lt;/li>
&lt;li>然后汇总为一个并加载到 IoC 容器。&lt;/li>
&lt;/ul>
&lt;h2 id="2-springapplication">2 SpringApplication&lt;/h2>
&lt;p>SpringApplication 的 run 该方法的主要流程大体可以归纳如下：&lt;/p>
&lt;p>&lt;strong>1）&lt;/strong> 如果我们使用的是 SpringApplication 的静态 run 方法，那么，这个方法里面首先要创建一个 SpringApplication 对象实例，然后调用这个创建好的 SpringApplication 的实例方法。在 SpringApplication 实例初始化的时候，它会提前做几件事情：&lt;/p>
&lt;ul>
&lt;li>根据 classpath 里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为 Web 应用使用的 ApplicationContext 类型。&lt;/li>
&lt;li>使用 SpringFactoriesLoader 在应用的 classpath 中查找并加载所有可用的 ApplicationContextInitializer。&lt;/li>
&lt;li>使用 SpringFactoriesLoader 在应用的 classpath 中查找并加载所有可用的 ApplicationListener。&lt;/li>
&lt;li>推断并设置 main 方法的定义类。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2）&lt;/strong> SpringApplication 实例初始化完成并且完成设置后，就开始执行 run 方法的逻辑了，方法执行伊始，首先遍历执行所有通过 SpringFactoriesLoader 可以查找到并加载的 SpringApplicationRunListener。调用它们的 started()方法，告诉这些 SpringApplicationRunListener，“嘿，SpringBoot 应用要开始执行咯！”。&lt;/p>
&lt;p>&lt;strong>3）&lt;/strong> 创建并配置当前 Spring Boot 应用将要使用的 Environment（包括配置要使用的 PropertySource 以及 Profile）。&lt;/p>
&lt;p>&lt;strong>4）&lt;/strong> 遍历调用所有 SpringApplicationRunListener 的 environmentPrepared()的方法，告诉他们：“当前 SpringBoot 应用使用的 Environment 准备好了咯！”。&lt;/p>
&lt;p>&lt;strong>5）&lt;/strong> 如果 SpringApplication 的 showBanner 属性被设置为 true，则打印 banner。&lt;/p>
&lt;p>&lt;strong>6）&lt;/strong> 根据用户是否明确设置了 applicationContextClass 类型以及初始化阶段的推断结果，决定该为当前 SpringBoot 应用创建什么类型的 ApplicationContext 并创建完成，然后根据条件决定是否添加 ShutdownHook，决定是否使用自定义的 BeanNameGenerator，决定是否使用自定义的 ResourceLoader，当然，最重要的，将之前准备好的 Environment 设置给创建好的 ApplicationContext 使用。&lt;/p>
&lt;p>&lt;strong>7）&lt;/strong> ApplicationContext 创建好之后，SpringApplication 会再次借助 Spring-FactoriesLoader，查找并加载 classpath 中所有可用的 ApplicationContext-Initializer，然后遍历调用这些 ApplicationContextInitializer 的 initialize（applicationContext）方法来对已经创建好的 ApplicationContext 进行进一步的处理。&lt;/p>
&lt;p>&lt;strong>8）&lt;/strong> 遍历调用所有 SpringApplicationRunListener 的 contextPrepared()方法。&lt;/p>
&lt;p>&lt;strong>9）&lt;/strong> 最核心的一步，将之前通过@EnableAutoConfiguration 获取的所有配置以及其他形式的 IoC 容器配置加载到已经准备完毕的 ApplicationContext。&lt;/p>
&lt;p>&lt;strong>10）&lt;/strong> 遍历调用所有 SpringApplicationRunListener 的 contextLoaded()方法。&lt;/p>
&lt;p>&lt;strong>11）&lt;/strong> 调用 ApplicationContext 的 refresh()方法，完成 IoC 容器可用的最后一道工序。&lt;/p>
&lt;p>&lt;strong>12）&lt;/strong> 查找当前 ApplicationContext 中是否注册有 CommandLineRunner，如果有，则遍历执行它们。&lt;/p>
&lt;p>&lt;strong>13）&lt;/strong> 正常情况下，遍历执行 SpringApplicationRunListener 的 finished()方法、（如果整个过程出现异常，则依然调用所有 SpringApplicationRunListener 的 finished()方法，只不过这种情况下会将异常信息一并传入处理）&lt;/p>
&lt;p>去除事件通知点后，整个流程如下图所示：&lt;/p>
&lt;p>&lt;img src="http://7xqch5.com1.z0.glb.clouddn.com/springboot3-3.jpg"
loading="lazy"
>&lt;/p>
&lt;h2 id="3-参考资料">3 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://tengj.top/2017/04/24/springboot0/" target="_blank" rel="noopener"
>Spring Boot 干货系列：（三）启动原理解析&lt;/a>
&lt;a class="link" href="http://product.dangdang.com/23964779.html" target="_blank" rel="noopener"
>SpringBoot 揭秘快速构建为服务体系&lt;/a>&lt;/p></description></item><item><title>Spring Data Jpa 实战</title><link>https://example.com/p/spring-data-jpa-%E5%AE%9E%E6%88%98/</link><pubDate>Sat, 24 Mar 2018 19:02:48 +0000</pubDate><guid>https://example.com/p/spring-data-jpa-%E5%AE%9E%E6%88%98/</guid><description>&lt;p>为了解决抽象各个 Java 实体基本的“增删改查”操作，我们通常会以泛型的方式封装一个模板 Dao 来进行抽象简化，但是这样依然不是很方便，我们需要针对每个实体编写一个继承自泛型模板 Dao 的接口，再编写该接口的实现。虽然一些基础的数据访问已经可以得到很好的复用，但是在代码结构上针对每个实体都会有一堆 Dao 的接口和实现。&lt;/p>
&lt;p>由于模板 Dao 的实现，使得这些具体实体的 Dao 层已经变的非常“薄”，有一些具体实体的 Dao 实现可能完全就是对模板 Dao 的简单代理，并且往往这样的实现类可能会出现在很多实体上。Spring-data-jpa 的出现正可以让这样一个已经很“薄”的数据访问层变成只是一层接口的编写方式。&lt;/p>
&lt;h2 id="1-工程配置">1 工程配置&lt;/h2>
&lt;h3 id="11-pom">1.1 pom&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;project&lt;/span> &lt;span class="na">xmlns=&lt;/span>&lt;span class="s">&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span> &lt;span class="na">xmlns:xsi=&lt;/span>&lt;span class="s">&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">xsi:schemaLocation=&lt;/span>&lt;span class="s">&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;modelVersion&amp;gt;&lt;/span>4.0.0&lt;span class="nt">&amp;lt;/modelVersion&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.example&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>jpa-demo&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>0.0.1-SNAPSHOT&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;packaging&amp;gt;&lt;/span>jar&lt;span class="nt">&amp;lt;/packaging&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>jpa-demo&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;description&amp;gt;&lt;/span>Demo project for Spring Boot&lt;span class="nt">&amp;lt;/description&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.5.9.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;relativePath/&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;project.build.sourceEncoding&amp;gt;&lt;/span>UTF-8&lt;span class="nt">&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;project.reporting.outputEncoding&amp;gt;&lt;/span>UTF-8&lt;span class="nt">&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;java.version&amp;gt;&lt;/span>1.8&lt;span class="nt">&amp;lt;/java.version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-data-jpa&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-web&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>mysql&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mysql-connector-java&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>runtime&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.projectlombok&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>lombok&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;optional&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/optional&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-test&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-maven-plugin&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/plugin&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/plugins&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/build&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/project&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12-applicationproperties">1.2 application.properties&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">spring.datasource.url=jdbc:mysql://localhost:3306/test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.username=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.password=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.driver-class-name=com.mysql.jdbc.Driver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>spring.jpa.properties.hibernate.hbm2ddl.auto&lt;/code>是 hibernate 的配置属性，其主要作用是：自动创建、更新、验证数据库表结构。该参数的几种配置如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>create&lt;/code>：每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。&lt;/li>
&lt;li>&lt;code>create-drop&lt;/code>：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。&lt;/li>
&lt;li>&lt;code>update&lt;/code>：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。&lt;/li>
&lt;li>&lt;code>validate&lt;/code>：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。&lt;/li>
&lt;/ul>
&lt;h2 id="2-实体类">2 实体类&lt;/h2>
&lt;p>创建一个 User 实体，包含 id（主键）、name（姓名）、age（年龄）属性，通过 ORM 框架其会被映射到数据库表中，由于配置了&lt;code>hibernate.hbm2ddl.auto&lt;/code>，在应用启动的时候框架会自动去数据库中创建对应的表。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@NoArgsConstructor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Entity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class Users {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @GeneratedValue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Long id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Column(nullable = false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private String name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Column(nullable = false)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Integer age;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public Users(String name, Integer age) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.name = name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.age = age;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-repository">3 repository&lt;/h2>
&lt;p>针对 User 实体创建对应的&lt;code>Repository&lt;/code>接口实现对该实体的数据访问：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Repository
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface UsersRepository extends JpaRepository&amp;lt;Users, Long&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Users findByName(String name);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Users findByNameAndAge(String name, Integer age);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Query(&amp;#34;from Users u where u.name=:name&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Users findUser(@Param(&amp;#34;name&amp;#34;) String name);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 Spring-data-jpa 中，只需要编写类似上面这样的接口就可实现数据访问。不再像我们以往编写了接口时候还需要自己编写接口实现类，直接减少了我们的文件清单。&lt;/p>
&lt;p>下面对上面的&lt;code>UserRepository&lt;/code>做一些解释，该接口继承自&lt;code>JpaRepository&lt;/code>，通过查看&lt;code>JpaRepository&lt;/code>接口的&lt;a class="link" href="http://docs.spring.io/spring-data/data-jpa/docs/current/api/" target="_blank" rel="noopener"
>API 文档&lt;/a>，可以看到该接口本身已经实现了创建（save）、更新（save）、删除（delete）、查询（findAll、findOne）等基本操作的函数，因此对于这些基础操作的数据访问就不需要开发者再自己定义。&lt;/p>
&lt;p>在上例中，我们可以看到下面两个函数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>User findByName(String name)&lt;/code>&lt;/li>
&lt;li>&lt;code>User findByNameAndAge(String name, Integer age)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>它们分别实现了按 name 查询 User 实体和按 name 和 age 查询 User 实体，可以看到我们这里没有任何类 SQL 语句就完成了两个条件查询方法。这就是 Spring-data-jpa 的一大特性：&lt;strong>通过解析方法名创建查询&lt;/strong>。&lt;/p>
&lt;p>除了通过解析方法名来创建查询外，它也提供通过使用@Query 注解来创建查询，您只需要编写 JPQL 语句，并通过类似“:name”来映射@Param 指定的参数，就像例子中的第三个 findUser 函数一样。&lt;/p>
&lt;h2 id="4-单元测试">4 单元测试&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@RunWith(SpringRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class JpaDemoApplicationTests {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private UsersRepository usersRepository;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void contextLoads() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testJPA() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 创建10条记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;AAA&amp;#34;, 10));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;BBB&amp;#34;, 20));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;CCC&amp;#34;, 30));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;DDD&amp;#34;, 40));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;EEE&amp;#34;, 50));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;FFF&amp;#34;, 60));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;GGG&amp;#34;, 70));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;HHH&amp;#34;, 80));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;III&amp;#34;, 90));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.save(new Users(&amp;#34;JJJ&amp;#34;, 100));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试findAll, 查询所有记录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(10, usersRepository.findAll().size());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试findByName, 查询姓名为FFF的User
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(60, usersRepository.findByName(&amp;#34;FFF&amp;#34;).getAge().longValue());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试findUser, 查询姓名为FFF的User
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(60, usersRepository.findUser(&amp;#34;FFF&amp;#34;).getAge().longValue());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试findByNameAndAge, 查询姓名为FFF并且年龄为60的User
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;FFF&amp;#34;, usersRepository.findByNameAndAge(&amp;#34;FFF&amp;#34;, 60).getName());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试删除姓名为AAA的User
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> usersRepository.delete(usersRepository.findByName(&amp;#34;AAA&amp;#34;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 测试findAll, 查询所有记录, 验证上面的删除是否成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(9, usersRepository.findAll().size());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="5-参考资料">5 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://www.spring4all.com/article/252" target="_blank" rel="noopener"
>Spring Boot 使用 Spring-data-jpa 简化数据访问层&lt;/a>&lt;/p></description></item><item><title>spring boot 多数据源配置</title><link>https://example.com/p/spring-boot-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</link><pubDate>Sat, 24 Mar 2018 19:01:37 +0000</pubDate><guid>https://example.com/p/spring-boot-%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="spring-boot-多数据源配置">spring boot 多数据源配置&lt;/h1>
&lt;p>在单数据源的情况下，Spring Boot 的配置非常简单，只需要在 application.properties 文件中配置连接参数即可。但是往往随着业务量发展，我们通常会进行数据库拆分或是引入其他数据库，从而我们需要配置多个数据源。&lt;/p>
&lt;h2 id="1-准备">1 准备&lt;/h2>
&lt;h3 id="11-禁止-datasourceautoconfiguration">1.1 禁止 DataSourceAutoConfiguration&lt;/h3>
&lt;p>首先要将 spring boot 自带的&lt;code>DataSourceAutoConfiguration&lt;/code>禁掉，因为它会读取&lt;code>application.properties&lt;/code>文件的&lt;code>spring.datasource.*&lt;/code>属性并自动配置单数据源。在&lt;code>@SpringBootApplication&lt;/code>注解中添加&lt;code>exclude&lt;/code>属性即可：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DemoApplication {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void main(String[] args) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SpringApplication.run(JpaDemoApplication.class, args);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="12-配置数据库连接">1.2 配置数据库连接&lt;/h3>
&lt;p>然后在&lt;code>application.properties&lt;/code>中配置多数据源连接信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">spring.datasource.primary.url=jdbc:mysql://localhost:3306/test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.primary.username=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.primary.password=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.secondary.url=jdbc:mysql://localhost:3306/test1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.secondary.username=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.secondary.password=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="13-手段创建数据源">1.3 手段创建数据源&lt;/h3>
&lt;p>由于我们禁掉了自动数据源配置，因些下一步就需要手动将这些数据源创建出来：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DataSourceConfig {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean(name = &amp;#34;primaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// @Qualifier(value = &amp;#34;primaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConfigurationProperties(prefix = &amp;#34;spring.datasource.primary&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public DataSource primaryDataSource(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return DataSourceBuilder.create().build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean(name = &amp;#34;secondaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// @Qualifier(value = &amp;#34;secondaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @ConfigurationProperties(prefix = &amp;#34;spring.datasource.secondary&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public DataSource secondaryDataSource() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return DataSourceBuilder.create().build();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-jdbctemplate-多数据源">2 jdbcTemplate 多数据源&lt;/h2>
&lt;h3 id="21-jdbctemplate-的数据源配置">2.1 jdbcTemplate 的数据源配置&lt;/h3>
&lt;p>新建 jdbcTemplate 的数据源配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class JdbcTemplateConfig {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean(name = &amp;#34;primaryJdbcTemplate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public JdbcTemplate primaryJdbcTemplate(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;primaryDataSource&amp;#34;) DataSource dataSource) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new JdbcTemplate(dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean(name = &amp;#34;secondaryJdbcTemplate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public JdbcTemplate secondaryJdbcTemplate(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;secondaryDataSource&amp;#34;) DataSource dataSource) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return new JdbcTemplate(dataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="22-单元测试">2.2 单元测试&lt;/h3>
&lt;p>然后编写单元测试用例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@RunWith(SpringRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class JpaDemoApplicationTests {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;primaryJdbcTemplate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected JdbcTemplate jdbcTemplate1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;secondaryJdbcTemplate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected JdbcTemplate jdbcTemplate2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testJdbc() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 往第一个数据源中插入两条数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jdbcTemplate1.update(&amp;#34;insert into users(id,name,age) values(?, ?, ?)&amp;#34;, 1, &amp;#34;aaa&amp;#34;, 20);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jdbcTemplate1.update(&amp;#34;insert into users(id,name,age) values(?, ?, ?)&amp;#34;, 2, &amp;#34;bbb&amp;#34;, 30);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 往第二个数据源中插入一条数据，若插入的是第一个数据源，则会主键冲突报错
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jdbcTemplate2.update(&amp;#34;insert into users(id,name,age) values(?, ?, ?)&amp;#34;, 1, &amp;#34;aaa&amp;#34;, 20);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 查一下第一个数据源中是否有两条数据，验证插入是否成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;2&amp;#34;, jdbcTemplate1.queryForObject(&amp;#34;select count(1) from users&amp;#34;, String.class));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 查一下第一个数据源中是否有两条数据，验证插入是否成功
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;1&amp;#34;, jdbcTemplate2.queryForObject(&amp;#34;select count(1) from users&amp;#34;, String.class));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void contextLoads() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-mybatis-多数据源配置">3 mybatis 多数据源配置&lt;/h2>
&lt;h3 id="31-自定义-sqlsessionfactory">3.1 自定义 SqlSessionFactory&lt;/h3>
&lt;p>新建两个 mybatis 的 SqlSessionFactory 配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@MapperScan(basePackages = {&amp;#34;com.example.jpademo.primary.mapper&amp;#34;}, sqlSessionFactoryRef = &amp;#34;sqlSessionFactory1&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MybatisPrimaryConfig {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;primaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private DataSource primaryDataSource;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public SqlSessionFactory sqlSessionFactory1() throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 使用primaryDataSource数据源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> factoryBean.setDataSource(primaryDataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return factoryBean.getObject();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public SqlSessionTemplate sqlSessionTemplate1() throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 使用上面配置的Factory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SqlSessionTemplate template = new SqlSessionTemplate(sqlSessionFactory1());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return template;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样，&lt;code>com.example.jpademo.primary.mapper&lt;/code>包下的所有 mapper 就会用&lt;code>sqlSessionFactory1&lt;/code>。同理可以创建&lt;/p>
&lt;p>&lt;code>sqlSessionFactory2&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Configuration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@MapperScan(basePackages = {&amp;#34;com.example.jpademo.secondary.mapper&amp;#34;}, sqlSessionFactoryRef = &amp;#34;sqlSessionFactory2&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MybatisSecondaryConfig {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Qualifier(&amp;#34;secondaryDataSource&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private DataSource secondaryDataSource;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public SqlSessionFactory sqlSessionFactory2() throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 使用primaryDataSource数据源
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> factoryBean.setDataSource(secondaryDataSource);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return factoryBean.getObject();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Bean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public SqlSessionTemplate sqlSessionTemplate1() throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 使用上面配置的Factory
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SqlSessionTemplate template = new SqlSessionTemplate(sqlSessionFactory2());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return template;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="32-mapper-和实体类">3.2 mapper 和实体类&lt;/h3>
&lt;p>然后编写 mapper 和实体类：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class User {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Integer id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private String name;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Integer age;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.example.jpademo.primary.mapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.example.jpademo.domain.User;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.apache.ibatis.annotations.Mapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.apache.ibatis.annotations.Param;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.apache.ibatis.annotations.Select;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.springframework.beans.factory.annotation.Qualifier;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Mapper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Qualifier(&amp;#34;userMapper1&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface UserMapper1 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Select(&amp;#34;select * from users where id=#{id}&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User findById(@Param(&amp;#34;id&amp;#34;) Integer id);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.example.jpademo.secondary.mapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.example.jpademo.domain.User;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.apache.ibatis.annotations.Mapper;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.apache.ibatis.annotations.Select;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.springframework.beans.factory.annotation.Qualifier;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Mapper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@Qualifier(&amp;#34;userMapper2&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface UserMapper2 {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Select(&amp;#34;select * from users where id=#{id}&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User findById(Integer id);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="33-单元测试">3.3 单元测试&lt;/h3>
&lt;p>编写单元测试用例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@RunWith(SpringRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class JpaDemoApplicationTests {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private UserMapper1 userMapper1;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private UserMapper2 userMapper2;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testMybatis() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User user1 = userMapper1.findById(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User user2 = userMapper2.findById(1);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;aaa&amp;#34;, user1.getName());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;ccc&amp;#34;, user2.getName());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-参考资料">4 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://blog.csdn.net/neosmith/article/details/61202084" target="_blank" rel="noopener"
>Spring Boot + Mybatis 多数据源和动态数据源配置&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.spring4all.com/article/253" target="_blank" rel="noopener"
>Spring Boot 两种多数据源配置：JdbcTemplate、Spring-data-jpa&lt;/a>&lt;/p></description></item><item><title>spring boot 连接 redis</title><link>https://example.com/p/spring-boot-%E8%BF%9E%E6%8E%A5-redis/</link><pubDate>Sat, 24 Mar 2018 19:00:48 +0000</pubDate><guid>https://example.com/p/spring-boot-%E8%BF%9E%E6%8E%A5-redis/</guid><description>&lt;p>&lt;strong>Spring-data-redis&lt;/strong>为 spring-data 模块中对 redis 的支持部分，简称为“SDR”，提供了基于 jedis 客户端 API 的高度封装以及与 spring 容器的整合，&lt;/p>
&lt;p>jedis 客户端在编程实施方面存在如下不足：&lt;/p>
&lt;ul>
&lt;li>connection 管理缺乏自动化，connection-pool 的设计缺少必要的容器支持。&lt;/li>
&lt;li>数据操作需要关注“序列化”/“反序列化”，因为 jedis 的客户端 API 接受的数据类型为 string 和 byte，对结构化数据(json,xml,pojo 等)操作需要额外的支持。&lt;/li>
&lt;li>事务操作纯粹为硬编码&lt;/li>
&lt;li>pub/sub 功能，缺乏必要的设计模式支持，对于开发者而言需要关注的太多。&lt;/li>
&lt;/ul>
&lt;h2 id="1-spring-data-redis-特性">1 spring-data-redis 特性&lt;/h2>
&lt;ol>
&lt;li>连接池自动管理，提供了一个高度封装的“RedisTemplate”类&lt;/li>
&lt;li>针对 jedis 客户端中大量 api 进行了归类封装,将同一类型操作封装为 operation 接口
&lt;ul>
&lt;li>&lt;code>ValueOperations&lt;/code>：简单 K-V 操作&lt;/li>
&lt;li>&lt;code>SetOperations&lt;/code>：set 类型数据操作&lt;/li>
&lt;li>&lt;code>ZSetOperations&lt;/code>：zset 类型数据操作&lt;/li>
&lt;li>&lt;code>HashOperations&lt;/code>：针对 map 类型的数据操作&lt;/li>
&lt;li>&lt;code>ListOperations&lt;/code>：针对 list 类型的数据操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提供了对 key 的“bound”(绑定)便捷化操作 API，可以通过 bound 封装指定的 key，然后进行一系列的操作而无须“显式”的再次指定 Key，即 BoundKeyOperations：
&lt;ul>
&lt;li>&lt;code>BoundValueOperations&lt;/code>&lt;/li>
&lt;li>&lt;code>BoundSetOperations&lt;/code>&lt;/li>
&lt;li>&lt;code>BoundListOperations&lt;/code>&lt;/li>
&lt;li>&lt;code>BoundSetOperations&lt;/code>&lt;/li>
&lt;li>&lt;code>BoundHashOperations&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将事务操作封装，有容器控制。&lt;/li>
&lt;li>针对数据的“序列化/反序列化”，提供了多种可选择策略(RedisSerializer)
&lt;ul>
&lt;li>&lt;code>JdkSerializationRedisSerializer&lt;/code>：POJO 对象的存取场景，使用 JDK 本身序列化机制，将 pojo 类通过 ObjectInputStream/ObjectOutputStream 进行序列化操作，最终 redis-server 中将存储字节序列。是目前最常用的序列化策略。&lt;/li>
&lt;li>&lt;code>StringRedisSerializer&lt;/code>：Key 或者 value 为字符串的场景，根据指定的 charset 对数据的字节序列编码成 string，是“new String(bytes, charset)”和“string.getBytes(charset)”的直接封装。是最轻量级和高效的策略。&lt;/li>
&lt;li>&lt;code>JacksonJsonRedisSerializer&lt;/code>：jackson-json 工具提供了 javabean 与 json 之间的转换能力，可以将 pojo 实例序列化成 json 格式存储在 redis 中，也可以将 json 格式的数据转换成 pojo 实例。因为 jackson 工具在序列化和反序列化时，需要明确指定 Class 类型，因此此策略封装起来稍微复杂。&lt;/li>
&lt;li>&lt;code>OxmSerializer&lt;/code>：提供了将 javabean 与 xml 之间的转换能力，目前可用的三方支持包括 jaxb，apache-xmlbeans；redis 存储的数据将是 xml 工具。不过使用此策略，编程将会有些难度，而且效率最低；不建议使用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>基于设计模式，和 JMS 开发思路，将 pub/sub 的 API 设计进行了封装，使开发更加便捷。&lt;/li>
&lt;li>spring-data-redis 中，并没有对 sharding 提供良好的封装，如果你的架构是基于 sharding，那么你需要自己去实现，这也是 sdr 和 jedis 相比，唯一缺少的特性。&lt;/li>
&lt;/ol>
&lt;h2 id="2-引入依赖">2 引入依赖&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-data-redis&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="3-配置">3 配置&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># REDIS (RedisProperties)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Redis数据库索引（默认为0）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.database=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Redis服务器地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.host=localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Redis服务器连接端口
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.port=6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Redis服务器连接密码（默认为空）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.password=root
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 连接池最大连接数（使用负值表示没有限制）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.pool.max-active=8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 连接池最大阻塞等待时间（使用负值表示没有限制）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.pool.max-wait=-1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 连接池中的最大空闲连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.pool.max-idle=8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 连接池中的最小空闲连接
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.pool.min-idle=0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 连接超时时间（毫秒）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">spring.redis.timeout=0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 spring.redis.database 的配置通常使用 0 即可，Redis 在配置的时候可以设置数据库数量，默认为 16，可以理解为数据库的 schema&lt;/p>
&lt;h3 id="31-stringredistemplate">3.1 &lt;code>StringRedisTemplate&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@RunWith(SpringRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DemoApplicationTests {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private StringRedisTemplate stringRedisTemplate;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testRedis(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> stringRedisTemplate.opsForValue().set(&amp;#34;myKey&amp;#34;, &amp;#34;hello redis&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;hello redis&amp;#34;, stringRedisTemplate.opsForValue().get(&amp;#34;myKey&amp;#34;));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过上面这段极为简单的测试案例演示了如何通过自动配置的 StringRedisTemplate 对象进行 Redis 的读写操作，该对象从命名中就可注意到支持的是 String 类型。如果有使用过 spring-data-redis 的开发者一定熟悉 RedisTemplate&amp;lt;K, V&amp;gt;接口，StringRedisTemplate 就相当于 RedisTemplate&amp;lt;String, String&amp;gt;的实现。&lt;/p>
&lt;p>除了 String 类型，我们还经常会在 Redis 中存储对象。&lt;/p>
&lt;h3 id="32-redistemplateobject-object">3.2 &lt;code>RedisTemplate&amp;lt;Object, Object&amp;gt;&lt;/code>&lt;/h3>
&lt;h4 id="321-新建-user-类">3.2.1 新建 User 类&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Data
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@AllArgsConstructor
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class User implements Serializable{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private static final long serialVersionUID = 1L;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Integer id;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private String username;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private Integer age;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="322-创建-userrepository">3.2.2 创建 UserRepository&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Repository
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class UserRepository {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Resource(name = &amp;#34;redisTemplate&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ValueOperations&amp;lt;Object, Object&amp;gt; valOps;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * 保存
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * @param user
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void save(User user) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int id = user.getId();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> valOps.set(id, user);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /**
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * 获取
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * @param id
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * @return
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public User getUserById(int id) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return (User) valOps.get(id);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>@Resource 注解和@Autowired 一样，也可以标注在字段或属性的 setter 方法上，但它默认按名称装配。名称可以通过@Resource 的 name 属性指定，如果没有指定 name 属性，当注解标注在字段上，即默认取字段的名称作为 bean 名称寻找依赖对象，当注解标注在属性的 setter 方法上，即默认取属性名作为 bean 名称寻找依赖对象。&lt;/p>
&lt;h4 id="323-单元测试">3.2.3 单元测试&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@RunWith(SpringRunner.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@SpringBootTest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class DemoApplicationTests {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Autowired
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private UserRepository userRepository;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testRedis(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> User user=new User(1, &amp;#34;hello&amp;#34;, 12);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> userRepository.save(user);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Assert.assertEquals(&amp;#34;hello&amp;#34;, userRepository.getUserById(1).getUsername());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-参考资料">4 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="http://blog.csdn.net/smartdt/article/details/78894013" target="_blank" rel="noopener"
>SpringBoot 之 Redis 的支持&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="http://shift-alt-ctrl.iteye.com/blog/1886831" target="_blank" rel="noopener"
>Spring-data-redis 特性与实例&lt;/a>&lt;/p></description></item><item><title>最终一致性的实现手段</title><link>https://example.com/p/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%AE%B5/</link><pubDate>Sat, 24 Mar 2018 18:59:55 +0000</pubDate><guid>https://example.com/p/%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%AE%B5/</guid><description>&lt;h1 id="最终一致性的实现手段">最终一致性的实现手段&lt;/h1>
&lt;p>实现最终一致性有三种手段：可靠事件模式、业务补偿模式和 TCC 模式&lt;/p>
&lt;h2 id="1-可靠事件模式">1 可靠事件模式&lt;/h2>
&lt;p>可靠事件模式属于事件驱动架构，当某件重要的事情发生时，比如更新一个业务实体，微服务会向消息代理发布一个事件。消息代理会将订阅事件的微服务推送事件。&lt;/p>
&lt;p>要实现这种模式需要消息队列实现事件的持久化和 at least once 的可靠事件投递模式。&lt;/p>
&lt;h3 id="11-本地事件表">1.1 本地事件表&lt;/h3>
&lt;p>本地事件表方法是将事件和业务数据保存在同一个数据库中，使用一个额外的事件恢复服务来恢复事件，由本地事物保证更新业务和发布事件的原子性。&lt;/p>
&lt;p>但是业务系统和事件系统耦合比较紧密，额外的事件数据库操作也会给数据库带来额外的压力，可能成为瓶颈。&lt;/p>
&lt;h3 id="12-外部事件">1.2 外部事件&lt;/h3>
&lt;p>此方法是将事件持久化到外部的事件系统，事件系统需要提供实时事件服务以接受微服务发布的事件，同时事件系统还需要提供事件恢复服务来确认恢复事件。&lt;/p>
&lt;h3 id="13-不足">1.3 不足&lt;/h3>
&lt;p>此过程可能出现重复消费的情况。&lt;/p>
&lt;h2 id="2-补偿模式">2 补偿模式&lt;/h2>
&lt;p>一般来讲，异常一般是由以下两种情况造成的：&lt;/p>
&lt;p>业务异常：业务逻辑产生的错误，比如余额不足、库存不足等。&lt;/p>
&lt;p>技术异常：非业务逻辑产生的异常，比如网络连接异常、超时等。&lt;/p>
&lt;p>补偿模式就是使用一个额外的协调服务来协调各个需要保证一致性的其他服务。协调服务按顺序调用每一个服务，如果某个服务调用异常就取消之前所有已经调用成功的服务。&lt;/p>
&lt;p>建议仅用于技术异常的情况。对于业务异常来讲，应该尽可能的去优化业务模式，以避免要求补偿事务。&lt;/p>
&lt;h3 id="21-常用手段">2.1 常用手段&lt;/h3>
&lt;p>在实现补偿模式时应该做到两点：&lt;/p>
&lt;ul>
&lt;li>首先要确定失败的步骤和状态，从而确定要补偿的范围。&lt;/li>
&lt;li>其次要能提供补偿操作使用的业务数据。&lt;/li>
&lt;/ul>
&lt;p>可以通过记录完整的业务流水的方法来实现上面两点要求。但是对于一个通用的补偿框架来说，预先知道微服务需要记录的业务要素是不可能的，那么就需要一种办法来保证业务流水的可扩展性，实践中主要有两种方法：大表和关联表。&lt;/p>
&lt;ul>
&lt;li>大表，顾明思议就是设计时除了必须的字段外，还需要预留大量的备用字段，框架可以提供辅助工具来将业务数据映射到备用字段中。大表对于框架层实现起来比较简单，但是也有一些难点，比如预留多少个字段合适，每个字段又需要预留多长。还有一个难点是如果仅从数据层面来查询数据，很难一眼看出备用字段的业务含义，维护过程不友好。&lt;/li>
&lt;li>关联表，分为技术表和业务表。技术表中保存为实现补偿操作所需要的技术数据，业务表中保存业务数据。通过在技术表中增加业务表名和业务表主键来建立和业务数据的关联。关联表更灵活，能支持不同业务类型记录不同的业务要素。但是在框架的实现上难度较高，每次查询都需要复杂的关联动作，性能会受到影响。&lt;/li>
&lt;/ul>
&lt;h3 id="22-重试">2.2 重试&lt;/h3>
&lt;p>补偿过程作为一个服务，在调用的时候也会出现不成功的情况，这时就要通过重试机制来保证补偿的成功率。因此要求补偿操作具有幂等性。&lt;/p>
&lt;p>但是也不是盲目的重试，我们需要根据服务执行失败的原因来选择不同的策略：&lt;/p>
&lt;ul>
&lt;li>因业务因素导致失败，需要停止重试。&lt;/li>
&lt;li>罕见的异常，如网络中断，传输过程中数据丢失，应该立即重试。&lt;/li>
&lt;li>如果是因为系统繁忙，此时需要等待一段时间再重试。&lt;/li>
&lt;/ul>
&lt;h3 id="23-不足">2.3 不足&lt;/h3>
&lt;p>在补偿模式中有一个明显的缺陷是隔离性，从第一个服务开始一直到补偿完成，不一致性是对其他服务可见的。另外补偿模式过分依赖协调服务的健壮性，如果协调服务异常，则没办法达到一致性。&lt;/p>
&lt;h2 id="3-tcc-模式">3 TCC 模式&lt;/h2>
&lt;p>TCC，是 Try，Confirm 和 Cancel 的缩写。一个完整的 TCC 业务一般是由一个主业务和若干个从业务组成。&lt;/p>
&lt;ul>
&lt;li>Try
&lt;ul>
&lt;li>完成所有业务检查&lt;/li>
&lt;li>预留必须的业务资源&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Confirm
&lt;ul>
&lt;li>真正执行业务&lt;/li>
&lt;li>不做任何业务检查&lt;/li>
&lt;li>只使用 Try 阶段预留的业务资源&lt;/li>
&lt;li>满足幂等性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cancel
&lt;ul>
&lt;li>释放 Try 阶段预留的业务资源&lt;/li>
&lt;li>满足幂等性&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="31-实现过程">3.1 实现过程&lt;/h3>
&lt;p>整个 TCC 业务分成两个阶段完成：&lt;/p>
&lt;p>第一阶段：主业务服务分别调用所有从业务的 try 操作，并在活动管理器中登记所有从业务服务。当所有从业务服务的 try 操作都调用成功或者某个从业务服务的 try 操作失败，进入第二阶段。&lt;/p>
&lt;p>第二阶段：活动管理器根据第一阶段的执行结果来执行 Confirm 或 Cancel 操作。如果第一阶段所有的 try 操作是成功的，则调用所有从业务的 Confirm 操作，否则都调用 Cancel 操作。&lt;/p>
&lt;p>TCC 模式不再需要记录详细的业务流水，在一定程度上弥补了补偿模式的缺陷，在 TCC 模式中，直到明确的 Confirm 动作，所有的业务操作都是隔离的。而且还可以通过指定 try 的超时时间，主动的 Cancel 预留的资源，从而实现了自治。&lt;/p>
&lt;h3 id="32-不足">3.2 不足&lt;/h3>
&lt;p>TCC 模式不能百分百保证一致性，如果某服务提交了 Confirm 成功，但是由于网络故障，导致主服务收到的失败，那么就会出现不一致性，这被称为 heuristic exception。因此为保证成功率，都需要支持重试。&lt;/p>
&lt;p>heuristic exception 是不可杜绝的，但是通过设置合理的超时时间、重试频率以及监控，可以使此异常的可能性降到很低，另外如果出现了此异常，还可通过人工手段补救。&lt;/p></description></item><item><title>Reactive 微服务</title><link>https://example.com/p/reactive-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 24 Mar 2018 17:57:58 +0000</pubDate><guid>https://example.com/p/reactive-%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>&lt;h1 id="reactive-微服务">Reactive 微服务&lt;/h1>
&lt;p>分布式系统构建起来很困难，因为它们容易出问题，运行缓慢，并且被 CAP 和 FLP 理论所限制。换句话说，它们的构建和运维都特别复杂。为了解决这个问题，reactive 便出现了。&lt;/p>
&lt;p>Reactive 编程：一种开发模型，其专注于数据流向、对变化的反馈，以及传播他们。&lt;/p>
&lt;p>在 reactive 编程中，刺激信号是数据的转移，叫做 streams。其实很像生产者——消费者模式，消费者对值进行订阅并响应。&lt;/p>
&lt;p>Reactive 系统：一种架构风格，其基于异步消息来构建响应式的分布式系统。&lt;/p>
&lt;p>reactive 系统使用了消息驱动的方法。所有的构建通过异步消息的发送和接收来交互。消息投递的逻辑由底层的实现决定。发送者不会阻塞着等待回复，它们可能会稍后才接收到回复。&lt;/p>
&lt;p>reactive 系统会有两个重要的特征：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>伸缩性——可以横向伸缩&lt;/p>
&lt;p>伸缩性来自消息传递的解耦。消息被发送到一个地址之后，可以被一组消费者按照一种负载均衡方法消费。当 reactive 系统遇到负载高峰时，它可以创造出新的消费者，并在此之后销毁它们。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢复性——可以处理错误并且恢复&lt;/p>
&lt;p>首先，这种消息交互模式允许组件在其本地处理错误，组件不需要等待消息，因此当一个组件发生错误时，其他组件仍然会正常工作。其次，当一个处理消息的组件发生错误后，消息可以可以传递给在相同地址注册的其他组件。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>reactive 微服务系统是由 reactive 微服务组成的。这些微服务有下面四个特征：&lt;/p>
&lt;ul>
&lt;li>自治性&lt;/li>
&lt;li>异步性&lt;/li>
&lt;li>恢复性&lt;/li>
&lt;li>伸缩性&lt;/li>
&lt;/ul>
&lt;p>Reactive 微服务是可自治的。他们可以根据周围的服务是否可用来调整自己的行为。自治性往往伴随着孤立性；Reactive 微服务可以在本地处理错误、独立地完成任务，并在必要时和其他服务合作。它们使用异步消息传递的机制和其他服务沟通；它们也会接收消息并且对其作出回应。&lt;/p>
&lt;p>得益于异步消息机制，reactive 微服务可以处理错误并根据情况调整自己的行为。错误不会被扩散，而是在靠近错误源头的地方被处理掉。当一个微服务挂掉之后，它的消费者微服务要能够处理错误并避免扩散。这一孤立原则是避免错误逐层上浮而毁掉整个系统的关键。可恢复性不只是关于处理错误，它还涉及到自愈性；一个 reactive 微服务应该能够从错误中恢复并且对错误进行补救。&lt;/p>
&lt;p>最后，reactive 微服务必须是可伸缩的，这样系统才可以根据负载情况来调整节点数量。这一特性意味着将会有一系列的限制，比如不能有在内存中的状态，要能够在必要时同步状态信息，或者要能够将消息路由到状态信息相同的节点。&lt;/p>
&lt;h2 id="vertx">Vert.x&lt;/h2>
&lt;p>Vert.x 是一个用于构建 reactive 和分布式系统的工具箱，其使用了异步非阻塞编程模型。当使用 Vert.x 构建微服务的时候，微服务会自然地带上一个核心特征：所有事情都是异步的。&lt;/p>
&lt;p>传统编程模式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">int res = compute(1, 2);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这段代码中，是在等待 compute 函数计算出来结果之后再进行剩下的操作。而在异步非阻塞的编程模式中，将会创建一个 handler：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">compute(1, 2, res -&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // called with the result
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上述代码中，compute 函数不再返回一个结果，而是传一个 handler，当结果准备好时调用就可以了。得益于这种开发模型，可以使用很少的线程去处理高并发工作。在 vert.x 中，到处都可以看到这种形式的代码，比如创建 http 服务器时：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">vertx.createHttpServer()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .requestHandler(request -&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> request.response().end(&amp;#34;hello vert.x&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .listen(8080);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个例子中，我们让一个 requestHandler 接收 HTTP 请求(事件)并且返回&amp;quot;hello vert.x&amp;quot;。Handler 是一个函数，当事件发生时，它会被调用。在我们的例子中，handler 代码会在每次请求进来时被调用执行。要注意的是，Handler 并不会返回一个结果，但是它可以提供一个结果；这个结果是怎样被提供的，这个要看是哪种交互行为。在上面的代码段中，它只是向一个 HTTP response 写入了结果。这个 Handler 后面跟了一个方法令其监听 8080 端口。调用这个 HTTP 服务它会返回一个简单的 response。&lt;/p>
&lt;h3 id="event-loop">event loop&lt;/h3>
&lt;p>绝大多数情况，Vert.x 会用一个叫做 event loop 的线程来调用所有的 handler。&lt;/p>
&lt;p>&lt;img src="https://upload-images.jianshu.io/upload_images/3153856-e1219f95986959b0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"
loading="lazy"
>&lt;/p>
&lt;p>基于消息循环的线程模型有一个很大的优点：它简化了并发。因为只有一个线程存在，因此永远都只被一个线程调用而不存在并发的情况。但是同样也有一个限制：&lt;/p>
&lt;blockquote>
&lt;p>不要阻塞消息循环&lt;/p>
&lt;/blockquote>
&lt;p>因为没有阻塞，一个消息循环线程可以短时间内分发巨量的事件，这个模式就叫做 reactor 模式。&lt;/p>
&lt;h3 id="verticles">verticles&lt;/h3>
&lt;p>Verticles 是被 Vert.x 部署和运行的代码块。一个微服务的应用，是由运行在同一个 Vert.x 实例上的若干 verticle 组成的。一个 verticle 通常会创建服务器或客户端、注册一组 Handler，以及封装一部分系统的业务处理逻辑。&lt;/p>
&lt;h4 id="标准的-verticle">标准的 verticle&lt;/h4>
&lt;p>标准的 verticle 会在 Vert.x 的消息循环中被执行，并且永远不会阻塞。Vert.x 保证了每一个 verticle 都会只被同一个线程执行而不会有并发发生，从而避免同步工作。&lt;/p>
&lt;h4 id="worker-verticle">Worker Verticle&lt;/h4>
&lt;p>和标准的 verticle 不同，worker verticle 不是在消息循环中执行的，这就意味着他们可以执行阻塞代码。但是，这会限制你的可扩展性。&lt;/p>
&lt;p>Verticle 可以访问 vertx 成员变量(是由 AbstractVerticle 类提供的)来创建服务器和客户端，以及和其他的 verticle 交互。Verticle 还可以部署其他的 verticle，对它们进行配置，并设置创建实例的数量。这些实例会和不同的消息循环线程绑定，Vert.x 通过这些实例来均衡负载。&lt;/p>
&lt;h3 id="从-callbacks-到-observables">从 Callbacks 到 Observables&lt;/h3>
&lt;p>我们可以发现，Vert.x 开发模式使用回调方法。在组织管理多个异步动作时，这种基于回调的开发模式容易产生复杂的代码，陷入 callback hell。&lt;/p>
&lt;p>Vert.x 提供了解决这个开发难题的答案——RxJava API。&lt;/p></description></item><item><title>Guice 快速入门</title><link>https://example.com/p/guice-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 24 Mar 2018 17:57:15 +0000</pubDate><guid>https://example.com/p/guice-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>&lt;h1 id="guice-快速入门">Guice 快速入门&lt;/h1>
&lt;p>接手的新项目主要是使用 kotlin+vert.x 来写的，使用 gradle 构建，依赖注入框架使用了 guice。这段时间都是在熟悉代码的过程，恶补一些知识。&lt;/p>
&lt;p>guice 是谷歌推出的一个轻量级的依赖注入框架，当然 spring 也可以实现依赖注入，只是 spring 太庞大了。&lt;/p>
&lt;h2 id="1-基本使用">1 基本使用&lt;/h2>
&lt;h3 id="引入依赖">引入依赖&lt;/h3>
&lt;p>使用 gradle 或者 maven，引入 guice。&lt;/p>
&lt;p>maven:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">&amp;lt;dependency&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;groupId&amp;gt;com.google.inject&amp;lt;/groupId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;artifactId&amp;gt;guice&amp;lt;/artifactId&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;version&amp;gt;4.1.0&amp;lt;/version&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/dependency&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Gradle:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">compile &amp;#34;com.google.inject:guice:4.1.0&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="项目骨架">项目骨架&lt;/h3>
&lt;p>首先需要一个业务接口，包含一个方法来执行业务逻辑，它的实现非常简单：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface UserService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void process();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class UserServiceImpl implements UserService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void process() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;我需要做一些业务逻辑&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后写一个日志的接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface LogService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void log(String msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class LogServiceImpl implements LogService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void log(String msg) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;------LOG: &amp;#34; + msg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后是一个系统接口和相应的实现，在实现中使用了业务接口和日志接口处理业务逻辑和打印日志信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public interface Application {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void work();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.google.inject.Inject;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MyApp implements Application {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private UserService userService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private LogService logService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Inject
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public MyApp(UserService userService, LogService logService) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.userService = userService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.logService = logService;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void work() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> userService.process();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> logService.log(&amp;#34;程序正常运行&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="配置依赖注入">配置依赖注入&lt;/h3>
&lt;p>guice 是使用 java 代码来配置依赖。继承 AbstractModule 类，并重写其中的 config 方法。在 config 方法中，调用 AbstractModule 类中提供的方法来配置依赖关系。最常用的是 bind(接口).to(实现类)。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.google.inject.AbstractModule;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MyAppModule extends AbstractModule {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected void configure() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(LogService.class).to(LogServiceImpl.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(UserService.class).to(UserServiceImpl.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(Application.class).to(MyApp.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="单元测试">单元测试&lt;/h3>
&lt;p>guice 配置完之后，我们需要调用 Guice.createInjector 方法传入配置类来创建一个注入器，然后使用注入器中的 getInstance 方法获取目标类。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">package com.learning.guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.google.inject.Guice;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import com.google.inject.Injector;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.junit.BeforeClass;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">import org.junit.Test;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class MyAppTest {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private static Injector injector;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @BeforeClass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public static void init(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> injector= Guice.createInjector(new MyAppModule());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void testMyApp(){
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Application application=injector.getInstance(Application.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> application.work();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>程序执行结果是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/java -ea -...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">我需要做一些业务逻辑
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------LOG: 程序正常运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Process finished with exit code 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-基本概念">2 基本概念&lt;/h2>
&lt;h3 id="21-bingdings-绑定">2.1 Bingdings 绑定&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>链式绑定&lt;/p>
&lt;p>在绑定依赖的时候不仅可以将父类和子类绑定，还可以将子类和子类的子类进行绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class BillingModule extends AbstractModule {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected void configure() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(TransactionLog.class).to(DatabaseTransactionLog.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(DatabaseTransactionLog.class).to(MySqlDatabaseTransactionLog.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这种情况下，injector 会把所有 TransactionLog 替换为 MySqlDatabaseTransactionLog。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注解绑定&lt;/p>
&lt;p>当我们需要将多个同一类型的对象注入不同对象的时候，就需要使用注解区分这些依赖了。最简单的办法就是使用@Named 注解进行区分。&lt;/p>
&lt;p>首先需要在要注入的地方添加@Named 注解。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class RealBillingService implements BillingService {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Inject
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public RealBillingService(@Named(&amp;#34;Checkout&amp;#34;) CreditCardProcessor processor,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TransactionLog transactionLog) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在绑定中添加 annotatedWith 方法指定@Named 中指定的名称。由于编译器无法检查字符串，所以 Guice 官方建议我们保守地使用这种方式。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bind(CreditCardProcessor.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .annotatedWith(Names.named(&amp;#34;Checkout&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .to(CheckoutCreditCardProcessor.class);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>实例绑定&lt;/p>
&lt;p>有时候需要直接注入一个对象的实例，而不是从依赖关系中解析。如果我们要注入基本类型的话只能这么做。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bind(String.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .annotatedWith(Names.named(&amp;#34;JDBC URL&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .toInstance(&amp;#34;jdbc:mysql://localhost/pizza&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bind(Integer.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .annotatedWith(Names.named(&amp;#34;login timeout seconds&amp;#34;))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .toInstance(10);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>@Privides 方法&lt;/p>
&lt;p>当一个对象很复杂，无法使用简单的构造器来生成的时候，我们可以使用@Provides 方法，也就是在配置类中生成一个注解了@Provides 的方法。在该方法中我们可以编写任意代码来构造对象。&lt;/p>
&lt;p>@Provides 方法也可以应用@Named 和自定义注解，还可以注入其他依赖，Guice 会在调用方法之前注入需要的对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class BillingModule extends AbstractModule {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected void configure() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Provides
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TransactionLog provideTransactionLog() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DatabaseTransactionLog transactionLog = new DatabaseTransactionLog();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> transactionLog.setJdbcUrl(&amp;#34;jdbc:mysql://localhost/pizza&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> transactionLog.setThreadPoolSize(30);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return transactionLog;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Provider 绑定&lt;/p>
&lt;p>如果项目中存在多个比较复杂的对象需要构建，使用@Provide 方法会让配置类变得比较乱。我们可以使用 Guice 提供的 Provider 接口将复杂的代码放到单独的类中。办法很简单，实现 Provider&lt;!-- raw HTML omitted -->接口的 get 方法即可。在 Provider 类中，我们可以使用@Inject 任意注入对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class DatabaseTransactionLogProvider implements Provider&amp;lt;TransactionLog&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> private final Connection connection;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Inject
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public DatabaseTransactionLogProvider(Connection connection) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> this.connection = connection;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public TransactionLog get() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DatabaseTransactionLog transactionLog = new DatabaseTransactionLog();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> transactionLog.setConnection(connection);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return transactionLog;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在 config 方法中，调用.toProvider 方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class BillingModule extends AbstractModule {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected void configure() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(TransactionLog.class)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .toProvider(DatabaseTransactionLogProvider.class);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>无目标绑定&lt;/p>
&lt;p>无目标绑定没有 to 子句&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构造器绑定&lt;/p>
&lt;p>某些场景下，你能需要把某个类型绑定到任意一个构造函数上。以下情况会有这种需求：1、 @Inject 注解无法被应用到目标构造函数；2、目标类是一个第三方类；3、目标类有多个构造函数参与 DI。&lt;/p>
&lt;p>为了解决这个问题，guice 提供了 toConstructor()绑定 ，它需要你指定要使用的确切的某个目标构造函数，并处理 &amp;ldquo;constructor annot be found&amp;rdquo; 异常：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">public class BillingModule extends AbstractModule {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> protected void configure() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> try {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bind(TransactionLog.class).toConstructor(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> DatabaseTransactionLog.class.getConstructor(DatabaseConnection.class));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> } catch (NoSuchMethodException e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addError(e);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>内置绑定&lt;/p>
&lt;p>除了显示绑定和即时绑定 just-in-time bindings，剩下的绑定都属于 injector 的内置绑定。这些绑定只能由 injector 自己创建，不允许外部调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>即时绑定&lt;/p>
&lt;p>当 injector 需要某一个类型的实例的时候，它需要获取一个绑定。在 Module 类中的绑定叫做显式绑定，只要他们可用，injector 就会在任何时候使用它们。如果需要某一类型的实例，但是又没有显式绑定，那么 injector 将会试图创建一个即时绑定（Just-in-time Bindings），也被称为 JIT 绑定 或 隐式绑定。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="22-作用域">2.2 作用域&lt;/h3>
&lt;p>默认情况下 Guice 会在每次注入的时候创建一个新对象。如果希望创建一个单例依赖的话，可以在实现类上应用@Singleton 注解。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Singleton
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public class InMemoryTransactionLog implements TransactionLog {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* everything here should be threadsafe! */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者也可以在配置类中指定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">bind(TransactionLog.class).to(InMemoryTransactionLog.class).in(Singleton.class);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>@Provides&lt;/code>方法中也可以指定单例。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">@Provides @Singleton
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> TransactionLog provideTransactionLog() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果一个类型上存在多个冲突的作用域，Guice 会使用 bind()方法中指定的作用域。如果不想使用注解的作用域，可以在 bind()方法中将对象绑定为 Scopes.NO_SCOPE。&lt;/p>
&lt;p>Guice 和它的扩展提供了很多作用域，和 spring 一样，有单例 Singleton，Session 作用域 SessionScoped，Request 请求作用域 RequestScoped 等等。我们可以根据需要选择合适的作用域。&lt;/p>
&lt;h3 id="23-注入">2.3 注入&lt;/h3>
&lt;p>guice 的注入和 spring 类似，而且还做了一些扩展。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>构造器注入&lt;/p>
&lt;p>使用 @Inject 注解标记类的构造方法，这个构造方法需要接受类依赖作为参数。大多数构造子将会把接收到的参数分派给内部成员变量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>方法注入&lt;/p>
&lt;p>Guice 可以向标注了 @Inject 的方法中注入依赖。依赖项以参数的形式传给方法，Guice 会在调用注入方法前完成依赖项的构建。注入方法可以有任意数量的参数，并且方法名对注入操作不会有任何影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字段注入&lt;/p>
&lt;p>使用 @Inject 注解标记字段。这是最简洁的注入方式。&lt;/p>
&lt;p>注意：不能给 final 字段加@Inject 注解。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可选注入&lt;/p>
&lt;p>有的时候，可能需要一个依赖项存在则进行注入，不存在则不注入。此时可以使用方法注入或字段注入来做这件事，当依赖项不可用的时候 Guice 就会忽略这些注入。如果你需要配置可选注入的话，使用 @Inject(optional = true) 注解就可以了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按需注入&lt;/p>
&lt;p>方法注入和字段注入可以可以用来初始化现有实例，你可以使用 Injector.injectMembers。&lt;/p>
&lt;p>这个不常用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>静态注入&lt;/p>
&lt;p>不建议使用静态注入。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动注入&lt;/p>
&lt;p>Guice 会对以下情形做自动注入：&lt;/p>
&lt;ul>
&lt;li>在绑定语句里，通过 toInstance() 注入实例。&lt;/li>
&lt;li>在绑定语句里，通过 toProvider() 注入 Provider 实例。这些对象会在注入器创建的时候被创建并注入容器。如果它们需要满足其他启动注入，Guice 会在它们被使用前将他们注入进去。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="24-aop">2.4 AOP&lt;/h3>
&lt;p>guice 的 aop 功能较弱，时间原因还没研究透，后续继续写。&lt;/p></description></item><item><title>kotlin 快速入门</title><link>https://example.com/p/kotlin-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 24 Mar 2018 17:56:45 +0000</pubDate><guid>https://example.com/p/kotlin-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>&lt;p>快速浏览一下 Kotlin 的语法。&lt;/p>
&lt;h1 id="基本语法">基本语法&lt;/h1>
&lt;h3 id="包定义和引用">包定义和引用&lt;/h3>
&lt;p>在源文件头部：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">package&lt;/span> &lt;span class="nn">my.demo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.util.*&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法定义">方法定义&lt;/h3>
&lt;ul>
&lt;li>带有方法体，并且返回确定类型数据的定义方式，例如接受 &lt;code>Int&lt;/code> 类型的参数并返回 &lt;code>Int&lt;/code> 类型的值：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>带有方法体，返回推断类型数据的定义方式，例如：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>返回无意义类型的定义方式：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">printSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Unit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sum of &lt;/span>&lt;span class="si">$a&lt;/span>&lt;span class="s2"> and &lt;/span>&lt;span class="si">$b&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="si">${a + b}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者省略 &lt;code>Unit&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">printSum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sum of &lt;/span>&lt;span class="si">$a&lt;/span>&lt;span class="s2"> and &lt;/span>&lt;span class="si">$b&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="si">${a + b}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变量定义">变量定义&lt;/h3>
&lt;ul>
&lt;li>只赋值一次（只读）本地变量，&lt;strong>val&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// 指定初始值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="c1">// 类型自推断为 `Int`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">c&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span> &lt;span class="c1">// 当不指定初始值时需要指定类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="c1">// 延迟赋值
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>可变变量， &lt;strong>var&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="c1">// 类型自推断为 `Int`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>顶层变量&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">PI&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">3.14&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">incrementX&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="注释">注释&lt;/h3>
&lt;p>与 Java 和 JavaScript 一样，Kotlin 支持行尾注释和块注释：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 行尾注释
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/* 多行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 块注释 */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>与 Java 不同，Kotlin 中的块注释可以嵌套。&lt;/p>
&lt;h3 id="string-模板">string 模板&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">s1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;a is &lt;/span>&lt;span class="si">$a&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">s2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${s1.replace(&amp;#34;is&amp;#34;, &amp;#34;was&amp;#34;)}&lt;/span>&lt;span class="s2">, but now is &lt;/span>&lt;span class="si">$a&lt;/span>&lt;span class="s2">}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="条件表达式">条件表达式&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">maxOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 &lt;code>if&lt;/code> 做为表达式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">maxOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="可能为-null-的值检查是否为-null">可能为 null 的值，检查是否为 null&lt;/h3>
&lt;p>如果值可能为 &lt;code>null&lt;/code> 时，必须显示的指出。
例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用上面定义的方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">printProduct&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arg2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">either&lt;/span> &lt;span class="err">&amp;#39;$&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="err">&amp;#39;$&lt;/span>&lt;span class="n">arg2&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">not&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Wrong number format in arg1: &amp;#39;&lt;/span>&lt;span class="si">$arg1&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Wrong number format in arg2: &amp;#39;&lt;/span>&lt;span class="si">$arg2&lt;/span>&lt;span class="s2">&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="类型检查和自动转换">类型检查和自动转换&lt;/h3>
&lt;p>&lt;code>is&lt;/code> 操作符用于检查某个实例是否为某种类型。如果一个不可变本地变量或属性已经做过类型检查，那么可以不必显示的进行类型转换就可以使用对应类型的属性或方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getStringLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="c1">// 在这个类型检查分支中，`obj` 自动转换为 `String`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">null&lt;/span> &lt;span class="c1">// 在类型检查分支外，`obj` 仍然为 `Any`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getStringLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="o">!is&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="c1">// 在这个分支中，`obj` 自动转换为 `String`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再或者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">getStringLength&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 在 `&amp;amp;&amp;amp;` 操作符的右侧，`obj` 自动转换为 `String`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="for-循环">for 循环&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">items&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;kiwi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">items&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;kiwi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;item at &lt;/span>&lt;span class="si">$index&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="si">${items[index]}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="while-循环">while 循环&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">items&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;kiwi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">index&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;item at &lt;/span>&lt;span class="si">$index&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="si">${items[index]}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">index&lt;/span> &lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="when-表达式">when 表达式&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">describe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;one&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Greeting&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">is&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Long&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">!is&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Not a String&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Unknown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="区间">区间&lt;/h3>
&lt;ul>
&lt;li>使用 &lt;code>in&lt;/code> 操作符检查数字是否在区间内：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">9&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">+&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fits in range&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>检查数字是否在范围外：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">list&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(-&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="o">!in&lt;/span> &lt;span class="m">0.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lastIndex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;-1 is out of range&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span> &lt;span class="o">!in&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">indices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;list size is out of valid list indices range too&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>区间遍历&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="集合">集合&lt;/h3>
&lt;ul>
&lt;li>遍历集合：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">items&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用 &lt;code>in&lt;/code> 操作符判断集合中是否包含某个对象：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">when&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;orange&amp;#34;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">items&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;juicy&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">items&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple is fine too&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用 lambda 表达式过滤和 map 集合：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">fruits&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;avocado&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;kiwi&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fruits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">startWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">sortedBy&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">upperCase&lt;/span>&lt;span class="p">()}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="创建基本类和实例">创建基本类和实例&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">rectangle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Rectangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">5.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">2.0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 不需要使用 &amp;#39;new&amp;#39; 关键词
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">triangle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Triangle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">4.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5.0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Area of rectangle is &lt;/span>&lt;span class="si">${rectangle.calculateArea()}&lt;/span>&lt;span class="s2">, its perimeter is &lt;/span>&lt;span class="si">${rectangle.perimeter}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Area of triangle is &lt;/span>&lt;span class="si">${triangle.calculateArea()}&lt;/span>&lt;span class="s2">, its perimeter is &lt;/span>&lt;span class="si">${triangle.perimeter}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">sides&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">perimeter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">sides&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">abstract&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">calculateArea&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">RectangleProperties&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">isSquare&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Boolean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Rectangle&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">length&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)),&lt;/span> &lt;span class="n">RectangleProperties&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">isSquare&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">calculateArea&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Double&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">length&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Triangle&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">sideA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">sideB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">sideC&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Shape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sideA&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sideB&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sideC&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="n">fyb&lt;/span> &lt;span class="n">calculateArre&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">Double&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">s&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">perimeter&lt;/span> &lt;span class="p">/&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sqrt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">sideA&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">sideB&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="n">sideC&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>以上引自：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://link.jianshu.com?t=http://kotlinlang.org/docs/reference/basic-syntax.html" target="_blank" rel="noopener"
>http://kotlinlang.org/docs/reference/basic-syntax.html&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>RxJava2 快速入门</title><link>https://example.com/p/rxjava2-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 24 Mar 2018 17:55:56 +0000</pubDate><guid>https://example.com/p/rxjava2-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>&lt;h1 id="rxjava2-快速入门">RxJava2 快速入门&lt;/h1>
&lt;h2 id="引入依赖">引入依赖&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">compile &amp;#39;io.reactivex.rxjava2:rxjava:2.0.1&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="写法">写法&lt;/h2>
&lt;h3 id="简单版本">简单版本&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> private static void helloSimple() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Consumer&amp;lt;String&amp;gt; consumer = new Consumer&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void accept(String s) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;consumer accept is &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable.just(&amp;#34;hello world&amp;#34;).subscribe(consumer);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="复杂版本">复杂版本&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> private static void helloComplex() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observer&amp;lt;String&amp;gt; observer = new Observer&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onSubscribe(Disposable d) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onSubscribe: &amp;#34; + d);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onNext(String s) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onNext: &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onError(Throwable e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onError: &amp;#34; + e);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onComplete() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onComplete: &amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable.just(&amp;#34;Hello world&amp;#34;).subscribe(observer);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="变态版本">变态版本&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> private static void helloPlus() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observer&amp;lt;String&amp;gt; observer = new Observer&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onSubscribe(Disposable d) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onSubscribe: &amp;#34; + d);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onNext(String s) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onNext: &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onError(Throwable e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onError: &amp;#34; + e);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onComplete() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onComplete: &amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable&amp;lt;String&amp;gt; observable = Observable.create(new ObservableOnSubscribe&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void subscribe(ObservableEmitter&amp;lt;String&amp;gt; e) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e.onNext(&amp;#34;hello world&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> e.onComplete();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> observable.subscribe(observer);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常用操作符">常用操作符&lt;/h2>
&lt;h3 id="filter">filter&lt;/h3>
&lt;p>你早上去吃早餐，师傅是被观察者，说咱这有&amp;quot;包子&amp;quot;, &amp;ldquo;馒头&amp;rdquo;, &amp;ldquo;花生&amp;rdquo;, &amp;ldquo;牛奶&amp;rdquo;, &amp;ldquo;饺子&amp;rdquo;, &amp;ldquo;春卷&amp;rdquo;, &amp;ldquo;油条&amp;rdquo;，你仔细想了想，发现你是最喜欢饺子的，所以把其他的都排除掉，
于是你就吃到了饺子。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> private static void helloFilter() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Consumer&amp;lt;String&amp;gt; consumer = new Consumer&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void accept(String s) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;accept: &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable.just(&amp;#34;包子&amp;#34;, &amp;#34;馒头&amp;#34;, &amp;#34;花生&amp;#34;, &amp;#34;牛奶&amp;#34;, &amp;#34;饺子&amp;#34;, &amp;#34;春卷&amp;#34;, &amp;#34;油条&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .filter(new Predicate&amp;lt;String&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public boolean test(String s) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;test: &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return s.equals(&amp;#34;饺子&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .subscribe(consumer);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="map">Map&lt;/h3>
&lt;p>map 操作符能够完成数据类型的转换。&lt;/p>
&lt;p>将 String 类型转换为 Integer 类型。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl"> private static void helloMap() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> // 观察者观察Integer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observer&amp;lt;Integer&amp;gt; observer = new Observer&amp;lt;Integer&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onSubscribe(Disposable d) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onSubscribe: &amp;#34; + d);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onNext(Integer s) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onNext: &amp;#34; + s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onError(Throwable e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onError: &amp;#34; + e);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onComplete() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> System.out.println(&amp;#34;onComplete: &amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> };
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable.just(&amp;#34;100&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .map(new Function&amp;lt;String, Integer&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public Integer apply(String s) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Integer.valueOf(s);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .subscribe(observer);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="flatmap">FlatMap&lt;/h3>
&lt;p>flatmap 能够链式地完成数据类型的转换和加工。&lt;/p>
&lt;p>遍历一个学校所有班级所有组的所有学生&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">private void flatmapClassToGroupToStudent() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Observable.fromIterable(new School().getClasses())
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //输入是Class类型，输出是ObservableSource&amp;lt;Group&amp;gt;类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .flatMap(new Function&amp;lt;Class, ObservableSource&amp;lt;Group&amp;gt;&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public ObservableSource&amp;lt;Group&amp;gt; apply(Class aClass) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Log.d(TAG, &amp;#34;apply: &amp;#34; + aClass.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Observable.fromIterable(aClass.getGroups());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> //输入类型是Group，输出类型是ObservableSource&amp;lt;Student&amp;gt;类型
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .flatMap(new Function&amp;lt;Group, ObservableSource&amp;lt;Student&amp;gt;&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public ObservableSource&amp;lt;Student&amp;gt; apply(Group group) throws Exception {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Log.d(TAG, &amp;#34;apply: &amp;#34; + group.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return Observable.fromIterable(group.getStudents());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .subscribe(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> new Observer&amp;lt;Student&amp;gt;() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onSubscribe(Disposable d) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Log.d(TAG, &amp;#34;onSubscribe: &amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onNext(Student value) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Log.d(TAG, &amp;#34;onNext: &amp;#34; + value.toString());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onError(Throwable e) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @Override
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public void onComplete() {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="线程调度">线程调度&lt;/h1>
&lt;p>关于 RxJava 的线程调度，初学者只需要掌握两个 api 就够够的啦。&lt;/p>
&lt;h2 id="subscribeon">subscribeOn&lt;/h2>
&lt;p>指定 Observable 在一个指定的线程调度器上创建。只能指定一次，如果指定多次则以第一次为准&lt;/p>
&lt;h2 id="observeon">observeOn&lt;/h2>
&lt;p>指定在事件传递，转换，加工和最终被观察者接受发生在哪一个线程调度器。可指定多次，每次指定完都在下一步生效。&lt;/p>
&lt;h2 id="常用线程调度器类型">常用线程调度器类型&lt;/h2>
&lt;ul>
&lt;li>Schedulers.single() 单线程调度器，线程可复用&lt;/li>
&lt;li>Schedulers.newThread() 为每个任务创建新的线程&lt;/li>
&lt;li>Schedulers.io() 处理 io 密集型任务，内部是线程池实现，可自动根据需求增长&lt;/li>
&lt;li>Schedulers.computation() 处理计算任务，如事件循环和回调任务&lt;/li>
&lt;li>AndroidSchedulers.mainThread() Android 主线程调度器&lt;/li>
&lt;/ul></description></item><item><title>领域实体类</title><link>https://example.com/p/%E9%A2%86%E5%9F%9F%E5%AE%9E%E4%BD%93%E7%B1%BB/</link><pubDate>Sat, 24 Mar 2018 17:53:42 +0000</pubDate><guid>https://example.com/p/%E9%A2%86%E5%9F%9F%E5%AE%9E%E4%BD%93%E7%B1%BB/</guid><description>&lt;p>在看项目代码的时候，发现了 entity 包和 dto 包，里面都是只保存数据的类，仔细查了资料，才发现 java 对于只保存数据的类有好几个分类。&lt;/p>
&lt;ul>
&lt;li>pojo 类：这是普通的 java 类，具有一部分的 get 和 set 方法。&lt;/li>
&lt;li>dto 类：data transfer object 数据传输对象类，泛指用于展示层与服务层之间传输的对象。&lt;/li>
&lt;li>vo 类：vo 有两种说法，一种是 view object，一种是 value object。&lt;/li>
&lt;li>po 类：persisent object 持久对象。和 pojo 类一样，也是只有 get set 方法，但是这种类一般是用于持久层。&lt;/li>
&lt;li>bo 类：business object，业务对象，表示应用程序领域内事物的所有实体类。&lt;/li>
&lt;li>do 类：domain object，领域对象，就是从现实中抽象出来的有形或者无形的业务实体。&lt;/li>
&lt;/ul>
&lt;p>根据我的经验来看，大部分人都没有分那么清楚，一般是把数据类放在 domain 包，或者 entity 包里。再细分一下的话，可以把 dto 类单独提取到一个包里。&lt;/p></description></item><item><title>docker</title><link>https://example.com/p/docker/</link><pubDate>Sat, 24 Mar 2018 17:42:58 +0000</pubDate><guid>https://example.com/p/docker/</guid><description>&lt;h1 id="docker-常用命令">docker 常用命令&lt;/h1>
&lt;h2 id="docker">docker&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>获取镜像&lt;/p>
&lt;p>docker pull&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建并启动&lt;/p>
&lt;p>docker run&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出镜像&lt;/p>
&lt;p>docker image ls&lt;/p>
&lt;p>docker images&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除虚悬镜像&lt;/p>
&lt;p>docker image prune&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除本地镜像&lt;/p>
&lt;p>docker iamge rm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查看应用信息&lt;/p>
&lt;p>docker logs&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="dockerfile">dockerfile&lt;/h2>
&lt;h3 id="一般步骤">一般步骤&lt;/h3>
&lt;ul>
&lt;li>在一个目录里，新建一个文件，命名为 Dockerfile&lt;/li>
&lt;li>在 Dockerfile 的目录内，执行 docker build&lt;/li>
&lt;/ul>
&lt;h3 id="常用指令">常用指令&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>FROM 指定基础镜像，且是第一条命令&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RUN 执行命令&lt;/p>
&lt;p>shell 格式&lt;/p>
&lt;p>exec 格式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>COPY 和 ADD 指令是复制文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>CMD 指令和 RUN 类似，容器启动命令&lt;/p>
&lt;p>shell 格式&lt;/p>
&lt;p>exec 格式&lt;/p>
&lt;p>参数列表格式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ENV 设置环境变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EXPOSE 声明对外暴露的端口&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WORKDIR 指定工作目录&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="compose">compose&lt;/h2>
&lt;h3 id="两个重要的概念">两个重要的概念&lt;/h3>
&lt;ul>
&lt;li>service 服务：一个应用的容器，实际上可以包括若干运行相同镜像的实例。&lt;/li>
&lt;li>project 项目：由一组关联的容器组成一个完整业务单元，在 docker-compose.yml 文件中定义。&lt;/li>
&lt;/ul>
&lt;h3 id="一般步骤-1">一般步骤&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在一个项目目录里，新建一个 Dockerfile&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建一个文件 docker-compose.yml&lt;/p>
&lt;p>模板格式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">version: 3.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> web:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> build: .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;5000:5000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> redis:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> images: &amp;#34;redis:alpine&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>docker-compose up 运行项目&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="常用命令">常用命令&lt;/h3>
&lt;ol>
&lt;li>docker-compose build 重新构建项目中的服务容器&lt;/li>
&lt;li>config 验证 compose 文件格式是否正确&lt;/li>
&lt;li>down 停止 up 命令所启动的容器&lt;/li>
&lt;li>images 列出 compose 文件中包含的镜像&lt;/li>
&lt;li>exec 进入指定的容器&lt;/li>
&lt;li>kill 强制停止服务容器&lt;/li>
&lt;li>ps 列出目前所有容器&lt;/li>
&lt;li>rm 删除停止状态的容器&lt;/li>
&lt;li>top 显示所有容器的进程&lt;/li>
&lt;/ol>
&lt;h3 id="compose-模板文件">compose 模板文件&lt;/h3>
&lt;p>每个服务都必须通过 image 指令指定镜像或者 build 指令（需要 dockerfile）来构建生成的镜像。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>build&lt;/p>
&lt;p>指定 dockerfile 所在的文件夹路径，compose 将会利用它来自动构建这个镜像，然后使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>depends_on&lt;/p>
&lt;p>解决容器的依赖和先后启动问题。但是不会等待完成启动之后再启动，而是在他们启动之后就去启动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>environment&lt;/p>
&lt;p>设置环境变量，在这里指定程序或者容器启动时所依赖的环境参数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>expose&lt;/p>
&lt;p>指定暴露的端口，只被连接的服务访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>image&lt;/p>
&lt;p>指定镜像名称，如果本地不存在则去拉取这个镜像。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>labels&lt;/p>
&lt;p>为容器添加 docker 元数据信息，即一些辅助说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ports&lt;/p>
&lt;p>暴露端口信息，宿主端口:容器端口，或者只指定容器端口。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>express</title><link>https://example.com/p/express/</link><pubDate>Sat, 24 Mar 2018 17:41:01 +0000</pubDate><guid>https://example.com/p/express/</guid><description>&lt;h2 id="express-快速入门">Express 快速入门&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">npm init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">npm install --save express
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hello-world">hello world&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var express = require(&amp;#39;express&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var app = express();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Hello World!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.listen(3000, function () {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#39;Example app listening on port 3000!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行命令运行应用程序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">node app.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，在浏览器中输入 &lt;a class="link" href="http://localhost:3000/" target="_blank" rel="noopener"
>http://localhost:3000/&lt;/a> 以查看输出。&lt;/p>
&lt;h2 id="express-程序生成器">express 程序生成器&lt;/h2>
&lt;h3 id="安装-1">安装&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">npm install -g express-generator
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="示例">示例&lt;/h3>
&lt;p>以下语句在当前工作目录中创建名为 &lt;em>myapp&lt;/em> 的 Express 应用程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">express --view=pug myapp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 MacOS 或 Linux 上，采用以下命令运行此应用程序：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">DEBUG=myapp:* npm start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后在浏览器中输入 &lt;code>http://localhost:3000/&lt;/code> 以访问此应用程序。&lt;/p>
&lt;h2 id="路由">路由&lt;/h2>
&lt;h3 id="基本路由">基本路由&lt;/h3>
&lt;p>&lt;em>路由&lt;/em>用于确定应用程序如何响应对特定端点的客户机请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。&lt;/p>
&lt;p>每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。&lt;/p>
&lt;p>路由定义采用以下结构：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.METHOD(PATH, HANDLER)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>app&lt;/code> 是 &lt;code>express&lt;/code> 的实例。&lt;/li>
&lt;li>&lt;code>METHOD&lt;/code> 是 &lt;a class="link" href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" target="_blank" rel="noopener"
>HTTP 请求方法&lt;/a>。&lt;/li>
&lt;li>&lt;code>PATH&lt;/code> 是服务器上的路径。&lt;/li>
&lt;li>&lt;code>HANDLER&lt;/code> 是在路由匹配时执行的函数。&lt;/li>
&lt;/ul>
&lt;p>比如简单的 Hello world：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Hello World!&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="响应方法">响应方法&lt;/h3>
&lt;p>下表中响应对象 (&lt;code>res&lt;/code>) 的方法可以向客户机发送响应，并终止请求/响应循环。如果没有从路由处理程序调用其中任何方法，客户机请求将保持挂起状态。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.download" target="_blank" rel="noopener"
>res.download()&lt;/a>&lt;/td>
&lt;td>提示将要下载文件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.end" target="_blank" rel="noopener"
>res.end()&lt;/a>&lt;/td>
&lt;td>结束响应进程。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.json" target="_blank" rel="noopener"
>res.json()&lt;/a>&lt;/td>
&lt;td>发送 JSON 响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.jsonp" target="_blank" rel="noopener"
>res.jsonp()&lt;/a>&lt;/td>
&lt;td>在 JSONP 的支持下发送 JSON 响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.redirect" target="_blank" rel="noopener"
>res.redirect()&lt;/a>&lt;/td>
&lt;td>重定向请求。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.render" target="_blank" rel="noopener"
>res.render()&lt;/a>&lt;/td>
&lt;td>呈现视图模板。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.send" target="_blank" rel="noopener"
>res.send()&lt;/a>&lt;/td>
&lt;td>发送各种类型的响应。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.sendFile" target="_blank" rel="noopener"
>res.sendFile&lt;/a>&lt;/td>
&lt;td>以八位元流形式发送文件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res.sendStatus" target="_blank" rel="noopener"
>res.sendStatus()&lt;/a>&lt;/td>
&lt;td>设置响应状态码并以响应主体形式发送其字符串表示。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="approute">app.route()&lt;/h3>
&lt;p>可以使用 &lt;code>app.route()&lt;/code> 为路由路径创建可链接的路由处理程序。 因为在单一位置指定路径，所以可以减少冗余和输入错误。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.route(&amp;#39;/book&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .get(function(req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Get a random book&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .post(function(req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Add a book&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> })
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .put(function(req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Update the book&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="expressrouter">express.Router&lt;/h3>
&lt;p>使用 &lt;code>express.Router&lt;/code> 类来创建可安装的模块化路由处理程序。&lt;code>Router&lt;/code> 实例是完整的中间件和路由系统；因此，常常将其称为“微型应用程序”。&lt;/p>
&lt;p>以下示例将路由器创建为模块，在其中装入中间件，定义一些路由，然后安装在主应用程序的路径中。&lt;/p>
&lt;p>在应用程序目录中创建名为 &lt;code>birds.js&lt;/code> 的路由器文件，其中包含以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var express = require(&amp;#39;express&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">var router = express.Router();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// middleware that is specific to this router
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">router.use(function timeLog(req, res, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> console.log(&amp;#39;Time: &amp;#39;, Date.now());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> next();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// define the home page route
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">router.get(&amp;#39;/&amp;#39;, function(req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;Birds home page&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">// define the about route
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">router.get(&amp;#39;/about&amp;#39;, function(req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.send(&amp;#39;About birds&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">module.exports = router;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着，在应用程序中装入路由器模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">var birds = require(&amp;#39;./birds&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">app.use(&amp;#39;/birds&amp;#39;, birds);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此应用程序现在可处理针对 &lt;code>/birds&lt;/code> 和 &lt;code>/birds/about&lt;/code> 的请求，调用特定于此路由的 &lt;code>timeLog&lt;/code> 中间件函数。&lt;/p>
&lt;h2 id="中间件">中间件&lt;/h2>
&lt;p>&lt;em>中间件&lt;/em>函数能够访问&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#req" target="_blank" rel="noopener"
>请求对象&lt;/a> (&lt;code>req&lt;/code>)、&lt;a class="link" href="http://expressjs.com/zh-cn/4x/api.html#res" target="_blank" rel="noopener"
>响应对象&lt;/a> (&lt;code>res&lt;/code>) 以及应用程序的请求/响应循环中的下一个中间件函数。下一个中间件函数通常由名为 &lt;code>next&lt;/code> 的变量来表示。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>next()&lt;/code> 函数不是 Node.js 或 Express API 的一部分，而是传递给中间件函数的第三自变量。&lt;code>next()&lt;/code> 函数可以命名为任何名称，但是按约定，始终命名为“next”。&lt;/p>
&lt;/blockquote>
&lt;p>中间件函数可以执行以下任务：&lt;/p>
&lt;ul>
&lt;li>执行任何代码。&lt;/li>
&lt;li>对请求和响应对象进行更改。&lt;/li>
&lt;li>结束请求/响应循环。&lt;/li>
&lt;li>调用堆栈中的下一个中间件。&lt;/li>
&lt;/ul>
&lt;p>如果当前中间件函数没有结束请求/响应循环，那么它必须调用 &lt;code>next()&lt;/code>，以将控制权传递给下一个中间件函数。否则，请求将保持挂起状态。&lt;/p>
&lt;p>Express 应用程序可以使用以下类型的中间件：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="http://expressjs.com/zh-cn/guide/using-middleware.html#middleware.application" target="_blank" rel="noopener"
>应用层中间件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://expressjs.com/zh-cn/guide/using-middleware.html#middleware.router" target="_blank" rel="noopener"
>路由器层中间件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://expressjs.com/zh-cn/guide/using-middleware.html#middleware.error-handling" target="_blank" rel="noopener"
>错误处理中间件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://expressjs.com/zh-cn/guide/using-middleware.html#middleware.built-in" target="_blank" rel="noopener"
>内置中间件&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="http://expressjs.com/zh-cn/guide/using-middleware.html#middleware.third-party" target="_blank" rel="noopener"
>第三方中间件&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="模板引擎">模板引擎&lt;/h2>
&lt;p>在 Express 可以呈现模板文件之前，必须设置以下应用程序设置：&lt;/p>
&lt;ul>
&lt;li>&lt;code>views&lt;/code>：模板文件所在目录。例如：&lt;code>app.set('views', './views')&lt;/code>&lt;/li>
&lt;li>&lt;code>view engine&lt;/code>：要使用的模板引擎。例如：&lt;code>app.set('view engine', 'pug')&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>然后安装对应的模板引擎 npm 包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">npm install pug --save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在 &lt;code>views&lt;/code> 目录中创建名为 &lt;code>index.pug&lt;/code> 的 Pug 模板文件，其中包含以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">html
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> head
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> title!= title
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> body
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> h1!= message
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>随后创建路由以呈现 &lt;code>index.pug&lt;/code> 文件。如果未设置 &lt;code>view engine&lt;/code> 属性，必须指定 &lt;code>view&lt;/code> 文件的扩展名。否则，可以将其忽略。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-plain" data-lang="plain">&lt;span class="line">&lt;span class="cl">app.get(&amp;#39;/&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> res.render(&amp;#39;index&amp;#39;, { title: &amp;#39;Hey&amp;#39;, message: &amp;#39;Hello there!&amp;#39;});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>向主页发出请求时，&lt;code>index.pug&lt;/code> 文件将呈现为 HTML。&lt;/p></description></item><item><title>碎碎念</title><link>https://example.com/p/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link><pubDate>Sat, 24 Mar 2018 15:55:58 +0000</pubDate><guid>https://example.com/p/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid><description>&lt;p>一直没有机会写 2017 的年终总结，想到去年写的新的一年的计划，好像自己都没有按照计划来做，而且写的计划也不知道写到哪里去了。&lt;/p>
&lt;p>站在现在的时间点去审视过去的一年，这个本命年还是发生了很多对自己的未来有着比较大影响的的事情。房子+女朋友+新工作，这些事情突然的涌现出来，搞得自己有些手忙脚乱。&lt;/p>
&lt;p>梳理一下自己的收获吧：&lt;/p>
&lt;p>首先当然是结识了一帮小伙伴，我们一起打农药，一起调 bug，一起奋战双十一。&lt;/p>
&lt;p>在技术上也有了一定的提升，关键是自己的视野上有了很大的变化，不再是像当初大学的时候，不知道自己在做什么。这里对我影响比较大的一个是 phodal，看了他写的博客和书之后，对自己的触动很大，感觉他懂得很多东西，知识面很广，而且能够写出来，扩大了自己的影响力，所以我就想着自己能不能模仿他。另外一个就是田哥了，我觉得他是我认识的同龄人中，比较有自己想法的一个人，打进 acm world final 的人就是不一样，他看问题的角度比较新颖，而且归纳总结能力很强，给了我一些在编程上的指点，让我少走了很多弯路。&lt;/p>
&lt;p>也很感谢自己的几个室友，让我不再感到孤单。自从刘巍来了深圳之后，11I 更欢乐了，也更污了。我们经常在家里煮火锅吃，吃的特别爽，以至于现在我都不想去火锅店里吃，总觉得在家吃的比较爽。&lt;/p>
&lt;p>女朋友，出乎我的意料，现在想想还是感觉活在梦里，略过略过。&lt;/p>
&lt;p>至于买房，没买之前的想法盲目乐观，后来算了一下，要是在深圳买房的话，我每个月的房贷是 2 万多，关键是首付还不一定能搞得出来。还是建议在北上广深工作的人，有机会现在老家的省会一类的城市，先搞一套，以后可以置换，能上车的时候早点上车，也是相当于变相攒钱了。对于不会投资或者创业的朋友，有时候辛辛苦苦干一年之后算一下，不知不觉中，自己的钱都不知道花在了哪里，如果有房贷的话，等用的时候说不定卖掉还能赚一些钱。&lt;/p>
&lt;p>感觉自己换公司还是挺戏剧化的，当时也没想着真的就换工作吧，只是想投投简历，然后去面试一波看看自己的水平怎么样。总觉得自己在招银的舒适区待的太久了，没有什么激情了。同时自己也想出来试试，万一公司上市，摇身一变成为富翁了。当然这是白日梦了，路还是要一步一步的走的。&lt;/p>
&lt;p>总感觉自己想了很多东西，但是就是写不出来，自己讲故事的能力还是要提升一些。&lt;/p></description></item><item><title>Java 内存模型和线程</title><link>https://example.com/p/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</link><pubDate>Thu, 22 Mar 2018 19:16:37 +0000</pubDate><guid>https://example.com/p/java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</guid><description>&lt;h1 id="java-内存模型和线程">java 内存模型和线程&lt;/h1>
&lt;blockquote>
&lt;p>并发不一定依赖多线程，但是在 java 里面谈论并发，大多与线程脱不开关系。&lt;/p>
&lt;/blockquote>
&lt;p>线程是大多是面试都会问到的问题。我们都知道，线程是比进程更轻量级的调度单位，线程之间可以共享内存。之前面试的时候，也是这样回答，迷迷糊糊，没有一个清晰的概念。&lt;/p>
&lt;p>大学的学习的时候，写 C 和 C++，自己都没有用过多线程，看过一个 Windows 编程的书，里面讲多线程的时候，一大堆大写的字母，看着一点都不爽，也是惭愧。后来的实习，写 unity，unity 的 C#使用的是协程。只有在做了 java 后端之后，才知道线程到底是怎么用的。了解了&lt;strong>java 内存模型&lt;/strong>之后，仔细看了一些资料，对 java 线程有了更深入的认识，整理写成这篇文章，用来以后参考。&lt;/p>
&lt;h2 id="1-java-内存模型">1 Java 内存模型&lt;/h2>
&lt;p>Java 虚拟机规范试图定义一种 java 内存模型来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让 java 程序在各种平台下都能达到一致性内存访问的效果。&lt;/p>
&lt;p>java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量的底层细节。（这里所说的变量包括了实例字段、静态字段和数组等，但不包括局部变量与方法参数，因为这些是线程私有的，不被共享。）&lt;/p>
&lt;h3 id="11-主内存和工作内存">1.1 主内存和工作内存&lt;/h3>
&lt;p>java 规定所有的变量都存储在&lt;strong>主内存&lt;/strong>。每条线程有自己的&lt;strong>工作内存&lt;/strong>。&lt;/p>
&lt;p>线程的工作内存中的变量是主内存中该变量的副本，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程间也无法直接访问对方工作内存中的变量，线程间变量值的传递需要通过主内存来完成。&lt;/p>
&lt;h3 id="12-内存之间的交互">1.2 内存之间的交互&lt;/h3>
&lt;p>关于主内存和工作内存之间的具体交互协议，java 内存模型定义了 8 中操作来完成，虚拟机实现的时候必须保证每个操作都是原子的，不可分割的（对于 long 和 double 有例外）&lt;/p>
&lt;ul>
&lt;li>lock 锁定：作用于主内存变量，代表一个变量是一条线程独占。&lt;/li>
&lt;li>unlock 解锁：作用于主内存变量，把锁定的变量解锁。&lt;/li>
&lt;li>read 读取：作用于主内存变量，把变量值从主内存传到线程的工作内存中，供 load 使用。&lt;/li>
&lt;li>load 载入：作用工作内存变量，把上一个 read 到的值放入到工作内存中的变量中。&lt;/li>
&lt;li>use 使用：作用于工作内存变量，把工作内存中的一个变量的值传递给执行引擎。&lt;/li>
&lt;li>assign：作用于工作内存变量，把执行引擎执行过的值赋给工作内存中的变量。&lt;/li>
&lt;li>store 存储：作用于工作内存变量，把工作内存中的变量值传给主内存，供 write 使用。&lt;/li>
&lt;/ul>
&lt;p>这些操作要满足一定的规则。&lt;/p>
&lt;h3 id="13-volatile">1.3 volatile&lt;/h3>
&lt;p>volatile 可以说是 java 的最轻量级的同步机制。&lt;/p>
&lt;p>当一个变量被定义为 volatile 之后，他就具备两种特性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>保证此变量对所有线程都是可见的&lt;/p>
&lt;p>这里的可见性是指当一个线程修改了某变量的值，新值对于其他线程来讲是立即得知的。而普通变量做不到，因为普通变量需要传递到主内存中才可以做到这点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁止指令重排&lt;/p>
&lt;p>对于普通变量来说，仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执性顺序一致。&lt;/p>
&lt;p>若用 volatile 修饰变量，在编译时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>volatile 对于单个的共享变量的读/写具有原子性，但是像 num++这种复合操作，volatile 无法保证其原子性。&lt;/p>
&lt;h3 id="14-long-和-double">1.4 long 和 double&lt;/h3>
&lt;p>long 和 double 是一个 64 位的数据类型。&lt;/p>
&lt;p>虚拟机允许将没有被 volatile 修饰的 64 位变量的读写操作分为两次 32 位的操作来进行。因此当多个线程操作一个没有声明为 volatile 的 long 或者 double 变量，可能出现操作半个变量的情况。&lt;/p>
&lt;p>但是这种情况是罕见的，一般商用的虚拟机都是讲 long 和 double 的读写当成原子操作进行的，所以在写代码时不需要将 long 和 double 专门声明为 volatile。&lt;/p>
&lt;h3 id="15-原子性可见性和有序性">1.5 原子性、可见性和有序性&lt;/h3>
&lt;p>java 的内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性。&lt;/p>
&lt;p>&lt;strong>原子性&lt;/strong>&lt;/p>
&lt;p>基本数据类型的访问读写是剧本原子性的。&lt;/p>
&lt;p>如果需要一个更大范围的原子性保证，java 提供了 lock 和 unlock 操作，对应于写代码时就是 synchronized 关键字，因此在 synchronized 块之间的操作也是具备原子性的。&lt;/p>
&lt;p>&lt;strong>可见性&lt;/strong>&lt;/p>
&lt;p>可见性是指当一个线程修改到了一个共享变量的值，其他的线程能够立即得知这个修改。共享变量的读写都是通过主内存作为媒介来处理可见性的。&lt;/p>
&lt;p>volatile 的特殊规则保证了新值可以立即同步到主内存，每次使用前立即从主内存刷新。&lt;/p>
&lt;p>synchronized 同步块的可见性是由”对于一个变量 unlock 操作之前，必须先把此变量同步回内存中“来实现的。&lt;/p>
&lt;p>final 的可见性是指被 final 修饰的字段在构造器中一旦初始化完成，并且构造器没有把 this 的引用传递出去，那么在其他线程中就能看见 final 字段的值。&lt;/p>
&lt;p>&lt;strong>有序性&lt;/strong>&lt;/p>
&lt;p>如果在本线程内观察，所有的操作都是有序的；如果在一个线程内观察另一个线程，所有的操作都是无序的。
volatile 关键字本身就包含了禁止指令重排的语义，而 synchronized 则是由“一个变量在同一时刻只允许一条线程对其进行 lock 操作”这条规则来实现有序性的。&lt;/p>
&lt;h3 id="16-先行发生原则">1.6 先行发生原则&lt;/h3>
&lt;p>如果 java 内存模型中的所有有序性都是靠着 volatile 和 synchronized 来完成，那有些操作将会变得很繁琐，但是我们在写 java 并发代码的时候没有感受到这一点，都是因为 java 有一个“先行发生”原则。&lt;/p>
&lt;p>先行发生是 java 内存模型中定义的两项操作之间的偏序关系，如果说操作 A 先发生于操作 B，其实就是说在发生 B 之前，A 产生的影响都能被 B 观察到，这里的影响包括修改了内存中共享变量的值、发送了消息、调用了方法等等。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>程序次序规则&lt;/p>
&lt;p>在一个线程内，按程序代码控制流顺序执行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>管程锁定规则&lt;/p>
&lt;p>unlock 发生在后面时间同一个锁的 lock 操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>volatile 变量规则&lt;/p>
&lt;p>volatile 变量的写操作发生在后面时间的读操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程启动规则&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程终止规则&lt;/p>
&lt;/li>
&lt;li>
&lt;p>线程中断规则&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对象终结规则&lt;/p>
&lt;p>一个对象的初始化完成在 finalize 方法之前。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>传递性&lt;/p>
&lt;p>如果 A 先行发生 B，B 先行发生 C，那么 A 先行发生 C。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>由于指令重排的原因，所以一个操作的时间上的先发生，不代表这个操作就是先行发生；同样一个操作的先行发生，也不代表这个操作必定在时间上先发生。&lt;/p>
&lt;h2 id="2-java-线程">2 Java 线程&lt;/h2>
&lt;h3 id="21-线程的实现">2.1 线程的实现&lt;/h3>
&lt;p>主流的操作系统都提供了线程的实现，java 则是在不同的硬件和操作系统的平台下，对线程的操作提供了统一的处理，一个 Thread 类的实例就代表了一个线程。Thread 类的关键方法都是 native 的，所以 java 的线程实现也都是依赖于平台相关的技术手段来实现的。&lt;/p>
&lt;p>实现线程主要有 3 种方式：使用内核线程实现，使用用户线程实现和使用用户线程加轻量级进程实现。&lt;/p>
&lt;h4 id="211-使用内核线程实现">2.1.1 使用内核线程实现&lt;/h4>
&lt;p>内核线程就是直接由操作系统内核支持的线程，这种线程由内核来完成线程的切换，内核通过操纵调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。&lt;/p>
&lt;p>程序一般不会直接去调用内核线程，而是使用内核线程的一个高级接口——轻量级进程（Light Weigh Process），LWP 就是我们通常意义上所说的线程。&lt;/p>
&lt;p>由于每个轻量级进程都由一个内核线程支持，这种轻量级进程与内核线程之间 1:1 的关系成为一对一线程模型。&lt;/p>
&lt;p>&lt;strong>局限性&lt;/strong>&lt;/p>
&lt;p>虽然由于内核线程的支持，每个轻量级进程都成为了一个独立的调度单元，即使有一个阻塞，也不影响整个进程的工作，但是还是有一定的局限性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>系统调用代价较高&lt;/p>
&lt;p>由于基于内核线程实现，所以各种线程的操作都要进行系统调用。而系统调用的代价比较高，需要在用户态和内核态来回切换。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统支持数量有限&lt;/p>
&lt;p>每个轻量级进程都需要一个内核线程支持，需要消耗一定的内核资源，所以支持的线程数量是有限的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="212-使用用户线程实现">2.1.2 使用用户线程实现&lt;/h4>
&lt;p>指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。用户线程的建立、同布、销毁和调度完全在用户态中完成，不需要内核帮助。&lt;/p>
&lt;p>如果程序实现得当，则这些线程都不需要切换到内核态，操作非常快速消耗低，可以支持大规模线程数量。这种进程和用户线程之间 1:N 的关系成为一对多线程模型。&lt;/p>
&lt;p>&lt;strong>局限性&lt;/strong>&lt;/p>
&lt;p>不需要系统内核的，既是优势也是劣势。由于没有系统内核支援，所有的操作都需要程序去处理，由于操作系统只是把处理器资源分给进程，那“阻塞如何处理”、“多处理器系统如何将线程映射到其他处理器上”这类问题的解决十分困难，所以现在使用用户线程的越来越少了。&lt;/p>
&lt;h4 id="213-使用用户线程加轻量级进程混合实现">2.1.3 使用用户线程加轻量级进程混合实现&lt;/h4>
&lt;p>在这种混合模式下，既存在用户线程，也存在轻量级进程。&lt;/p>
&lt;p>用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，而且支持大规模用户线程并发、而操作系统提供支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度和处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，大大降低了整个进程被完全阻塞的风险。&lt;/p>
&lt;p>在这种模式下，用户线程和轻量级进程数量比不固定 N:M，这种模式就是多对多线程模型。&lt;/p>
&lt;h4 id="214-java-线程的实现">2.1.4 java 线程的实现&lt;/h4>
&lt;p>目前的 jdk 版本中，操作系统支持怎样的线程模型，很大程度上就决定了 jvm 的线程是怎么映射的，这点在不同的平台没办法打成一致。线程模型只对线程的并发规模和操作成本产生影响，对编码和运行都没什么差异。&lt;/p>
&lt;p>windows 和 linux 都是一对一的线程模型。&lt;/p>
&lt;h3 id="22-线程调度">2.2 线程调度&lt;/h3>
&lt;p>线程的调度是指系统为线程分配处理器使用权的过程，主要的调度方式有两种：协同式线程调度和抢占式线程调度。&lt;/p>
&lt;h4 id="221-协同式线程调度">2.2.1 协同式线程调度&lt;/h4>
&lt;p>线程的执性时间由线程本身来控制，线程把自己的工作执性完了之后，要主动通知系统切换到另外一个线程上。Lua 的协程就是这样。&lt;/p>
&lt;p>&lt;strong>好处&lt;/strong>&lt;/p>
&lt;p>协同式多线程最大的好处就是实现简单。&lt;/p>
&lt;p>由于线程要把自己的事情干完之后才进行线程切换，切换操作对线程是克制的，所以没有什么线程同步的问题。&lt;/p>
&lt;p>&lt;strong>坏处&lt;/strong>&lt;/p>
&lt;p>坏处也很明显，线程执行时间不可控。甚至如果一个线程写的问题，一直不告诉系统切换，那程序就会一直阻塞。&lt;/p>
&lt;h4 id="222-抢占式线程调度">2.2.2 抢占式线程调度&lt;/h4>
&lt;p>每个线程由系统分配执行时间，线程的切换不是又线程本身来决定。&lt;/p>
&lt;p>使用 yield 方法是可以让出执行时间，但是要获取执行时间，线程本身是没有什么办法的。&lt;/p>
&lt;p>在这种调度模式下，线程的执行时间是系统可控的，也就不会出现一个线程导致整个进程阻塞。&lt;/p>
&lt;h4 id="223-java-线程调度">2.2.3 java 线程调度&lt;/h4>
&lt;p>java 使用的是抢占式线程调度。&lt;/p>
&lt;p>虽然 java 的线程调度是系统来控制的，但是可以通过设置线程优先级的方式，让某些线程多分配一些时间，某些线程少分配一些时间。&lt;/p>
&lt;p>不过线程优先级还是不太靠谱，原因就是 java 的线程是通过映射到系统的原生线程来实现的，所以线程的调度还是取决于操作系统，操作系统的线程优先级不一定和 java 的线程优先级一一对应。而且优先级还可能被系统自行改变。所以我们不能在程序中通过优先级来准确的判断先执行哪一个线程。&lt;/p>
&lt;h3 id="23-线程的状态转换">2.3 线程的状态转换&lt;/h3>
&lt;p>看到网上有好多种说法，不过大致也都是说 5 种状态：新建（new）、可运行（runnable）、运行（running）、阻塞（blocked）和死亡（dead）。&lt;/p>
&lt;p>而深入理解 jvm 虚拟机中说 java 定义了 5 种线程状态，在任一时间点，一个线程只能有其中的一种状态：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>新建 new&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行 runnable&lt;/p>
&lt;p>包括了操作系统线程状态的 running 和 ready，也就是说处于此状态的线程可能正在执行，也可能正在等待 cpu 给分配执行时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>无限期等待 waiting&lt;/p>
&lt;p>处于这种状态的线程不会被 cpu 分配执行时间，需要被其他线程显示唤醒，能够导致线程陷入无限期等待的方法有：&lt;/p>
&lt;ul>
&lt;li>没有设置 timeout 参数的 wait 方法。&lt;/li>
&lt;li>没有设置 timeout 参数的 join 方法。&lt;/li>
&lt;li>LockSupport.park 方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>限期等待 timed waiting&lt;/p>
&lt;p>处于这种状态的线程也不会被 cpu 分配执行时间，不过不需要被其他线程显示唤醒，是经过一段时间之后，被操作系统自动唤醒。能够导致线程陷入限期等待的方法有：&lt;/p>
&lt;ul>
&lt;li>sleep 方法。&lt;/li>
&lt;li>设置 timeout 参数的 wait 方法。&lt;/li>
&lt;li>设置参数的 join 方法。&lt;/li>
&lt;li>LockSupport.parkNanos 方法。&lt;/li>
&lt;li>LockSupport.parkUntil 方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>阻塞 blocked&lt;/p>
&lt;p>线程被阻塞了。在线程等待进入同步区域的时候是这个状态。&lt;/p>
&lt;p>阻塞和等待的区别是：阻塞是排队等待获取一个排他锁，而等待是指等一段时间或者一个唤醒动作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结束 terminated&lt;/p>
&lt;p>已经终止的线程。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="3-写在最后">3 写在最后&lt;/h2>
&lt;p>并发处理的广泛应用是使得 Amdahl 定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类压榨计算机运算能力的最有力武器。有些问题使用越多的资源就能越快地解决——越多的工人参与收割庄稼，那么就能越快地完成收获。但是另一些任务根本就是串行化的——增加更多的工人根本不可能提高收割速度。&lt;/p>
&lt;p>我们使用线程的重要原因之一是为了支配多处理器的能力，我们必须保证问题被恰当地进行了并行化的分解，并且我们的程序有效地使用了这种并行的潜能。有时候良好的设计原则不得不向现实做出一些让步，我们必须让计算机正确无误的运行，首先保证并发的正确性，才能够在此基础上谈高效，所以线程的安全问题是一个很值得考虑的问题。&lt;/p>
&lt;p>虽然一直说 java 不好，但是 java 带给我的影响确实最大的，从 java 这个平台里学到了很多有用的东西。现在 golang，nodejs，python 等语言，每个都是在一方面能秒 java，可是 java 生态和 java 对软件行业的影响，是无法被超越的，java 这种语言，从出生到现在几十年了，基本上每次软件技术的革命都没有落下，每次都觉得要死的时候，忽然间柳暗花明，枯木逢春。咳咳，扯远了。&lt;/p></description></item><item><title>aws.md</title><link>https://example.com/p/aws.md/</link><pubDate>Thu, 22 Mar 2018 14:04:09 +0000</pubDate><guid>https://example.com/p/aws.md/</guid><description>&lt;p>一些基础概念&lt;/p>
&lt;h2 id="ec2">EC2&lt;/h2>
&lt;p>云服务器，可以理解成虚拟机，新建一个实例，就是新建一个虚拟机并安装操作系统（Linux 或者 windows）。&lt;/p>
&lt;h2 id="vpc">VPC&lt;/h2>
&lt;p>Virtual Private Cloud。可以理解成数据中心，机房。对于灾备或者双活需要的，可以创建两个 VPC。&lt;/p>
&lt;h2 id="子网">子网&lt;/h2>
&lt;p>一个 VPC 里可以有多个子网。比如某机构的一个 VPC 可以办公网和生产网段，或者内网和外网。一般外网可以被访问，内网的话可以是数据库的服务器之类的。&lt;/p>
&lt;h2 id="iam-角色">IAM 角色&lt;/h2>
&lt;p>类似于用户，可以被分配权限。&lt;/p>
&lt;h2 id="安全组">安全组&lt;/h2>
&lt;p>控制连接到此 EC2 实例的流量，或者是控制对外暴露的端口。&lt;/p>
&lt;h2 id="cidr">CIDR&lt;/h2>
&lt;p>CIDR 主要是一个按位的、基于前缀的，用于解释 IP 地址的标准。当用二进制表示这些地址时，它们有着在开头部分的一系列相同的位。&lt;/p>
&lt;p>IPv4 的 CIDR 地址块的表示方法和 IPv4 地址的表示方法是相似的：由四部分组成的点分十进制地址，后跟一个斜线，最后是范围在 0 到 32 之间的一个数字：A.B.C.D/N。点分十进制的部分和 IPv4 地址一样是一个被分成四个八位位组的 32 位二进制数。斜线后面的数字就是前缀长度，也就是从左到右，被地址块里的地址所共享的位的数目。&lt;/p>
&lt;p>十进制部分有时会被省略，因此，/20 就表示一个前缀长度是 20 的 CIDR 地址块。如果一个 IP 地址的前 N 位与一个 CIDR 地址块的前缀是相同的话，那么就说这个地址属于这个 CIDR 地址块，也可以说是与 CIDR 地址块的前缀匹配。所以，要理解 CIDR，就要把地址写成二进制的形式。&lt;/p></description></item></channel></rss>