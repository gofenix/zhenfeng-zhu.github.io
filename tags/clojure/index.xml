<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>clojure on Awesome Fenix</title><link>https://zhenfeng-zhu.github.io/tags/clojure/</link><description>Recent content in clojure on Awesome Fenix</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Fenix</copyright><lastBuildDate>Sat, 15 Jan 2022 21:45:17 +0800</lastBuildDate><atom:link href="https://zhenfeng-zhu.github.io/tags/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>Farewell 永别了</title><link>https://zhenfeng-zhu.github.io/post/farewell/</link><pubDate>Sat, 15 Jan 2022 21:45:17 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/farewell/</guid><description>永别了 正如 Semisonic 在 90 年代的热门歌曲 &amp;ldquo;Closing Time &amp;ldquo;所告诉我们的那样，每一个新的开始都来自于其他一些开始的结束。恭喜你，高贵的读者，完成了这次 Clojure</description></item><item><title>AppendixB 花哨的 Boot</title><link>https://zhenfeng-zhu.github.io/post/appendixb/</link><pubDate>Sat, 15 Jan 2022 21:41:09 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/appendixb/</guid><description>Boot，花哨的 Clojure 构建框架 Boot 是 Leiningen 的替代品，提供同样的功能。Leiningen 更受欢迎（截至 2015 年夏天），但我个人喜欢用 Boot 工作，因为它更容易扩展</description></item><item><title>AppendixA 用 Leiningen 构建和开发</title><link>https://zhenfeng-zhu.github.io/post/appendixa/</link><pubDate>Sat, 15 Jan 2022 21:39:36 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/appendixa/</guid><description>用 Leiningen 构建和开发 用任何语言编写软件都需要生成工件，即可执行文件或库包，用于部署或共享。它还涉及到管理依赖工件，也称为依赖，以确保它们被加载到你</description></item><item><title>Chapter13 抽象</title><link>https://zhenfeng-zhu.github.io/post/chapter13/</link><pubDate>Sat, 15 Jan 2022 21:29:04 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter13/</guid><description>用 Multimethods、协议和记录创建和扩展抽象概念 花一分钟思考一下，作为大自然的顶级产品之一：人类是多么伟大。作为一个人类，你可以在社</description></item><item><title>Chapter12 与 Java 的互操作</title><link>https://zhenfeng-zhu.github.io/post/chapter12/</link><pubDate>Sat, 15 Jan 2022 20:55:18 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter12/</guid><description>与 JVM 一起工作 在每个 Clojurist 的生命中都会有这么一天，她必须从纯函数和不可变数据结构的庇护所冒险进入野蛮的 Java 大陆。这段艰难的旅程是必要的，因为 Clojure 是在 Java</description></item><item><title>Chapter11 core.async</title><link>https://zhenfeng-zhu.github.io/post/chapter11/</link><pubDate>Sat, 15 Jan 2022 12:56:01 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter11/</guid><description>用 core.async 掌握并发进程 有一天，当你走在大街上时，你会惊讶、好奇，并有点厌恶地发现一台热狗自动贩卖机。你的头皮被有罪的好奇心刺痛，你会忍不住掏出三块</description></item><item><title>Chapter10 形而上学</title><link>https://zhenfeng-zhu.github.io/post/chapter10/</link><pubDate>Sat, 15 Jan 2022 12:42:26 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter10/</guid><description>Clojure Metaphysics: 原子、Refs、Vars 和拥抱僵尸 三个并发性的小妖精都是从同一个邪恶的坑里生出来的：对可变状态的共享访问。你可以在第九章的引用单元讨论中</description></item><item><title>Chapter9 并发的艺术</title><link>https://zhenfeng-zhu.github.io/post/chapter9/</link><pubDate>Sat, 15 Jan 2022 12:30:14 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter9/</guid><description>并发和并行编程的神圣艺术 如果我是一个庄园的主人，而你是我的继承人，我会在你的第 13 个命名日让你坐下来，告诉你：&amp;ldquo;计算的世界正在改变</description></item><item><title>Chapter8 宏</title><link>https://zhenfeng-zhu.github.io/post/chapter8/</link><pubDate>Sat, 15 Jan 2022 12:22:42 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter8/</guid><description>编写宏 当我 18 岁时，我在新墨西哥州圣菲的一家酒店找到了一份夜班审计师的工作，每周工作四个晚上，从晚上 11 点到早上 7 点。经过几个月的这种不眠不休的</description></item><item><title>Chapter7 炼金术</title><link>https://zhenfeng-zhu.github.io/post/chapter7/</link><pubDate>Sat, 15 Jan 2022 12:14:36 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter7/</guid><description>Clojure 炼金术：读取器、求值器和宏 哲学家之石，与生命之药和伟哥一样，是炼金术传说中最著名的标本之一，因其能将铅转化为金而受到追捧。然而，Cloju</description></item><item><title>Chapter6 组织你的项目</title><link>https://zhenfeng-zhu.github.io/post/chapter6/</link><pubDate>Fri, 14 Jan 2022 12:40:41 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter6/</guid><description>组织你的项目：一个图书管理员的故事 在我们每个人心中都住着一个叫 Melvil 的图书管理员，一个以组织艺术为乐的奇异生物。日日夜夜，Melvil 都渴望为你</description></item><item><title>Chapter5 函数式编程</title><link>https://zhenfeng-zhu.github.io/post/chapter5/</link><pubDate>Fri, 14 Jan 2022 10:00:07 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter5/</guid><description>函数式编程 到目前为止，你已经专注于熟悉 Clojure 提供的工具：不可变的数据结构、函数、抽象，等等。在这一章中，你将学习如何思考你的编程任务，以最好的方</description></item><item><title>Chapter4 深入研究核心函数</title><link>https://zhenfeng-zhu.github.io/post/chapter4/</link><pubDate>Thu, 13 Jan 2022 17:39:28 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter4/</guid><description>核心函数的深入研究 如果你像我一样是焦虑的、以青少年为中心的准肥皂剧*《吸血鬼日记》*的超级粉丝，你一定记得主角埃琳娜开始质疑她苍白的、神秘的</description></item><item><title>Chapter3 速成班</title><link>https://zhenfeng-zhu.github.io/post/chapter3/</link><pubDate>Thu, 13 Jan 2022 11:12:19 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter3/</guid><description>做事情：Clojure 速成班 是时候学习如何用 Clojure 真正地做事了! 该死的! 尽管你无疑已经听说过 Clojure 令人敬畏的并发支持和其他了不起的功能，但 Clojure 最突出的</description></item><item><title>Chapter2 如何使用 Emacs</title><link>https://zhenfeng-zhu.github.io/post/chapter2/</link><pubDate>Thu, 13 Jan 2022 10:43:56 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter2/</guid><description>如何使用 Emacs，一个优秀的 Clojure 编辑器 在你掌握 Clojure 的过程中，你的编辑器将是你最亲密的盟友。我强烈建议使用 Emacs，但你当然也可以使用任何你想</description></item><item><title>Chapter1 构建、运行和 REPL</title><link>https://zhenfeng-zhu.github.io/post/chapter1/</link><pubDate>Thu, 13 Jan 2022 10:26:48 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/chapter1/</guid><description>构建、运行和 REPL 在本章中，你将预先投入少量时间来熟悉建立和运行 Clojure 程序的快速、傻瓜式方法。让一个真正的程序运行起来感觉很好。达到了这个里程碑，你</description></item><item><title>Introduction 简介</title><link>https://zhenfeng-zhu.github.io/post/introduction/</link><pubDate>Thu, 13 Jan 2022 10:11:25 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/introduction/</guid><description>简介 在你的内心深处，你一直都知道你注定要学习 Clojure。 每当你高举着键盘，为一个难以理解的类层次结构而痛苦地哭泣时；每当你晚上躺在床上，</description></item><item><title>Acknowledgments 致谢</title><link>https://zhenfeng-zhu.github.io/post/acknowledgments/</link><pubDate>Thu, 13 Jan 2022 10:06:10 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/acknowledgments/</guid><description>致谢 有很多人帮助我诞生了这个奇怪的婴儿，我对他们的支持感到感激。 首先，感谢我的妻子杰西，她为这本书绘制了插图，使它具有我所希望的视觉特性。也</description></item><item><title>Foreword 前言</title><link>https://zhenfeng-zhu.github.io/post/foreword/</link><pubDate>Thu, 13 Jan 2022 10:04:46 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/foreword/</guid><description>前言 当你阅读这本搞笑的书时，你会在某个时刻经历一个非常严肃的时刻。在了解了一些 Clojure 之后，编程变得更加有趣。这也是你在这本书上的投资，包括金钱和</description></item></channel></rss>