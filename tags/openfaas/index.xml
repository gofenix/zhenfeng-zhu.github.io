<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>openfaas on Awesome Fenix</title><link>https://zhenfeng-zhu.github.io/tags/openfaas/</link><description>Recent content in openfaas on Awesome Fenix</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Fenix</copyright><lastBuildDate>Tue, 04 Jan 2022 13:44:15 +0800</lastBuildDate><atom:link href="https://zhenfeng-zhu.github.io/tags/openfaas/index.xml" rel="self" type="application/rss+xml"/><item><title>Openfaas Workshop Lab11</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab11/</link><pubDate>Tue, 04 Jan 2022 13:44:15 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab11/</guid><description>Lab 11 - 高级函数 - 使用 HMAC 的信任 前言 用于微服务的传统认证策略与函数的工作原理完全相同。在这个实验室中，我们将讨论使用共享秘密和基于哈希的消息验证</description></item><item><title>Openfaas Workshop Lab10</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab10/</link><pubDate>Tue, 04 Jan 2022 13:44:12 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab10/</guid><description>Lab 10 - 高级函数 - 秘密 在开始本实验室之前，为你的文件创建一个新的文件夹。由于本实验室是建立在先前的实验室基础上的，因此请复制 lab5。 1 2 $ cp</description></item><item><title>Openfaas Workshop Lab9</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab9/</link><pubDate>Tue, 04 Jan 2022 13:44:09 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab9/</guid><description>Lab 9 - 高级函数 - 自动缩放 自动缩放函数的应用 正如文档中描述的那样，OpenFaaS 带有自动扩展函数。在这个实验室中，我们将看看自动扩展是如何运</description></item><item><title>Openfaas Workshop Lab8</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab8/</link><pubDate>Tue, 04 Jan 2022 13:44:05 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab8/</guid><description>Lab 8 - 高级函数 - 超时 在开始这个实验之前，为你的文件创建一个新的文件夹。 1 2 $ mkdir -p lab8 \ &amp;amp;&amp;amp; cd lab8 用read_timeout扩展超时时间 timeou</description></item><item><title>Openfaas Workshop Lab7</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab7/</link><pubDate>Tue, 04 Jan 2022 13:44:02 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab7/</guid><description>实验 7&amp;ndash;异步函数 在开始这个实验之前，为你的文件创建一个新的文件夹。 1 2 $ mkdir -p lab7 \ &amp;amp;&amp;amp; cd lab7 同步与异步地调用一个函数 当你同步调用一个函</description></item><item><title>Openfaas Workshop Lab6</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab6/</link><pubDate>Tue, 04 Jan 2022 13:43:59 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab6/</guid><description>实验 6&amp;ndash;你的函数的 HTML 在开始这个实验之前，为你的文件创建一个新的文件夹。 1 2 $ mkdir -p lab6\ &amp;amp;&amp;amp; cd lab6 从一个函数中生成并返回基本的 HTML 函数可以返</description></item><item><title>Openfaas Workshop Lab5</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab5/</link><pubDate>Tue, 04 Jan 2022 13:43:56 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab5/</guid><description>Lab 5 - 创建一个 GitHub 机器人 在开始这个实验之前，为你的文件创建一个新的文件夹。 1 2 $ mkdir -p lab5\ &amp;amp;&amp;amp; cd lab5 我们将使用 OpenFaaS 的函数来创建一个名为 issue-bot</description></item><item><title>Openfaas Workshop Lab2</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab2/</link><pubDate>Tue, 30 Mar 2021 09:57:01 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab2/</guid><description>实验室 2&amp;ndash;测试东西 在开始这个实验之前，创建一个新的文件夹。 1 2 $ mkdir -p lab2 \ &amp;amp;&amp;amp; cd lab2 使用 UI 门户 现在你可以测试一下 OpenFaaS 的用户界面了。 如果你</description></item><item><title>Openfaas Workshop Lab1b</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab1b/</link><pubDate>Tue, 30 Mar 2021 09:55:20 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab1b/</guid><description>Lab 1 - 用 Kubernetes 设置 OpenFaaS 安装最新的 kubectl 使用下面的说明或官方文档为你的操作系统安装kubectl。 Linux 1 2 3 4 export VER=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt) curl -LO https://storage.googleapis.com/kubernetes-release/release/$VER/bin/linux/amd64/kubectl chmod +x kubectl mv kubectl /usr/local/bin/ MacOS 1 2 3 4 export VER=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</description></item><item><title>Openfaas Workshop Lab1</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab1/</link><pubDate>Tue, 30 Mar 2021 09:54:25 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab1/</guid><description>Lab 1 - 为 OpenFaaS 做准备 OpenFaaS 需要一个Kubernetes集群来运行。你可以使用一个单节点集群或多节点集群，不管是在你的笔记本电脑上还是在云端。 任何 OpenFaaS 函</description></item><item><title>Openfaas Workshop</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop/</link><pubDate>Tue, 30 Mar 2021 09:53:12 +0800</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop/</guid><description>openfaas-workshop 这是一个自定进度的研讨会，学习如何使用 OpenFaaS 构建、部署和运行无服务器函数。 在这个工作坊中，你将首先把 OpenFaaS 部署到你的笔记本电脑或使用 Docker for Mac 或 Windows 的远</description></item><item><title>overview-of-openfaas</title><link>https://zhenfeng-zhu.github.io/post/overview-of-openfaas/</link><pubDate>Thu, 26 Jul 2018 17:41:33 +0000</pubDate><guid>https://zhenfeng-zhu.github.io/post/overview-of-openfaas/</guid><description>OpenFaaS 概览 无服务器函数变得简单。 函数监视器 你可以通过添加函数监视器 (一个小型的 Golang HTTP 服务)把任何一个 Docker 镜像变成无服务器函数。 函数监视器是允许 HTTP 请求</description></item><item><title>OpenFaaS on Rancher 2.0</title><link>https://zhenfeng-zhu.github.io/post/openfaas-on-rancher/</link><pubDate>Thu, 26 Jul 2018 09:50:46 +0000</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-on-rancher/</guid><description>这是一篇关于如何在 Rancher 2.0 上创建 OpenFaaS 栈的文章。我假设你已经准备好了 Rancher 2.0 集群，如果没有请按照官方文档创建一个。 下面的视频展示了如何创建 OpenFaaS 栈，并在实际</description></item><item><title>openfaas-workshop-lab4</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab4/</link><pubDate>Mon, 02 Jul 2018 09:32:59 +0000</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab4/</guid><description>实验 4&amp;ndash;更深入地使用函数 在开始本实验之前，为你的文件创建一个新的文件夹。由于本实验是建立在早期实验的基础上的，所以请复制 lab3</description></item><item><title>openfaas-workshop-lab3</title><link>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab3/</link><pubDate>Thu, 28 Jun 2018 17:29:56 +0000</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas-workshop-lab3/</guid><description>实验 3&amp;ndash;函数介绍 在开始这个实验之前，为你的文件创建一个新的文件夹。 1 2 $ mkdir -p lab3\`s &amp;amp;&amp;amp; cd lab3 创建一个新的函数 有两种方法来创建一个新的函数</description></item><item><title>openfaas</title><link>https://zhenfeng-zhu.github.io/post/openfaas/</link><pubDate>Sun, 24 Jun 2018 15:43:46 +0000</pubDate><guid>https://zhenfeng-zhu.github.io/post/openfaas/</guid><description>对于 mac 环境来讲，首先安装新版 docker: 1 brew cask install docker 然后启动 docker。 命令行登陆 docker hub 1 docker login 启动 docker swarm 1 docker swarm init 安装 faas-cli 1 brew install faas-cli clone 下来代码： 1 git clone https://github.com/openfaas/faas 然后执行</description></item></channel></rss>